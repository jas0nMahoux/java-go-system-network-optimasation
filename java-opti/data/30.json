[
    {
        "id": "3cba1234-4473-42ca-81cb-131e4e4bca73",
        "title": "Racine",
        "description": ""
    },
    {
        "id": "8b9b4ca8-2a9a-4af3-96cf-7aabd0fc88ea",
        "title": "Concept supprim√©",
        "description": ""
    },
    {
        "id": "a1786998-f5b9-49ba-95c3-fa9c14e40413",
        "title": "AWS Lambda",
        "description": "---\nid: 574373b1-97bf-4179-87b9-88dc8fc613cf\n---\n# Rapidement c'est quoi‚ùì\n\nAWS Lambda est un service [[Function as a Service (FaaS)]] d'[[AWS]].  Il permet d'ex√©cuter du code sans g√©rer d'infrastructure serveur.  Vous fournissez le code, et [[AWS]] s'occupe du reste.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAWS Lambda est un service de calcul sans serveur qui permet aux d√©veloppeurs d'ex√©cuter du code en r√©ponse √† des √©v√©nements sans provisionner ou g√©rer des serveurs.  Vous √©crivez votre code (fonctions) dans plusieurs langages support√©s ([[Node.js]], [[Python]], [[Java]], [[C#]], [[Go]], [[Ruby]], etc.), le d√©ployez sur [[AWS]], et Lambda s'occupe de l'ex√©cution, du scaling automatique et de la facturation uniquement en fonction de l'utilisation effective.  Chaque fonction est d√©clench√©e par un √©v√©nement, tel qu'une modification dans un [[Bucket S3]] , une requ√™te [[API Gateway]], une entr√©e dans une file [[SQS]], ou un √©v√®nement planifi√© avec [[CloudWatch Events]].\n\nLambda g√®re automatiquement le scaling : si plusieurs √©v√©nements se produisent simultan√©ment, Lambda lance plusieurs instances de votre fonction pour g√©rer la charge.  L'inverse est √©galement vrai : si aucune requ√™te n'est effectu√©e, aucune ressource n'est consomm√©e et vous ne payez rien.  La gestion des ressources (m√©moire, temps d'ex√©cution, etc.) est d√©finie lors de la configuration de la fonction.  Lambda propose √©galement des fonctionnalit√©s avanc√©es comme les versions, les alias, les couches (pour partager du code commun entre plusieurs fonctions) et l'int√©gration avec d'autres services [[AWS]].  Le monitoring et le logging sont int√©gr√©s via [[CloudWatch]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Sans serveur (Serverless):** Pas besoin de g√©rer d'infrastructure, ce qui r√©duit consid√©rablement le co√ªt et la complexit√©.\n* **Scaling automatique:** Lambda s'adapte automatiquement √† la demande, garantissant la disponibilit√© et la performance.\n* **Facturation √† l'utilisation:** Vous ne payez que pour le temps d'ex√©cution effectif de votre code.\n* **Int√©gration avec l'√©cosyst√®me [[AWS]]:**  S'int√®gre facilement avec de nombreux autres services [[AWS]], permettant de cr√©er des applications complexes et robustes.\n* **Langages multiples support√©s:** Large choix de langages de programmation pour d√©velopper vos fonctions.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Dur√©e d'ex√©cution limit√©e:**  Les fonctions Lambda ont une dur√©e d'ex√©cution maximale (variable selon la configuration).  Les t√¢ches longues doivent √™tre trait√©es diff√©remment (par exemple, en utilisant des files d'attente et des fonctions plus courtes).\n* **D√©bogage plus complexe:** Le d√©bogage peut √™tre plus difficile que dans une application traditionnelle, n√©cessitant des outils et des techniques sp√©cifiques.\n* **Cold starts:** La premi√®re ex√©cution d'une fonction peut prendre un peu plus de temps (cold start), ce qui peut affecter les performances pour les requ√™tes occasionnelles.\n* **Verrouillage fournisseur:**  Le code est ex√©cut√© sur l'infrastructure AWS, ce qui cr√©e une d√©pendance envers ce fournisseur.\n* **Gestion des √©tats:** La persistance des donn√©es entre les ex√©cutions de fonctions n√©cessite l'utilisation de services externes comme [[DynamoDB]].\n\n---\n# A quoi c'est li√© ? ü™¢\n\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "f9aee61a-9901-45a2-b522-c3dd3d9f0f52",
        "title": "Certification Java 17 - Acc√®s aux Bases de Donn√©es avec JDBC",
        "description": "---\nid: 8b4f3380-cc59-43fe-baca-4e83b06bb405\n---\n## **11.1. Connexion √† une base de donn√©es (`DriverManager`, `DataSource`)**\n\nJDBC (**Java Database Connectivity**) permet √† une application Java de se connecter √† une base de donn√©es.\n\n### **1. Chargement du driver JDBC**\n\nüìå **Depuis Java 6, le chargement est automatique si le driver est dans le classpath.**\n\n```java\nClass.forName(\"org.postgresql.Driver\"); // PostgreSQL\nClass.forName(\"com.mysql.cj.jdbc.Driver\"); // MySQL\n```\n\nüìå **Plus besoin de `Class.forName()` avec JDBC 4.0+.**\n\n---\n\n### **2. Connexion avec `DriverManager`**\n\n```java\nimport java.sql.*;\n\npublic class ConnexionJDBC {\n    public static void main(String[] args) {\n        String url = \"jdbc:mysql://localhost:3306/ma_base\";\n        String user = \"root\";\n        String password = \"password\";\n\n        try (Connection conn = DriverManager.getConnection(url, user, password)) {\n            System.out.println(\"Connexion r√©ussie !\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\nüìå **Utilisation d‚Äôun `try-with-resources` pour fermer automatiquement la connexion.**\n\n---\n\n### **3. Connexion avec `DataSource` (Meilleure Pratique)**\n\nüìå **`DataSource` permet une gestion optimis√©e des connexions.**\n\n```java\nimport javax.sql.DataSource;\nimport com.mysql.cj.jdbc.MysqlDataSource;\n\npublic class ConnexionDataSource {\n    public static void main(String[] args) throws Exception {\n        MysqlDataSource ds = new MysqlDataSource();\n        ds.setURL(\"jdbc:mysql://localhost:3306/ma_base\");\n        ds.setUser(\"root\");\n        ds.setPassword(\"password\");\n\n        try (Connection conn = ds.getConnection()) {\n            System.out.println(\"Connexion r√©ussie !\");\n        }\n    }\n}\n```\n\nüìå **Utilis√© dans les serveurs d‚Äôapplication avec un pool de connexions.**\n\n---\n\n## **11.2. Ex√©cution de requ√™tes (`Statement`, `PreparedStatement`, `CallableStatement`)**\n\n### **1. Requ√™te avec `Statement` (‚ö† Vuln√©rable aux injections SQL)**\n\n```java\ntry (Connection conn = DriverManager.getConnection(url, user, password);\n     Statement stmt = conn.createStatement()) {\n\n    ResultSet rs = stmt.executeQuery(\"SELECT * FROM utilisateurs\");\n\n    while (rs.next()) {\n        System.out.println(rs.getString(\"nom\"));\n    }\n}\n```\n\nüìå **‚ö† √âviter `Statement` pour les requ√™tes contenant des entr√©es utilisateur (risque d‚Äôinjection SQL).**\n\n---\n\n### **2. Requ√™te s√©curis√©e avec `PreparedStatement`**\n\n```java\nString sql = \"SELECT * FROM utilisateurs WHERE email = ?\";\ntry (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n    pstmt.setString(1, \"user@mail.com\");\n    ResultSet rs = pstmt.executeQuery();\n\n    while (rs.next()) {\n        System.out.println(rs.getString(\"nom\"));\n    }\n}\n```\n\nüìå **S√©curise la requ√™te en emp√™chant les injections SQL.**\n\n---\n\n### **3. Insertion avec `PreparedStatement`**\n\n```java\nString sql = \"INSERT INTO utilisateurs (nom, email) VALUES (?, ?)\";\ntry (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n    pstmt.setString(1, \"Alice\");\n    pstmt.setString(2, \"alice@mail.com\");\n    pstmt.executeUpdate(); // Ex√©cute l‚Äôinsertion\n}\n```\n\nüìå **`executeUpdate()` pour `INSERT`, `UPDATE`, `DELETE`.**\n\n---\n\n### **4. Appel d‚Äôune proc√©dure stock√©e avec `CallableStatement`**\n\n```java\nString sql = \"{call ajouter_utilisateur(?, ?)}\";\ntry (CallableStatement cstmt = conn.prepareCall(sql)) {\n    cstmt.setString(1, \"Alice\");\n    cstmt.setString(2, \"alice@mail.com\");\n    cstmt.execute();\n}\n```\n\nüìå **Utilis√© pour ex√©cuter des proc√©dures stock√©es SQL.**\n\n---\n\n## **11.3. Gestion des transactions (`commit`, `rollback`)**\n\nPar d√©faut, **chaque requ√™te est valid√©e (`commit`) automatiquement**.  \nüìå **Pour g√©rer manuellement une transaction, on d√©sactive l‚Äôauto-commit.**\n\n---\n\n### **1. D√©but d‚Äôune transaction (`setAutoCommit(false)`)**\n\n```java\ntry (Connection conn = DriverManager.getConnection(url, user, password)) {\n    conn.setAutoCommit(false); // D√©sactive l‚Äôauto-commit\n\n    try (PreparedStatement pstmt1 = conn.prepareStatement(\"INSERT INTO comptes VALUES (?, ?)\");\n         PreparedStatement pstmt2 = conn.prepareStatement(\"INSERT INTO transactions VALUES (?, ?)\")) {\n\n        pstmt1.setInt(1, 1);\n        pstmt1.setDouble(2, 1000.00);\n        pstmt1.executeUpdate();\n\n        pstmt2.setInt(1, 1);\n        pstmt2.setDouble(2, -500.00);\n        pstmt2.executeUpdate();\n\n        conn.commit(); // Valide la transaction\n    } catch (SQLException e) {\n        conn.rollback(); // Annule toutes les op√©rations\n        e.printStackTrace();\n    }\n}\n```\n\nüìå **Si une erreur survient, `rollback()` annule les modifications.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Connexion JDBC : `DriverManager` (basique), `DataSource` (optimis√©, recommand√©).**  \n‚úÖ **Ex√©cution de requ√™tes :**\n\n- `Statement` (‚ö† √† √©viter pour les entr√©es utilisateur).\n- `PreparedStatement` (s√©curis√© contre les injections SQL).\n- `CallableStatement` (appelle une proc√©dure stock√©e).  \n    ‚úÖ **Gestion des transactions : `commit`, `rollback`, `setAutoCommit(false)`.**\n"
    },
    {
        "id": "8e5aa410-7105-45e7-b5bc-f1300195e660",
        "title": "Analog.js",
        "description": "---\nid: 4775911f-b142-4a2e-8954-bb74d1475de6\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nAnalogJs est un [[m√©ta-framework]] pour [[Angular]] qui ajoute des fonctionnalit√©s comme le routage automatique, le rendu c√¥t√© serveur, et la g√©n√©ration de sites statiques. Il simplifie le d√©veloppement en int√©grant des outils modernes comme [[Vite]] et [[Vitest]].\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAnalogJs √©tend [[Angular]] avec des fonctionnalit√©s pratiques :\n\n- **Routage bas√© sur le syst√®me de fichiers** : Les routes sont automatiquement g√©n√©r√©es √† partir de la structure des fichiers.\n- **Rendu c√¥t√© serveur ([[Server Side Rendering (SSR)]])** et **g√©n√©ration de sites statiques** ([[Server Side Generation (SSG)]]) : Permet d‚Äôam√©liorer le SEO et la vitesse de chargement.\n- **Support Markdown** : Permet d'utiliser des fichiers Markdown comme contenu.\n- **Routes API int√©gr√©es** : Cr√©e facilement des routes API dans la m√™me application.\n- **Structure simplifi√©e des composants** : Un seul fichier par composant, contrairement √† l'approche Angular traditionnelle avec plusieurs fichiers.\n\nAnalogJs utilise Vite pour la compilation rapide et Vitest pour les tests, offrant une exp√©rience moderne et rapide.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplification du routage** : Gr√¢ce au routage bas√© sur le syst√®me de fichiers.\n- **Rendu c√¥t√© serveur et sites statiques** : Am√©liore la performance et le SEO.\n- **Support Markdown** : Id√©al pour cr√©er du contenu rapidement.\n- **Structure de composants simplifi√©e** : Un fichier par composant pour plus de clart√©.\n- **Int√©gration de [[Vite]] et [[Vitest]]** : D√©veloppement rapide et tests efficaces.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance √† [[Angular]]** : N√©cessite [[Angular]], ce qui peut √™tre contraignant.\n- **Moins mature** : Moins de documentation et de communaut√© par rapport √† [[Nuxt.js]] ou [[Next.js]].\n- **Courbe d'apprentissage** : Complexe pour les d√©butants Angular ou SSR.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[JavaScript]] [[Typescript]]"
    },
    {
        "id": "dd0c0816-84ee-4e93-991a-8f8964cb56ec",
        "title": "Anglais - mot et expression",
        "description": "---\nid: 7d823355-dc92-4f2a-ae2c-e655a70688b1\n---\ngibberish: gibberish\nYou are talking gibberish: Tu dis n'importe quoi\ngrasshopper: sauterelle\nkneehigh to a grasshopper: haut comme trois pomme"
    },
    {
        "id": "56e1c640-ad12-4cc9-8546-43e7a58f1e9a",
        "title": "Annotation (java)",
        "description": "---\nid: 3822ed8e-7f6c-4ff8-a60e-b547afc6523d\n---\n# Rapidement c'est quoi‚ùì\n\nLes annotations [[Java]] sont des m√©tadonn√©es qui fournissent des informations suppl√©mentaires sur le code sans affecter son ex√©cution. Elles sont utilis√©es pour annoter des classes, m√©thodes, champs, etc.,  guidant le compilateur, les outils d'ex√©cution ou d'autres processus, comme [[Aspect Oriented Programming.md]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nEn [[Java]], les annotations sont des balises plac√©es avant les √©l√©ments de code (classes, m√©thodes, champs, etc.). Elles sont d√©finies √† l'aide de l'annotation `@interface`.  Elles ne modifient pas le comportement du code en lui-m√™me, mais fournissent des informations contextuelles pour diff√©rents outils et processus.\n\n**Structure d'une annotation:**\n\nUne annotation est d√©finie avec le mot cl√© `@interface` suivi du nom de l'annotation.  Elle peut contenir des √©l√©ments (attributs) avec des valeurs par d√©faut ou non.  Par exemple :\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface MyAnnotation {\n    String value() default \"default value\";\n    int number() default 0;\n}\n```\n\nDans cet exemple :\n\n* `@Retention(RetentionPolicy.RUNTIME)` sp√©cifie que l'annotation sera disponible au runtime (l'ex√©cution du programme).  Il existe d'autres valeurs possibles: `SOURCE` (disponible uniquement √† la compilation) et `CLASS` (disponible √† la compilation et au chargement de la classe). Il faut savoir qu'il y a tr√®s peu d'int√©r√™t d'utiliser autres chose de RUNTIME car c'est la seule valeur qui conserve l'annotation au runtime, et qui permet donc de faire des traitements.\n* `@Target(ElementType.METHOD)` indique que cette annotation ne peut √™tre appliqu√©e qu'aux m√©thodes.  D'autres valeurs possibles pour `ElementType` incluent `TYPE`, `FIELD`, `CONSTRUCTOR`, `PARAMETER`, etc.\n* `String value() default \"default value\";` d√©finit un attribut `value` de type String avec une valeur par d√©faut.\n* `int number() default 0;` d√©finit un attribut `number` de type int avec une valeur par d√©faut.\n\nL'annotation est ensuite utilis√©e dans le code ainsi :\n\n```java\n@MyAnnotation(value = \"hello\", number = 5)\npublic void myMethod() {\n  // ...\n}\n```\n\nLe compilateur, les outils (frameworks, IDEs) ou le code au runtime peuvent alors interpr√©ter ces informations pour effectuer diff√©rentes actions. Par exemple, un framework pourrait utiliser une annotation pour injecter des d√©pendances ou un outil de test pour identifier les m√©thodes √† tester.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **M√©taprogrammation:** Permet d'ajouter des informations au code sans le modifier directement, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **R√©duction de la redondance:**  Evite la duplication de code en centralisant les informations dans les annotations.\n* **Extensibilit√©:** Facilite l'ajout de fonctionnalit√©s sans modifier le code source existant.\n* **Framework-agnostique:**  Les annotations peuvent √™tre utilis√©es par diff√©rents frameworks et outils.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:** Une sur-utilisation des annotations peut rendre le code difficile √† comprendre.\n* **D√©pendances:**  Le code qui utilise les annotations peut d√©pendre de la pr√©sence de certains outils ou frameworks.\n* **Performances:**  Le traitement des annotations au runtime peut avoir un impact sur les performances, bien que g√©n√©ralement n√©gligeable.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "744b0bb3-e2f9-44bd-badb-57383ee57ed2",
        "title": "Ansible Vault",
        "description": "---\nid: ae62d225-067f-4a01-9d22-52fdabf93106\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nAnsible Vault est un outil d'[[Ansible]] qui permet de chiffrer et prot√©ger des donn√©es sensibles dans des fichiers, comme des mots de passe ou des cl√©s API, afin de les utiliser dans des playbooks Ansible sans exposer ces informations en texte clair\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAnsible Vault chiffre des fichiers ou des cha√Ænes de caract√®res, les rendant illisibles sans un mot de passe sp√©cifique. Les principales commandes sont :\n\n- **`ansible-vault create`** : Cr√©e un fichier chiffr√© √† partir de z√©ro.\n- **`ansible-vault encrypt`** : Chiffre un fichier existant.\n- **`ansible-vault decrypt`** : D√©chiffre un fichier pour le rendre lisible.\n- **`ansible-vault edit`** : Permet de modifier un fichier chiffr√© sans le d√©chiffrer manuellement.\n- **`ansible-vault encrypt_string`** : Chiffre une cha√Æne de caract√®res (ex. un mot de passe) pour l'inclure dans un fichier ou un playbook.\n\nIl est aussi possible de g√©rer plusieurs fichiers Vault avec l'option **`-vault-id`**, permettant de sp√©cifier diff√©rents mots de passe pour diff√©rents environnements. L'option **`-ask-vault-pass`** permet de saisir le mot de passe manuellement √† l'ex√©cution.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **S√©curisation des donn√©es sensibles** : Prot√®ge efficacement les informations sensibles en les chiffrant.\n- **Facilit√© d'int√©gration avec [[Ansible]]** : Fonctionne de mani√®re fluide avec les playbooks Ansible.\n- **Prise en charge de plusieurs fichiers Vault** : Permet de g√©rer diff√©rents environnements de mani√®re s√©curis√©e avec **`-vault-id`**.\n- **Chiffrement granulaire** : Possibilit√© de chiffrer uniquement des valeurs sp√©cifiques avec **`encrypt_string`**.\n- **Interface simple** : Utilisation en ligne de commande intuitive pour cr√©er, modifier ou d√©chiffrer des fichiers.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Gestion des mots de passe** : Si le mot de passe Vault est perdu ou compromis, l'acc√®s aux donn√©es chiffr√©es devient impossible.\n- **D√©pendance aux mots de passe** : Chaque fichier chiffr√© n√©cessite un mot de passe pour y acc√©der, ce qui peut devenir contraignant dans des environnements complexes.\n- **Pas de solution native pour le partage s√©curis√©** : Le partage des fichiers Vault entre plusieurs utilisateurs n√©cessite une gestion manuelle des mots de passe, ce qui peut √™tre source d‚Äôerreurs.\n- **Performance** : Bien que les fichiers chiffr√©s soient l√©gers, l'utilisation r√©p√©t√©e de commandes de chiffrement/d√©chiffrement peut affecter les performances dans des environnements de grande √©chelle.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Python]] [[MOC_DevSecOps]]"
    },
    {
        "id": "d5cddd3c-a911-4b5f-9b0a-1ee9e69b5ae6",
        "title": "Apache Apisix",
        "description": "---\nid: 82d7deb1-0645-4023-8a4c-7c1e96d022f5\n---\n# Rapidement c'est quoi‚ùì\n\nApache APISIX est une [[API Gateway]] open-source, l√©g√®re et performante, con√ßue pour les environnements cloud natifs.  Elle permet de g√©rer, router et s√©curiser le trafic vers vos [[Micros services]] et APIs.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache APISIX est une passerelle d'API dynamique et haute performance, √©crite en [[Lua]] et bas√©e sur [[Nginx]].  Elle se distingue par son architecture enti√®rement bas√©e sur le plugin, ce qui permet une extensibilit√© et une personnalisation exceptionnelles.  Au lieu de reconfigurer le serveur √† chaque changement, APISIX utilise une architecture de donn√©es dynamique,  mettant √† jour ses routes et ses configurations en temps r√©el sans n√©cessiter de red√©marrage.\n\nSes fonctionnalit√©s cl√©s incluent :\n\n* **Routage dynamique et gestion des routes:**  APISIX permet de d√©finir des routes pour diriger le trafic vers diff√©rents services backend en fonction de crit√®res comme l'h√¥te, l'URL, les en-t√™tes HTTP, etc.  Ces routes peuvent √™tre modifi√©es dynamiquement sans interruption de service.\n* **Gestion de la s√©curit√©:**  Int√®gre des m√©canismes de s√©curit√© robustes tels que l'authentification, l'autorisation (via des plugins), le WAF (Web Application Firewall) et la protection contre les DDoS.\n* **Gestion du trafic:**  Offre des fonctionnalit√©s de gestion du trafic avanc√©es comme le [[load balancing]], le [[circuit breaker]] et la limitation de d√©bit.\n* **Plugins extensibles:**  Son architecture plug-in permet d'√©tendre ses fonctionnalit√©s √† l'infini.  Des plugins sont disponibles pour la gestion des logs, la surveillance, l'int√©gration avec des services de monitoring, etc.\n* **Gestion des m√©tadonn√©es:**  Permet de stocker et de g√©rer des m√©tadonn√©es associ√©es aux routes et aux services.\n* **Compatibilit√© [[Kubernetes]]:**  APISIX s'int√®gre bien avec Kubernetes et d'autres orchestrateurs de conteneurs.\n\nContrairement aux passerelles API traditionnelles qui n√©cessitent des red√©marrages pour mettre √† jour la configuration, APISIX offre une gestion dynamique, permettant des mises √† jour en temps r√©el et une haute disponibilit√©.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Haute performance et faible latence:**  APISIX est connu pour sa performance exceptionnelle.\n* **Extensibilit√© gr√¢ce √† l'architecture plug-in:**  Permet d'ajouter facilement de nouvelles fonctionnalit√©s.\n* **Gestion dynamique de la configuration:**  Pas de temps d'arr√™t lors des mises √† jour.\n* **Open-source et communaut√© active:**  B√©n√©ficie d'un support communautaire important.\n* **Int√©gration avec [[Kubernetes]] et d'autres outils cloud natifs.**\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage potentiellement raide:**  La ma√Ætrise compl√®te de l'utilisation des plugins peut demander un certain temps.\n* **D√©pendance √† [[Lua]]:**  N√©cessite une certaine familiarit√© avec le langage Lua pour d√©velopper des plugins personnalis√©s.\n* **La documentation peut parfois manquer de clart√© pour certains aspects avanc√©s.**\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "eb8de89e-4a18-43d3-8bd0-33475992f124",
        "title": "Apache Karaf (OSGi)",
        "description": "---\nid: ef4589e3-be7d-49b4-bb8f-550ea8a049d0\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùìblabla\n\nKaraf est un conteneur d'application l√©ger bas√© sur [[Open Service Gateway initiative (OSGi)]], permettant de d√©ployer, g√©rer et configurer des applications [[Open Service Gateway initiative (OSGi)]] de mani√®re simplifi√©e, avec des fonctionnalit√©s avanc√©es comme la gestion dynamique des configurations, le d√©ploiement √† chaud et l'int√©gration avec divers outils.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache Karaf est un conteneur d'application permettant de g√©rer des applications [[Open Service Gateway initiative (OSGi)]]. Il offre plusieurs fonctionnalit√©s suppl√©mentaires par rapport aux autres impl√©mentations [[Open Service Gateway initiative (OSGi)]], telles que :\n\n- **Console Interactive** : Une interface en ligne de commande pour g√©rer les bundles, services et configurations.\n- **Karaf Features** : Permet l'installation de groupes de bundles et configurations d'un coup.\n- **Support Maven** : D√©ploiement direct de bundles depuis un d√©p√¥t Maven.\n- **Blueprints ([[Apache Aries]])** : Configuration d√©clarative des services [[Open Service Gateway initiative (OSGi)]] via des fichiers XML.\n- **Gestion Dynamique des Configurations** : Permet de modifier les configurations en direct sans red√©marrer l'application.\n- **Hot Deployment** : D√©ploiement et mise √† jour des bundles sans red√©marrage du serveur.\n- **Int√©gration avec des frameworks** : Int√©gration facile avec des outils comme [[Apache Camel]], [[ActiveMQ]] et [[CXF]] pour les services d'int√©gration, la messagerie et les services web.\n- **Gestion de Clusters** : Avec [[Karaf Cellar]], permet de g√©rer et synchroniser des clusters [[Open Service Gateway initiative (OSGi)]].\n- **S√©curisation des configurations** : [[Karaf Vault]] prot√®ge les informations sensibles dans les fichiers de configuration.\n- **[[JMX]] et Monitoring** : Surveillance des services via l'int√©gration avec [[JMX]] et [[Jolokia]].\n- **Commandes Personnalis√©es** : Cr√©ation de commandes personnalis√©es pour automatiser les t√¢ches courantes.\n- **Support [[Java EE]] et [[Micros services]]** : Permet de d√©ployer des applications [[Java EE]] et de supporter des architectures [[Micros services]] gr√¢ce √† son mod√®le modulaire.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Console interactive** : Facilit√© de gestion des applications via une interface simple.\n- **Hot Deployment** : Mise √† jour des applications sans perturber le service, id√©al pour des environnements de production.\n- **Int√©gration avec des outils tiers** : Connexions pr√™tes √† l'emploi avec des technologies comme [[Apache Camel]],[[ ActiveMQ]], et [[CXF]].\n- **Gestion dynamique des configurations** : Modifications √† la vol√©e sans red√©marrage n√©cessaire, simplifiant l'administration.\n- **Blueprints** : Approche d√©clarative facilitant la gestion des services [[Open Service Gateway initiative (OSGi)]], similaire √† [[Spring Framework]].\n- **Support de [[Java EE]] et des [[Micros services]]** : Permet de d√©ployer des applications de grande √©chelle de mani√®re modulaire.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© pour les d√©butants** : L'usage d'[[Open Service Gateway initiative (OSGi)]] et de Karaf peut √™tre d√©routant pour les nouveaux utilisateurs.\n- **Configuration initiale** : La configuration des features et des bundles peut √™tre complexe et n√©cessite une bonne ma√Ætrise de l'environnement.\n- **Performance** : L'usage intensif de bundles et de services peut parfois entra√Æner une surcharge dans des applications tr√®s petites ou simples.\n- **D√©pendance au mod√®le OSGi** : Certains d√©veloppeurs pr√©f√©reront des alternatives plus simples √† OSGi pour des applications ne n√©cessitant pas un mod√®le aussi modulaire.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Java]]"
    },
    {
        "id": "75728b98-3ac9-4c30-b578-92cf0f33c975",
        "title": "Apache Lucene",
        "description": "---\nid: 73e4d839-b181-4a74-b4d5-439c03d44a43\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nApache Lucene est un framework [[Java]] destin√© √† l'indexation et √† la recherche de texte, permettant de g√©rer efficacement de grandes quantit√©s de donn√©es pour cr√©er des moteurs de recherche performants.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache Lucene fournit des outils pour indexer des documents et effectuer des recherches rapides sur des grandes bases de donn√©es textuelles. Il permet de cr√©er des moteurs de recherche en offrant des fonctionnalit√©s comme :\n\n- **Indexation** : Cr√©ation d'index invers√©s pour une recherche rapide.\n- **Recherche textuelle** : Recherche bas√©e sur des mots-cl√©s, phrases, ou expressions r√©guli√®res.\n- **Performance** : Optimisation des recherches avec des structures de donn√©es adapt√©es. Des outils comme **[[Elasticsearch]]** et **[[Apache Solr]]** utilisent Lucene pour faciliter l'int√©gration et l'utilisation dans des environnements de production √† grande √©chelle.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Haute performance** : Tr√®s rapide pour la recherche et l'indexation sur de grandes quantit√©s de donn√©es.\n- **Flexibilit√©** : Offre des options avanc√©es pour affiner les recherches (poids, synonymes, requ√™tes bool√©ennes).\n- **√âcosyst√®me riche** : Utilis√© par des outils comme [[Elasticsearch]] et [[Solr]], ce qui le rend encore plus accessible pour des cas d‚Äôusage complexes.\n- **Support de plusieurs formats** : Peut indexer des fichiers texte, XML, JSON, etc.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© d'int√©gration** : Peut √™tre difficile √† configurer et √† int√©grer directement dans des projets sans outils suppl√©mentaires.\n- **Consommation m√©moire** : L'indexation et la recherche sur de tr√®s grandes bases de donn√©es peuvent n√©cessiter des ressources importantes.\n- **Pas de GUI natif** : Ne propose pas d'interface graphique de gestion, n√©cessitant souvent des outils externes comme Solr ou Elasticsearch pour faciliter l'utilisation.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Java]]"
    },
    {
        "id": "555847cc-90e9-4281-9f5f-ca65cb84ef39",
        "title": "ArgoCD",
        "description": "---\nid: fc23560f-daa5-461d-8a6b-7215c2cf2657\n---\n# Rapidement c'est quoi‚ùì\n\nArgo CD est un outil de gestion de configuration [[GitOps]] pour [[Kubernetes]].  Il synchronise l'√©tat d√©clar√© de votre infrastructure dans un d√©p√¥t [[Git]] avec l'√©tat r√©el de votre cluster [[Kubernetes]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nArgo CD est un syst√®me de d√©ploiement et de gestion continue bas√© sur le principe [[GitOps]].  Il fonctionne en surveillant un d√©p√¥t [[Git]] sp√©cifi√© pour les modifications apport√©es √† des manifestes [[Kubernetes]] .  Lorsqu'une modification est d√©tect√©e, Argo CD compare l'√©tat souhait√© (d√©fini dans le d√©p√¥t Git) √† l'√©tat actuel du cluster [[Kubernetes]].  Il effectue ensuite les actions n√©cessaires pour synchroniser ces deux √©tats, en appliquant les modifications, cr√©ant, mettant √† jour ou supprimant les ressources [[Kubernetes]].  Cela permet un d√©ploiement automatis√©, fiable et tra√ßable des applications sur [[Kubernetes]].\n\nArgo CD utilise un \"Declarative Configuration\" : l'√©tat souhait√© du cluster est enti√®rement d√©fini dans des fichiers de configuration versionn√©s dans un d√©p√¥t [[Git]] (g√©n√©ralement avec un syst√®me de branchement [[Git]] pour g√©rer les d√©ploiements et les rollbacks).  Cela facilite le suivi des changements, la collaboration et l'auditabilit√©.  La visualisation de l'√©tat du d√©ploiement, ainsi que l'historique des modifications et des √©ventuels √©checs, est un aspect central de la plateforme.\n\nIl ne se limite pas aux manifestes [[Kubernetes]] ; il peut g√©rer d'autres ressources en utilisant des m√©canismes d'extensions (comme les applications [[Helm]]).  L'automatisation est pouss√©e, avec la possibilit√© de configurer des notifications et des alertes lors des √©v√©nements importants.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* [[**GitOps]]:**  Adopte une approche [[GitOps]], offrant tous les avantages de la gestion de version, de la collaboration et de l'auditabilit√©.\n* **Automatisation:**  Automatise compl√®tement le processus de d√©ploiement et de gestion des applications [[Kubernetes]].\n* **Observabilit√©:**  Fournit une interface utilisateur pour surveiller l'√©tat des d√©ploiements et l'historique des changements.\n* **Fiabilit√©:**  Minimise les risques d'erreurs manuelles et assure la coh√©rence entre l'√©tat souhait√© et l'√©tat r√©el.\n* **Rollbacks faciles:**  Permet de revenir facilement √† des versions pr√©c√©dentes gr√¢ce √† l'historique [[Git]].\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© initiale:**  La configuration et l'int√©gration initiale peuvent √™tre complexes pour les utilisateurs non familiers avec [[Kubernetes]] et [[GitOps]].\n* **D√©pendance √† Git:**  Une d√©pendance totale √† un syst√®me de gestion de versions [[Git]] est n√©cessaire.\n* **Gestion des secrets:**  La gestion des secrets n√©cessite une configuration suppl√©mentaire et une int√©gration avec des solutions de gestion des secrets.\n* **Surveillance accrue n√©cessaire:**  M√™me avec l'automatisation, la surveillance du syst√®me reste cruciale pour identifier et r√©soudre les probl√®mes.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "0e691bd0-f951-4184-b231-57171dea0300",
        "title": "Aspect Oriented Programming (AOP)",
        "description": "---\nid: 648c597b-2bb8-47b8-8dbb-1ea43bf23d4c\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nL'Aspect Oriented Programming (AOP) est une technique de programmation qui permet de s√©parer les pr√©occupations transversales (cross-cutting concerns) du code principal.  Elle vise √† am√©liorer la modularit√© et la maintenabilit√© du code en regroupant des fonctionnalit√©s qui affectent plusieurs parties du programme, mais qui ne sont pas directement li√©es √† la logique m√©tier principale.  Imaginez des aspects comme la journalisation, la s√©curit√© ou la gestion des transactions, qui traversent plusieurs modules.  AOP permet de les g√©rer s√©par√©ment.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAOP introduit le concept d'**aspects**, qui sont des modules contenant du code qui s'ex√©cute √† des points sp√©cifiques du programme, appel√©s **points de jonction** (join points). Ces points de jonction sont g√©n√©ralement des √©v√©nements tels que l'appel d'une m√©thode, la cr√©ation d'un objet ou l'ex√©cution d'une exception.\n\nUn aspect est d√©fini par un ensemble de points de jonction et d'**avis** (advices). Un avis est un bloc de code qui s'ex√©cute avant, apr√®s ou autour d'un point de jonction.  On peut ainsi ajouter des fonctionnalit√©s sans modifier le code principal.\n\n**Exemple concret ([[Java]] avec [[Spring AOP]]):**\n\nImaginons une m√©thode `processOrder()` qui g√®re le traitement d'une commande.  On veut ajouter une journalisation avant et apr√®s son ex√©cution.  Avec AOP, on peut cr√©er un aspect sans modifier `processOrder()` :\n\n```java\n@Aspect\npublic class LoggingAspect {\n\n    @Before(\"execution(* com.example.OrderService.processOrder(..))\")\n    public void beforeProcessOrder(JoinPoint joinPoint) {\n        System.out.println(\"Avant traitement de la commande: \" + joinPoint.getSignature());\n    }\n\n    @After(\"execution(* com.example.OrderService.processOrder(..))\")\n    public void afterProcessOrder(JoinPoint joinPoint) {\n        System.out.println(\"Apr√®s traitement de la commande: \" + joinPoint.getSignature());\n    }\n}\n```\n\nCe code utilise Spring AOP.  `@Aspect` indique qu'il s'agit d'un aspect.  `@Before` et `@After` d√©finissent les avis qui s'ex√©cutent avant et apr√®s l'ex√©cution de `processOrder()`.  `execution(* com.example.OrderService.processOrder(..))` est un pointcut (expression qui d√©finit les points de jonction).\n\nL'impl√©mentation d'AOP varie selon les langages et les frameworks.  Certains langages ont des fonctionnalit√©s int√©gr√©es, tandis que d'autres utilisent des frameworks sp√©cifiques ([[Spring AOP]] en [[Java]], AspectJ, etc.).  Le m√©canisme sous-jacent implique souvent la modification du code bytecode (transformation du code compil√©) pour injecter le code des aspects aux points de jonction.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Modularit√© et maintenabilit√©:** S√©pare les pr√©occupations transversales du code principal, facilitant la maintenance et la compr√©hension du code.\n- **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rents modules.\n- **R√©duction de la duplication de code:** √âvite la redondance de code pour des fonctionnalit√©s transversales.\n- **Am√©lioration de la lisibilit√©:** Le code principal reste focalis√© sur la logique m√©tier.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Complexit√©:**  AOP peut introduire une complexit√© suppl√©mentaire, surtout pour des projets de petite taille.  La compr√©hension du m√©canisme et des points de jonction peut n√©cessiter une courbe d'apprentissage.\n- **D√©bogage:** Le d√©bogage peut √™tre plus difficile car le code est dispers√© entre les aspects et le code principal.\n- **Performances:**  L'ajout d'aspects peut avoir un impact l√©ger sur les performances, bien que souvent n√©gligeable.\n- **Difficult√© de test:** Tester les aspects isol√©ment peut √™tre complexe.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n\n"
    },
    {
        "id": "d7d701db-d6e0-42c9-8931-bdada3b40dda",
        "title": "AspectJ",
        "description": "---\nid: 0a9b351a-7625-4e02-a252-3dff5766d3e2\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nAspectJ est une extension du langage [[Java]] qui permet la [[Aspect Oriented Programming (AOP)]].  Il offre un moyen de modulariser les pr√©occupations transversales (cross-cutting concerns) comme la journalisation, la gestion des transactions, ou la s√©curit√©, en les s√©parant du code principal de l'application.  Cela am√©liore la lisibilit√©, la maintenabilit√© et la r√©utilisabilit√© du code.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAspectJ permet d'ajouter du code (appel√© *aspects*) √† des points sp√©cifiques dans l'ex√©cution d'un programme [[Java]], sans modifier le code source existant.  Ces points sont d√©finis par des *pointcuts*, qui sont des expressions qui s√©lectionnent des joint points (join points).  Un joint point repr√©sente un point d'ex√©cution dans le programme, comme l'appel d'une m√©thode, la cr√©ation d'un objet, ou le lancement d'une exception.\n\nLes aspects sont d√©finis dans des fichiers s√©par√©s et contiennent des *advice*, qui sont des blocs de code ex√©cut√©s avant, apr√®s, ou autour d'un joint point s√©lectionn√© par le pointcut.  AspectJ utilise un processus de compilation s√©par√© pour tisser (weave) les aspects dans le code Java.\n\n**Exemple:** Imaginons que l'on veuille logger chaque appel de m√©thode d'une classe `UserService`.  Avec AspectJ, on pourrait d√©finir un aspect comme suit :\n\n```java\npublic aspect UserServiceLogger {\n    pointcut logMethodCall(): call(* com.example.UserService.*(..));\n\n    before(): logMethodCall() {\n        System.out.println(\"Appel de m√©thode : \" + thisJoinPoint.getSignature());\n    }\n}\n```\n\nCe code d√©finit un pointcut `logMethodCall()` qui s√©lectionne tous les appels de m√©thode de la classe `com.example.UserService`.  L'advice `before()` est ex√©cut√© avant chaque appel de m√©thode s√©lectionn√©, et affiche un message de log dans la console.  `thisJoinPoint` est une variable sp√©ciale qui fournit des informations sur le joint point courant.\n\nAspectJ supporte plusieurs types d'advice : `before`, `after`, `after returning`, `after throwing`, et `around`.  L'advice `around` permet de contr√¥ler enti√®rement l'ex√©cution d'un joint point.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **S√©paration des pr√©occupations:** Am√©liore la modularit√© et la lisibilit√© du code en s√©parant les pr√©occupations transversales du code principal.\n* **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application ou m√™me dans d'autres applications.\n* **Maintenance simplifi√©e:** Les modifications des pr√©occupations transversales n'impliquent pas de modifier le code principal.\n* **Aspect non invasif:**  On peut ajouter des fonctionnalit√©s sans modifier le code source existant.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** La programmation orient√©e aspect peut avoir une courbe d'apprentissage raide, surtout pour les d√©veloppeurs qui ne sont pas familiers avec ce paradigme.\n* **D√©bogage:** Le d√©bogage peut √™tre plus complexe que dans le code [[Java]] standard, car il faut comprendre l'interaction entre les aspects et le code principal.\n* **Performance:** L'ajout d'aspects peut avoir un impact sur les performances, bien que cela soit g√©n√©ralement n√©gligeable.\n* **Complexit√© potentielle:**  Une mauvaise utilisation des aspects peut conduire √† un code plus complexe et difficile √† maintenir.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "314398fc-a56e-435e-b0bd-8438fd066367",
        "title": "Astro Starlight",
        "description": "---\nid: 3076a9fe-0aeb-4998-b3f7-43f4cb759043\n---\n# Rapidement c'est quoi‚ùì\n\nAstro Starlight est un g√©n√©rateur de sites web statiques, sp√©cifiquement con√ßu pour cr√©er des documentations, similaire √† [[VitePress]] ou [[Docusaurus]].  Il utilise [[Astro]], un framework de sites web rapides et performants.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAstro Starlight est un th√®me (ou un ensemble de composants et de configurations) pour le framework [[Astro]]. Il fournit une structure de base et des composants pr√©-construits pour faciliter la cr√©ation de sites de documentation.  Contrairement √† une solution comme [[VitePress]] qui est une application compl√®te, Starlight se base sur la flexibilit√© d'[[Astro]], permettant une plus grande personnalisation tout en conservant une structure claire pour la documentation.  Il g√®re typiquement la navigation, la mise en forme du code, la recherche et d'autres fonctionnalit√©s courantes des sites de documentation.  On √©crit le contenu de la documentation g√©n√©ralement en [[Markdown]], qui est ensuite trait√© par [[Astro]] pour g√©n√©rer le site web statique final.  Cela permet un workflow rapide, une mise √† jour facile et un excellent SEO.  La performance est un point fort gr√¢ce √† l'utilisation d'[[Astro]], qui est connu pour g√©n√©rer des sites l√©gers et rapides √† charger.  L'utilisateur final a la possibilit√© de personnaliser profond√©ment le th√®me en modifiant les fichiers de configuration et les composants int√©gr√©s.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance:**  Gr√¢ce √† [[Astro]], les sites g√©n√©r√©s sont rapides et l√©gers.\n* **Personnalisation:**  Offre une grande flexibilit√© pour adapter le th√®me √† ses propres besoins et design.\n* **Bas√© sur Astro:** B√©n√©ficie de l'√©cosyst√®me et des avantages d'[[Astro]] (performance, simplicit√©).\n* **Int√©gration [[Markdown]]:**  Simple et efficace pour la cr√©ation du contenu.\n* **Structure claire:**  Fournit une base solide et bien organis√©e pour la documentation.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Potentiellement plus complexe √† mettre en place que [[VitePress]]:**  N√©cessite une compr√©hension de base d'[[Astro]].\n* **Moins de fonctionnalit√©s \"out-of-the-box\":** Par rapport √† une solution plus int√©gr√©e comme [[VitePress]], il faut potentiellement plus de configuration pour obtenir des fonctionnalit√©s avanc√©es.\n* **D√©pendance √† [[Astro]]:**  La connaissance d'[[Astro]] est n√©cessaire pour une utilisation et personnalisation efficace.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "5f1e2ec9-364e-4ce4-9afe-b92ff447af3f",
        "title": "Azure Active Directory",
        "description": "---\nid: 90178cba-c2e7-4de7-a92f-4d570dc3b732\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nAzure Active Directory (Azure AD) est le service d'annuaire cloud de Microsoft. Il fournit une identit√© et une [[Identify Access Manager (IAM)]] pour les applications et les ressources cloud, permettant l'authentification et l'autorisation des utilisateurs et des applications.  Il peut √©galement √™tre int√©gr√© avec des annuaires locaux (via Azure AD Connect).\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nAzure AD est un annuaire bas√© sur le cloud qui g√®re les identit√©s d'utilisateurs et d'applications.  Il permet :\n\n* **Authentification unique (SSO):**  Les utilisateurs peuvent acc√©der √† plusieurs applications avec les m√™mes identifiants.\n* **Gestion des acc√®s bas√©e sur les r√¥les [[Role Based Access Control (RBAC)]]:** Contr√¥le fin des permissions pour les utilisateurs et les groupes.\n* **Gestion des identit√©s:** Cr√©ation, modification et suppression de comptes utilisateurs et groupes.\n* **Int√©gration avec des applications SaaS:**  Acc√®s simple aux applications cloud bas√©es sur le cloud.\n* **Int√©gration avec des applications locales:** Via Azure AD Connect, les identit√©s locales peuvent √™tre synchronis√©es avec Azure AD.\n* **Authentification multi-facteur (MFA):**  Am√©liore la s√©curit√© en exigeant plusieurs m√©thodes d'authentification.\n* **Protection contre les menaces:** Surveillance et d√©tection des activit√©s suspectes.\n* **Gestion des appareils:** Contr√¥le et gestion des appareils acc√©dant aux ressources.\n* **Conditionnel Access:**  D√©finit des politiques d'acc√®s bas√©es sur des conditions (emplacement, appareil, etc.).\n\n\n**Exemple d'int√©gration avec une application:** Une application web peut utiliser l'authentification Azure AD pour v√©rifier l'identit√© des utilisateurs avant de leur accorder l'acc√®s.  Cela se fait g√©n√©ralement via les protocoles OAuth 2.0 et OpenID Connect.\n\n**Exemple de configuration (sch√©matique):**  Pour int√©grer une application web avec Azure AD, il faut enregistrer l'application dans Azure AD, obtenir un ID d'application et un secret client, puis configurer l'application pour qu'elle utilise ces informations pour authentifier les utilisateurs via Azure AD.  La configuration pr√©cise d√©pend du type d'application et des biblioth√®ques utilis√©es.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Int√©gration avec l'√©cosyst√®me Microsoft:**  Fonctionne parfaitement avec d'autres services Microsoft cloud.\n* **Fonctionnalit√©s robustes de s√©curit√©:**  Offre des m√©canismes de s√©curit√© avanc√©s.\n* **Scalabilit√© et fiabilit√©:**  Con√ßu pour g√©rer des millions d'utilisateurs et d'applications.\n* **Gestion centralis√©e des identit√©s:**  Simplifie la gestion des utilisateurs et des acc√®s.\n* **Bonne documentation et support:** Microsoft fournit une documentation compl√®te et un support technique.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Co√ªt:** Peut √™tre co√ªteux pour les grandes organisations avec un grand nombre d'utilisateurs.\n* **Complexit√©:**  La configuration et la gestion d'Azure AD peuvent √™tre complexes pour les utilisateurs inexp√©riment√©s.\n* **D√©pendance √† Microsoft:**  Les organisations sont d√©pendantes de Microsoft pour le service.\n* **Probl√®mes de performance possibles:**  Des probl√®mes de performance peuvent survenir en cas de forte demande.\n* **Int√©gration avec des syst√®mes non-Microsoft:**  Peut n√©cessiter des efforts suppl√©mentaires pour int√©grer des syst√®mes non-Microsoft.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]\n\n**Note concernant la proposition initiale de f√©d√©rer avec [[Keycloak]]:**  Bien que possible, f√©d√©rer Azure AD avec Keycloak ajoute une couche de complexit√©.  Cela peut √™tre utile dans certains sc√©narios (par exemple, pour centraliser la gestion des identit√©s pour des applications multiples, ou pour ajouter des fonctionnalit√©s sp√©cifiques offertes par Keycloak), mais il est important de consid√©rer les implications sur la complexit√© de la gestion et la s√©curit√© globale.  Un choix direct d'Azure AD pour l'authentification est souvent plus simple et plus int√©gr√©.\n"
    },
    {
        "id": "78fcdf93-fb9e-4ab7-9121-ad92a35dbae7",
        "title": "Behaviour Driven Developpement (BDD)",
        "description": "---\nid: f580a39e-f8d4-4c10-b007-25b2f99064b9\n---\n# Rapidement c'est quoi‚ùì\n\nLe Behaviour Driven Development (BDD) est une approche de d√©veloppement logiciel qui √©tend le [[Test Driven Developpement (TDD)]] en mettant l'accent sur la collaboration entre les d√©veloppeurs, les testeurs et les clients.  Il se concentre sur le comportement du logiciel du point de vue de l'utilisateur.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe BDD est une technique de d√©veloppement logiciel agile qui utilise des exemples concrets pour d√©finir et v√©rifier le comportement souhait√© du logiciel.  Au lieu de se concentrer uniquement sur des tests unitaires techniques comme le [[Test Driven Developpement (TDD)]], le BDD d√©finit les exigences et les tests √† partir du point de vue de l'utilisateur final ou d'un autre intervenant (par exemple, un analyste m√©tier).  Ces exigences sont exprim√©es sous forme de sc√©narios √©crits dans un langage compr√©hensible par tous (par exemple, Given-When-Then, ([[Gherkin]])), facilitant ainsi la communication et la collaboration entre les parties prenantes.\n\nLe processus BDD implique g√©n√©ralement les √©tapes suivantes :\n\n1. **D√©finir les comportements attendus:**  Les √©quipes identifient les fonctionnalit√©s et les comportements attendus du logiciel √† l'aide d'exemples concrets.  Ces exemples sont souvent √©crits en utilisant le format Given-When-Then (ou un format similaire).  *Given* d√©crit le contexte initial, *When* d√©crit l'action effectu√©e, et *Then* d√©crit le r√©sultat attendu.\n\n2. **Automatiser les tests:**  Les exemples de comportements sont ensuite traduits en tests automatis√©s.  Ces tests v√©rifient que le logiciel se comporte comme attendu.  Des frameworks BDD comme [[Cucumber]], [[SpecFlow]], ou [[Behat]] sont souvent utilis√©s pour faciliter l'automatisation des tests √† partir de la sp√©cification √©crite en langage naturel.\n\n3. **D√©velopper le logiciel:**  Le d√©veloppement du logiciel se fait it√©rativement, en commen√ßant par les fonctionnalit√©s d√©crites par les exemples de comportement.  Les tests automatis√©s servent de guide pour le d√©veloppement et permettent de valider que chaque it√©ration r√©pond aux exigences.\n\nEn essence, le BDD favorise une compr√©hension partag√©e des exigences entre les d√©veloppeurs, les testeurs et les clients, r√©duisant ainsi les malentendus et les erreurs.  Il permet une documentation vivante et ex√©cutable du comportement du logiciel.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Collaboration am√©lior√©e:**  Facilite la communication et la collaboration entre les √©quipes techniques et les clients gr√¢ce √† un langage commun.\n* **Documentation vivante et ex√©cutable:**  Les exemples de comportement servent de documentation claire et concise, qui est automatiquement v√©rifi√©e par les tests.\n* **R√©duction des erreurs:**  La sp√©cification pr√©cise des comportements permet de d√©tecter et de corriger les erreurs plus t√¥t dans le cycle de d√©veloppement.\n* **Tests plus compr√©hensibles:** Les tests sont √©crits dans un langage naturel et facilement compr√©hensibles par tous, pas seulement les d√©veloppeurs.\n* **Am√©lioration de la qualit√© du logiciel:**  Les tests automatis√©s assurent une meilleure qualit√© du logiciel.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  La mise en place de BDD peut n√©cessiter une courbe d'apprentissage pour les √©quipes non familiaris√©es avec cette approche.\n* **Surco√ªt potentiel:**  L'√©criture des exemples de comportement et l'automatisation des tests peuvent prendre du temps et n√©cessiter des ressources suppl√©mentaires, surtout au d√©but.\n* **Maintenance des tests:**  La maintenance des tests automatis√©s peut √™tre chronophage si le logiciel √©volue rapidement.\n* **D√©pendance aux frameworks:**  Le choix et la ma√Ætrise d'un framework BDD sont essentiels pour une impl√©mentation r√©ussie.\n* **Peut √™tre inad√©quat pour certains projets:**  Le BDD n'est pas toujours la meilleure approche pour tous les projets, notamment les projets tr√®s petits ou ceux avec des exigences tr√®s fluctuantes.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "7e46e637-b644-45d4-887e-b929589b9fa3",
        "title": "Bento grid",
        "description": "---\nid: 1734446d-b56f-421d-847e-74616d8b5715\n---\n# Rapidement c'est quoi‚ùì\n\nBento est une m√©thode de conception d'interface utilisateur (UI) bas√©e sur un syst√®me de grille flexible et adaptable, facilitant la cr√©ation de mises en page r√©actives et modulaires.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nBento est une approche de conception UI qui se diff√©rencie des syst√®mes de grille traditionnels en proposant une plus grande flexibilit√© et modularit√©.  Au lieu d'une grille fixe et pr√©-d√©finie, Bento utilise un syst√®me de conteneurs \"bentos\" qui peuvent contenir diff√©rents √©l√©ments UI, et s'adaptent dynamiquement √† la taille de l'√©cran et au contenu.  Chaque bento est un composant ind√©pendant qui peut √™tre r√©utilis√© et combin√© avec d'autres pour cr√©er des mises en page complexes.  Le principe repose sur l'utilisation de plusieurs conteneurs (les bentos) de tailles variables, dispos√©s les uns √† c√¥t√© des autres ou les uns au-dessus des autres, en fonction des besoins.  Cela permet de cr√©er des layouts facilement adaptables aux diff√©rents appareils (tablettes, smartphones, ordinateurs) sans avoir √† √©crire du code sp√©cifique pour chaque r√©solution.  L'avantage cl√© est la facilit√© de maintenance et d'√©volution du design, car les modifications apport√©es √† un bento impactent uniquement ce dernier, sans n√©cessiter de r√©ajustement global de la mise en page.  La flexibilit√© permet aussi de r√©pondre √† des changements de contenu sans perturber l'ensemble de l'interface.  Il est souvent impl√©ment√© via des frameworks [[CSS]], permettant un contr√¥le pr√©cis du [[Responsive en CSS]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Flexibilit√© et modularit√©:**  Facilement adaptable aux diff√©rents √©crans et contenus.  Les modifications sont localis√©es.\n* **R√©utilisabilit√© des composants:**  Les bentos peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application, r√©duisant la redondance de code et am√©liorant la coh√©rence visuelle.\n* **Maintenance simplifi√©e:**  Les changements sont moins susceptibles d'avoir des effets inattendus sur le reste de l'interface.\n* **Responsive design facilit√©:** L'adaptation aux diff√©rentes tailles d'√©cran est int√©gr√©e au c≈ìur du syst√®me.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:** La mise en place peut √™tre plus complexe que des syst√®mes de grille plus simples, n√©cessitant une bonne compr√©hension des concepts.\n* **Courbe d'apprentissage:**  N√©cessite de ma√Ætriser les concepts de base de la conception UI et des syst√®mes de grille avant de pouvoir l'utiliser efficacement.\n* **Manque de standardisation:**  Bento n'est pas un standard officiel, la mise en ≈ìuvre peut varier selon les frameworks et les d√©veloppeurs.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "ca2e037c-2ea7-453f-8814-c90ca0fb317d",
        "title": "Bonne pratiques Astuces Infos SQL",
        "description": "---\nid: 9598b636-e6c7-433c-9c84-8d2be81bae62\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_Dev]][[MOC_DevSecOps]]\n\n**Plusieurs bonnes pratiques √† mettre en place sur des [[Base de donn√©e SQL]] :** \n\n- Mettre des [[Index]] sur les [[Primary Key]] et les [[Foreign Key]] & sur les colonnes les plus utilis√©s (en terme de comparaison m√©moire on devrait atteindre une part 40% [[Index]] / 60% data)\n- Eviter au max l'utilisation de fonction dans les requ√™tes car elles emp√™chent l'utilisation des index.\n- Regarder les index les moins utilis√©s = Ils ralentissent l‚Äô√©criture\n- En fonction du m√©tier, il peut √™tre pertinent de cr√©er des vues ou des partitions pour optimiser les requ√™tes redondante"
    },
    {
        "id": "44c07912-e569-4ffd-afe8-ba9f66a366bb",
        "title": "Bonne pratiques Astuces Infos code",
        "description": "---\nid: 25d1a09d-2ccd-4cd5-a763-aa65e2c63372\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_Dev]]\n\n# [[Java]] - Comparaison BigDecimal.\n**Si je veux faire des comparaisons avec des `BigDecimal`.**\n\nOn va pr√©f√©rer cette comparaison : \n\n```java\nsipa2ElementFournisseur.getTauxTva().stripTrailingZeros().equals(fournisseurJSON.getTauxTva())\n```\n\n√† celle-ci : \n\n```java\nObjects.equals(sipa2ElementFournisseur.getMontantTtc(), fournisseurJSON.getMontantTtc());\nsipa2ElementFournisseur.getMontantTtc().equals(fournisseurJSON.getMontantTtc()));\n```\n\nParce qu‚Äôon peut avoir des probl√®mes d‚Äôarrondis (si j‚Äôai 0 et 0.0 le `Objects.equals()` renvoie faux).\n\nA noter que `stripTrailingZeros()` renvoi la notation scientifique de la valeur en string. Donc avec la pr√©cision sur les chiffres apr√®s la virgules.\n\n# [[Java]] - Activer les asserts\nPour pouvoir activer les asserts en java, il faut passer en argument de la JVM **-ea** (Enable Assert)\n\n# Appel en [[Base de donn√©e]]\n\nFaire tr√®s attention aux requ√™tes qu‚Äôon va faire en base.\n\nOn va pr√©f√©rer r√©cup√©rer toutes les infos dont on a besoin une fois, pour ensuite les passer en param√®tre de nos m√©thodes.\n\nDans des structures imbriqu√©es on peut se retrouver √† aller chercher 6 fois la m√™me chose.\n\n# Comparaison de valeur\nToujours mettre en premier dans une comparaison la valeur dont on est s√ªr !\n```java\n# Mauvais exemple\nexception.getEnumCode().equals(ExceptionTechniqueEnum.CONCEPT_NOT_FOUND.getCode())\n\n# Bon Exemple\nExceptionTechniqueEnum.CONCEPT_NOT_FOUND.getCode().equals(exception.getEnumCode())\n```\nCar dans ce cas exception.getEnumCode() peut √™tre null, ou produire null. "
    },
    {
        "id": "afd4c958-e250-4085-aa53-067aafec3f01",
        "title": "Bonne pratiques Astuces Infos ops",
        "description": "---\nid: ddeca416-e229-43bd-9ff3-cf790d5c7db6\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_DevSecOps]]\n# Installation [[WSL]] sans acc√®s au Microsoft Store\n> Si par exemple, il est bloqu√© par l‚Äôordinateur de la soci√©t√©.\n> \n\n```java\nwsl --update\n// Recherche de mises √† jour en cours... Veuillez patienter\n// Erreur : 0x8024500c\n\nwsl --update --web-download\n```"
    },
    {
        "id": "c8431349-aa03-4939-8097-d26735b0555d",
        "title": "Capture Data Change (CDC)",
        "description": "---\nid: 88fa46d4-2deb-41b1-9694-46a255156d83\n---\n# Rapidement c'est quoi‚ùì\n\nCapture Data Change (CDC) est une technique permettant de d√©tecter et de capturer les modifications de donn√©es dans une [[Base de donn√©e]].  Elle est souvent utilis√©e pour la r√©plication de donn√©es et la synchronisation entre [[Base de donn√©e]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCapture Data Change (CDC) est un m√©canisme qui identifie et enregistre les modifications apport√©es aux donn√©es d'une [[Base de donn√©e]].  Au lieu de copier l'int√©gralit√© de la base de donn√©es √† chaque synchronisation, le CDC ne capture que les changements (insertions, mises √† jour, suppressions) survenus depuis la derni√®re synchronisation.  Ceci am√©liore consid√©rablement l'efficacit√© et la performance, notamment pour les bases de donn√©es volumineuses.\n\nPlusieurs m√©thodes existent pour impl√©menter le CDC :\n\n* **Triggers:** Des d√©clencheurs (triggers) sont d√©finis sur les tables pour enregistrer chaque modification dans une table de journalisation (log table).  Cette m√©thode est relativement simple √† impl√©menter mais peut impacter les performances si mal configur√©e.\n\n* **Log Mining:**  L'extraction d'informations directement depuis les logs de la base de donn√©es.  Cette approche est g√©n√©ralement plus performante que les triggers mais plus complexe √† mettre en ≈ìuvre et d√©pend fortement du syst√®me de gestion de base de donn√©es (SGBD).\n\n* **Change Data Capture tools:** Des outils sp√©cialis√©s (ex: [[Debezium]], [[Maxwell]]) offrent des fonctionnalit√©s avanc√©es de CDC, g√©rant la complexit√© de l'extraction et de la transformation des donn√©es.  Ils permettent souvent une int√©gration plus simple avec diff√©rents SGBD et technologies.\n\nLes donn√©es captur√©es par le CDC sont g√©n√©ralement stock√©es dans une table de journalisation ou transmises √† un syst√®me de traitement en temps r√©el (streaming) pour diverses applications, comme la r√©plication vers une base de donn√©es secondaire, l'int√©gration avec des [[Date Warehouse]], la fourniture de donn√©es en temps r√©el pour les applications, etc.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance am√©lior√©e:** Seules les modifications sont trait√©es, ce qui rend le processus de synchronisation beaucoup plus rapide et moins gourmand en ressources.\n* **Efficacit√© accrue:** R√©duction du volume de donn√©es transf√©r√©es et trait√©es.\n* **Scalabilit√©:**  Adaptable √† des bases de donn√©es de grandes tailles.\n* **Faible latence:**  Permet de fournir des donn√©es presque en temps r√©el.\n* **Flexibilit√©:**  Compatible avec diverses technologies et syst√®mes de bases de donn√©es.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© d'impl√©mentation:**  La mise en ≈ìuvre peut √™tre complexe, en particulier pour les solutions bas√©es sur le *log mining* ou n√©cessitant une int√©gration personnalis√©e.\n* **Gestion des erreurs:**  Il est crucial de mettre en place une gestion robuste des erreurs pour garantir l'int√©grit√© des donn√©es.\n* **Co√ªt:** Les outils CDC commerciaux peuvent engendrer des co√ªts suppl√©mentaires.\n* **Maintenance:**  N√©cessite une maintenance r√©guli√®re pour garantir la fiabilit√© et la performance du syst√®me.\n* **D√©pendance au SGBD:**  La m√©thode d'impl√©mentation d√©pend fortement du SGBD utilis√©.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "f9bb1ea6-0be5-467a-86e9-1317b9f9e255",
        "title": "Certification Java 17",
        "description": "---\nid: cdc0b331-bbe5-4556-ad81-10811ff4073c\n---\nSource de la formation : https://r331.github.io/OCP-Oracle-Certified-Professional-Java-SE-21-1Z0-839-Open-Study-Guide/\n### 1. **[[Certification Java 17 - Concepts de Base en Java]]**\n\n- Types primitifs et classes enveloppes (Wrapper)\n- Op√©rations arithm√©tiques et bool√©ennes (promotion de type, casting)\n- Pr√©c√©dence des op√©rateurs\n- Utilisation de `var` pour l‚Äôinf√©rence de type\n\n### 2. **[[Certification Java 17 - Programmation Orient√©e Objet (OOP)]]**\n\n- D√©claration et instanciation d‚Äôobjets\n- Cycle de vie des objets (cr√©ation, r√©f√©rences, garbage collection)\n- Encapsulation, immutabilit√©\n- H√©ritage, classes abstraites et classes scell√©es (`sealed`)\n- Polymorphisme, type objet vs type r√©f√©rence\n- Op√©rateur `instanceof` et pattern matching\n- Interfaces : m√©thodes `default`, `static`, priv√©es\n- Enums avec champs, m√©thodes et constructeurs\n\n### 3. **[[Certification Java 17 - Packages et Modules]]**\n\n- Organisation des classes en packages\n- Java Platform Module System (JPMS) : d√©finition de modules, d√©pendances, services\n\n### 4. **[[Certification Java 17 - Gestion des types Date, Temps, Texte et Num√©rique]]**\n\n- API `Date-Time` : `LocalDate`, `LocalTime`, `LocalDateTime`, `ZonedDateTime`\n- `Period`, `Duration`, `Instant` pour la gestion des intervalles de temps\n- Classes `String`, `StringBuilder`, `Text Blocks`\n- API Math et `BigDecimal`\n\n### 5. **[[Certification Java 17 - Contr√¥le du Flux d'Ex√©cution]]**\n\n- Structures de contr√¥le (`if/else`, `switch`, `while`, `for`, `do-while`)\n- Expressions `switch` et pattern matching\n- Instructions `break`, `continue`\n\n### 6. **[[Certification Java 17 - Gestion des Exceptions]]**\n\n- Utilisation de `try/catch/finally`\n- `try-with-resources`\n- Multi-catch (`catch` de plusieurs exceptions en une seule clause)\n- Exceptions personnalis√©es (`extends Exception` ou `extends RuntimeException`)\n\n### 7. **[[Certification Java 17 - Collections et Tableaux]]**\n\n- Tableaux (`int[]`, `String[]`)\n- Collections (`List`, `Set`, `Map`, `Deque`)\n- API `SequencedCollection`, `SequencedSet`, `SequencedMap` (Java 21)\n- Manipulations : ajout, suppression, tri\n\n### 8. **[[Certification Java 17 - Streams et Expressions Lambda]]**\n\n- Utilisation des `Stream<T>` et `IntStream`, `DoubleStream`\n- `filter()`, `map()`, `reduce()`, `collect()`\n- D√©composition, concat√©nation, partitionnement\n- Streams s√©quentiels et parall√®les\n\n### 9. **[[Certification Java 17 - Programmation Concurrente]]**\n\n- Threads (`Runnable`, `Callable`)\n- `ExecutorService`, `ForkJoinPool`\n- Threads virtuels (`Virtual Threads`, `Thread.ofVirtual()`)\n- Verrous (`synchronized`, `Lock`, `ReadWriteLock`)\n- Collections concurrentes et streams parall√®les\n\n### 10. **[[Certification Java 17 - Sorties et Fichiers]]**\n\n- Flux (`InputStream`, `OutputStream`, `Reader`, `Writer`)\n- S√©rialisation/d√©s√©rialisation d‚Äôobjets (`Serializable`)\n- API `java.nio.file` pour la manipulation des fichiers et r√©pertoires\n\n### 11. **[[Certification Java 17 - Acc√®s aux Bases de Donn√©es avec JDBC]]**\n\n- Connexion √† une base de donn√©es (`DriverManager`, `DataSource`)\n- Ex√©cution de requ√™tes (`Statement`, `PreparedStatement`, `CallableStatement`)\n- Gestion des transactions (`commit`, `rollback`)\n\n### 12. **[[Certification Java 17 - D√©ploiement et Modules Java]]**\n\n- Compilation et cr√©ation de JARs (`modulaires` et `non-modulaires`)\n- Images d‚Äôex√©cution (`jlink`)\n- Migration avec modules anonymes et automatiques\n\n### 13. **[[Certification Java 17 - Internationalisation et Localisation]]**\n\n- Locales (`Locale`)\n- `ResourceBundle` pour la gestion des ressources multilingues\n- Formatage des dates, nombres et devises (`NumberFormat`, `DateTimeFormatter`)\n\n[[Java]]"
    },
    {
        "id": "e5648766-c198-4852-8a19-a50320131cca",
        "title": "ChromaDB",
        "description": "---\nid: 501b3586-143e-448a-bae9-4ff77f3a5793\n---\n# Rapidement c'est quoi‚ùì\n\nChromaDB est une [[Base de donn√©e]] vectorielle open-source permettant de stocker et de rechercher des vecteurs de plongement (embeddings).  Elle est con√ßue pour √™tre facile √† utiliser et √† int√©grer dans des applications de recherche s√©mantique.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nChromaDB est une base de donn√©es qui stocke et recherche des donn√©es non structur√©es en utilisant des embeddings.  Un embedding est une repr√©sentation vectorielle d'un morceau de texte, d'une image, ou d'un autre type de donn√©es.  Au lieu de chercher des donn√©es par mots cl√©s exacts, ChromaDB permet de rechercher des donn√©es similaires en fonction de la similarit√© vectorielle des embeddings.  Cela permet de r√©aliser des recherches s√©mantiques, c'est-√†-dire de trouver des √©l√©ments dont le sens est proche de la requ√™te, m√™me si les mots utilis√©s sont diff√©rents.\n\nChromaDB utilise une architecture client-serveur. Le client envoie des requ√™tes √† un serveur qui contient la base de donn√©es.  Il supporte plusieurs types de stockage persistant, permettant ainsi une grande flexibilit√©.  Il offre des fonctionnalit√©s comme l'ajout, la mise √† jour et la suppression de donn√©es, ainsi que des m√©thodes de recherche bas√©es sur la similarit√© cosinus ou d'autres m√©triques.  L'API est simple et intuitive, facilitant son int√©gration dans divers projets.  ChromaDB est particuli√®rement bien adapt√© aux applications de recherche s√©mantique, de recommandation, et de clustering.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et facile √† utiliser:**  Le code source est disponible publiquement, facilitant l'audit et la contribution.  Son API est simple √† prendre en main.\n* **Flexibilit√©:** Supporte plusieurs types de stockage persistant (en m√©moire, disque, etc.).\n* **Performance:**  Optimis√© pour la recherche de similarit√© vectorielle √† grande √©chelle.\n* **Recherche s√©mantique:** Permet de trouver des donn√©es similaires en fonction du sens, et non seulement des mots cl√©s.\n* **Int√©gration facile:** API simple et bien document√©e pour une int√©gration ais√©e dans diff√©rents projets.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Maturit√© relative:**  Compar√© √† des bases de donn√©es vectorielles plus √©tablies, ChromaDB est relativement jeune et pourrait pr√©senter des imperfections.\n* **Scalabilit√©:** Bien que performant, sa scalabilit√© √† tr√®s grande √©chelle pourrait n√©cessiter une configuration et une optimisation avanc√©es.\n* **D√©pendances:**  N√©cessite des biblioth√®ques sp√©cifiques pour fonctionner, ce qui peut ajouter de la complexit√© √† l'installation et √† la configuration.\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "643b7d68-8af3-4764-8cab-279e51c9bb42",
        "title": "Client Side Rendering (CSR)",
        "description": "---\nid: f0414542-a158-439d-9e1b-0113e950e207\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe **Client Side Rendering (CSR)** est une m√©thode de rendu des pages [[Web]] o√π le navigateur charge une page [[HTML]] basique et ex√©cute ensuite du [[JavaScript]] pour g√©n√©rer dynamiquement le contenu de la page.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe CSR repose sur le principe que le code [[JavaScript]] du c√¥t√© client (navigateur) est responsable de la construction de la page. Lorsqu'un utilisateur acc√®de √† une page, le navigateur charge un fichier [[HTML]] minimal, puis t√©l√©charge et ex√©cute du [[JavaScript]] pour r√©cup√©rer et afficher les donn√©es, souvent via des appels API. Cela permet un rendu dynamique et interactif sans avoir besoin d'un serveur pour g√©n√©rer la page √† chaque requ√™te.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Rapidit√© de compilation** : Seulement un transfert de fichiers est n√©cessaire, ce qui rend le processus de chargement initial rapide.\n- **Adapt√© au contenu dynamique** : Id√©al pour des sites interactifs o√π le contenu change souvent, comme des applications web ou des plateformes sociales.\n- **Exp√©rience utilisateur fluide** : Une fois la page rendue, l'interaction avec la page est rapide et r√©active.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **[[SEO]] limit√©** : Le contenu n'est pas visible pour les moteurs de recherche avant l'ex√©cution du [[JavaScript]], rendant l'indexation difficile pour le r√©f√©rencement.\n- **Temps de chargement initial** : Le navigateur doit ex√©cuter tout le [[JavaScript]] avant d'afficher la page, ce qui peut entra√Æner des d√©lais d'affichage significatifs, notamment sur des appareils peu puissants.\n- **D√©pendance au [[JavaScript]]** : Les utilisateurs avec des configurations de navigateur non optimis√©es ou des d√©sactivations de [[JavaScript]] ne verront pas correctement la page.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "450fc502-04e9-4dd5-bb5d-41d5be4cf560",
        "title": "Certification Java 17 - Collections et Tableaux",
        "description": "---\nid: 205a0c04-b33c-475b-9a7f-cc1720da1bdb\n---\n## **7.1. Tableaux (`int[]`, `String[]`)**\n\n### **D√©claration et initialisation**\n\n```java\nint[] nombres = {1, 2, 3, 4, 5}; // D√©claration et affectation\nString[] noms = new String[3]; // Tableau de taille fixe (valeurs nulles)\n```\n\n### **Acc√®s aux √©l√©ments**\n\n```java\nSystem.out.println(nombres[0]); // Affiche 1\nnoms[0] = \"Alice\";\n```\n\n### **Boucle `for` pour parcourir un tableau**\n\n```java\nfor (int i = 0; i < nombres.length; i++) {\n    System.out.println(nombres[i]);\n}\n```\n\n### **Boucle `for-each` (simplifi√©e)**\n\n```java\nfor (int nombre : nombres) {\n    System.out.println(nombre);\n}\n```\n\n### **Tri avec `Arrays.sort()`**\n\n```java\nimport java.util.Arrays;\n\nArrays.sort(nombres); // Trie le tableau en ordre croissant\nSystem.out.println(Arrays.toString(nombres));\n```\n\nüìå **Un tableau a une taille fixe et ne peut pas √™tre redimensionn√©.**\n\n---\n\n## **7.2. Collections (`List`, `Set`, `Map`, `Deque`)**\n\nüìå **Les collections sont dynamiques**, contrairement aux tableaux.\n\n|**Interface**|**Impl√©mentations courantes**|**Caract√©ristiques**|\n|---|---|---|\n|`List`|`ArrayList`, `LinkedList`|Ordonn√©e, doublons autoris√©s|\n|`Set`|`HashSet`, `LinkedHashSet`, `TreeSet`|Uniques, non ordonn√©es (`HashSet`), tri√©es (`TreeSet`)|\n|`Map`|`HashMap`, `LinkedHashMap`, `TreeMap`|Cl√©/valeur, unique par cl√©|\n|`Deque`|`ArrayDeque`, `LinkedList`|Double-ended queue (FIFO/LIFO)|\n\n---\n\n### **`List` : Tableau dynamique (ArrayList, LinkedList)**\n\n```java\nimport java.util.*;\n\nList<String> liste = new ArrayList<>();\nliste.add(\"Java\");\nliste.add(\"Python\");\nliste.add(\"C++\");\n\nSystem.out.println(liste.get(1)); // Python\nliste.remove(\"C++\"); // Supprime C++\n```\n\nüìå **`ArrayList` est optimis√© pour l‚Äôacc√®s rapide, `LinkedList` pour l‚Äôinsertion/suppression.**\n\n---\n\n### **`Set` : Ensemble d‚Äô√©l√©ments uniques**\n\n```java\nSet<String> set = new HashSet<>();\nset.add(\"Java\");\nset.add(\"Python\");\nset.add(\"Java\"); // Ignor√© (pas de doublons)\nSystem.out.println(set);\n```\n\nüìå **`HashSet` (d√©sordonn√©), `TreeSet` (tri√©), `LinkedHashSet` (ordre d‚Äôinsertion).**\n\n---\n\n### **`Map` : Association cl√©/valeur**\n\n```java\nMap<String, Integer> map = new HashMap<>();\nmap.put(\"Alice\", 25);\nmap.put(\"Bob\", 30);\nSystem.out.println(map.get(\"Alice\")); // 25\n```\n\nüìå **`TreeMap` trie par cl√©, `LinkedHashMap` conserve l‚Äôordre d‚Äôinsertion.**\n\n---\n\n### **`Deque` : File d‚Äôattente double**\n\n```java\nDeque<String> deque = new ArrayDeque<>();\ndeque.addFirst(\"Premier\");\ndeque.addLast(\"Dernier\");\n\nSystem.out.println(deque.pollFirst()); // \"Premier\"\nSystem.out.println(deque.pollLast());  // \"Dernier\"\n```\n\nüìå **`Deque` peut √™tre utilis√© comme une pile (`Stack`) ou une file (`Queue`).**\n\n---\n\n## **7.3. API `SequencedCollection`, `SequencedSet`, `SequencedMap` (Java 21)**\n\nüìå **Ajout√© en Java 21 pour g√©rer l‚Äôordre des √©l√©ments de fa√ßon plus coh√©rente.**\n\n### **`SequencedCollection` : Collection ordonn√©e**\n\n```java\nSequencedCollection<String> list = new LinkedList<>();\nlist.addFirst(\"D√©but\");\nlist.addLast(\"Fin\");\n\nSystem.out.println(list.getFirst()); // D√©but\nSystem.out.println(list.getLast());  // Fin\n```\n\nüìå **Am√©liore `List`, `Deque` et `SortedSet` en offrant des m√©thodes `getFirst()`, `getLast()` et `reversed()`.**\n\n---\n\n### **`SequencedSet` : Ensemble ordonn√©**\n\n```java\nSequencedSet<String> set = new LinkedHashSet<>();\nset.add(\"Java\");\nset.add(\"Python\");\nSystem.out.println(set.getFirst()); // Java\nSystem.out.println(set.getLast());  // Python\n```\n\nüìå **Permet de r√©cup√©rer le premier et le dernier √©l√©ment d‚Äôun `Set`.**\n\n---\n\n### **`SequencedMap` : `Map` ordonn√©e**\n\n```java\nSequencedMap<String, Integer> map = new LinkedHashMap<>();\nmap.put(\"Alice\", 25);\nmap.put(\"Bob\", 30);\nSystem.out.println(map.firstEntry()); // Alice=25\nSystem.out.println(map.lastEntry());  // Bob=30\n```\n\nüìå **Ajoute `firstEntry()`, `lastEntry()` et `reversed()`.**\n\n---\n\n## **7.4. Manipulations des collections (ajout, suppression, tri)**\n\n### **Ajout et suppression**\n\n```java\nList<String> list = new ArrayList<>(List.of(\"Java\", \"Python\", \"C++\"));\nlist.add(\"JavaScript\"); // Ajout\nlist.remove(\"Python\");  // Suppression\nSystem.out.println(list);\n```\n\n### **Tri d‚Äôune `List` avec `Collections.sort()`**\n\n```java\nList<Integer> nombres = Arrays.asList(3, 1, 4, 1, 5);\nCollections.sort(nombres); // Tri croissant\nSystem.out.println(nombres);\n```\n\n### **Tri d‚Äôune `List` avec un comparateur personnalis√©**\n\n```java\nList<String> mots = Arrays.asList(\"Banane\", \"Pomme\", \"Orange\");\nmots.sort(Comparator.reverseOrder()); // Tri d√©croissant\nSystem.out.println(mots);\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Tableaux (`int[]`, `String[]`)** : Taille fixe, rapide mais rigide.  \n‚úÖ **`List`, `Set`, `Map`, `Deque`** : Collections dynamiques et flexibles.  \n‚úÖ **`SequencedCollection` (Java 21)** : Meilleure gestion de l‚Äôordre des √©l√©ments.  \n‚úÖ **Manipulations : ajout, suppression, tri avec `Collections.sort()`.**\n\n---"
    },
    {
        "id": "a1ac1cfe-c0dc-436c-83ca-f17362f54d14",
        "title": "Common Vulnerabilities and Exposures (CVE)",
        "description": "---\nid: 2411dd03-b943-417a-93c1-64d9ff895771\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **CVE (Common Vulnerabilities and Exposures)** sont des identifiants uniques attribu√©s aux vuln√©rabilit√©s de s√©curit√© dans les logiciels et syst√®mes, permettant de les r√©f√©rencer de mani√®re standardis√©e pour faciliter leur gestion et leur correction.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn CVE est un identifiant unique attribu√© √† une vuln√©rabilit√© ou exposition de s√©curit√©. Chaque CVE contient :\n\n- **Un identifiant unique** : Exemple : **CVE-2021-34527**.\n- **Une description de la vuln√©rabilit√©** : Explication du probl√®me de s√©curit√©.\n- **Des r√©f√©rences externes** : Liens vers des d√©tails, solutions ou correctifs pour la vuln√©rabilit√©.\n\nLes CVE sont utilis√©s par les chercheurs en s√©curit√©, les entreprises, et les administrateurs syst√®mes pour suivre et r√©soudre rapidement les failles de s√©curit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Standardisation** : Offre un syst√®me commun pour identifier et discuter des vuln√©rabilit√©s, facilitant la collaboration entre les professionnels de la s√©curit√©.\n- **Accessibilit√©** : Des bases de donn√©es publiques permettent de rechercher rapidement des informations sur les vuln√©rabilit√©s.\n- **Gestion des risques** : Permet une gestion rapide des risques et l'application de correctifs cibl√©s.\n- **Suivi des mises √† jour** : Aide √† suivre l'√©volution des vuln√©rabilit√©s et des correctifs disponibles.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Manque de d√©tails techniques** : Les CVE ne contiennent souvent pas suffisamment d'informations techniques pour comprendre en profondeur la vuln√©rabilit√© sans recherches suppl√©mentaires.\n- **D√©lais de mise √† jour** : Parfois, les vuln√©rabilit√©s peuvent √™tre r√©f√©renc√©es apr√®s une p√©riode de retard, laissant du temps aux attaquants pour les exploiter avant qu'un patch ne soit disponible.\n- **Pas de solutions int√©gr√©es** : Le CVE fournit une identification, mais il appartient aux entreprises de mettre en place des mesures pour corriger les vuln√©rabilit√©s.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "099be107-e1d0-4ad3-93d9-53376662611b",
        "title": "Certification Java 17 - Concepts de Base en Java",
        "description": "---\nid: f00b7523-614f-46cb-81f9-3a5e4acdd35b\n---\n## **1.1. Types primitifs et classes enveloppes (Wrapper)**\n\n### **Types primitifs en Java**\n\nJava propose **8 types primitifs** pour stocker des valeurs en m√©moire de mani√®re efficace. Ces types sont stock√©s directement en **m√©moire stack**, ce qui les rend plus rapides et moins gourmands en m√©moire que les objets.\n\n|Type|Bits|Valeur min|Valeur max|Valeur par d√©faut|\n|---|---|---|---|---|\n|`boolean`|8|`false`|`true`|`false`|\n|`byte`|8|-128|127|`0`|\n|`short`|16|-32 768|32 767|`0`|\n|`int`|32|-2^31|2^31 - 1|`0`|\n|`long`|64|-2^63|2^63 - 1|`0L`|\n|`float`|32|-|-|`0.0f`|\n|`double`|64|-|-|`0.0d`|\n|`char`|16|0 (`\\u0000`)|65 535|`\\u0000`|\n\n**Exemples d‚Äôutilisation des types primitifs :**\n\n```java\nboolean isActive = true;\nint age = 25;\ndouble price = 19.99;\nchar grade = 'A';\n```\n\n### **Classes Enveloppes (Wrappers)**\n\nJava offre des **classes enveloppes (Wrapper Classes)** pour permettre aux types primitifs d‚Äô√™tre trait√©s comme des objets. Cela est utile notamment pour travailler avec des collections (`List`, `Set`, `Map`), qui ne peuvent contenir que des objets.\n\n|Primitif|Classe Wrapper|\n|---|---|\n|`boolean`|`Boolean`|\n|`byte`|`Byte`|\n|`short`|`Short`|\n|`int`|`Integer`|\n|`long`|`Long`|\n|`float`|`Float`|\n|`double`|`Double`|\n|`char`|`Character`|\n\n**Exemple : Auto-boxing et Unboxing**\n\n```java\nInteger obj = 10;  // Auto-boxing (int -> Integer)\nint num = obj;     // Unboxing (Integer -> int)\n```\n\n- **Auto-boxing** : Conversion automatique d‚Äôun type primitif en objet wrapper.\n- **Unboxing** : Conversion automatique d‚Äôun objet wrapper en type primitif.\n\n---\n\n## **1.2. Op√©rations arithm√©tiques et bool√©ennes**\n\n### **Promotion de type (Type Promotion)**\n\nLorsqu‚Äôune op√©ration est r√©alis√©e entre diff√©rents types, **Java effectue une promotion automatique** :\n\n1. **Si un des op√©randes est `double`**, le r√©sultat est `double`.\n2. **Si un des op√©randes est `float`**, le r√©sultat est `float`.\n3. **Si un des op√©randes est `long`**, le r√©sultat est `long`.\n4. **Sinon, le r√©sultat est `int`** (m√™me si les op√©randes sont `byte` ou `short`).\n\n**Exemples :**\n\n```java\nint a = 10;\ndouble b = 2.5;\ndouble result = a + b;  // a est promu en double => 10.0 + 2.5 = 12.5\n\nbyte x = 5;\nshort y = 10;\nint z = x + y;  // x et y sont promus en int => 5 + 10 = 15\n```\n\n### **Casting explicite**\n\nLorsque la promotion automatique ne convient pas, on utilise **le casting explicite** pour convertir manuellement un type.\n\n```java\ndouble d = 9.7;\nint i = (int) d;  // 9 (la partie d√©cimale est tronqu√©e)\n\nlong bigValue = 100000L;\nint smallValue = (int) bigValue;  // Attention : peut causer une perte de donn√©es si la valeur d√©passe la capacit√© d‚Äôun int\n```\n\n### **Op√©rateurs arithm√©tiques**\n\n|Op√©rateur|Description|Exemple|\n|---|---|---|\n|`+`|Addition|`5 + 3 // 8`|\n|`-`|Soustraction|`9 - 2 // 7`|\n|`*`|Multiplication|`4 * 6 // 24`|\n|`/`|Division enti√®re|`10 / 3 // 3`|\n|`%`|Modulo (reste)|`10 % 3 // 1`|\n\n**Attention : Division entre entiers**\n\n```java\nint result = 5 / 2;  // 2 (car division enti√®re)\ndouble correctResult = 5 / 2.0;  // 2.5\n```\n\n### **Op√©rateurs bool√©ens**\n\n| Op√©rateur | Description       | Exemple                  |\n| --------- | ----------------- | ------------------------ |\n| ==        | √âgalit√©           | `a == b`                 |\n| `!=`      | Diff√©rent         | `a != b`                 |\n| `>`       | Sup√©rieur         | `a > b`                  |\n| `<`       | Inf√©rieur         | `a < b`                  |\n| `>=`      | Sup√©rieur ou √©gal | `a >= b`                 |\n| `<=`      | Inf√©rieur ou √©gal | `a <= b`                 |\n| `&&`      | ET logique        | `true && false // false` |\n| `         |                   | `                        |\n| `!`       | NON logique       | `!true // false`         |\n\n---\n\n## **1.3. Pr√©c√©dence des op√©rateurs**\n\nJava √©value les expressions en fonction de la priorit√© des op√©rateurs.  \n**Ordre de priorit√© (du plus √©lev√© au plus faible) :**\n\n1. `++`, `--` (postfix√©s)\n2. `++`, `--`, `!`, `~` (pr√©fix√©s)\n3. `*`, `/`, `%`\n4. `+`, `-`\n5. `<<`, `>>`, `>>>`\n6. `<`, `<=`, `>`, `>=`\n7. \"==\", \"!=\"\n8. `&`\n9. `^`\n10. `|`\n11. `&&`\n12. `||`\n13. `? :` (ternaire)\n14. `=`, `+=`, `-=`, `*=`, `/=`, etc.\n\n**Exemples :**\n\n```java\nint result = 5 + 2 * 3;  // 5 + (2 * 3) = 11\nboolean test = true || false && false; // true || (false && false) = true\n```\n\n**Bonnes pratiques :**\n\n- **Toujours utiliser des parenth√®ses** pour √©viter les ambigu√Øt√©s.\n\n```java\nint result = (5 + 2) * 3;  // 21\n```\n\n---\n\n## **1.4. Inf√©rence de Type avec `var`**\n\nIntroduit en Java 10, `var` permet √† Java de **d√©duire le type d'une variable lors de l'initialisation**.\n\n```java\nvar x = 10;  // int\nvar text = \"Java\";  // String\nvar list = List.of(1, 2, 3);  // List<Integer>\n```\n\n**Limitations de `var` :**\n\n- **Doit √™tre initialis√© imm√©diatement** (`var x;` ne compile pas).\n- **Uniquement utilisable en local** (pas pour les champs de classe ni les param√®tres de m√©thode).\n- **Ne peut pas √™tre utilis√© avec `null` sans type explicite**.\n\n```java\nvar value = null; // ERREUR, type ind√©fini\n```\n\n**Cas d‚Äôutilisation typique :**\n\n```java\nfor (var entry : map.entrySet()) {\n    System.out.println(entry.getKey() + \" -> \" + entry.getValue());\n}\n```\n\n---\n\n### **R√©sum√©**\n\n‚úÖ **Types primitifs vs Wrappers** (Auto-boxing, Unboxing)  \n‚úÖ **Promotion de type & casting explicite**  \n‚úÖ **Op√©rations arithm√©tiques et bool√©ennes**  \n‚úÖ **Pr√©c√©dence des op√©rateurs**  \n‚úÖ **Inf√©rence de type avec `var`**\n\n---\n[[Java]] [[Certification Java 17]]"
    },
    {
        "id": "d27e1fa6-a6f5-4430-ae47-04f0792380f4",
        "title": "Certification Java 17 - Contr√¥le du Flux d'Ex√©cution",
        "description": "---\nid: 6e8b33a4-8d4c-4291-b3eb-f221452b3430\n---\n## **5.1. Structures de contr√¥le (`if/else`, `switch`, `while`, `for`, `do-while`)**\n\n### **`if/else` : Condition simple**\n\n```java\nint age = 20;\nif (age >= 18) {\n    System.out.println(\"Majeur\");\n} else {\n    System.out.println(\"Mineur\");\n}\n```\n\nüìå **Les blocs `{}` sont obligatoires si plusieurs instructions sont pr√©sentes.**\n\n### **Op√©rateur ternaire (`? :`)**\n\n```java\nString statut = (age >= 18) ? \"Majeur\" : \"Mineur\";\nSystem.out.println(statut);\n```\n\n---\n\n### **`switch` : Remplace plusieurs `if/else`**\n\n```java\nint jour = 3;\nswitch (jour) {\n    case 1 -> System.out.println(\"Lundi\");\n    case 2 -> System.out.println(\"Mardi\");\n    case 3 -> System.out.println(\"Mercredi\");\n    default -> System.out.println(\"Jour inconnu\");\n}\n```\n\nüìå **Depuis Java 12**, `switch` retourne une **valeur** directement :\n\n```java\nString jourNom = switch (jour) {\n    case 1 -> \"Lundi\";\n    case 2 -> \"Mardi\";\n    case 3 -> \"Mercredi\";\n    default -> \"Jour inconnu\";\n};\nSystem.out.println(jourNom);\n```\n\n---\n\n### **`while` : Ex√©cution tant que la condition est vraie**\n\n```java\nint i = 0;\nwhile (i < 3) {\n    System.out.println(i);\n    i++;\n}\n```\n\nüìå **Utile quand on ne sait pas √† l'avance combien d'it√©rations seront n√©cessaires.**\n\n---\n\n### **`do-while` : Ex√©cute **au moins une fois** avant de tester la condition**\n\n```java\nint i = 0;\ndo {\n    System.out.println(i);\n    i++;\n} while (i < 3);\n```\n\n---\n\n### **`for` : Boucle avec un compteur**\n\n```java\nfor (int i = 0; i < 3; i++) {\n    System.out.println(i);\n}\n```\n\n### **`for-each` : Parcourir une collection**\n\n```java\nList<String> fruits = List.of(\"Pomme\", \"Banane\", \"Orange\");\nfor (String fruit : fruits) {\n    System.out.println(fruit);\n}\n```\n\nüìå **Plus lisible que `for (int i = 0; i < list.size(); i++)`**\n\n---\n\n## **5.2. Expressions `switch` et Pattern Matching**\n\nDepuis **Java 16+, `switch` permet du Pattern Matching**, √©vitant les conversions manuelles.\n\n### **Pattern Matching (`instanceof`)**\n\n**Avant Java 16**\n\n```java\nObject obj = \"Bonjour\";\nif (obj instanceof String) {\n    String s = (String) obj;  // Cast manuel obligatoire\n    System.out.println(s.length());\n}\n```\n\nüìå **Avec Java 16+, pas besoin de cast explicite :**\n\n```java\nif (obj instanceof String s) {\n    System.out.println(s.length()); // Automatique !\n}\n```\n\n---\n\n### **Pattern Matching avec `switch`** _(Java 17)_\n\nüìå **Permet d'√©viter des `if/else` imbriqu√©s**\n\n```java\nObject obj = 42;\n\nString resultat = switch (obj) {\n    case Integer i -> \"C'est un entier : \" + i;\n    case String s -> \"C'est une cha√Æne : \" + s;\n    default -> \"Type inconnu\";\n};\nSystem.out.println(resultat);\n```\n\nüìå **Ajout de conditions (`when`)**\n\n```java\nObject obj = 50;\nswitch (obj) {\n    case Integer i when i > 10 -> System.out.println(\"Nombre sup√©rieur √† 10\");\n    case Integer i -> System.out.println(\"Nombre inf√©rieur ou √©gal √† 10\");\n    default -> System.out.println(\"Autre type\");\n}\n```\n\n---\n\n## **5.3. Instructions `break` et `continue`**\n\n### **`break` : Sortie imm√©diate d'une boucle**\n\n```java\nfor (int i = 0; i < 5; i++) {\n    if (i == 3) break;  // Arr√™te la boucle d√®s que i == 3\n    System.out.println(i);\n}\n```\n\n**Sortie :**\n\n```\n0\n1\n2\n```\n\n### **`continue` : Passe directement √† l‚Äôit√©ration suivante**\n\n```java\nfor (int i = 0; i < 5; i++) {\n    if (i == 3) continue;  // Ignore l'affichage du 3\n    System.out.println(i);\n}\n```\n\n**Sortie :**\n\n```\n0\n1\n2\n4\n```\n\nüìå **Utilisation dans `while`**\n\n```java\nint i = 0;\nwhile (i < 5) {\n    i++;\n    if (i % 2 == 0) continue; // Ignore les nombres pairs\n    System.out.println(i);\n}\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Structures de contr√¥le :** `if/else`, `switch`, `while`, `for`, `do-while`  \n‚úÖ **`switch` moderne avec pattern matching** (Java 17)  \n‚úÖ **Pattern Matching (`instanceof` avec variables)**  \n‚úÖ **`break` pour arr√™ter une boucle**  \n‚úÖ **`continue` pour passer √† l‚Äôit√©ration suivante**\n\n---\n"
    },
    {
        "id": "1d5c0267-8703-4ef6-9e3d-2c9bc2f4fba4",
        "title": "Cucumber",
        "description": "---\nid: 03afbb9c-cf5e-4cd9-8c81-db00cb35b56b\n---\n# Rapidement c'est quoi‚ùì\n\nCucumber est un outil de test d'automatisation bas√© sur le langage [[Gherkin]]. Il permet aux non-d√©veloppeurs (ex: testeurs, analystes fonctionnels) de d√©crire des sc√©narios de test de mani√®re claire et concise, facilitant la collaboration entre les √©quipes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCucumber utilise le langage [[Gherkin]], un langage simple et lisible par tous, bas√© sur des mots cl√©s comme \"Given\", \"When\", et \"Then\".  Ces mots cl√©s structurent les sc√©narios de test en d√©crivant l'√©tat initial (Given), l'action effectu√©e (When), et le r√©sultat attendu (Then).  Un exemple simple:\n\n```gherkin\nFeature: Withdrawing cash\n  Scenario: Successful withdrawal within balance\n    Given Alice has $234.56 in their account\n    When Alice tries to withdraw $200.00\n    Then the withdrawal is successful\n\n  Scenario: Declined withdrawal in excess of balance\n    Given Hamza has $198.76 in their account\n    When Hamza tries to withdraw $200.00\n    Then the withdrawal is declined\n```\n\nLes d√©veloppeurs impl√©mentent ensuite le code qui correspond √† chaque √©tape (\"Given\", \"When\", \"Then\").  Cette s√©paration des pr√©occupations (s√©paration entre la sp√©cification du test et son impl√©mentation) am√©liore la collaboration, la lisibilit√© et la maintenabilit√© des tests.  Cucumber peut √™tre int√©gr√© √† de nombreux frameworks de test (comme [[Selenium]], [[Cypress]] via `cypress-cucumber-preprocessor`), permettant ainsi d'automatiser l'ex√©cution des sc√©narios.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Collaboration am√©lior√©e:**  Permet une communication plus claire entre les √©quipes techniques et non-techniques. Les tests sont √©crits dans un langage compr√©hensible par tous.\n* **Maintenance facilit√©e:**  La s√©paration des sp√©cifications et de l'impl√©mentation rend les tests plus faciles √† maintenir et √† mettre √† jour.\n* **Tests plus lisibles:** Le format [[Gherkin]] rend les tests plus clairs et plus faciles √† comprendre, m√™me pour les personnes non impliqu√©es dans leur d√©veloppement.\n* **Documentation vivante:** Les sc√©narios [[Gherkin]] servent √©galement de documentation ex√©cutable du syst√®me.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  La mise en place et l'utilisation efficace de Cucumber peuvent n√©cessiter un certain temps d'apprentissage, notamment pour d√©finir des conventions claires et coh√©rentes.\n* **N√©cessite une bonne collaboration:**  Le succ√®s de Cucumber d√©pend fortement de la collaboration entre les √©quipes et d'une bonne compr√©hension des conventions utilis√©es.  Des d√©finitions ambig√ºes des \"Given\", \"When\" et \"Then\" peuvent rendre les tests difficiles √† maintenir.\n* **Peut √™tre verbeux:** Pour des tests complexes, la description [[Gherkin]] peut devenir assez longue et d√©taill√©e.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    }
]