[
    {
        "id": "3cba1234-4473-42ca-81cb-131e4e4bca73",
        "title": "Racine",
        "description": ""
    },
    {
        "id": "8b9b4ca8-2a9a-4af3-96cf-7aabd0fc88ea",
        "title": "Concept supprim√©",
        "description": ""
    },
    {
        "id": "a1786998-f5b9-49ba-95c3-fa9c14e40413",
        "title": "AWS Lambda",
        "description": "---\nid: 574373b1-97bf-4179-87b9-88dc8fc613cf\n---\n# Rapidement c'est quoi‚ùì\n\nAWS Lambda est un service [[Function as a Service (FaaS)]] d'[[AWS]].  Il permet d'ex√©cuter du code sans g√©rer d'infrastructure serveur.  Vous fournissez le code, et [[AWS]] s'occupe du reste.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAWS Lambda est un service de calcul sans serveur qui permet aux d√©veloppeurs d'ex√©cuter du code en r√©ponse √† des √©v√©nements sans provisionner ou g√©rer des serveurs.  Vous √©crivez votre code (fonctions) dans plusieurs langages support√©s ([[Node.js]], [[Python]], [[Java]], [[C#]], [[Go]], [[Ruby]], etc.), le d√©ployez sur [[AWS]], et Lambda s'occupe de l'ex√©cution, du scaling automatique et de la facturation uniquement en fonction de l'utilisation effective.  Chaque fonction est d√©clench√©e par un √©v√©nement, tel qu'une modification dans un [[Bucket S3]] , une requ√™te [[API Gateway]], une entr√©e dans une file [[SQS]], ou un √©v√®nement planifi√© avec [[CloudWatch Events]].\n\nLambda g√®re automatiquement le scaling : si plusieurs √©v√©nements se produisent simultan√©ment, Lambda lance plusieurs instances de votre fonction pour g√©rer la charge.  L'inverse est √©galement vrai : si aucune requ√™te n'est effectu√©e, aucune ressource n'est consomm√©e et vous ne payez rien.  La gestion des ressources (m√©moire, temps d'ex√©cution, etc.) est d√©finie lors de la configuration de la fonction.  Lambda propose √©galement des fonctionnalit√©s avanc√©es comme les versions, les alias, les couches (pour partager du code commun entre plusieurs fonctions) et l'int√©gration avec d'autres services [[AWS]].  Le monitoring et le logging sont int√©gr√©s via [[CloudWatch]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Sans serveur (Serverless):** Pas besoin de g√©rer d'infrastructure, ce qui r√©duit consid√©rablement le co√ªt et la complexit√©.\n* **Scaling automatique:** Lambda s'adapte automatiquement √† la demande, garantissant la disponibilit√© et la performance.\n* **Facturation √† l'utilisation:** Vous ne payez que pour le temps d'ex√©cution effectif de votre code.\n* **Int√©gration avec l'√©cosyst√®me [[AWS]]:**  S'int√®gre facilement avec de nombreux autres services [[AWS]], permettant de cr√©er des applications complexes et robustes.\n* **Langages multiples support√©s:** Large choix de langages de programmation pour d√©velopper vos fonctions.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Dur√©e d'ex√©cution limit√©e:**  Les fonctions Lambda ont une dur√©e d'ex√©cution maximale (variable selon la configuration).  Les t√¢ches longues doivent √™tre trait√©es diff√©remment (par exemple, en utilisant des files d'attente et des fonctions plus courtes).\n* **D√©bogage plus complexe:** Le d√©bogage peut √™tre plus difficile que dans une application traditionnelle, n√©cessitant des outils et des techniques sp√©cifiques.\n* **Cold starts:** La premi√®re ex√©cution d'une fonction peut prendre un peu plus de temps (cold start), ce qui peut affecter les performances pour les requ√™tes occasionnelles.\n* **Verrouillage fournisseur:**  Le code est ex√©cut√© sur l'infrastructure AWS, ce qui cr√©e une d√©pendance envers ce fournisseur.\n* **Gestion des √©tats:** La persistance des donn√©es entre les ex√©cutions de fonctions n√©cessite l'utilisation de services externes comme [[DynamoDB]].\n\n---\n# A quoi c'est li√© ? ü™¢\n\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "f9aee61a-9901-45a2-b522-c3dd3d9f0f52",
        "title": "Certification Java 17 - Acc√®s aux Bases de Donn√©es avec JDBC",
        "description": "---\nid: 8b4f3380-cc59-43fe-baca-4e83b06bb405\n---\n## **11.1. Connexion √† une base de donn√©es (`DriverManager`, `DataSource`)**\n\nJDBC (**Java Database Connectivity**) permet √† une application Java de se connecter √† une base de donn√©es.\n\n### **1. Chargement du driver JDBC**\n\nüìå **Depuis Java 6, le chargement est automatique si le driver est dans le classpath.**\n\n```java\nClass.forName(\"org.postgresql.Driver\"); // PostgreSQL\nClass.forName(\"com.mysql.cj.jdbc.Driver\"); // MySQL\n```\n\nüìå **Plus besoin de `Class.forName()` avec JDBC 4.0+.**\n\n---\n\n### **2. Connexion avec `DriverManager`**\n\n```java\nimport java.sql.*;\n\npublic class ConnexionJDBC {\n    public static void main(String[] args) {\n        String url = \"jdbc:mysql://localhost:3306/ma_base\";\n        String user = \"root\";\n        String password = \"password\";\n\n        try (Connection conn = DriverManager.getConnection(url, user, password)) {\n            System.out.println(\"Connexion r√©ussie !\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\nüìå **Utilisation d‚Äôun `try-with-resources` pour fermer automatiquement la connexion.**\n\n---\n\n### **3. Connexion avec `DataSource` (Meilleure Pratique)**\n\nüìå **`DataSource` permet une gestion optimis√©e des connexions.**\n\n```java\nimport javax.sql.DataSource;\nimport com.mysql.cj.jdbc.MysqlDataSource;\n\npublic class ConnexionDataSource {\n    public static void main(String[] args) throws Exception {\n        MysqlDataSource ds = new MysqlDataSource();\n        ds.setURL(\"jdbc:mysql://localhost:3306/ma_base\");\n        ds.setUser(\"root\");\n        ds.setPassword(\"password\");\n\n        try (Connection conn = ds.getConnection()) {\n            System.out.println(\"Connexion r√©ussie !\");\n        }\n    }\n}\n```\n\nüìå **Utilis√© dans les serveurs d‚Äôapplication avec un pool de connexions.**\n\n---\n\n## **11.2. Ex√©cution de requ√™tes (`Statement`, `PreparedStatement`, `CallableStatement`)**\n\n### **1. Requ√™te avec `Statement` (‚ö† Vuln√©rable aux injections SQL)**\n\n```java\ntry (Connection conn = DriverManager.getConnection(url, user, password);\n     Statement stmt = conn.createStatement()) {\n\n    ResultSet rs = stmt.executeQuery(\"SELECT * FROM utilisateurs\");\n\n    while (rs.next()) {\n        System.out.println(rs.getString(\"nom\"));\n    }\n}\n```\n\nüìå **‚ö† √âviter `Statement` pour les requ√™tes contenant des entr√©es utilisateur (risque d‚Äôinjection SQL).**\n\n---\n\n### **2. Requ√™te s√©curis√©e avec `PreparedStatement`**\n\n```java\nString sql = \"SELECT * FROM utilisateurs WHERE email = ?\";\ntry (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n    pstmt.setString(1, \"user@mail.com\");\n    ResultSet rs = pstmt.executeQuery();\n\n    while (rs.next()) {\n        System.out.println(rs.getString(\"nom\"));\n    }\n}\n```\n\nüìå **S√©curise la requ√™te en emp√™chant les injections SQL.**\n\n---\n\n### **3. Insertion avec `PreparedStatement`**\n\n```java\nString sql = \"INSERT INTO utilisateurs (nom, email) VALUES (?, ?)\";\ntry (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n    pstmt.setString(1, \"Alice\");\n    pstmt.setString(2, \"alice@mail.com\");\n    pstmt.executeUpdate(); // Ex√©cute l‚Äôinsertion\n}\n```\n\nüìå **`executeUpdate()` pour `INSERT`, `UPDATE`, `DELETE`.**\n\n---\n\n### **4. Appel d‚Äôune proc√©dure stock√©e avec `CallableStatement`**\n\n```java\nString sql = \"{call ajouter_utilisateur(?, ?)}\";\ntry (CallableStatement cstmt = conn.prepareCall(sql)) {\n    cstmt.setString(1, \"Alice\");\n    cstmt.setString(2, \"alice@mail.com\");\n    cstmt.execute();\n}\n```\n\nüìå **Utilis√© pour ex√©cuter des proc√©dures stock√©es SQL.**\n\n---\n\n## **11.3. Gestion des transactions (`commit`, `rollback`)**\n\nPar d√©faut, **chaque requ√™te est valid√©e (`commit`) automatiquement**.  \nüìå **Pour g√©rer manuellement une transaction, on d√©sactive l‚Äôauto-commit.**\n\n---\n\n### **1. D√©but d‚Äôune transaction (`setAutoCommit(false)`)**\n\n```java\ntry (Connection conn = DriverManager.getConnection(url, user, password)) {\n    conn.setAutoCommit(false); // D√©sactive l‚Äôauto-commit\n\n    try (PreparedStatement pstmt1 = conn.prepareStatement(\"INSERT INTO comptes VALUES (?, ?)\");\n         PreparedStatement pstmt2 = conn.prepareStatement(\"INSERT INTO transactions VALUES (?, ?)\")) {\n\n        pstmt1.setInt(1, 1);\n        pstmt1.setDouble(2, 1000.00);\n        pstmt1.executeUpdate();\n\n        pstmt2.setInt(1, 1);\n        pstmt2.setDouble(2, -500.00);\n        pstmt2.executeUpdate();\n\n        conn.commit(); // Valide la transaction\n    } catch (SQLException e) {\n        conn.rollback(); // Annule toutes les op√©rations\n        e.printStackTrace();\n    }\n}\n```\n\nüìå **Si une erreur survient, `rollback()` annule les modifications.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Connexion JDBC : `DriverManager` (basique), `DataSource` (optimis√©, recommand√©).**  \n‚úÖ **Ex√©cution de requ√™tes :**\n\n- `Statement` (‚ö† √† √©viter pour les entr√©es utilisateur).\n- `PreparedStatement` (s√©curis√© contre les injections SQL).\n- `CallableStatement` (appelle une proc√©dure stock√©e).  \n    ‚úÖ **Gestion des transactions : `commit`, `rollback`, `setAutoCommit(false)`.**\n"
    },
    {
        "id": "8e5aa410-7105-45e7-b5bc-f1300195e660",
        "title": "Analog.js",
        "description": "---\nid: 4775911f-b142-4a2e-8954-bb74d1475de6\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nAnalogJs est un [[m√©ta-framework]] pour [[Angular]] qui ajoute des fonctionnalit√©s comme le routage automatique, le rendu c√¥t√© serveur, et la g√©n√©ration de sites statiques. Il simplifie le d√©veloppement en int√©grant des outils modernes comme [[Vite]] et [[Vitest]].\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAnalogJs √©tend [[Angular]] avec des fonctionnalit√©s pratiques :\n\n- **Routage bas√© sur le syst√®me de fichiers** : Les routes sont automatiquement g√©n√©r√©es √† partir de la structure des fichiers.\n- **Rendu c√¥t√© serveur ([[Server Side Rendering (SSR)]])** et **g√©n√©ration de sites statiques** ([[Server Side Generation (SSG)]]) : Permet d‚Äôam√©liorer le SEO et la vitesse de chargement.\n- **Support Markdown** : Permet d'utiliser des fichiers Markdown comme contenu.\n- **Routes API int√©gr√©es** : Cr√©e facilement des routes API dans la m√™me application.\n- **Structure simplifi√©e des composants** : Un seul fichier par composant, contrairement √† l'approche Angular traditionnelle avec plusieurs fichiers.\n\nAnalogJs utilise Vite pour la compilation rapide et Vitest pour les tests, offrant une exp√©rience moderne et rapide.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplification du routage** : Gr√¢ce au routage bas√© sur le syst√®me de fichiers.\n- **Rendu c√¥t√© serveur et sites statiques** : Am√©liore la performance et le SEO.\n- **Support Markdown** : Id√©al pour cr√©er du contenu rapidement.\n- **Structure de composants simplifi√©e** : Un fichier par composant pour plus de clart√©.\n- **Int√©gration de [[Vite]] et [[Vitest]]** : D√©veloppement rapide et tests efficaces.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance √† [[Angular]]** : N√©cessite [[Angular]], ce qui peut √™tre contraignant.\n- **Moins mature** : Moins de documentation et de communaut√© par rapport √† [[Nuxt.js]] ou [[Next.js]].\n- **Courbe d'apprentissage** : Complexe pour les d√©butants Angular ou SSR.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[JavaScript]] [[Typescript]]"
    },
    {
        "id": "dd0c0816-84ee-4e93-991a-8f8964cb56ec",
        "title": "Anglais - mot et expression",
        "description": "---\nid: 7d823355-dc92-4f2a-ae2c-e655a70688b1\n---\ngibberish: gibberish\nYou are talking gibberish: Tu dis n'importe quoi\ngrasshopper: sauterelle\nkneehigh to a grasshopper: haut comme trois pomme"
    },
    {
        "id": "56e1c640-ad12-4cc9-8546-43e7a58f1e9a",
        "title": "Annotation (java)",
        "description": "---\nid: 3822ed8e-7f6c-4ff8-a60e-b547afc6523d\n---\n# Rapidement c'est quoi‚ùì\n\nLes annotations [[Java]] sont des m√©tadonn√©es qui fournissent des informations suppl√©mentaires sur le code sans affecter son ex√©cution. Elles sont utilis√©es pour annoter des classes, m√©thodes, champs, etc.,  guidant le compilateur, les outils d'ex√©cution ou d'autres processus, comme [[Aspect Oriented Programming.md]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nEn [[Java]], les annotations sont des balises plac√©es avant les √©l√©ments de code (classes, m√©thodes, champs, etc.). Elles sont d√©finies √† l'aide de l'annotation `@interface`.  Elles ne modifient pas le comportement du code en lui-m√™me, mais fournissent des informations contextuelles pour diff√©rents outils et processus.\n\n**Structure d'une annotation:**\n\nUne annotation est d√©finie avec le mot cl√© `@interface` suivi du nom de l'annotation.  Elle peut contenir des √©l√©ments (attributs) avec des valeurs par d√©faut ou non.  Par exemple :\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface MyAnnotation {\n    String value() default \"default value\";\n    int number() default 0;\n}\n```\n\nDans cet exemple :\n\n* `@Retention(RetentionPolicy.RUNTIME)` sp√©cifie que l'annotation sera disponible au runtime (l'ex√©cution du programme).  Il existe d'autres valeurs possibles: `SOURCE` (disponible uniquement √† la compilation) et `CLASS` (disponible √† la compilation et au chargement de la classe). Il faut savoir qu'il y a tr√®s peu d'int√©r√™t d'utiliser autres chose de RUNTIME car c'est la seule valeur qui conserve l'annotation au runtime, et qui permet donc de faire des traitements.\n* `@Target(ElementType.METHOD)` indique que cette annotation ne peut √™tre appliqu√©e qu'aux m√©thodes.  D'autres valeurs possibles pour `ElementType` incluent `TYPE`, `FIELD`, `CONSTRUCTOR`, `PARAMETER`, etc.\n* `String value() default \"default value\";` d√©finit un attribut `value` de type String avec une valeur par d√©faut.\n* `int number() default 0;` d√©finit un attribut `number` de type int avec une valeur par d√©faut.\n\nL'annotation est ensuite utilis√©e dans le code ainsi :\n\n```java\n@MyAnnotation(value = \"hello\", number = 5)\npublic void myMethod() {\n  // ...\n}\n```\n\nLe compilateur, les outils (frameworks, IDEs) ou le code au runtime peuvent alors interpr√©ter ces informations pour effectuer diff√©rentes actions. Par exemple, un framework pourrait utiliser une annotation pour injecter des d√©pendances ou un outil de test pour identifier les m√©thodes √† tester.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **M√©taprogrammation:** Permet d'ajouter des informations au code sans le modifier directement, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **R√©duction de la redondance:**  Evite la duplication de code en centralisant les informations dans les annotations.\n* **Extensibilit√©:** Facilite l'ajout de fonctionnalit√©s sans modifier le code source existant.\n* **Framework-agnostique:**  Les annotations peuvent √™tre utilis√©es par diff√©rents frameworks et outils.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:** Une sur-utilisation des annotations peut rendre le code difficile √† comprendre.\n* **D√©pendances:**  Le code qui utilise les annotations peut d√©pendre de la pr√©sence de certains outils ou frameworks.\n* **Performances:**  Le traitement des annotations au runtime peut avoir un impact sur les performances, bien que g√©n√©ralement n√©gligeable.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "744b0bb3-e2f9-44bd-badb-57383ee57ed2",
        "title": "Ansible Vault",
        "description": "---\nid: ae62d225-067f-4a01-9d22-52fdabf93106\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nAnsible Vault est un outil d'[[Ansible]] qui permet de chiffrer et prot√©ger des donn√©es sensibles dans des fichiers, comme des mots de passe ou des cl√©s API, afin de les utiliser dans des playbooks Ansible sans exposer ces informations en texte clair\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAnsible Vault chiffre des fichiers ou des cha√Ænes de caract√®res, les rendant illisibles sans un mot de passe sp√©cifique. Les principales commandes sont :\n\n- **`ansible-vault create`** : Cr√©e un fichier chiffr√© √† partir de z√©ro.\n- **`ansible-vault encrypt`** : Chiffre un fichier existant.\n- **`ansible-vault decrypt`** : D√©chiffre un fichier pour le rendre lisible.\n- **`ansible-vault edit`** : Permet de modifier un fichier chiffr√© sans le d√©chiffrer manuellement.\n- **`ansible-vault encrypt_string`** : Chiffre une cha√Æne de caract√®res (ex. un mot de passe) pour l'inclure dans un fichier ou un playbook.\n\nIl est aussi possible de g√©rer plusieurs fichiers Vault avec l'option **`-vault-id`**, permettant de sp√©cifier diff√©rents mots de passe pour diff√©rents environnements. L'option **`-ask-vault-pass`** permet de saisir le mot de passe manuellement √† l'ex√©cution.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **S√©curisation des donn√©es sensibles** : Prot√®ge efficacement les informations sensibles en les chiffrant.\n- **Facilit√© d'int√©gration avec [[Ansible]]** : Fonctionne de mani√®re fluide avec les playbooks Ansible.\n- **Prise en charge de plusieurs fichiers Vault** : Permet de g√©rer diff√©rents environnements de mani√®re s√©curis√©e avec **`-vault-id`**.\n- **Chiffrement granulaire** : Possibilit√© de chiffrer uniquement des valeurs sp√©cifiques avec **`encrypt_string`**.\n- **Interface simple** : Utilisation en ligne de commande intuitive pour cr√©er, modifier ou d√©chiffrer des fichiers.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Gestion des mots de passe** : Si le mot de passe Vault est perdu ou compromis, l'acc√®s aux donn√©es chiffr√©es devient impossible.\n- **D√©pendance aux mots de passe** : Chaque fichier chiffr√© n√©cessite un mot de passe pour y acc√©der, ce qui peut devenir contraignant dans des environnements complexes.\n- **Pas de solution native pour le partage s√©curis√©** : Le partage des fichiers Vault entre plusieurs utilisateurs n√©cessite une gestion manuelle des mots de passe, ce qui peut √™tre source d‚Äôerreurs.\n- **Performance** : Bien que les fichiers chiffr√©s soient l√©gers, l'utilisation r√©p√©t√©e de commandes de chiffrement/d√©chiffrement peut affecter les performances dans des environnements de grande √©chelle.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Python]] [[MOC_DevSecOps]]"
    },
    {
        "id": "d5cddd3c-a911-4b5f-9b0a-1ee9e69b5ae6",
        "title": "Apache Apisix",
        "description": "---\nid: 82d7deb1-0645-4023-8a4c-7c1e96d022f5\n---\n# Rapidement c'est quoi‚ùì\n\nApache APISIX est une [[API Gateway]] open-source, l√©g√®re et performante, con√ßue pour les environnements cloud natifs.  Elle permet de g√©rer, router et s√©curiser le trafic vers vos [[Micros services]] et APIs.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache APISIX est une passerelle d'API dynamique et haute performance, √©crite en [[Lua]] et bas√©e sur [[Nginx]].  Elle se distingue par son architecture enti√®rement bas√©e sur le plugin, ce qui permet une extensibilit√© et une personnalisation exceptionnelles.  Au lieu de reconfigurer le serveur √† chaque changement, APISIX utilise une architecture de donn√©es dynamique,  mettant √† jour ses routes et ses configurations en temps r√©el sans n√©cessiter de red√©marrage.\n\nSes fonctionnalit√©s cl√©s incluent :\n\n* **Routage dynamique et gestion des routes:**  APISIX permet de d√©finir des routes pour diriger le trafic vers diff√©rents services backend en fonction de crit√®res comme l'h√¥te, l'URL, les en-t√™tes HTTP, etc.  Ces routes peuvent √™tre modifi√©es dynamiquement sans interruption de service.\n* **Gestion de la s√©curit√©:**  Int√®gre des m√©canismes de s√©curit√© robustes tels que l'authentification, l'autorisation (via des plugins), le WAF (Web Application Firewall) et la protection contre les DDoS.\n* **Gestion du trafic:**  Offre des fonctionnalit√©s de gestion du trafic avanc√©es comme le [[load balancing]], le [[circuit breaker]] et la limitation de d√©bit.\n* **Plugins extensibles:**  Son architecture plug-in permet d'√©tendre ses fonctionnalit√©s √† l'infini.  Des plugins sont disponibles pour la gestion des logs, la surveillance, l'int√©gration avec des services de monitoring, etc.\n* **Gestion des m√©tadonn√©es:**  Permet de stocker et de g√©rer des m√©tadonn√©es associ√©es aux routes et aux services.\n* **Compatibilit√© [[Kubernetes]]:**  APISIX s'int√®gre bien avec Kubernetes et d'autres orchestrateurs de conteneurs.\n\nContrairement aux passerelles API traditionnelles qui n√©cessitent des red√©marrages pour mettre √† jour la configuration, APISIX offre une gestion dynamique, permettant des mises √† jour en temps r√©el et une haute disponibilit√©.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Haute performance et faible latence:**  APISIX est connu pour sa performance exceptionnelle.\n* **Extensibilit√© gr√¢ce √† l'architecture plug-in:**  Permet d'ajouter facilement de nouvelles fonctionnalit√©s.\n* **Gestion dynamique de la configuration:**  Pas de temps d'arr√™t lors des mises √† jour.\n* **Open-source et communaut√© active:**  B√©n√©ficie d'un support communautaire important.\n* **Int√©gration avec [[Kubernetes]] et d'autres outils cloud natifs.**\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage potentiellement raide:**  La ma√Ætrise compl√®te de l'utilisation des plugins peut demander un certain temps.\n* **D√©pendance √† [[Lua]]:**  N√©cessite une certaine familiarit√© avec le langage Lua pour d√©velopper des plugins personnalis√©s.\n* **La documentation peut parfois manquer de clart√© pour certains aspects avanc√©s.**\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "eb8de89e-4a18-43d3-8bd0-33475992f124",
        "title": "Apache Karaf (OSGi)",
        "description": "---\nid: ef4589e3-be7d-49b4-bb8f-550ea8a049d0\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùìblabla\n\nKaraf est un conteneur d'application l√©ger bas√© sur [[Open Service Gateway initiative (OSGi)]], permettant de d√©ployer, g√©rer et configurer des applications [[Open Service Gateway initiative (OSGi)]] de mani√®re simplifi√©e, avec des fonctionnalit√©s avanc√©es comme la gestion dynamique des configurations, le d√©ploiement √† chaud et l'int√©gration avec divers outils.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache Karaf est un conteneur d'application permettant de g√©rer des applications [[Open Service Gateway initiative (OSGi)]]. Il offre plusieurs fonctionnalit√©s suppl√©mentaires par rapport aux autres impl√©mentations [[Open Service Gateway initiative (OSGi)]], telles que :\n\n- **Console Interactive** : Une interface en ligne de commande pour g√©rer les bundles, services et configurations.\n- **Karaf Features** : Permet l'installation de groupes de bundles et configurations d'un coup.\n- **Support Maven** : D√©ploiement direct de bundles depuis un d√©p√¥t Maven.\n- **Blueprints ([[Apache Aries]])** : Configuration d√©clarative des services [[Open Service Gateway initiative (OSGi)]] via des fichiers XML.\n- **Gestion Dynamique des Configurations** : Permet de modifier les configurations en direct sans red√©marrer l'application.\n- **Hot Deployment** : D√©ploiement et mise √† jour des bundles sans red√©marrage du serveur.\n- **Int√©gration avec des frameworks** : Int√©gration facile avec des outils comme [[Apache Camel]], [[ActiveMQ]] et [[CXF]] pour les services d'int√©gration, la messagerie et les services web.\n- **Gestion de Clusters** : Avec [[Karaf Cellar]], permet de g√©rer et synchroniser des clusters [[Open Service Gateway initiative (OSGi)]].\n- **S√©curisation des configurations** : [[Karaf Vault]] prot√®ge les informations sensibles dans les fichiers de configuration.\n- **[[JMX]] et Monitoring** : Surveillance des services via l'int√©gration avec [[JMX]] et [[Jolokia]].\n- **Commandes Personnalis√©es** : Cr√©ation de commandes personnalis√©es pour automatiser les t√¢ches courantes.\n- **Support [[Java EE]] et [[Micros services]]** : Permet de d√©ployer des applications [[Java EE]] et de supporter des architectures [[Micros services]] gr√¢ce √† son mod√®le modulaire.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Console interactive** : Facilit√© de gestion des applications via une interface simple.\n- **Hot Deployment** : Mise √† jour des applications sans perturber le service, id√©al pour des environnements de production.\n- **Int√©gration avec des outils tiers** : Connexions pr√™tes √† l'emploi avec des technologies comme [[Apache Camel]],[[ ActiveMQ]], et [[CXF]].\n- **Gestion dynamique des configurations** : Modifications √† la vol√©e sans red√©marrage n√©cessaire, simplifiant l'administration.\n- **Blueprints** : Approche d√©clarative facilitant la gestion des services [[Open Service Gateway initiative (OSGi)]], similaire √† [[Spring Framework]].\n- **Support de [[Java EE]] et des [[Micros services]]** : Permet de d√©ployer des applications de grande √©chelle de mani√®re modulaire.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© pour les d√©butants** : L'usage d'[[Open Service Gateway initiative (OSGi)]] et de Karaf peut √™tre d√©routant pour les nouveaux utilisateurs.\n- **Configuration initiale** : La configuration des features et des bundles peut √™tre complexe et n√©cessite une bonne ma√Ætrise de l'environnement.\n- **Performance** : L'usage intensif de bundles et de services peut parfois entra√Æner une surcharge dans des applications tr√®s petites ou simples.\n- **D√©pendance au mod√®le OSGi** : Certains d√©veloppeurs pr√©f√©reront des alternatives plus simples √† OSGi pour des applications ne n√©cessitant pas un mod√®le aussi modulaire.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Java]]"
    },
    {
        "id": "75728b98-3ac9-4c30-b578-92cf0f33c975",
        "title": "Apache Lucene",
        "description": "---\nid: 73e4d839-b181-4a74-b4d5-439c03d44a43\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nApache Lucene est un framework [[Java]] destin√© √† l'indexation et √† la recherche de texte, permettant de g√©rer efficacement de grandes quantit√©s de donn√©es pour cr√©er des moteurs de recherche performants.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache Lucene fournit des outils pour indexer des documents et effectuer des recherches rapides sur des grandes bases de donn√©es textuelles. Il permet de cr√©er des moteurs de recherche en offrant des fonctionnalit√©s comme :\n\n- **Indexation** : Cr√©ation d'index invers√©s pour une recherche rapide.\n- **Recherche textuelle** : Recherche bas√©e sur des mots-cl√©s, phrases, ou expressions r√©guli√®res.\n- **Performance** : Optimisation des recherches avec des structures de donn√©es adapt√©es. Des outils comme **[[Elasticsearch]]** et **[[Apache Solr]]** utilisent Lucene pour faciliter l'int√©gration et l'utilisation dans des environnements de production √† grande √©chelle.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Haute performance** : Tr√®s rapide pour la recherche et l'indexation sur de grandes quantit√©s de donn√©es.\n- **Flexibilit√©** : Offre des options avanc√©es pour affiner les recherches (poids, synonymes, requ√™tes bool√©ennes).\n- **√âcosyst√®me riche** : Utilis√© par des outils comme [[Elasticsearch]] et [[Solr]], ce qui le rend encore plus accessible pour des cas d‚Äôusage complexes.\n- **Support de plusieurs formats** : Peut indexer des fichiers texte, XML, JSON, etc.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© d'int√©gration** : Peut √™tre difficile √† configurer et √† int√©grer directement dans des projets sans outils suppl√©mentaires.\n- **Consommation m√©moire** : L'indexation et la recherche sur de tr√®s grandes bases de donn√©es peuvent n√©cessiter des ressources importantes.\n- **Pas de GUI natif** : Ne propose pas d'interface graphique de gestion, n√©cessitant souvent des outils externes comme Solr ou Elasticsearch pour faciliter l'utilisation.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Java]]"
    },
    {
        "id": "555847cc-90e9-4281-9f5f-ca65cb84ef39",
        "title": "ArgoCD",
        "description": "---\nid: fc23560f-daa5-461d-8a6b-7215c2cf2657\n---\n# Rapidement c'est quoi‚ùì\n\nArgo CD est un outil de gestion de configuration [[GitOps]] pour [[Kubernetes]].  Il synchronise l'√©tat d√©clar√© de votre infrastructure dans un d√©p√¥t [[Git]] avec l'√©tat r√©el de votre cluster [[Kubernetes]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nArgo CD est un syst√®me de d√©ploiement et de gestion continue bas√© sur le principe [[GitOps]].  Il fonctionne en surveillant un d√©p√¥t [[Git]] sp√©cifi√© pour les modifications apport√©es √† des manifestes [[Kubernetes]] .  Lorsqu'une modification est d√©tect√©e, Argo CD compare l'√©tat souhait√© (d√©fini dans le d√©p√¥t Git) √† l'√©tat actuel du cluster [[Kubernetes]].  Il effectue ensuite les actions n√©cessaires pour synchroniser ces deux √©tats, en appliquant les modifications, cr√©ant, mettant √† jour ou supprimant les ressources [[Kubernetes]].  Cela permet un d√©ploiement automatis√©, fiable et tra√ßable des applications sur [[Kubernetes]].\n\nArgo CD utilise un \"Declarative Configuration\" : l'√©tat souhait√© du cluster est enti√®rement d√©fini dans des fichiers de configuration versionn√©s dans un d√©p√¥t [[Git]] (g√©n√©ralement avec un syst√®me de branchement [[Git]] pour g√©rer les d√©ploiements et les rollbacks).  Cela facilite le suivi des changements, la collaboration et l'auditabilit√©.  La visualisation de l'√©tat du d√©ploiement, ainsi que l'historique des modifications et des √©ventuels √©checs, est un aspect central de la plateforme.\n\nIl ne se limite pas aux manifestes [[Kubernetes]] ; il peut g√©rer d'autres ressources en utilisant des m√©canismes d'extensions (comme les applications [[Helm]]).  L'automatisation est pouss√©e, avec la possibilit√© de configurer des notifications et des alertes lors des √©v√©nements importants.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* [[**GitOps]]:**  Adopte une approche [[GitOps]], offrant tous les avantages de la gestion de version, de la collaboration et de l'auditabilit√©.\n* **Automatisation:**  Automatise compl√®tement le processus de d√©ploiement et de gestion des applications [[Kubernetes]].\n* **Observabilit√©:**  Fournit une interface utilisateur pour surveiller l'√©tat des d√©ploiements et l'historique des changements.\n* **Fiabilit√©:**  Minimise les risques d'erreurs manuelles et assure la coh√©rence entre l'√©tat souhait√© et l'√©tat r√©el.\n* **Rollbacks faciles:**  Permet de revenir facilement √† des versions pr√©c√©dentes gr√¢ce √† l'historique [[Git]].\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© initiale:**  La configuration et l'int√©gration initiale peuvent √™tre complexes pour les utilisateurs non familiers avec [[Kubernetes]] et [[GitOps]].\n* **D√©pendance √† Git:**  Une d√©pendance totale √† un syst√®me de gestion de versions [[Git]] est n√©cessaire.\n* **Gestion des secrets:**  La gestion des secrets n√©cessite une configuration suppl√©mentaire et une int√©gration avec des solutions de gestion des secrets.\n* **Surveillance accrue n√©cessaire:**  M√™me avec l'automatisation, la surveillance du syst√®me reste cruciale pour identifier et r√©soudre les probl√®mes.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "0e691bd0-f951-4184-b231-57171dea0300",
        "title": "Aspect Oriented Programming (AOP)",
        "description": "---\nid: 648c597b-2bb8-47b8-8dbb-1ea43bf23d4c\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nL'Aspect Oriented Programming (AOP) est une technique de programmation qui permet de s√©parer les pr√©occupations transversales (cross-cutting concerns) du code principal.  Elle vise √† am√©liorer la modularit√© et la maintenabilit√© du code en regroupant des fonctionnalit√©s qui affectent plusieurs parties du programme, mais qui ne sont pas directement li√©es √† la logique m√©tier principale.  Imaginez des aspects comme la journalisation, la s√©curit√© ou la gestion des transactions, qui traversent plusieurs modules.  AOP permet de les g√©rer s√©par√©ment.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAOP introduit le concept d'**aspects**, qui sont des modules contenant du code qui s'ex√©cute √† des points sp√©cifiques du programme, appel√©s **points de jonction** (join points). Ces points de jonction sont g√©n√©ralement des √©v√©nements tels que l'appel d'une m√©thode, la cr√©ation d'un objet ou l'ex√©cution d'une exception.\n\nUn aspect est d√©fini par un ensemble de points de jonction et d'**avis** (advices). Un avis est un bloc de code qui s'ex√©cute avant, apr√®s ou autour d'un point de jonction.  On peut ainsi ajouter des fonctionnalit√©s sans modifier le code principal.\n\n**Exemple concret ([[Java]] avec [[Spring AOP]]):**\n\nImaginons une m√©thode `processOrder()` qui g√®re le traitement d'une commande.  On veut ajouter une journalisation avant et apr√®s son ex√©cution.  Avec AOP, on peut cr√©er un aspect sans modifier `processOrder()` :\n\n```java\n@Aspect\npublic class LoggingAspect {\n\n    @Before(\"execution(* com.example.OrderService.processOrder(..))\")\n    public void beforeProcessOrder(JoinPoint joinPoint) {\n        System.out.println(\"Avant traitement de la commande: \" + joinPoint.getSignature());\n    }\n\n    @After(\"execution(* com.example.OrderService.processOrder(..))\")\n    public void afterProcessOrder(JoinPoint joinPoint) {\n        System.out.println(\"Apr√®s traitement de la commande: \" + joinPoint.getSignature());\n    }\n}\n```\n\nCe code utilise Spring AOP.  `@Aspect` indique qu'il s'agit d'un aspect.  `@Before` et `@After` d√©finissent les avis qui s'ex√©cutent avant et apr√®s l'ex√©cution de `processOrder()`.  `execution(* com.example.OrderService.processOrder(..))` est un pointcut (expression qui d√©finit les points de jonction).\n\nL'impl√©mentation d'AOP varie selon les langages et les frameworks.  Certains langages ont des fonctionnalit√©s int√©gr√©es, tandis que d'autres utilisent des frameworks sp√©cifiques ([[Spring AOP]] en [[Java]], AspectJ, etc.).  Le m√©canisme sous-jacent implique souvent la modification du code bytecode (transformation du code compil√©) pour injecter le code des aspects aux points de jonction.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Modularit√© et maintenabilit√©:** S√©pare les pr√©occupations transversales du code principal, facilitant la maintenance et la compr√©hension du code.\n- **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rents modules.\n- **R√©duction de la duplication de code:** √âvite la redondance de code pour des fonctionnalit√©s transversales.\n- **Am√©lioration de la lisibilit√©:** Le code principal reste focalis√© sur la logique m√©tier.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Complexit√©:**  AOP peut introduire une complexit√© suppl√©mentaire, surtout pour des projets de petite taille.  La compr√©hension du m√©canisme et des points de jonction peut n√©cessiter une courbe d'apprentissage.\n- **D√©bogage:** Le d√©bogage peut √™tre plus difficile car le code est dispers√© entre les aspects et le code principal.\n- **Performances:**  L'ajout d'aspects peut avoir un impact l√©ger sur les performances, bien que souvent n√©gligeable.\n- **Difficult√© de test:** Tester les aspects isol√©ment peut √™tre complexe.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n\n"
    },
    {
        "id": "d7d701db-d6e0-42c9-8931-bdada3b40dda",
        "title": "AspectJ",
        "description": "---\nid: 0a9b351a-7625-4e02-a252-3dff5766d3e2\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nAspectJ est une extension du langage [[Java]] qui permet la [[Aspect Oriented Programming (AOP)]].  Il offre un moyen de modulariser les pr√©occupations transversales (cross-cutting concerns) comme la journalisation, la gestion des transactions, ou la s√©curit√©, en les s√©parant du code principal de l'application.  Cela am√©liore la lisibilit√©, la maintenabilit√© et la r√©utilisabilit√© du code.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAspectJ permet d'ajouter du code (appel√© *aspects*) √† des points sp√©cifiques dans l'ex√©cution d'un programme [[Java]], sans modifier le code source existant.  Ces points sont d√©finis par des *pointcuts*, qui sont des expressions qui s√©lectionnent des joint points (join points).  Un joint point repr√©sente un point d'ex√©cution dans le programme, comme l'appel d'une m√©thode, la cr√©ation d'un objet, ou le lancement d'une exception.\n\nLes aspects sont d√©finis dans des fichiers s√©par√©s et contiennent des *advice*, qui sont des blocs de code ex√©cut√©s avant, apr√®s, ou autour d'un joint point s√©lectionn√© par le pointcut.  AspectJ utilise un processus de compilation s√©par√© pour tisser (weave) les aspects dans le code Java.\n\n**Exemple:** Imaginons que l'on veuille logger chaque appel de m√©thode d'une classe `UserService`.  Avec AspectJ, on pourrait d√©finir un aspect comme suit :\n\n```java\npublic aspect UserServiceLogger {\n    pointcut logMethodCall(): call(* com.example.UserService.*(..));\n\n    before(): logMethodCall() {\n        System.out.println(\"Appel de m√©thode : \" + thisJoinPoint.getSignature());\n    }\n}\n```\n\nCe code d√©finit un pointcut `logMethodCall()` qui s√©lectionne tous les appels de m√©thode de la classe `com.example.UserService`.  L'advice `before()` est ex√©cut√© avant chaque appel de m√©thode s√©lectionn√©, et affiche un message de log dans la console.  `thisJoinPoint` est une variable sp√©ciale qui fournit des informations sur le joint point courant.\n\nAspectJ supporte plusieurs types d'advice : `before`, `after`, `after returning`, `after throwing`, et `around`.  L'advice `around` permet de contr√¥ler enti√®rement l'ex√©cution d'un joint point.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **S√©paration des pr√©occupations:** Am√©liore la modularit√© et la lisibilit√© du code en s√©parant les pr√©occupations transversales du code principal.\n* **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application ou m√™me dans d'autres applications.\n* **Maintenance simplifi√©e:** Les modifications des pr√©occupations transversales n'impliquent pas de modifier le code principal.\n* **Aspect non invasif:**  On peut ajouter des fonctionnalit√©s sans modifier le code source existant.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** La programmation orient√©e aspect peut avoir une courbe d'apprentissage raide, surtout pour les d√©veloppeurs qui ne sont pas familiers avec ce paradigme.\n* **D√©bogage:** Le d√©bogage peut √™tre plus complexe que dans le code [[Java]] standard, car il faut comprendre l'interaction entre les aspects et le code principal.\n* **Performance:** L'ajout d'aspects peut avoir un impact sur les performances, bien que cela soit g√©n√©ralement n√©gligeable.\n* **Complexit√© potentielle:**  Une mauvaise utilisation des aspects peut conduire √† un code plus complexe et difficile √† maintenir.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "314398fc-a56e-435e-b0bd-8438fd066367",
        "title": "Astro Starlight",
        "description": "---\nid: 3076a9fe-0aeb-4998-b3f7-43f4cb759043\n---\n# Rapidement c'est quoi‚ùì\n\nAstro Starlight est un g√©n√©rateur de sites web statiques, sp√©cifiquement con√ßu pour cr√©er des documentations, similaire √† [[VitePress]] ou [[Docusaurus]].  Il utilise [[Astro]], un framework de sites web rapides et performants.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAstro Starlight est un th√®me (ou un ensemble de composants et de configurations) pour le framework [[Astro]]. Il fournit une structure de base et des composants pr√©-construits pour faciliter la cr√©ation de sites de documentation.  Contrairement √† une solution comme [[VitePress]] qui est une application compl√®te, Starlight se base sur la flexibilit√© d'[[Astro]], permettant une plus grande personnalisation tout en conservant une structure claire pour la documentation.  Il g√®re typiquement la navigation, la mise en forme du code, la recherche et d'autres fonctionnalit√©s courantes des sites de documentation.  On √©crit le contenu de la documentation g√©n√©ralement en [[Markdown]], qui est ensuite trait√© par [[Astro]] pour g√©n√©rer le site web statique final.  Cela permet un workflow rapide, une mise √† jour facile et un excellent SEO.  La performance est un point fort gr√¢ce √† l'utilisation d'[[Astro]], qui est connu pour g√©n√©rer des sites l√©gers et rapides √† charger.  L'utilisateur final a la possibilit√© de personnaliser profond√©ment le th√®me en modifiant les fichiers de configuration et les composants int√©gr√©s.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance:**  Gr√¢ce √† [[Astro]], les sites g√©n√©r√©s sont rapides et l√©gers.\n* **Personnalisation:**  Offre une grande flexibilit√© pour adapter le th√®me √† ses propres besoins et design.\n* **Bas√© sur Astro:** B√©n√©ficie de l'√©cosyst√®me et des avantages d'[[Astro]] (performance, simplicit√©).\n* **Int√©gration [[Markdown]]:**  Simple et efficace pour la cr√©ation du contenu.\n* **Structure claire:**  Fournit une base solide et bien organis√©e pour la documentation.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Potentiellement plus complexe √† mettre en place que [[VitePress]]:**  N√©cessite une compr√©hension de base d'[[Astro]].\n* **Moins de fonctionnalit√©s \"out-of-the-box\":** Par rapport √† une solution plus int√©gr√©e comme [[VitePress]], il faut potentiellement plus de configuration pour obtenir des fonctionnalit√©s avanc√©es.\n* **D√©pendance √† [[Astro]]:**  La connaissance d'[[Astro]] est n√©cessaire pour une utilisation et personnalisation efficace.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "5f1e2ec9-364e-4ce4-9afe-b92ff447af3f",
        "title": "Azure Active Directory",
        "description": "---\nid: 90178cba-c2e7-4de7-a92f-4d570dc3b732\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nAzure Active Directory (Azure AD) est le service d'annuaire cloud de Microsoft. Il fournit une identit√© et une [[Identify Access Manager (IAM)]] pour les applications et les ressources cloud, permettant l'authentification et l'autorisation des utilisateurs et des applications.  Il peut √©galement √™tre int√©gr√© avec des annuaires locaux (via Azure AD Connect).\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nAzure AD est un annuaire bas√© sur le cloud qui g√®re les identit√©s d'utilisateurs et d'applications.  Il permet :\n\n* **Authentification unique (SSO):**  Les utilisateurs peuvent acc√©der √† plusieurs applications avec les m√™mes identifiants.\n* **Gestion des acc√®s bas√©e sur les r√¥les [[Role Based Access Control (RBAC)]]:** Contr√¥le fin des permissions pour les utilisateurs et les groupes.\n* **Gestion des identit√©s:** Cr√©ation, modification et suppression de comptes utilisateurs et groupes.\n* **Int√©gration avec des applications SaaS:**  Acc√®s simple aux applications cloud bas√©es sur le cloud.\n* **Int√©gration avec des applications locales:** Via Azure AD Connect, les identit√©s locales peuvent √™tre synchronis√©es avec Azure AD.\n* **Authentification multi-facteur (MFA):**  Am√©liore la s√©curit√© en exigeant plusieurs m√©thodes d'authentification.\n* **Protection contre les menaces:** Surveillance et d√©tection des activit√©s suspectes.\n* **Gestion des appareils:** Contr√¥le et gestion des appareils acc√©dant aux ressources.\n* **Conditionnel Access:**  D√©finit des politiques d'acc√®s bas√©es sur des conditions (emplacement, appareil, etc.).\n\n\n**Exemple d'int√©gration avec une application:** Une application web peut utiliser l'authentification Azure AD pour v√©rifier l'identit√© des utilisateurs avant de leur accorder l'acc√®s.  Cela se fait g√©n√©ralement via les protocoles OAuth 2.0 et OpenID Connect.\n\n**Exemple de configuration (sch√©matique):**  Pour int√©grer une application web avec Azure AD, il faut enregistrer l'application dans Azure AD, obtenir un ID d'application et un secret client, puis configurer l'application pour qu'elle utilise ces informations pour authentifier les utilisateurs via Azure AD.  La configuration pr√©cise d√©pend du type d'application et des biblioth√®ques utilis√©es.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Int√©gration avec l'√©cosyst√®me Microsoft:**  Fonctionne parfaitement avec d'autres services Microsoft cloud.\n* **Fonctionnalit√©s robustes de s√©curit√©:**  Offre des m√©canismes de s√©curit√© avanc√©s.\n* **Scalabilit√© et fiabilit√©:**  Con√ßu pour g√©rer des millions d'utilisateurs et d'applications.\n* **Gestion centralis√©e des identit√©s:**  Simplifie la gestion des utilisateurs et des acc√®s.\n* **Bonne documentation et support:** Microsoft fournit une documentation compl√®te et un support technique.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Co√ªt:** Peut √™tre co√ªteux pour les grandes organisations avec un grand nombre d'utilisateurs.\n* **Complexit√©:**  La configuration et la gestion d'Azure AD peuvent √™tre complexes pour les utilisateurs inexp√©riment√©s.\n* **D√©pendance √† Microsoft:**  Les organisations sont d√©pendantes de Microsoft pour le service.\n* **Probl√®mes de performance possibles:**  Des probl√®mes de performance peuvent survenir en cas de forte demande.\n* **Int√©gration avec des syst√®mes non-Microsoft:**  Peut n√©cessiter des efforts suppl√©mentaires pour int√©grer des syst√®mes non-Microsoft.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]\n\n**Note concernant la proposition initiale de f√©d√©rer avec [[Keycloak]]:**  Bien que possible, f√©d√©rer Azure AD avec Keycloak ajoute une couche de complexit√©.  Cela peut √™tre utile dans certains sc√©narios (par exemple, pour centraliser la gestion des identit√©s pour des applications multiples, ou pour ajouter des fonctionnalit√©s sp√©cifiques offertes par Keycloak), mais il est important de consid√©rer les implications sur la complexit√© de la gestion et la s√©curit√© globale.  Un choix direct d'Azure AD pour l'authentification est souvent plus simple et plus int√©gr√©.\n"
    },
    {
        "id": "78fcdf93-fb9e-4ab7-9121-ad92a35dbae7",
        "title": "Behaviour Driven Developpement (BDD)",
        "description": "---\nid: f580a39e-f8d4-4c10-b007-25b2f99064b9\n---\n# Rapidement c'est quoi‚ùì\n\nLe Behaviour Driven Development (BDD) est une approche de d√©veloppement logiciel qui √©tend le [[Test Driven Developpement (TDD)]] en mettant l'accent sur la collaboration entre les d√©veloppeurs, les testeurs et les clients.  Il se concentre sur le comportement du logiciel du point de vue de l'utilisateur.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe BDD est une technique de d√©veloppement logiciel agile qui utilise des exemples concrets pour d√©finir et v√©rifier le comportement souhait√© du logiciel.  Au lieu de se concentrer uniquement sur des tests unitaires techniques comme le [[Test Driven Developpement (TDD)]], le BDD d√©finit les exigences et les tests √† partir du point de vue de l'utilisateur final ou d'un autre intervenant (par exemple, un analyste m√©tier).  Ces exigences sont exprim√©es sous forme de sc√©narios √©crits dans un langage compr√©hensible par tous (par exemple, Given-When-Then, ([[Gherkin]])), facilitant ainsi la communication et la collaboration entre les parties prenantes.\n\nLe processus BDD implique g√©n√©ralement les √©tapes suivantes :\n\n1. **D√©finir les comportements attendus:**  Les √©quipes identifient les fonctionnalit√©s et les comportements attendus du logiciel √† l'aide d'exemples concrets.  Ces exemples sont souvent √©crits en utilisant le format Given-When-Then (ou un format similaire).  *Given* d√©crit le contexte initial, *When* d√©crit l'action effectu√©e, et *Then* d√©crit le r√©sultat attendu.\n\n2. **Automatiser les tests:**  Les exemples de comportements sont ensuite traduits en tests automatis√©s.  Ces tests v√©rifient que le logiciel se comporte comme attendu.  Des frameworks BDD comme [[Cucumber]], [[SpecFlow]], ou [[Behat]] sont souvent utilis√©s pour faciliter l'automatisation des tests √† partir de la sp√©cification √©crite en langage naturel.\n\n3. **D√©velopper le logiciel:**  Le d√©veloppement du logiciel se fait it√©rativement, en commen√ßant par les fonctionnalit√©s d√©crites par les exemples de comportement.  Les tests automatis√©s servent de guide pour le d√©veloppement et permettent de valider que chaque it√©ration r√©pond aux exigences.\n\nEn essence, le BDD favorise une compr√©hension partag√©e des exigences entre les d√©veloppeurs, les testeurs et les clients, r√©duisant ainsi les malentendus et les erreurs.  Il permet une documentation vivante et ex√©cutable du comportement du logiciel.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Collaboration am√©lior√©e:**  Facilite la communication et la collaboration entre les √©quipes techniques et les clients gr√¢ce √† un langage commun.\n* **Documentation vivante et ex√©cutable:**  Les exemples de comportement servent de documentation claire et concise, qui est automatiquement v√©rifi√©e par les tests.\n* **R√©duction des erreurs:**  La sp√©cification pr√©cise des comportements permet de d√©tecter et de corriger les erreurs plus t√¥t dans le cycle de d√©veloppement.\n* **Tests plus compr√©hensibles:** Les tests sont √©crits dans un langage naturel et facilement compr√©hensibles par tous, pas seulement les d√©veloppeurs.\n* **Am√©lioration de la qualit√© du logiciel:**  Les tests automatis√©s assurent une meilleure qualit√© du logiciel.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  La mise en place de BDD peut n√©cessiter une courbe d'apprentissage pour les √©quipes non familiaris√©es avec cette approche.\n* **Surco√ªt potentiel:**  L'√©criture des exemples de comportement et l'automatisation des tests peuvent prendre du temps et n√©cessiter des ressources suppl√©mentaires, surtout au d√©but.\n* **Maintenance des tests:**  La maintenance des tests automatis√©s peut √™tre chronophage si le logiciel √©volue rapidement.\n* **D√©pendance aux frameworks:**  Le choix et la ma√Ætrise d'un framework BDD sont essentiels pour une impl√©mentation r√©ussie.\n* **Peut √™tre inad√©quat pour certains projets:**  Le BDD n'est pas toujours la meilleure approche pour tous les projets, notamment les projets tr√®s petits ou ceux avec des exigences tr√®s fluctuantes.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "7e46e637-b644-45d4-887e-b929589b9fa3",
        "title": "Bento grid",
        "description": "---\nid: 1734446d-b56f-421d-847e-74616d8b5715\n---\n# Rapidement c'est quoi‚ùì\n\nBento est une m√©thode de conception d'interface utilisateur (UI) bas√©e sur un syst√®me de grille flexible et adaptable, facilitant la cr√©ation de mises en page r√©actives et modulaires.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nBento est une approche de conception UI qui se diff√©rencie des syst√®mes de grille traditionnels en proposant une plus grande flexibilit√© et modularit√©.  Au lieu d'une grille fixe et pr√©-d√©finie, Bento utilise un syst√®me de conteneurs \"bentos\" qui peuvent contenir diff√©rents √©l√©ments UI, et s'adaptent dynamiquement √† la taille de l'√©cran et au contenu.  Chaque bento est un composant ind√©pendant qui peut √™tre r√©utilis√© et combin√© avec d'autres pour cr√©er des mises en page complexes.  Le principe repose sur l'utilisation de plusieurs conteneurs (les bentos) de tailles variables, dispos√©s les uns √† c√¥t√© des autres ou les uns au-dessus des autres, en fonction des besoins.  Cela permet de cr√©er des layouts facilement adaptables aux diff√©rents appareils (tablettes, smartphones, ordinateurs) sans avoir √† √©crire du code sp√©cifique pour chaque r√©solution.  L'avantage cl√© est la facilit√© de maintenance et d'√©volution du design, car les modifications apport√©es √† un bento impactent uniquement ce dernier, sans n√©cessiter de r√©ajustement global de la mise en page.  La flexibilit√© permet aussi de r√©pondre √† des changements de contenu sans perturber l'ensemble de l'interface.  Il est souvent impl√©ment√© via des frameworks [[CSS]], permettant un contr√¥le pr√©cis du [[Responsive en CSS]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Flexibilit√© et modularit√©:**  Facilement adaptable aux diff√©rents √©crans et contenus.  Les modifications sont localis√©es.\n* **R√©utilisabilit√© des composants:**  Les bentos peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application, r√©duisant la redondance de code et am√©liorant la coh√©rence visuelle.\n* **Maintenance simplifi√©e:**  Les changements sont moins susceptibles d'avoir des effets inattendus sur le reste de l'interface.\n* **Responsive design facilit√©:** L'adaptation aux diff√©rentes tailles d'√©cran est int√©gr√©e au c≈ìur du syst√®me.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:** La mise en place peut √™tre plus complexe que des syst√®mes de grille plus simples, n√©cessitant une bonne compr√©hension des concepts.\n* **Courbe d'apprentissage:**  N√©cessite de ma√Ætriser les concepts de base de la conception UI et des syst√®mes de grille avant de pouvoir l'utiliser efficacement.\n* **Manque de standardisation:**  Bento n'est pas un standard officiel, la mise en ≈ìuvre peut varier selon les frameworks et les d√©veloppeurs.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "ca2e037c-2ea7-453f-8814-c90ca0fb317d",
        "title": "Bonne pratiques Astuces Infos SQL",
        "description": "---\nid: 9598b636-e6c7-433c-9c84-8d2be81bae62\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_Dev]][[MOC_DevSecOps]]\n\n**Plusieurs bonnes pratiques √† mettre en place sur des [[Base de donn√©e SQL]] :** \n\n- Mettre des [[Index]] sur les [[Primary Key]] et les [[Foreign Key]] & sur les colonnes les plus utilis√©s (en terme de comparaison m√©moire on devrait atteindre une part 40% [[Index]] / 60% data)\n- Eviter au max l'utilisation de fonction dans les requ√™tes car elles emp√™chent l'utilisation des index.\n- Regarder les index les moins utilis√©s = Ils ralentissent l‚Äô√©criture\n- En fonction du m√©tier, il peut √™tre pertinent de cr√©er des vues ou des partitions pour optimiser les requ√™tes redondante"
    },
    {
        "id": "44c07912-e569-4ffd-afe8-ba9f66a366bb",
        "title": "Bonne pratiques Astuces Infos code",
        "description": "---\nid: 25d1a09d-2ccd-4cd5-a763-aa65e2c63372\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_Dev]]\n\n# [[Java]] - Comparaison BigDecimal.\n**Si je veux faire des comparaisons avec des `BigDecimal`.**\n\nOn va pr√©f√©rer cette comparaison : \n\n```java\nsipa2ElementFournisseur.getTauxTva().stripTrailingZeros().equals(fournisseurJSON.getTauxTva())\n```\n\n√† celle-ci : \n\n```java\nObjects.equals(sipa2ElementFournisseur.getMontantTtc(), fournisseurJSON.getMontantTtc());\nsipa2ElementFournisseur.getMontantTtc().equals(fournisseurJSON.getMontantTtc()));\n```\n\nParce qu‚Äôon peut avoir des probl√®mes d‚Äôarrondis (si j‚Äôai 0 et 0.0 le `Objects.equals()` renvoie faux).\n\nA noter que `stripTrailingZeros()` renvoi la notation scientifique de la valeur en string. Donc avec la pr√©cision sur les chiffres apr√®s la virgules.\n\n# [[Java]] - Activer les asserts\nPour pouvoir activer les asserts en java, il faut passer en argument de la JVM **-ea** (Enable Assert)\n\n# Appel en [[Base de donn√©e]]\n\nFaire tr√®s attention aux requ√™tes qu‚Äôon va faire en base.\n\nOn va pr√©f√©rer r√©cup√©rer toutes les infos dont on a besoin une fois, pour ensuite les passer en param√®tre de nos m√©thodes.\n\nDans des structures imbriqu√©es on peut se retrouver √† aller chercher 6 fois la m√™me chose.\n\n# Comparaison de valeur\nToujours mettre en premier dans une comparaison la valeur dont on est s√ªr !\n```java\n# Mauvais exemple\nexception.getEnumCode().equals(ExceptionTechniqueEnum.CONCEPT_NOT_FOUND.getCode())\n\n# Bon Exemple\nExceptionTechniqueEnum.CONCEPT_NOT_FOUND.getCode().equals(exception.getEnumCode())\n```\nCar dans ce cas exception.getEnumCode() peut √™tre null, ou produire null. "
    },
    {
        "id": "afd4c958-e250-4085-aa53-067aafec3f01",
        "title": "Bonne pratiques Astuces Infos ops",
        "description": "---\nid: ddeca416-e229-43bd-9ff3-cf790d5c7db6\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_DevSecOps]]\n# Installation [[WSL]] sans acc√®s au Microsoft Store\n> Si par exemple, il est bloqu√© par l‚Äôordinateur de la soci√©t√©.\n> \n\n```java\nwsl --update\n// Recherche de mises √† jour en cours... Veuillez patienter\n// Erreur : 0x8024500c\n\nwsl --update --web-download\n```"
    },
    {
        "id": "c8431349-aa03-4939-8097-d26735b0555d",
        "title": "Capture Data Change (CDC)",
        "description": "---\nid: 88fa46d4-2deb-41b1-9694-46a255156d83\n---\n# Rapidement c'est quoi‚ùì\n\nCapture Data Change (CDC) est une technique permettant de d√©tecter et de capturer les modifications de donn√©es dans une [[Base de donn√©e]].  Elle est souvent utilis√©e pour la r√©plication de donn√©es et la synchronisation entre [[Base de donn√©e]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCapture Data Change (CDC) est un m√©canisme qui identifie et enregistre les modifications apport√©es aux donn√©es d'une [[Base de donn√©e]].  Au lieu de copier l'int√©gralit√© de la base de donn√©es √† chaque synchronisation, le CDC ne capture que les changements (insertions, mises √† jour, suppressions) survenus depuis la derni√®re synchronisation.  Ceci am√©liore consid√©rablement l'efficacit√© et la performance, notamment pour les bases de donn√©es volumineuses.\n\nPlusieurs m√©thodes existent pour impl√©menter le CDC :\n\n* **Triggers:** Des d√©clencheurs (triggers) sont d√©finis sur les tables pour enregistrer chaque modification dans une table de journalisation (log table).  Cette m√©thode est relativement simple √† impl√©menter mais peut impacter les performances si mal configur√©e.\n\n* **Log Mining:**  L'extraction d'informations directement depuis les logs de la base de donn√©es.  Cette approche est g√©n√©ralement plus performante que les triggers mais plus complexe √† mettre en ≈ìuvre et d√©pend fortement du syst√®me de gestion de base de donn√©es (SGBD).\n\n* **Change Data Capture tools:** Des outils sp√©cialis√©s (ex: [[Debezium]], [[Maxwell]]) offrent des fonctionnalit√©s avanc√©es de CDC, g√©rant la complexit√© de l'extraction et de la transformation des donn√©es.  Ils permettent souvent une int√©gration plus simple avec diff√©rents SGBD et technologies.\n\nLes donn√©es captur√©es par le CDC sont g√©n√©ralement stock√©es dans une table de journalisation ou transmises √† un syst√®me de traitement en temps r√©el (streaming) pour diverses applications, comme la r√©plication vers une base de donn√©es secondaire, l'int√©gration avec des [[Date Warehouse]], la fourniture de donn√©es en temps r√©el pour les applications, etc.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance am√©lior√©e:** Seules les modifications sont trait√©es, ce qui rend le processus de synchronisation beaucoup plus rapide et moins gourmand en ressources.\n* **Efficacit√© accrue:** R√©duction du volume de donn√©es transf√©r√©es et trait√©es.\n* **Scalabilit√©:**  Adaptable √† des bases de donn√©es de grandes tailles.\n* **Faible latence:**  Permet de fournir des donn√©es presque en temps r√©el.\n* **Flexibilit√©:**  Compatible avec diverses technologies et syst√®mes de bases de donn√©es.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© d'impl√©mentation:**  La mise en ≈ìuvre peut √™tre complexe, en particulier pour les solutions bas√©es sur le *log mining* ou n√©cessitant une int√©gration personnalis√©e.\n* **Gestion des erreurs:**  Il est crucial de mettre en place une gestion robuste des erreurs pour garantir l'int√©grit√© des donn√©es.\n* **Co√ªt:** Les outils CDC commerciaux peuvent engendrer des co√ªts suppl√©mentaires.\n* **Maintenance:**  N√©cessite une maintenance r√©guli√®re pour garantir la fiabilit√© et la performance du syst√®me.\n* **D√©pendance au SGBD:**  La m√©thode d'impl√©mentation d√©pend fortement du SGBD utilis√©.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "f9bb1ea6-0be5-467a-86e9-1317b9f9e255",
        "title": "Certification Java 17",
        "description": "---\nid: cdc0b331-bbe5-4556-ad81-10811ff4073c\n---\nSource de la formation : https://r331.github.io/OCP-Oracle-Certified-Professional-Java-SE-21-1Z0-839-Open-Study-Guide/\n### 1. **[[Certification Java 17 - Concepts de Base en Java]]**\n\n- Types primitifs et classes enveloppes (Wrapper)\n- Op√©rations arithm√©tiques et bool√©ennes (promotion de type, casting)\n- Pr√©c√©dence des op√©rateurs\n- Utilisation de `var` pour l‚Äôinf√©rence de type\n\n### 2. **[[Certification Java 17 - Programmation Orient√©e Objet (OOP)]]**\n\n- D√©claration et instanciation d‚Äôobjets\n- Cycle de vie des objets (cr√©ation, r√©f√©rences, garbage collection)\n- Encapsulation, immutabilit√©\n- H√©ritage, classes abstraites et classes scell√©es (`sealed`)\n- Polymorphisme, type objet vs type r√©f√©rence\n- Op√©rateur `instanceof` et pattern matching\n- Interfaces : m√©thodes `default`, `static`, priv√©es\n- Enums avec champs, m√©thodes et constructeurs\n\n### 3. **[[Certification Java 17 - Packages et Modules]]**\n\n- Organisation des classes en packages\n- Java Platform Module System (JPMS) : d√©finition de modules, d√©pendances, services\n\n### 4. **[[Certification Java 17 - Gestion des types Date, Temps, Texte et Num√©rique]]**\n\n- API `Date-Time` : `LocalDate`, `LocalTime`, `LocalDateTime`, `ZonedDateTime`\n- `Period`, `Duration`, `Instant` pour la gestion des intervalles de temps\n- Classes `String`, `StringBuilder`, `Text Blocks`\n- API Math et `BigDecimal`\n\n### 5. **[[Certification Java 17 - Contr√¥le du Flux d'Ex√©cution]]**\n\n- Structures de contr√¥le (`if/else`, `switch`, `while`, `for`, `do-while`)\n- Expressions `switch` et pattern matching\n- Instructions `break`, `continue`\n\n### 6. **[[Certification Java 17 - Gestion des Exceptions]]**\n\n- Utilisation de `try/catch/finally`\n- `try-with-resources`\n- Multi-catch (`catch` de plusieurs exceptions en une seule clause)\n- Exceptions personnalis√©es (`extends Exception` ou `extends RuntimeException`)\n\n### 7. **[[Certification Java 17 - Collections et Tableaux]]**\n\n- Tableaux (`int[]`, `String[]`)\n- Collections (`List`, `Set`, `Map`, `Deque`)\n- API `SequencedCollection`, `SequencedSet`, `SequencedMap` (Java 21)\n- Manipulations : ajout, suppression, tri\n\n### 8. **[[Certification Java 17 - Streams et Expressions Lambda]]**\n\n- Utilisation des `Stream<T>` et `IntStream`, `DoubleStream`\n- `filter()`, `map()`, `reduce()`, `collect()`\n- D√©composition, concat√©nation, partitionnement\n- Streams s√©quentiels et parall√®les\n\n### 9. **[[Certification Java 17 - Programmation Concurrente]]**\n\n- Threads (`Runnable`, `Callable`)\n- `ExecutorService`, `ForkJoinPool`\n- Threads virtuels (`Virtual Threads`, `Thread.ofVirtual()`)\n- Verrous (`synchronized`, `Lock`, `ReadWriteLock`)\n- Collections concurrentes et streams parall√®les\n\n### 10. **[[Certification Java 17 - Sorties et Fichiers]]**\n\n- Flux (`InputStream`, `OutputStream`, `Reader`, `Writer`)\n- S√©rialisation/d√©s√©rialisation d‚Äôobjets (`Serializable`)\n- API `java.nio.file` pour la manipulation des fichiers et r√©pertoires\n\n### 11. **[[Certification Java 17 - Acc√®s aux Bases de Donn√©es avec JDBC]]**\n\n- Connexion √† une base de donn√©es (`DriverManager`, `DataSource`)\n- Ex√©cution de requ√™tes (`Statement`, `PreparedStatement`, `CallableStatement`)\n- Gestion des transactions (`commit`, `rollback`)\n\n### 12. **[[Certification Java 17 - D√©ploiement et Modules Java]]**\n\n- Compilation et cr√©ation de JARs (`modulaires` et `non-modulaires`)\n- Images d‚Äôex√©cution (`jlink`)\n- Migration avec modules anonymes et automatiques\n\n### 13. **[[Certification Java 17 - Internationalisation et Localisation]]**\n\n- Locales (`Locale`)\n- `ResourceBundle` pour la gestion des ressources multilingues\n- Formatage des dates, nombres et devises (`NumberFormat`, `DateTimeFormatter`)\n\n[[Java]]"
    },
    {
        "id": "e5648766-c198-4852-8a19-a50320131cca",
        "title": "ChromaDB",
        "description": "---\nid: 501b3586-143e-448a-bae9-4ff77f3a5793\n---\n# Rapidement c'est quoi‚ùì\n\nChromaDB est une [[Base de donn√©e]] vectorielle open-source permettant de stocker et de rechercher des vecteurs de plongement (embeddings).  Elle est con√ßue pour √™tre facile √† utiliser et √† int√©grer dans des applications de recherche s√©mantique.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nChromaDB est une base de donn√©es qui stocke et recherche des donn√©es non structur√©es en utilisant des embeddings.  Un embedding est une repr√©sentation vectorielle d'un morceau de texte, d'une image, ou d'un autre type de donn√©es.  Au lieu de chercher des donn√©es par mots cl√©s exacts, ChromaDB permet de rechercher des donn√©es similaires en fonction de la similarit√© vectorielle des embeddings.  Cela permet de r√©aliser des recherches s√©mantiques, c'est-√†-dire de trouver des √©l√©ments dont le sens est proche de la requ√™te, m√™me si les mots utilis√©s sont diff√©rents.\n\nChromaDB utilise une architecture client-serveur. Le client envoie des requ√™tes √† un serveur qui contient la base de donn√©es.  Il supporte plusieurs types de stockage persistant, permettant ainsi une grande flexibilit√©.  Il offre des fonctionnalit√©s comme l'ajout, la mise √† jour et la suppression de donn√©es, ainsi que des m√©thodes de recherche bas√©es sur la similarit√© cosinus ou d'autres m√©triques.  L'API est simple et intuitive, facilitant son int√©gration dans divers projets.  ChromaDB est particuli√®rement bien adapt√© aux applications de recherche s√©mantique, de recommandation, et de clustering.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et facile √† utiliser:**  Le code source est disponible publiquement, facilitant l'audit et la contribution.  Son API est simple √† prendre en main.\n* **Flexibilit√©:** Supporte plusieurs types de stockage persistant (en m√©moire, disque, etc.).\n* **Performance:**  Optimis√© pour la recherche de similarit√© vectorielle √† grande √©chelle.\n* **Recherche s√©mantique:** Permet de trouver des donn√©es similaires en fonction du sens, et non seulement des mots cl√©s.\n* **Int√©gration facile:** API simple et bien document√©e pour une int√©gration ais√©e dans diff√©rents projets.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Maturit√© relative:**  Compar√© √† des bases de donn√©es vectorielles plus √©tablies, ChromaDB est relativement jeune et pourrait pr√©senter des imperfections.\n* **Scalabilit√©:** Bien que performant, sa scalabilit√© √† tr√®s grande √©chelle pourrait n√©cessiter une configuration et une optimisation avanc√©es.\n* **D√©pendances:**  N√©cessite des biblioth√®ques sp√©cifiques pour fonctionner, ce qui peut ajouter de la complexit√© √† l'installation et √† la configuration.\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "643b7d68-8af3-4764-8cab-279e51c9bb42",
        "title": "Client Side Rendering (CSR)",
        "description": "---\nid: f0414542-a158-439d-9e1b-0113e950e207\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe **Client Side Rendering (CSR)** est une m√©thode de rendu des pages [[Web]] o√π le navigateur charge une page [[HTML]] basique et ex√©cute ensuite du [[JavaScript]] pour g√©n√©rer dynamiquement le contenu de la page.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe CSR repose sur le principe que le code [[JavaScript]] du c√¥t√© client (navigateur) est responsable de la construction de la page. Lorsqu'un utilisateur acc√®de √† une page, le navigateur charge un fichier [[HTML]] minimal, puis t√©l√©charge et ex√©cute du [[JavaScript]] pour r√©cup√©rer et afficher les donn√©es, souvent via des appels API. Cela permet un rendu dynamique et interactif sans avoir besoin d'un serveur pour g√©n√©rer la page √† chaque requ√™te.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Rapidit√© de compilation** : Seulement un transfert de fichiers est n√©cessaire, ce qui rend le processus de chargement initial rapide.\n- **Adapt√© au contenu dynamique** : Id√©al pour des sites interactifs o√π le contenu change souvent, comme des applications web ou des plateformes sociales.\n- **Exp√©rience utilisateur fluide** : Une fois la page rendue, l'interaction avec la page est rapide et r√©active.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **[[SEO]] limit√©** : Le contenu n'est pas visible pour les moteurs de recherche avant l'ex√©cution du [[JavaScript]], rendant l'indexation difficile pour le r√©f√©rencement.\n- **Temps de chargement initial** : Le navigateur doit ex√©cuter tout le [[JavaScript]] avant d'afficher la page, ce qui peut entra√Æner des d√©lais d'affichage significatifs, notamment sur des appareils peu puissants.\n- **D√©pendance au [[JavaScript]]** : Les utilisateurs avec des configurations de navigateur non optimis√©es ou des d√©sactivations de [[JavaScript]] ne verront pas correctement la page.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "450fc502-04e9-4dd5-bb5d-41d5be4cf560",
        "title": "Certification Java 17 - Collections et Tableaux",
        "description": "---\nid: 205a0c04-b33c-475b-9a7f-cc1720da1bdb\n---\n## **7.1. Tableaux (`int[]`, `String[]`)**\n\n### **D√©claration et initialisation**\n\n```java\nint[] nombres = {1, 2, 3, 4, 5}; // D√©claration et affectation\nString[] noms = new String[3]; // Tableau de taille fixe (valeurs nulles)\n```\n\n### **Acc√®s aux √©l√©ments**\n\n```java\nSystem.out.println(nombres[0]); // Affiche 1\nnoms[0] = \"Alice\";\n```\n\n### **Boucle `for` pour parcourir un tableau**\n\n```java\nfor (int i = 0; i < nombres.length; i++) {\n    System.out.println(nombres[i]);\n}\n```\n\n### **Boucle `for-each` (simplifi√©e)**\n\n```java\nfor (int nombre : nombres) {\n    System.out.println(nombre);\n}\n```\n\n### **Tri avec `Arrays.sort()`**\n\n```java\nimport java.util.Arrays;\n\nArrays.sort(nombres); // Trie le tableau en ordre croissant\nSystem.out.println(Arrays.toString(nombres));\n```\n\nüìå **Un tableau a une taille fixe et ne peut pas √™tre redimensionn√©.**\n\n---\n\n## **7.2. Collections (`List`, `Set`, `Map`, `Deque`)**\n\nüìå **Les collections sont dynamiques**, contrairement aux tableaux.\n\n|**Interface**|**Impl√©mentations courantes**|**Caract√©ristiques**|\n|---|---|---|\n|`List`|`ArrayList`, `LinkedList`|Ordonn√©e, doublons autoris√©s|\n|`Set`|`HashSet`, `LinkedHashSet`, `TreeSet`|Uniques, non ordonn√©es (`HashSet`), tri√©es (`TreeSet`)|\n|`Map`|`HashMap`, `LinkedHashMap`, `TreeMap`|Cl√©/valeur, unique par cl√©|\n|`Deque`|`ArrayDeque`, `LinkedList`|Double-ended queue (FIFO/LIFO)|\n\n---\n\n### **`List` : Tableau dynamique (ArrayList, LinkedList)**\n\n```java\nimport java.util.*;\n\nList<String> liste = new ArrayList<>();\nliste.add(\"Java\");\nliste.add(\"Python\");\nliste.add(\"C++\");\n\nSystem.out.println(liste.get(1)); // Python\nliste.remove(\"C++\"); // Supprime C++\n```\n\nüìå **`ArrayList` est optimis√© pour l‚Äôacc√®s rapide, `LinkedList` pour l‚Äôinsertion/suppression.**\n\n---\n\n### **`Set` : Ensemble d‚Äô√©l√©ments uniques**\n\n```java\nSet<String> set = new HashSet<>();\nset.add(\"Java\");\nset.add(\"Python\");\nset.add(\"Java\"); // Ignor√© (pas de doublons)\nSystem.out.println(set);\n```\n\nüìå **`HashSet` (d√©sordonn√©), `TreeSet` (tri√©), `LinkedHashSet` (ordre d‚Äôinsertion).**\n\n---\n\n### **`Map` : Association cl√©/valeur**\n\n```java\nMap<String, Integer> map = new HashMap<>();\nmap.put(\"Alice\", 25);\nmap.put(\"Bob\", 30);\nSystem.out.println(map.get(\"Alice\")); // 25\n```\n\nüìå **`TreeMap` trie par cl√©, `LinkedHashMap` conserve l‚Äôordre d‚Äôinsertion.**\n\n---\n\n### **`Deque` : File d‚Äôattente double**\n\n```java\nDeque<String> deque = new ArrayDeque<>();\ndeque.addFirst(\"Premier\");\ndeque.addLast(\"Dernier\");\n\nSystem.out.println(deque.pollFirst()); // \"Premier\"\nSystem.out.println(deque.pollLast());  // \"Dernier\"\n```\n\nüìå **`Deque` peut √™tre utilis√© comme une pile (`Stack`) ou une file (`Queue`).**\n\n---\n\n## **7.3. API `SequencedCollection`, `SequencedSet`, `SequencedMap` (Java 21)**\n\nüìå **Ajout√© en Java 21 pour g√©rer l‚Äôordre des √©l√©ments de fa√ßon plus coh√©rente.**\n\n### **`SequencedCollection` : Collection ordonn√©e**\n\n```java\nSequencedCollection<String> list = new LinkedList<>();\nlist.addFirst(\"D√©but\");\nlist.addLast(\"Fin\");\n\nSystem.out.println(list.getFirst()); // D√©but\nSystem.out.println(list.getLast());  // Fin\n```\n\nüìå **Am√©liore `List`, `Deque` et `SortedSet` en offrant des m√©thodes `getFirst()`, `getLast()` et `reversed()`.**\n\n---\n\n### **`SequencedSet` : Ensemble ordonn√©**\n\n```java\nSequencedSet<String> set = new LinkedHashSet<>();\nset.add(\"Java\");\nset.add(\"Python\");\nSystem.out.println(set.getFirst()); // Java\nSystem.out.println(set.getLast());  // Python\n```\n\nüìå **Permet de r√©cup√©rer le premier et le dernier √©l√©ment d‚Äôun `Set`.**\n\n---\n\n### **`SequencedMap` : `Map` ordonn√©e**\n\n```java\nSequencedMap<String, Integer> map = new LinkedHashMap<>();\nmap.put(\"Alice\", 25);\nmap.put(\"Bob\", 30);\nSystem.out.println(map.firstEntry()); // Alice=25\nSystem.out.println(map.lastEntry());  // Bob=30\n```\n\nüìå **Ajoute `firstEntry()`, `lastEntry()` et `reversed()`.**\n\n---\n\n## **7.4. Manipulations des collections (ajout, suppression, tri)**\n\n### **Ajout et suppression**\n\n```java\nList<String> list = new ArrayList<>(List.of(\"Java\", \"Python\", \"C++\"));\nlist.add(\"JavaScript\"); // Ajout\nlist.remove(\"Python\");  // Suppression\nSystem.out.println(list);\n```\n\n### **Tri d‚Äôune `List` avec `Collections.sort()`**\n\n```java\nList<Integer> nombres = Arrays.asList(3, 1, 4, 1, 5);\nCollections.sort(nombres); // Tri croissant\nSystem.out.println(nombres);\n```\n\n### **Tri d‚Äôune `List` avec un comparateur personnalis√©**\n\n```java\nList<String> mots = Arrays.asList(\"Banane\", \"Pomme\", \"Orange\");\nmots.sort(Comparator.reverseOrder()); // Tri d√©croissant\nSystem.out.println(mots);\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Tableaux (`int[]`, `String[]`)** : Taille fixe, rapide mais rigide.  \n‚úÖ **`List`, `Set`, `Map`, `Deque`** : Collections dynamiques et flexibles.  \n‚úÖ **`SequencedCollection` (Java 21)** : Meilleure gestion de l‚Äôordre des √©l√©ments.  \n‚úÖ **Manipulations : ajout, suppression, tri avec `Collections.sort()`.**\n\n---"
    },
    {
        "id": "a1ac1cfe-c0dc-436c-83ca-f17362f54d14",
        "title": "Common Vulnerabilities and Exposures (CVE)",
        "description": "---\nid: 2411dd03-b943-417a-93c1-64d9ff895771\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **CVE (Common Vulnerabilities and Exposures)** sont des identifiants uniques attribu√©s aux vuln√©rabilit√©s de s√©curit√© dans les logiciels et syst√®mes, permettant de les r√©f√©rencer de mani√®re standardis√©e pour faciliter leur gestion et leur correction.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn CVE est un identifiant unique attribu√© √† une vuln√©rabilit√© ou exposition de s√©curit√©. Chaque CVE contient :\n\n- **Un identifiant unique** : Exemple : **CVE-2021-34527**.\n- **Une description de la vuln√©rabilit√©** : Explication du probl√®me de s√©curit√©.\n- **Des r√©f√©rences externes** : Liens vers des d√©tails, solutions ou correctifs pour la vuln√©rabilit√©.\n\nLes CVE sont utilis√©s par les chercheurs en s√©curit√©, les entreprises, et les administrateurs syst√®mes pour suivre et r√©soudre rapidement les failles de s√©curit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Standardisation** : Offre un syst√®me commun pour identifier et discuter des vuln√©rabilit√©s, facilitant la collaboration entre les professionnels de la s√©curit√©.\n- **Accessibilit√©** : Des bases de donn√©es publiques permettent de rechercher rapidement des informations sur les vuln√©rabilit√©s.\n- **Gestion des risques** : Permet une gestion rapide des risques et l'application de correctifs cibl√©s.\n- **Suivi des mises √† jour** : Aide √† suivre l'√©volution des vuln√©rabilit√©s et des correctifs disponibles.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Manque de d√©tails techniques** : Les CVE ne contiennent souvent pas suffisamment d'informations techniques pour comprendre en profondeur la vuln√©rabilit√© sans recherches suppl√©mentaires.\n- **D√©lais de mise √† jour** : Parfois, les vuln√©rabilit√©s peuvent √™tre r√©f√©renc√©es apr√®s une p√©riode de retard, laissant du temps aux attaquants pour les exploiter avant qu'un patch ne soit disponible.\n- **Pas de solutions int√©gr√©es** : Le CVE fournit une identification, mais il appartient aux entreprises de mettre en place des mesures pour corriger les vuln√©rabilit√©s.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "099be107-e1d0-4ad3-93d9-53376662611b",
        "title": "Certification Java 17 - Concepts de Base en Java",
        "description": "---\nid: f00b7523-614f-46cb-81f9-3a5e4acdd35b\n---\n## **1.1. Types primitifs et classes enveloppes (Wrapper)**\n\n### **Types primitifs en Java**\n\nJava propose **8 types primitifs** pour stocker des valeurs en m√©moire de mani√®re efficace. Ces types sont stock√©s directement en **m√©moire stack**, ce qui les rend plus rapides et moins gourmands en m√©moire que les objets.\n\n|Type|Bits|Valeur min|Valeur max|Valeur par d√©faut|\n|---|---|---|---|---|\n|`boolean`|8|`false`|`true`|`false`|\n|`byte`|8|-128|127|`0`|\n|`short`|16|-32 768|32 767|`0`|\n|`int`|32|-2^31|2^31 - 1|`0`|\n|`long`|64|-2^63|2^63 - 1|`0L`|\n|`float`|32|-|-|`0.0f`|\n|`double`|64|-|-|`0.0d`|\n|`char`|16|0 (`\\u0000`)|65 535|`\\u0000`|\n\n**Exemples d‚Äôutilisation des types primitifs :**\n\n```java\nboolean isActive = true;\nint age = 25;\ndouble price = 19.99;\nchar grade = 'A';\n```\n\n### **Classes Enveloppes (Wrappers)**\n\nJava offre des **classes enveloppes (Wrapper Classes)** pour permettre aux types primitifs d‚Äô√™tre trait√©s comme des objets. Cela est utile notamment pour travailler avec des collections (`List`, `Set`, `Map`), qui ne peuvent contenir que des objets.\n\n|Primitif|Classe Wrapper|\n|---|---|\n|`boolean`|`Boolean`|\n|`byte`|`Byte`|\n|`short`|`Short`|\n|`int`|`Integer`|\n|`long`|`Long`|\n|`float`|`Float`|\n|`double`|`Double`|\n|`char`|`Character`|\n\n**Exemple : Auto-boxing et Unboxing**\n\n```java\nInteger obj = 10;  // Auto-boxing (int -> Integer)\nint num = obj;     // Unboxing (Integer -> int)\n```\n\n- **Auto-boxing** : Conversion automatique d‚Äôun type primitif en objet wrapper.\n- **Unboxing** : Conversion automatique d‚Äôun objet wrapper en type primitif.\n\n---\n\n## **1.2. Op√©rations arithm√©tiques et bool√©ennes**\n\n### **Promotion de type (Type Promotion)**\n\nLorsqu‚Äôune op√©ration est r√©alis√©e entre diff√©rents types, **Java effectue une promotion automatique** :\n\n1. **Si un des op√©randes est `double`**, le r√©sultat est `double`.\n2. **Si un des op√©randes est `float`**, le r√©sultat est `float`.\n3. **Si un des op√©randes est `long`**, le r√©sultat est `long`.\n4. **Sinon, le r√©sultat est `int`** (m√™me si les op√©randes sont `byte` ou `short`).\n\n**Exemples :**\n\n```java\nint a = 10;\ndouble b = 2.5;\ndouble result = a + b;  // a est promu en double => 10.0 + 2.5 = 12.5\n\nbyte x = 5;\nshort y = 10;\nint z = x + y;  // x et y sont promus en int => 5 + 10 = 15\n```\n\n### **Casting explicite**\n\nLorsque la promotion automatique ne convient pas, on utilise **le casting explicite** pour convertir manuellement un type.\n\n```java\ndouble d = 9.7;\nint i = (int) d;  // 9 (la partie d√©cimale est tronqu√©e)\n\nlong bigValue = 100000L;\nint smallValue = (int) bigValue;  // Attention : peut causer une perte de donn√©es si la valeur d√©passe la capacit√© d‚Äôun int\n```\n\n### **Op√©rateurs arithm√©tiques**\n\n|Op√©rateur|Description|Exemple|\n|---|---|---|\n|`+`|Addition|`5 + 3 // 8`|\n|`-`|Soustraction|`9 - 2 // 7`|\n|`*`|Multiplication|`4 * 6 // 24`|\n|`/`|Division enti√®re|`10 / 3 // 3`|\n|`%`|Modulo (reste)|`10 % 3 // 1`|\n\n**Attention : Division entre entiers**\n\n```java\nint result = 5 / 2;  // 2 (car division enti√®re)\ndouble correctResult = 5 / 2.0;  // 2.5\n```\n\n### **Op√©rateurs bool√©ens**\n\n| Op√©rateur | Description       | Exemple                  |\n| --------- | ----------------- | ------------------------ |\n| ==        | √âgalit√©           | `a == b`                 |\n| `!=`      | Diff√©rent         | `a != b`                 |\n| `>`       | Sup√©rieur         | `a > b`                  |\n| `<`       | Inf√©rieur         | `a < b`                  |\n| `>=`      | Sup√©rieur ou √©gal | `a >= b`                 |\n| `<=`      | Inf√©rieur ou √©gal | `a <= b`                 |\n| `&&`      | ET logique        | `true && false // false` |\n| `         |                   | `                        |\n| `!`       | NON logique       | `!true // false`         |\n\n---\n\n## **1.3. Pr√©c√©dence des op√©rateurs**\n\nJava √©value les expressions en fonction de la priorit√© des op√©rateurs.  \n**Ordre de priorit√© (du plus √©lev√© au plus faible) :**\n\n1. `++`, `--` (postfix√©s)\n2. `++`, `--`, `!`, `~` (pr√©fix√©s)\n3. `*`, `/`, `%`\n4. `+`, `-`\n5. `<<`, `>>`, `>>>`\n6. `<`, `<=`, `>`, `>=`\n7. \"==\", \"!=\"\n8. `&`\n9. `^`\n10. `|`\n11. `&&`\n12. `||`\n13. `? :` (ternaire)\n14. `=`, `+=`, `-=`, `*=`, `/=`, etc.\n\n**Exemples :**\n\n```java\nint result = 5 + 2 * 3;  // 5 + (2 * 3) = 11\nboolean test = true || false && false; // true || (false && false) = true\n```\n\n**Bonnes pratiques :**\n\n- **Toujours utiliser des parenth√®ses** pour √©viter les ambigu√Øt√©s.\n\n```java\nint result = (5 + 2) * 3;  // 21\n```\n\n---\n\n## **1.4. Inf√©rence de Type avec `var`**\n\nIntroduit en Java 10, `var` permet √† Java de **d√©duire le type d'une variable lors de l'initialisation**.\n\n```java\nvar x = 10;  // int\nvar text = \"Java\";  // String\nvar list = List.of(1, 2, 3);  // List<Integer>\n```\n\n**Limitations de `var` :**\n\n- **Doit √™tre initialis√© imm√©diatement** (`var x;` ne compile pas).\n- **Uniquement utilisable en local** (pas pour les champs de classe ni les param√®tres de m√©thode).\n- **Ne peut pas √™tre utilis√© avec `null` sans type explicite**.\n\n```java\nvar value = null; // ERREUR, type ind√©fini\n```\n\n**Cas d‚Äôutilisation typique :**\n\n```java\nfor (var entry : map.entrySet()) {\n    System.out.println(entry.getKey() + \" -> \" + entry.getValue());\n}\n```\n\n---\n\n### **R√©sum√©**\n\n‚úÖ **Types primitifs vs Wrappers** (Auto-boxing, Unboxing)  \n‚úÖ **Promotion de type & casting explicite**  \n‚úÖ **Op√©rations arithm√©tiques et bool√©ennes**  \n‚úÖ **Pr√©c√©dence des op√©rateurs**  \n‚úÖ **Inf√©rence de type avec `var`**\n\n---\n[[Java]] [[Certification Java 17]]"
    },
    {
        "id": "d27e1fa6-a6f5-4430-ae47-04f0792380f4",
        "title": "Certification Java 17 - Contr√¥le du Flux d'Ex√©cution",
        "description": "---\nid: 6e8b33a4-8d4c-4291-b3eb-f221452b3430\n---\n## **5.1. Structures de contr√¥le (`if/else`, `switch`, `while`, `for`, `do-while`)**\n\n### **`if/else` : Condition simple**\n\n```java\nint age = 20;\nif (age >= 18) {\n    System.out.println(\"Majeur\");\n} else {\n    System.out.println(\"Mineur\");\n}\n```\n\nüìå **Les blocs `{}` sont obligatoires si plusieurs instructions sont pr√©sentes.**\n\n### **Op√©rateur ternaire (`? :`)**\n\n```java\nString statut = (age >= 18) ? \"Majeur\" : \"Mineur\";\nSystem.out.println(statut);\n```\n\n---\n\n### **`switch` : Remplace plusieurs `if/else`**\n\n```java\nint jour = 3;\nswitch (jour) {\n    case 1 -> System.out.println(\"Lundi\");\n    case 2 -> System.out.println(\"Mardi\");\n    case 3 -> System.out.println(\"Mercredi\");\n    default -> System.out.println(\"Jour inconnu\");\n}\n```\n\nüìå **Depuis Java 12**, `switch` retourne une **valeur** directement :\n\n```java\nString jourNom = switch (jour) {\n    case 1 -> \"Lundi\";\n    case 2 -> \"Mardi\";\n    case 3 -> \"Mercredi\";\n    default -> \"Jour inconnu\";\n};\nSystem.out.println(jourNom);\n```\n\n---\n\n### **`while` : Ex√©cution tant que la condition est vraie**\n\n```java\nint i = 0;\nwhile (i < 3) {\n    System.out.println(i);\n    i++;\n}\n```\n\nüìå **Utile quand on ne sait pas √† l'avance combien d'it√©rations seront n√©cessaires.**\n\n---\n\n### **`do-while` : Ex√©cute **au moins une fois** avant de tester la condition**\n\n```java\nint i = 0;\ndo {\n    System.out.println(i);\n    i++;\n} while (i < 3);\n```\n\n---\n\n### **`for` : Boucle avec un compteur**\n\n```java\nfor (int i = 0; i < 3; i++) {\n    System.out.println(i);\n}\n```\n\n### **`for-each` : Parcourir une collection**\n\n```java\nList<String> fruits = List.of(\"Pomme\", \"Banane\", \"Orange\");\nfor (String fruit : fruits) {\n    System.out.println(fruit);\n}\n```\n\nüìå **Plus lisible que `for (int i = 0; i < list.size(); i++)`**\n\n---\n\n## **5.2. Expressions `switch` et Pattern Matching**\n\nDepuis **Java 16+, `switch` permet du Pattern Matching**, √©vitant les conversions manuelles.\n\n### **Pattern Matching (`instanceof`)**\n\n**Avant Java 16**\n\n```java\nObject obj = \"Bonjour\";\nif (obj instanceof String) {\n    String s = (String) obj;  // Cast manuel obligatoire\n    System.out.println(s.length());\n}\n```\n\nüìå **Avec Java 16+, pas besoin de cast explicite :**\n\n```java\nif (obj instanceof String s) {\n    System.out.println(s.length()); // Automatique !\n}\n```\n\n---\n\n### **Pattern Matching avec `switch`** _(Java 17)_\n\nüìå **Permet d'√©viter des `if/else` imbriqu√©s**\n\n```java\nObject obj = 42;\n\nString resultat = switch (obj) {\n    case Integer i -> \"C'est un entier : \" + i;\n    case String s -> \"C'est une cha√Æne : \" + s;\n    default -> \"Type inconnu\";\n};\nSystem.out.println(resultat);\n```\n\nüìå **Ajout de conditions (`when`)**\n\n```java\nObject obj = 50;\nswitch (obj) {\n    case Integer i when i > 10 -> System.out.println(\"Nombre sup√©rieur √† 10\");\n    case Integer i -> System.out.println(\"Nombre inf√©rieur ou √©gal √† 10\");\n    default -> System.out.println(\"Autre type\");\n}\n```\n\n---\n\n## **5.3. Instructions `break` et `continue`**\n\n### **`break` : Sortie imm√©diate d'une boucle**\n\n```java\nfor (int i = 0; i < 5; i++) {\n    if (i == 3) break;  // Arr√™te la boucle d√®s que i == 3\n    System.out.println(i);\n}\n```\n\n**Sortie :**\n\n```\n0\n1\n2\n```\n\n### **`continue` : Passe directement √† l‚Äôit√©ration suivante**\n\n```java\nfor (int i = 0; i < 5; i++) {\n    if (i == 3) continue;  // Ignore l'affichage du 3\n    System.out.println(i);\n}\n```\n\n**Sortie :**\n\n```\n0\n1\n2\n4\n```\n\nüìå **Utilisation dans `while`**\n\n```java\nint i = 0;\nwhile (i < 5) {\n    i++;\n    if (i % 2 == 0) continue; // Ignore les nombres pairs\n    System.out.println(i);\n}\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Structures de contr√¥le :** `if/else`, `switch`, `while`, `for`, `do-while`  \n‚úÖ **`switch` moderne avec pattern matching** (Java 17)  \n‚úÖ **Pattern Matching (`instanceof` avec variables)**  \n‚úÖ **`break` pour arr√™ter une boucle**  \n‚úÖ **`continue` pour passer √† l‚Äôit√©ration suivante**\n\n---\n"
    },
    {
        "id": "1d5c0267-8703-4ef6-9e3d-2c9bc2f4fba4",
        "title": "Cucumber",
        "description": "---\nid: 03afbb9c-cf5e-4cd9-8c81-db00cb35b56b\n---\n# Rapidement c'est quoi‚ùì\n\nCucumber est un outil de test d'automatisation bas√© sur le langage [[Gherkin]]. Il permet aux non-d√©veloppeurs (ex: testeurs, analystes fonctionnels) de d√©crire des sc√©narios de test de mani√®re claire et concise, facilitant la collaboration entre les √©quipes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCucumber utilise le langage [[Gherkin]], un langage simple et lisible par tous, bas√© sur des mots cl√©s comme \"Given\", \"When\", et \"Then\".  Ces mots cl√©s structurent les sc√©narios de test en d√©crivant l'√©tat initial (Given), l'action effectu√©e (When), et le r√©sultat attendu (Then).  Un exemple simple:\n\n```gherkin\nFeature: Withdrawing cash\n  Scenario: Successful withdrawal within balance\n    Given Alice has $234.56 in their account\n    When Alice tries to withdraw $200.00\n    Then the withdrawal is successful\n\n  Scenario: Declined withdrawal in excess of balance\n    Given Hamza has $198.76 in their account\n    When Hamza tries to withdraw $200.00\n    Then the withdrawal is declined\n```\n\nLes d√©veloppeurs impl√©mentent ensuite le code qui correspond √† chaque √©tape (\"Given\", \"When\", \"Then\").  Cette s√©paration des pr√©occupations (s√©paration entre la sp√©cification du test et son impl√©mentation) am√©liore la collaboration, la lisibilit√© et la maintenabilit√© des tests.  Cucumber peut √™tre int√©gr√© √† de nombreux frameworks de test (comme [[Selenium]], [[Cypress]] via `cypress-cucumber-preprocessor`), permettant ainsi d'automatiser l'ex√©cution des sc√©narios.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Collaboration am√©lior√©e:**  Permet une communication plus claire entre les √©quipes techniques et non-techniques. Les tests sont √©crits dans un langage compr√©hensible par tous.\n* **Maintenance facilit√©e:**  La s√©paration des sp√©cifications et de l'impl√©mentation rend les tests plus faciles √† maintenir et √† mettre √† jour.\n* **Tests plus lisibles:** Le format [[Gherkin]] rend les tests plus clairs et plus faciles √† comprendre, m√™me pour les personnes non impliqu√©es dans leur d√©veloppement.\n* **Documentation vivante:** Les sc√©narios [[Gherkin]] servent √©galement de documentation ex√©cutable du syst√®me.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  La mise en place et l'utilisation efficace de Cucumber peuvent n√©cessiter un certain temps d'apprentissage, notamment pour d√©finir des conventions claires et coh√©rentes.\n* **N√©cessite une bonne collaboration:**  Le succ√®s de Cucumber d√©pend fortement de la collaboration entre les √©quipes et d'une bonne compr√©hension des conventions utilis√©es.  Des d√©finitions ambig√ºes des \"Given\", \"When\" et \"Then\" peuvent rendre les tests difficiles √† maintenir.\n* **Peut √™tre verbeux:** Pour des tests complexes, la description [[Gherkin]] peut devenir assez longue et d√©taill√©e.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "7ec4ed2f-43a1-4eb2-a1aa-108cb2b03985",
        "title": "Cypress",
        "description": "---\nid: 80fa04db-9979-4f13-ae6a-087b96aa069b\n---\n# Rapidement c'est quoi‚ùì\n\nCypress est un framework de test [[JavaScript]] populaire pour les applications web. Il permet de r√©aliser des [[Test End2End (E2E)]] et des [[Test unitaire (TU)]] de composants.  Il se distingue par sa facilit√© d'utilisation et son approche int√©gr√©e.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCypress est un outil complet pour le test d'applications web.  Il offre une approche bas√©e sur le [[Document Object Model (DOM)]], ex√©cutant les tests directement dans le navigateur.  Cela permet une interaction plus naturelle et intuitive avec l'application test√©e, contrairement √† des solutions qui interagissent de mani√®re distante.\n\nCypress propose deux types de tests principaux :\n\n* **[[Test End2End (E2E)]]:**  Ces tests simulent le comportement d'un utilisateur r√©el, interagissant avec l'interface utilisateur de bout en bout.  Ils v√©rifient le flux complet d'une action, de l'interaction de l'utilisateur √† la r√©ponse du serveur.\n\n* **[[Test de Composant]]:**  Ces tests permettent de tester des composants individuels de l'interface utilisateur isol√©ment, sans d√©pendance √† l'application compl√®te. Ceci permet des tests unitaires plus rapides et cibl√©s.\n\nL'ex√©cution des tests se fait directement dans le navigateur, offrant un d√©bogage facile et une meilleure visibilit√© sur le d√©roulement des tests.  Cypress propose une API intuitive et chainable, facilitant la cr√©ation et la maintenance des tests.  Les fonctions principales incluent la s√©lection d'√©l√©ments (ex: `cy.get()`, `cy.contains()`), l'interaction avec les √©l√©ments (ex: `cy.click()`, `cy.type()`), et les assertions (ex: `cy.should()`).  Des fonctionnalit√©s avanc√©es comme l'interception des requ√™tes r√©seau (`cy.intercept()`), l'ex√©cution de t√¢ches personnalis√©es (`cy.task()`), et la g√©n√©ration de rapports avec captures d'√©cran sont √©galement disponibles.  La prise en charge de la couverture de code est possible via des plugins tiers.\n\nLa configuration est relativement simple, n√©cessitant un fichier `cypress.config.js` (ou `cypress.config.ts`) pour sp√©cifier les param√®tres de configuration, tels que l'URL de l'application et le navigateur √† utiliser.  La gestion des donn√©es de test peut √™tre r√©alis√©e via des dumps de base de donn√©es ou d'autres techniques.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Facilit√© d'utilisation et d'apprentissage:** L'API intuitive et la documentation claire rendent Cypress accessible aux d√©butants.\n* **D√©bogage simplifi√©:** L'ex√©cution dans le navigateur permet un d√©bogage facile et visuel.\n* **Tests rapides et fiables:**  L'ex√©cution directe dans le navigateur assure des tests rapides et stables.\n* **API chainable:** La possibilit√© d'encha√Æner les commandes facilite la cr√©ation de tests lisibles et maintenables.\n* **Fonctionnalit√©s compl√®tes:** Cypress offre un ensemble complet de fonctionnalit√©s, incluant la g√©n√©ration de rapports, les captures d'√©cran, et l'interception des requ√™tes r√©seau.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Support limit√© de Safari:** Le support de [[Safari]] est moins complet que pour d'autres navigateurs.\n* **Gestion limit√©e des onglets multiples:** La gestion des tests sur plusieurs onglets est limit√©e.\n* **Pas de support natif pour les tests mobiles:** Bien qu'il soit possible d'utiliser des solutions alternatives, il n'y a pas de support natif pour les tests sur des appareils mobiles.\n* **Prise en charge limit√©e des applications non-web:**  Son utilisation principale se concentre sur le web; l'adaptation √† d'autres types d'applications (ex: [[Electron]]) peut n√©cessiter des solutions sp√©cifiques.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]\n"
    },
    {
        "id": "9d6e109e-a4f3-49f9-a5b4-83691dd4497a",
        "title": "Debezium",
        "description": "---\nid: 1f2f593a-0a66-4f5d-860c-1677d5949620\n---\n# Rapidement c'est quoi‚ùì\n\nDebezium est un outil open-source qui capture et diffuse en temps r√©el les modifications de donn√©es ([[Capture Data Change (CDC)]]) dans les [[Base de donn√©e]].  Il permet de traiter ces changements de mani√®re fiable et efficace.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nDebezium est un middleware de [[Capture Data Change (CDC)]] qui s'int√®gre √† diff√©rentes [[Base de donn√©e]] ([[MySQL]], [[PostgreSQL]], [[MongoDB]], [[Oracle]], etc.) pour capturer les modifications de donn√©es (insertions, mises √† jour, suppressions) de mani√®re transparente.  Il utilise des m√©canismes sp√©cifiques √† chaque syst√®me de gestion de bases de donn√©es (SGBD) pour surveiller les logs de transactions (binlogs, WAL, oplogs, etc.) et extraire les √©v√©nements de changement.  Ces √©v√©nements sont ensuite format√©s en JSON et diffus√©s via diff√©rents connecteurs ([[Apache Kafka]], etc.).  La diffusion des donn√©es est effectu√©e de mani√®re incr√©mentale, envoyant uniquement les modifications, ce qui rend le processus efficient et √©vite la duplication massive de donn√©es.  \n\nDebezium offre des fonctionnalit√©s avanc√©es comme :\n\n* **Filtrage des donn√©es:**  Possibilit√© de filtrer les donn√©es captur√©es en fonction de tables, de colonnes ou de crit√®res sp√©cifiques.\n* **Transformation des donn√©es:**  Les donn√©es peuvent √™tre transform√©es avant d'√™tre diffus√©es, par exemple pour normaliser les formats ou enrichir les √©v√©nements avec des informations contextuelles.\n* **Gestion des erreurs et de la reprise:**  Debezium int√®gre des m√©canismes pour g√©rer les erreurs et assurer la reprise sur panne.\n* **Haute disponibilit√©:**  La conception du syst√®me permet une haute disponibilit√© gr√¢ce √† l'utilisation de technologies distribu√©es.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et communautaire:**  B√©n√©ficie d'un grand support communautaire et d'une maintenance active.\n* **Support de multiples SGBD:**  Permet de capturer les modifications de donn√©es dans une vari√©t√© de bases de donn√©es.\n* **Performances et scalabilit√©:**  Con√ßu pour g√©rer de grands volumes de donn√©es et s'adapter √† des besoins croissants.\n* **Flexibilit√©:**  Offre des options de configuration et de personnalisation √©tendues.\n* **Int√©gration avec [[Apache Kafka]]:**  S'int√®gre facilement avec [[Apache Kafka]] pour une diffusion robuste et distribu√©e des donn√©es.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:**  La configuration initiale peut √™tre complexe, surtout pour des environnements h√©t√©rog√®nes.\n* **Courbe d'apprentissage:**  N√©cessite une certaine expertise en mati√®re de [[Base de donn√©e]], de [[Data Streaming]] et de [[Capture Data Change (CDC)]].\n* **D√©pendances:**  D√©pend de diff√©rentes technologies ([[Apache Kafka]], par exemple), ajoutant une couche de complexit√© √† la mise en place.\n* **Gestion des sch√©mas:**  La gestion des √©volutions de sch√©mas de donn√©es peut n√©cessiter une attention particuli√®re.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "103bec1a-cef0-45fb-8eb1-c13ed1074984",
        "title": "Docker Swarm",
        "description": "---\nid: 3c134b45-51a4-4e25-9876-82facf350999\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Docker Swarm** est un outil d'orchestration de containers int√©gr√© √† [[Docker]]. Il permet de g√©rer un cluster de machines pour d√©ployer et orchestrer des applications conteneuris√©es de mani√®re simple et scalable.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nDocker Swarm permet de cr√©er un cluster de machines (n≈ìuds) et de d√©ployer des containers sur ces n≈ìuds. Il utilise un algorithme de consensus appel√© **[[Raft]]** pour √©lire un leader et g√©rer l'√©tat du cluster. Swarm facilite la gestion des services distribu√©s, la mise √† l'√©chelle automatique et la tol√©rance aux pannes. La configuration est simplifi√©e et ressemble √† un **[[Docker Compose]]** am√©lior√©.\n\n- **N≈ìuds** : Au moins 3 (id√©alement 5) n≈ìuds sont n√©cessaires pour garantir la r√©silience du cluster.\n- **Int√©gration avec Docker** : Swarm est inclus avec Docker, donc aucune installation suppl√©mentaire n'est n√©cessaire.\n- **Interface graphique** : Des outils comme **[[Portainer]]** peuvent √™tre utilis√©s pour g√©rer visuellement le cluster Docker Swarm.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Facilit√© d'int√©gration** : D√©j√† inclus avec [[Docker]], pas besoin d'installation suppl√©mentaire.\n- **Simplicit√© de configuration** : La configuration des services se fait via un fichier similaire √† Docker Compose.\n- **Haute disponibilit√©** : Gr√¢ce √† [[Raft]], le leader du cluster est √©lu et le consensus est maintenu, ce qui garantit la r√©silience.\n- **Mise √† l'√©chelle automatique** : Permet d'ajuster automatiquement le nombre de r√©plicas des services selon la charge.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Moins de fonctionnalit√©s avanc√©es** : Par rapport √† [[Kubernetes]], Swarm propose moins de fonctionnalit√©s avanc√©es pour la gestion complexe des clusters.\n- **Scalabilit√© limit√©e** : Bien que Swarm soit bien adapt√© pour des petits √† moyens clusters, il n'est pas aussi performant que [[Kubernetes]] pour des environnements de tr√®s grande √©chelle.\n- **Communaut√© plus petite** : La communaut√© et les ressources sont plus limit√©es compar√©es √† des solutions comme [[Kubernetes]].\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "23f53224-8522-45d1-b851-4fff726a77a5",
        "title": "Certification Java 17 - D√©ploiement et Modules Java",
        "description": "---\nid: e04928bd-dd1d-411a-a12e-6760db620a4c\n---\n## **12.1. Compilation et cr√©ation de JARs (modulaires et non-modulaires)**\n\nJava permet de compiler et de regrouper les classes dans des fichiers **JAR** (`Java Archive`). Avec **Java 9+, le syst√®me de modules (`JPMS`)** permet de mieux organiser les d√©pendances.\n\n---\n\n### **1. Compilation et ex√©cution d‚Äôun projet classique (non modulaire)**\n\nüìå **Un projet classique n‚Äôutilise pas `module-info.java`**\n\n**Compilation** :\n\n```sh\njavac -d out src/com/exemple/Main.java\n```\n\n**Cr√©ation du JAR :**\n\n```sh\njar --create --file monApp.jar -C out .\n```\n\n**Ex√©cution :**\n\n```sh\njava -jar monApp.jar\n```\n\n---\n\n### **2. Compilation et ex√©cution d‚Äôun projet modulaire**\n\nüìå **Un projet modulaire utilise `module-info.java`.**\n\nüìÇ **Structure :**\n\n```\n/mon-projet\n  /src\n    /com.exemple.main\n      module-info.java\n      Main.java\n```\n\nüìÑ **`module-info.java`**\n\n```java\nmodule com.exemple.main {\n    requires com.exemple.util;\n}\n```\n\n**Compilation** :\n\n```sh\njavac -d out --module-source-path src $(find src -name \"*.java\")\n```\n\n**Cr√©ation du JAR modulaire :**\n\n```sh\njar --create --file mods/com.exemple.main.jar --module-version=1.0 -C out/com.exemple.main .\n```\n\n**Ex√©cution du module :**\n\n```sh\njava --module-path mods -m com.exemple.main/com.exemple.Main\n```\n\nüìå **Avantages des JARs modulaires :**\n\n- Encapsulation des modules.\n- R√©duction des conflits de d√©pendances.\n\n---\n\n## **12.2. Cr√©ation d‚Äôimages d‚Äôex√©cution avec `jlink`**\n\nüìå **Depuis Java 9, `jlink` permet de cr√©er une image d‚Äôex√©cution sans installer une JDK compl√®te.**\n\n### **1. G√©n√©ration d‚Äôune image compacte**\n\n```sh\njlink --module-path $JAVA_HOME/jmods:mods \\\n      --add-modules com.exemple.main \\\n      --output monApp-image\n```\n\nüìå **Cela cr√©e un dossier `monApp-image` contenant une JRE minimale avec uniquement les modules n√©cessaires.**\n\n**Ex√©cution de l‚Äôapplication sans JDK install√© :**\n\n```sh\nmonApp-image/bin/java -m com.exemple.main/com.exemple.Main\n```\n\nüìå **Avantages de `jlink` :**\n\n- R√©duction de la taille de l‚Äôapplication.\n- Pas besoin d‚Äôune installation Java sur l‚Äôenvironnement cible.\n\n---\n\n## **12.3. Migration avec modules anonymes et automatiques**\n\nüìå **Lors de la migration d‚Äôun projet Java classique vers un projet modulaire, il existe trois types de modules :**\n\n|**Type de module**|**D√©finition**|\n|---|---|\n|**Module Explicite**|D√©fini avec `module-info.java`|\n|**Module Automatique**|Un JAR classique dans `module-path` devient un module|\n|**Module Anonyme**|Un JAR non modulaire plac√© dans `classpath`|\n\n---\n\n### **1. Modules automatiques**\n\nüìå **Un JAR non modulaire devient un module s‚Äôil est plac√© dans `--module-path`.**\n\nExemple :\n\n```sh\njava --module-path lib --add-modules nom.du.module -m com.exemple.main/com.exemple.Main\n```\n\nüìå **Son nom est d√©riv√© du fichier JAR (`lib/monJAR.jar` devient `monJAR`).**\n\n---\n\n### **2. Modules anonymes**\n\nüìå **Si un JAR est laiss√© dans le `classpath`, il fonctionne comme un module anonyme.**\n\nExemple :\n\n```sh\njava -classpath lib/monJAR.jar com.exemple.Main\n```\n\nüìå **Mais il ne peut pas √™tre r√©f√©renc√© par un module explicite.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **JARs : Compilation et cr√©ation de JARs modulaires et non-modulaires.**  \n‚úÖ **`jlink` : Cr√©ation d‚Äôune image d‚Äôex√©cution sans JDK complet.**  \n‚úÖ **Migration vers Java 9+ : Modules anonymes et automatiques pour compatibilit√©.**\n"
    },
    {
        "id": "0720059e-55bb-4a4b-bb8d-75fd23d0c0df",
        "title": "Elastic Search",
        "description": "---\nid: 694568ef-b128-4cdb-bc87-67ae174314f9\n---\n# Rapidement c'est quoi‚ùì\n\nElasticsearch est un moteur de recherche et une [[Base de donn√©e NoSQL]] distribu√©e, open source, permettant des recherches complexes et rapides sur de grands volumes de donn√©es.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nElasticsearch est un syst√®me de recherche et d'analyse de donn√©es bas√© sur le moteur de recherche [[Apache Lucene]]. Il utilise une architecture distribu√©e, permettant de r√©partir les donn√©es sur plusieurs serveurs pour am√©liorer les performances et la scalabilit√©.  Il indexe les donn√©es (les transforme en un format optimis√© pour la recherche) et les stocke dans une structure invers√©e, permettant des recherches rapides m√™me sur des ensembles de donn√©es tr√®s volumineux.  Contrairement aux bases de donn√©es relationnelles, Elasticsearch n'utilise pas de sch√©mas fixes, offrant une grande flexibilit√©.  Il supporte de nombreux types de donn√©es (texte, num√©rique, g√©ographique, etc.) et permet de r√©aliser des requ√™tes complexes avec des filtres, des agr√©gations, et des fonctionnalit√©s de scoring pour classer les r√©sultats.  Il est souvent utilis√© pour la recherche en temps r√©el, l'analyse de logs, la surveillance, et bien d'autres applications n√©cessitant des recherches performantes sur des donn√©es non-structur√©es ou semi-structur√©es.  Son API RESTful facilite son int√©gration avec d'autres applications.  La gestion de clusters permet une haute disponibilit√© et une tol√©rance aux pannes.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance de recherche:**  Extr√™mement rapide, m√™me sur des index gigantesques.\n* **Scalabilit√©:** Facilement extensible pour g√©rer des volumes de donn√©es croissants.\n* **Flexibilit√©:**  Supporte diff√©rents types de donn√©es et permet des requ√™tes complexes.\n* **Open source:** Communaut√© active et large choix d'outils et de plugins.\n* **API RESTful simple et intuitive:**  Facilite l'int√©gration avec d'autres syst√®mes.\n* **Haute disponibilit√©:**  Architecture distribu√©e permettant une tol√©rance aux pannes.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:**  La configuration et la gestion d'un cluster Elasticsearch peuvent √™tre complexes pour les d√©butants.\n* **Consommation de ressources:**  N√©cessite des ressources mat√©rielles importantes pour g√©rer de grands volumes de donn√©es.\n* **Gestion des transactions:**  Pas aussi robuste que les bases de donn√©es relationnelles pour les transactions ACID.\n* **D√©pendance aux plugins:** Certaines fonctionnalit√©s avanc√©es n√©cessitent l'installation de plugins.\n* **Courbe d'apprentissage:** Peut n√©cessiter un temps d'apprentissage cons√©quent pour ma√Ætriser toutes ses fonctionnalit√©s.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "d7d2e235-de41-4429-8cc3-2048f7ea0f17",
        "title": "Feature Flag",
        "description": "---\nid: 5c3b2bc6-21b3-493c-8658-e5078738ffc5\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **feature flags** sont des m√©canismes permettant d'activer ou de d√©sactiver des fonctionnalit√©s dans une application sans avoir √† red√©ployer le code. Elles permettent de contr√¥ler l'acc√®s √† certaines parties du logiciel en temps r√©el.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn **feature flag** (ou _switch_) est un contr√¥le qui permet de g√©rer dynamiquement l'activation d'une fonctionnalit√© dans une application. Cela permet de :\n\n- **D√©sactiver rapidement** une fonctionnalit√© en cas de bugs ou de probl√®me de performance.\n- **Restreindre l'acc√®s** √† certaines fonctionnalit√©s en fonction de crit√®res (utilisateur, r√©gion, version, etc.).\n- **Tester des fonctionnalit√©s** (A/B testing) et exp√©rimenter des √©volutions avant de les d√©ployer √† tous les utilisateurs.\n\nLes **feature flags** doivent √™tre utilis√©s temporairement. Une fois qu'une fonctionnalit√© est stable et valid√©e, le flag devient inutile et doit √™tre retir√©.\n\nLes **paradigmes** de gestion des flags sont les suivants :\n\n- **√âvaluation c√¥t√© serveur** : Le serveur v√©rifie le statut du flag √† chaque appel.\n- **√âvaluation c√¥t√© client** : Le flag est mis √† jour dans le navigateur et peut imm√©diatement changer l'√©tat de la page.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Flexibilit√©** : Permet d'activer ou d√©sactiver des fonctionnalit√©s sans red√©ployer, facilitant les corrections rapides.\n- **Contr√¥le en temps r√©el** : Offre un contr√¥le granulaire sur la disponibilit√© des fonctionnalit√©s.\n- **Am√©lioration de la gestion des risques** : Id√©al pour tester des nouvelles fonctionnalit√©s sans impacter tous les utilisateurs.\n- **Exp√©rimentation** : Pratique pour effectuer des tests A/B et valider des changements avant leur d√©ploiement complet.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© de gestion** : Si trop de flags sont laiss√©s en place, cela peut rendre le code plus complexe √† maintenir.\n- **Risques de d√©pendances** : L'activation ou la d√©sactivation des flags peut introduire des comportements inattendus si mal g√©r√©s.\n- **Dettes techniques** : Les flags doivent √™tre supprim√©s d√®s qu'ils ne sont plus n√©cessaires, sinon ils peuvent s'accumuler et encombrer le code.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "dae92eec-24b8-41c0-9323-03f55e0f261f",
        "title": "Feign",
        "description": "---\nid: e2c9e1f7-64bc-479b-b312-977feb4a83ec\n---\n# Rapidement c'est quoi‚ùì\n\nFeign est une biblioth√®que [[Java]] qui simplifie la cr√©ation d'interfaces clientes pour communiquer avec des services web [[RESTful]].  Elle permet de d√©finir des interfaces Java qui sont ensuite traduites en appels [[HTTP]] par Feign.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nFeign est une biblioth√®que client [[HTTP]] d√©clarative pour [[Java]].  Au lieu d'√©crire du code HTTP verbeux (gestion des connexions, envoi des requ√™tes, parsing des r√©ponses...), vous d√©clarez une interface Java annot√©e avec des annotations sp√©cifiques (comme `@RequestMapping` de Spring MVC) pour d√©finir les endpoints des services web. Feign se charge ensuite de g√©n√©rer le code n√©cessaire pour effectuer les appels HTTP et de g√©rer les d√©tails de bas niveau.  L'interface d√©crit simplement la m√©thode HTTP (GET, POST, etc.), l'URL, les param√®tres d'entr√©e et la structure des donn√©es de sortie.\n\nFeign s'int√®gre particuli√®rement bien avec [[Spring Boot]], offrant un starter qui simplifie encore plus son int√©gration et sa configuration.  Il est souvent utilis√© dans les [[Micros services]] pour communiquer entre eux, facilitant la gestion des appels inter-services et am√©liorant la maintenabilit√© du code.  Il supporte diff√©rents codecs (pour la s√©rialisation/d√©s√©rialisation des donn√©es) comme [[Jackson]] et [[Gson]].  L'int√©gration avec des m√©canismes de gestion des erreurs et de retries est √©galement possible.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **D√©claratif et concis:**  Le code est plus lisible et plus facile √† maintenir gr√¢ce √† l'approche d√©clarative.  On se concentre sur la logique m√©tier plut√¥t que sur les d√©tails [[HTTP]].\n* **Int√©gration [[Spring Boot]]:**  Le starter [[Spring Boot]] simplifie consid√©rablement la configuration et l'int√©gration avec l'√©cosyst√®me Spring.\n* **Support de plusieurs codecs:**  La flexibilit√© de choisir son codec ([[Jackson]], [[Gson]], etc.) permet de s'adapter √† diff√©rents besoins de s√©rialisation/d√©s√©rialisation.\n* **Am√©lioration de la maintenabilit√©:**  Le code est plus propre et plus facile √† comprendre, ce qui facilite la maintenance et les modifications futures.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage initiale:**  Bien que d√©claratif, il faut comprendre les annotations et les m√©canismes de Feign pour l'utiliser efficacement.\n* **D√©bogage:**  Le d√©bogage peut √™tre plus complexe car les appels HTTP sont g√©r√©s en interne par Feign.  Un bon logging est essentiel.\n* **Complexit√© potentielle pour des sc√©narios avanc√©s:**  Pour des sc√©narios complexes de gestion des erreurs, d'authentification ou de proxies, une configuration plus avanc√©e peut √™tre n√©cessaire.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "811981f6-bf27-4a66-b238-b039f2f14b3e",
        "title": "Firecracker",
        "description": "---\nid: 77d3c304-e73a-4cb4-b3b3-3a683e1ce849\n---\n# Rapidement c'est quoi‚ùì\n\nFirecracker est une technologie de [[Virtualisation]] l√©g√®re, permettant de lancer des micro-machines virtuelles (micro [[VM]]) isol√©es. [[AWS]] l'utilise notamment pour son service Lambda.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nFirecracker est un hyperviseur open source d√©velopp√© par Amazon Web Services ([[AWS]]).  Son objectif principal est de fournir un environnement d'ex√©cution s√©curis√© et performant pour les fonctions sans serveur.  Au lieu d'utiliser des conteneurs ou des processus partag√©s, Firecracker cr√©e une microVM pour chaque fonction. Cela signifie que chaque fonction s'ex√©cute dans son propre espace d'adressage isol√©, avec son propre noyau l√©ger.  Ce niveau d'isolation am√©liore la s√©curit√© en emp√™chant une fonction compromise d'affecter les autres.  Les microVM Firecracker sont con√ßues pour d√©marrer tr√®s rapidement (millisecondes) et utiliser des ressources minimales, ce qui est crucial pour les architectures [[Function as a Service (FaaS)]] o√π de nombreuses fonctions peuvent √™tre ex√©cut√©es simultan√©ment.  Son architecture repose sur un hyperviseur bas√© sur [[Kernel-based Virtual Machine (KVM)]],  mais avec une surface d'attaque significativement r√©duite gr√¢ce √† un design minimaliste et une gestion fine des ressources.  Cela assure une meilleure performance et une plus grande fiabilit√© compar√© √† des solutions de virtualisation plus lourdes.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **S√©curit√© accrue:** L'isolation au niveau de la [[microVM]] offre une s√©curit√© significativement am√©lior√©e par rapport aux conteneurs, limitant l'impact d'une compromission.\n* **D√©marrage rapide:** Les [[microVM]] Firecracker d√©marrent tr√®s rapidement, optimisant l'efficacit√© des architectures [[Function as a Service (FaaS)]].\n* **Ressources l√©g√®res:** Elles utilisent peu de ressources syst√®me, permettant un meilleur rapport co√ªt-performance.\n* **Open source:** La nature open source permet l'auditabilit√© du code et la contribution de la communaut√©.\n* **Int√©gration avec les outils existants:**  Firecracker peut s'int√©grer facilement avec des syst√®mes existants pour la gestion et le provisionnement des machines virtuelles.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La gestion de nombreuses [[microVM]] peut complexifier l'infrastructure par rapport √† des solutions bas√©es sur des conteneurs.\n* **Surco√ªt potentiel:**  Bien que l√©ger, le surco√ªt de la virtualisation reste pr√©sent compar√© √† l'ex√©cution directe de fonctions dans un environnement non virtualis√©.  Toutefois, ce surco√ªt est souvent compens√© par les gains en s√©curit√© et isolation.\n* **N√©cessite un hyperviseur compatible:** Le fonctionnement repose sur un hyperviseur compatible, comme [[Kernel-based Virtual Machine (KVM)]].\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "336c3829-0dde-46ae-ad99-313b5adff93d",
        "title": "Flintlock",
        "description": "---\nid: 84fd28c0-e6a9-44a2-adec-e0a23bf37653\n---\n# Rapidement c'est quoi‚ùì\n\nFlintlock est un gestionnaire de paquets pour [[Firecracker]].  Il simplifie le d√©ploiement et la gestion de microservices bas√©s sur [[Firecracker]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nFlintlock est un outil en ligne de commande qui permet de g√©rer le cycle de vie complet des [[microVM]] bas√©es sur [[Firecracker]].  Il automatise des t√¢ches telles que la cr√©ation, le d√©marrage, l'arr√™t et la suppression de [[microVM]], ainsi que la gestion des images de d√©marrage et des ressources associ√©es.  Flintlock g√®re la configuration des [[microVM]], y compris l'allocation de ressources CPU, m√©moire et stockage. Il permet √©galement de g√©rer le r√©seautage des [[microVM]], en les connectant √† des r√©seaux virtuels ou physiques.  L'objectif principal de Flintlock est de simplifier le processus de d√©ploiement et de gestion d'applications conteneuris√©es ou sans serveur, ex√©cut√©es dans des environnements isol√©s et s√©curis√©s gr√¢ce √† [[Firecracker]]. Il agit comme une couche d'abstraction, cachant la complexit√© de la gestion directe de Firecracker.  Flintlock utilise des fichiers de configuration (g√©n√©ralement au format YAML) pour d√©finir les param√®tres des [[microVM]].  Ces configurations d√©crivent les ressources allou√©es, les images √† utiliser, les r√©seaux et autres aspects du d√©ploiement.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Automatisation:**  Flintlock automatise les t√¢ches r√©p√©titives, simplifiant consid√©rablement la gestion des [[microVM]].\n* **Simplification:**  Il masque la complexit√© de [[Firecracker]], le rendant plus accessible aux d√©veloppeurs.\n* **Gestion de cycle de vie complet:**  Il g√®re la cr√©ation, le d√©marrage, l'arr√™t et la suppression des [[microVM]].\n* **Gestion des ressources:**  Il permet un contr√¥le pr√©cis de l'allocation des ressources (CPU, m√©moire, stockage).\n* **Int√©gration facile (potentielle):**  Son interface en ligne de commande facilite l'int√©gration dans des pipelines [[CI/CD]].\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Maturit√©:**  En tant que projet relativement r√©cent, Flintlock pourrait pr√©senter des bugs ou des fonctionnalit√©s manquantes.\n* **Documentation:** La documentation pourrait √™tre plus compl√®te et d√©taill√©e pour certains aspects.\n* **D√©pendance √† Firecracker:** Flintlock est intrins√®quement li√© √† [[Firecracker]], limitant son usage aux environnements utilisant ce hyperviseur.\n* **Communaut√©:** La communaut√© autour de Flintlock pourrait √™tre moins active que pour des projets plus √©tablis.\n\n\n---\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "ea91c790-320f-495e-9b38-8c6c3795e063",
        "title": "Function as a Service (FaaS)",
        "description": "---\nid: 549b4aed-718c-4342-8b40-b3a1f957ef81\n---\n# Rapidement c'est quoi‚ùì\n\nFonction as a Service (FaaS) : Ex√©cution de code sans gestion d'infrastructures.  Vous envoyez du code, il s'ex√©cute, puis les ressources sont lib√©r√©es.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe Function as a Service (FaaS) est un mod√®le de cloud computing o√π le fournisseur de cloud g√®re l'infrastructure et vous fournissez uniquement le code de votre fonction.  Cette fonction est un petit morceau de code, g√©n√©ralement sans √©tat (stateless), qui s'ex√©cute en r√©ponse √† un √©v√©nement sp√©cifique.  Cet √©v√©nement peut √™tre une requ√™te [[HTTP]], un message dans une file d'attente, un changement de donn√©es dans une base de donn√©es, etc.\n\nUne fois l'√©v√©nement d√©clencheur trait√©, la fonction s'ex√©cute, effectue son traitement (par exemple, le traitement d'une image, l'envoi d'un email, la mise √† jour d'une base de donn√©es), puis se termine.  Le fournisseur de cloud g√®re automatiquement le scaling (mise √† l'√©chelle) : il peut ex√©cuter plusieurs instances de votre fonction simultan√©ment pour g√©rer les pics de demande, et r√©duire le nombre d'instances lorsque la demande diminue.  Vous ne payez que pour la dur√©e d'ex√©cution de votre fonction, ce qui permet une tarification tr√®s avantageuse pour les charges de travail sporadiques ou impr√©visibles.\n\nLes plateformes FaaS populaires incluent [[AWS Lambda]], [[Google Cloud Functions]], [[Azure Functions]], etc.  Elles offrent des fonctionnalit√©s suppl√©mentaires comme le monitoring, le logging, et l'int√©gration avec d'autres services cloud.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Tarification √©conomique:** Payez uniquement pour le temps d'ex√©cution, id√©al pour les applications √©v√©nementielles et les [[Micros services]].\n* **Scalabilit√© automatique:** Le fournisseur de cloud g√®re la mise √† l'√©chelle, vous n'avez pas √† vous soucier des ressources.\n* **Simplicit√© de d√©ploiement:** D√©ployez facilement votre code sans g√©rer d'infrastructures.\n* **Maintenance r√©duite:** Le fournisseur de cloud g√®re la maintenance et les mises √† jour.\n* **Int√©gration facile:** S'int√®gre souvent avec d'autres services cloud.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Cold starts:** Le premier appel √† une fonction peut prendre plus de temps car elle doit √™tre initialis√©e.\n* **Limitations de ressources:** Les fonctions ont des limitations de ressources (m√©moire, temps d'ex√©cution).\n* **D√©bogage plus complexe:** Le d√©bogage peut √™tre plus complexe que dans une application traditionnelle.\n* **Mod√®le √©v√©nementiel:**  Ne convient pas √† toutes les applications, notamment celles n√©cessitant des connexions persistantes ou un √©tat stable.\n* **Verrouillage fournisseur:** Migration potentiellement difficile entre diff√©rents fournisseurs de FaaS.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "eaaa031f-71c3-45df-9287-a65bff77495b",
        "title": "Certification Java 17 - Gestion des Exceptions",
        "description": "---\nid: 92360517-fdbe-479f-bdfb-06c5d02db86f\n---\n## **6.1. Utilisation de `try/catch/finally`**\n\nEn Java, une **exception** est une erreur qui interrompt le programme. Elle peut √™tre **g√©r√©e** avec `try/catch/finally`.\n\n### **Structure d‚Äôun bloc `try/catch/finally`**\n\n```java\ntry {\n    int result = 10 / 0;  // Provoque une ArithmeticException\n    System.out.println(result);\n} catch (ArithmeticException e) {\n    System.out.println(\"Erreur : division par z√©ro !\");\n} finally {\n    System.out.println(\"Ce bloc s‚Äôex√©cute toujours !\");\n}\n```\n\nüìå **Le `finally` est toujours ex√©cut√©**, m√™me en cas d‚Äôexception. Il sert g√©n√©ralement √† **fermer des ressources** (fichiers, connexions).\n\n---\n\n## **6.2. `try-with-resources` : Gestion automatique des ressources**\n\nIntroduit en **Java 7**, ce bloc permet de fermer automatiquement les ressources impl√©mentant **`AutoCloseable`**.\n\n### **Exemple avec `try-with-resources`**\n\n```java\nimport java.io.*;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"fichier.txt\"))) {\n            System.out.println(br.readLine()); // Lit la premi√®re ligne\n        } catch (IOException e) {\n            System.out.println(\"Erreur d'E/S : \" + e.getMessage());\n        }\n    }\n}\n```\n\nüìå **Pas besoin de fermer `BufferedReader` manuellement**, il est automatiquement ferm√© √† la fin du bloc.\n\n---\n\n## **6.3. Multi-catch : Attraper plusieurs exceptions**\n\nDepuis **Java 7**, on peut attraper plusieurs exceptions dans un seul `catch`, avec `|`.\n\n```java\ntry {\n    int[] tab = {1, 2, 3};\n    System.out.println(tab[5]);  // Provoque une ArrayIndexOutOfBoundsException\n} catch (ArithmeticException | ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Erreur : \" + e.getClass().getSimpleName());\n}\n```\n\nüìå **Avantages :**\n\n- Simplifie le code en regroupant des exceptions similaires.\n- √âvite les blocs `catch` redondants.\n\nüìå **Restrictions :**\n\n- Les exceptions ne doivent **pas avoir de relation d‚Äôh√©ritage** (ex: `IOException` et `FileNotFoundException` sont invalides ensemble, car `FileNotFoundException` h√©rite de `IOException`).\n\n---\n\n## **6.4. Exceptions personnalis√©es (`extends Exception` ou `extends RuntimeException`)**\n\n### **1. Exceptions contr√¥l√©es (`extends Exception`)**\n\nüîπ **Obligation** de les g√©rer avec `try/catch` ou `throws`.  \nüîπ Utilis√©es pour les erreurs pr√©visibles (ex : erreurs m√©tier).\n\n```java\nclass MonException extends Exception {\n    public MonException(String message) {\n        super(message);\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        try {\n            verifier(15);\n        } catch (MonException e) {\n            System.out.println(\"Erreur captur√©e : \" + e.getMessage());\n        }\n    }\n\n    static void verifier(int valeur) throws MonException {\n        if (valeur < 18) {\n            throw new MonException(\"√Çge insuffisant !\");\n        }\n    }\n}\n```\n\nüìå **`throws` indique qu‚Äôune m√©thode peut lever une exception.**\n\n---\n\n### **2. Exceptions non contr√¥l√©es (`extends RuntimeException`)**\n\nüîπ **Pas besoin** de `try/catch`, elles interrompent le programme.  \nüîπ Utilis√©es pour des erreurs de programmation (ex : `NullPointerException`).\n\n```java\nclass MonRuntimeException extends RuntimeException {\n    public MonRuntimeException(String message) {\n        super(message);\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        calculer(0);\n    }\n\n    static void calculer(int valeur) {\n        if (valeur == 0) {\n            throw new MonRuntimeException(\"Division par z√©ro interdite !\");\n        }\n    }\n}\n```\n\nüìå **Diff√©rence avec `Exception`** : pas d'obligation de gestion avec `try/catch`.\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **`try/catch/finally`** : G√®re les erreurs, `finally` s'ex√©cute toujours.  \n‚úÖ **`try-with-resources`** : Ferme automatiquement les ressources (`AutoCloseable`).  \n‚úÖ **Multi-catch (`catch` multiple)** : Regroupe plusieurs exceptions en une seule clause.  \n‚úÖ **Exceptions personnalis√©es** :\n\n- `extends Exception` (**contr√¥l√©es**) ‚Üí Doit √™tre g√©r√©e (`throws` ou `try/catch`).\n- `extends RuntimeException` (**non contr√¥l√©es**) ‚Üí Pas d‚Äôobligation de gestion.\n\n---"
    },
    {
        "id": "f750c1bb-d1a8-4f7f-b3d5-2dc4dfab5455",
        "title": "Certification Java 17 - Gestion des types Date, Temps, Texte et Num√©rique",
        "description": "---\nid: 8ed7f80e-caff-443e-8f21-ac0ffb429bec\n---\n## **4.1. API Date-Time : `LocalDate`, `LocalTime`, `LocalDateTime`, `ZonedDateTime`**\n\nDepuis **Java 8**, la gestion des dates et heures se fait via l‚Äô**API `java.time`**, qui remplace `java.util.Date` et `java.util.Calendar`.\n\n|**Classe**|**Description**|\n|---|---|\n|`LocalDate`|Date sans heure ni fuseau horaire|\n|`LocalTime`|Heure sans date ni fuseau horaire|\n|`LocalDateTime`|Date et heure sans fuseau horaire|\n|`ZonedDateTime`|Date, heure et fuseau horaire|\n\n### **Exemples : Cr√©ation et manipulation**\n\n```java\nimport java.time.*;\n\npublic class DateTimeDemo {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.now();  // Date actuelle\n        LocalTime time = LocalTime.now();  // Heure actuelle\n        LocalDateTime dateTime = LocalDateTime.now();  // Date et heure actuelle\n        ZonedDateTime zonedDateTime = ZonedDateTime.now();  // Avec fuseau horaire\n\n        System.out.println(date);         // 2025-03-05\n        System.out.println(time);         // 14:30:45.123\n        System.out.println(dateTime);     // 2025-03-05T14:30:45.123\n        System.out.println(zonedDateTime);// 2025-03-05T14:30:45.123+01:00[Europe/Paris]\n    }\n}\n```\n\n### **Manipulation des dates et heures**\n\nLes objets `java.time` sont **immuables**, donc chaque modification retourne une nouvelle instance.\n\n```java\nLocalDate date = LocalDate.of(2025, 3, 5);\nLocalDate newDate = date.plusDays(10).minusMonths(1);  // 2025-02-15\nLocalTime newTime = LocalTime.of(10, 30).plusHours(2); // 12:30\n```\n\n### **Formatage des dates**\n\n```java\nimport java.time.format.DateTimeFormatter;\n\nLocalDate date = LocalDate.now();\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\nSystem.out.println(date.format(formatter)); // 05/03/2025\n```\n\n---\n\n## **4.2. `Period`, `Duration`, `Instant` pour les intervalles de temps**\n\n|**Classe**|**Utilisation**|\n|---|---|\n|`Period`|Repr√©sente une diff√©rence en **jours, mois ou ann√©es**|\n|`Duration`|Repr√©sente une diff√©rence en **heures, minutes, secondes**|\n|`Instant`|Un point pr√©cis dans le temps (timestamp)|\n\n### **Exemples : `Period`**\n\n```java\nPeriod period = Period.of(1, 2, 3); // 1 an, 2 mois, 3 jours\nLocalDate date = LocalDate.now().plus(period);\nSystem.out.println(date);\n```\n\n### **Exemples : `Duration`**\n\n```java\nDuration duration = Duration.ofHours(5);\nLocalTime time = LocalTime.now().plus(duration);\nSystem.out.println(time);\n```\n\n### **Exemples : `Instant` (Timestamp)**\n\n```java\nInstant instant = Instant.now();\nSystem.out.println(instant); // 2025-03-05T13:15:30.123Z\n```\n\n---\n\n## **4.3. Manipulation de texte : `String`, `StringBuilder`, Text Blocks**\n\n### **`String` : immutable**\n\nüìå **Chaque modification cr√©e un nouvel objet.**\n\n```java\nString s = \"Java\";\ns = s.concat(\" 21\"); // Nouvelle instance\nSystem.out.println(s); // Java 21\n```\n\n### **`StringBuilder` : mutable et performant**\n\nüìå **Utilis√© pour √©viter la cr√©ation excessive d‚Äôobjets.**\n\n```java\nStringBuilder sb = new StringBuilder(\"Java\");\nsb.append(\" 21\");\nSystem.out.println(sb); // Java 21\n```\n\n|**Classe**|**Immutable ?**|**Thread-safe ?**|**Performance**|\n|---|---|---|---|\n|`String`|‚úÖ Oui|‚úÖ Oui|üö´ Lent (cr√©ation d‚Äôobjets)|\n|`StringBuilder`|üö´ Non|üö´ Non|‚úÖ Rapide|\n|`StringBuffer`|üö´ Non|‚úÖ Oui|‚úÖ Rapide (mais synchronis√©)|\n\n### **Principales m√©thodes**\n\n```java\nString s = \"  Java 21  \";\nSystem.out.println(s.trim()); // Supprime espaces : \"Java 21\"\nSystem.out.println(s.toUpperCase()); // \"JAVA 21\"\nSystem.out.println(s.replace(\" \", \"-\")); // \"-Java-21-\"\n```\n\n### **Text Blocks (`\"\"\"`) - Java 13**\n\nPermet d‚Äô√©crire du texte multilignes plus lisible.\n\n```java\nString json = \"\"\"\n    {\n        \"name\": \"Java\",\n        \"version\": 21\n    }\n    \"\"\";\nSystem.out.println(json);\n```\n\n---\n\n## **4.4. API Math et `BigDecimal`**\n\n### **üìå Math API : Calculs avanc√©s**\n\n```java\nSystem.out.println(Math.abs(-10));    // 10\nSystem.out.println(Math.pow(2, 3));   // 8.0\nSystem.out.println(Math.sqrt(16));    // 4.0\nSystem.out.println(Math.random());    // [0.0, 1.0[\n```\n\n### **üìå `BigDecimal` : pr√©cision pour les calculs financiers**\n\nüìå **`double` peut entra√Æner des erreurs d‚Äôarrondi !**\n\n```java\ndouble a = 0.1;\ndouble b = 0.2;\nSystem.out.println(a + b); // 0.30000000000000004 (erreur)\n\nBigDecimal x = new BigDecimal(\"0.1\");\nBigDecimal y = new BigDecimal(\"0.2\");\nSystem.out.println(x.add(y)); // 0.3 (pr√©cis)\n```\n\n|**Type**|**Pr√©cision**|**M√©moire**|**Utilisation**|\n|---|---|---|---|\n|`float`|32 bits|Faible|Calculs approximatifs|\n|`double`|64 bits|Moyenne|Calculs scientifiques|\n|`BigDecimal`|Illimit√©e|Plus lourd|Calculs pr√©cis (monnaie)|\n\n### **Op√©rations avec `BigDecimal`**\n\n```java\nBigDecimal valeur = new BigDecimal(\"10.50\");\nBigDecimal taxe = new BigDecimal(\"1.20\");\nBigDecimal total = valeur.multiply(taxe);\n\nSystem.out.println(total); // 12.60\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **API Date-Time (`LocalDate`, `LocalTime`, etc.)**  \n‚úÖ **Gestion des intervalles avec `Period`, `Duration`, `Instant`**  \n‚úÖ **Manipulation de texte avec `String`, `StringBuilder`, `Text Blocks`**  \n‚úÖ **Math avanc√© (`Math.pow`, `Math.random`) et calculs pr√©cis avec `BigDecimal`**\n\n---\n"
    },
    {
        "id": "c074a5cf-bcf9-464c-90cd-87b69b5095f6",
        "title": "Git Hook",
        "description": "---\nid: 65c4da6e-82ad-454b-b55b-ff45a6462d19\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **[[Git]] Hooks** sont des scripts ex√©cutables permettant d‚Äôautomatiser certaines actions pendant le cycle de vie d'un d√©p√¥t [[Git]], comme avant ou apr√®s un commit, push, ou merge.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLes **Git Hooks** sont des scripts qui s'ex√©cutent √† des moments sp√©cifiques dans le flux de travail de Git. Ils permettent d'ajouter des comportements personnalis√©s et d‚Äôautomatiser des t√¢ches comme des v√©rifications, des validations ou des notifications. Ces hooks sont configur√©s directement dans le r√©pertoire `.git/hooks` du projet. Chaque hook est associ√© √† un √©v√©nement pr√©cis :\n\n1. **`pre-commit`** : Avant qu'un commit soit effectu√©. Utilis√© pour des v√©rifications comme les tests unitaires ou le formatage du code.\n2. **`commit-msg`** : Apr√®s un commit mais avant la validation du message. Permet de valider ou modifier le message de commit.\n3. **`post-commit`** : Apr√®s un commit. Souvent utilis√© pour envoyer des notifications ou effectuer des suivis.\n4. **`pre-push`** : Avant un push vers un d√©p√¥t distant. Permet de v√©rifier la qualit√© du code avant de le partager.\n5. **`post-merge`** : Apr√®s un merge. Souvent utilis√© pour r√©organiser l‚Äôespace de travail ou nettoyer l'environnement.\n6. **`pre-receive` et `update`** : Sur le serveur distant, valident les changements avant qu'ils ne soient re√ßus.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Automatisation** : Facilite l'automatisation de processus tels que les tests, le formatage de code, ou l'envoi de notifications.\n- **Validation** : Permet de valider ou modifier des actions avant qu‚Äôelles ne soient ex√©cut√©es (commit, push).\n- **Personnalisation** : Offre une grande flexibilit√© pour personnaliser le flux de travail de chaque √©quipe ou projet.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Performance** : Trop de hooks ou des v√©rifications lourdes peuvent ralentir le workflow, notamment lors des commits fr√©quents.\n- **Complexit√©** : La gestion de hooks dans un projet peut ajouter de la complexit√©, surtout si chaque d√©veloppeur a une configuration diff√©rente.\n- **D√©pendance locale** : Les hooks sont locaux au d√©p√¥t, ce qui peut poser probl√®me si l'√©quipe utilise des configurations diff√©rentes.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "329a8a5d-8878-414f-996c-fb91884b6abd",
        "title": "Git leaks",
        "description": "---\nid: d24393e4-da90-46f9-98e7-8f2025603958\n---\n# Rapidement c'est quoi‚ùì\n\nGit Leaks est un outil permettant de d√©tecter les fuites d'informations sensibles (mots de passe, cl√©s API, etc.) dans un d√©p√¥t [[Git]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nGit Leaks est un outil de s√©curit√© qui analyse le contenu d'un d√©p√¥t [[Git]] √† la recherche de patterns correspondant √† des informations sensibles.  Il fonctionne en scannant l'historique du d√©p√¥t, incluant les commits pass√©s et les fichiers supprim√©s.  L'objectif est d'identifier et de signaler la pr√©sence accidentelle de donn√©es confidentielles qui auraient pu √™tre commises par erreur.  Ces informations sensibles peuvent inclure :\n\n* **Mots de passe:**  En clair ou hach√©s (m√™me si hach√©s, certains algorithmes faibles peuvent √™tre d√©tect√©s).\n* **Cl√©s API:**  Pour divers services cloud, bases de donn√©es, etc.\n* **Jetons d'authentification:**  Utilis√©s pour l'acc√®s √† des applications ou services.\n* **Num√©ros de cartes de cr√©dit:**  Respectant les formats standards.\n* **Informations personnelles sensibles:**  Num√©ros de s√©curit√© sociale, adresses, etc. (d√©pend des r√©glages et des patterns utilis√©s).\n\nGit Leaks peut √™tre int√©gr√© comme un [[Git Hook]] (ex√©cut√© avant chaque commit) ou dans un [[pipeline CI/CD]] (ex: [[GitLab CI]], [[GitHub Actions]], [[Jenkins]]), permettant une d√©tection proactive des fuites avant qu'elles ne soient publiques.  L'int√©gration permet une automatisation de la s√©curit√© et une meilleure pr√©vention des incidents.  Il existe diff√©rentes impl√©mentations et configurations possibles, modifiant la sensibilit√© de la d√©tection (faible, moyen, fort).\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **D√©tection proactive:** Identifie les fuites avant leur publication publique.\n* **Int√©gration facile:**  Peut √™tre int√©gr√© facilement dans les workflows existants via des hooks ou des [[pipelines CI/CD]].\n* **Automatisation:**  R√©duit le risque d'erreur humaine et acc√©l√®re le processus de s√©curit√©.\n* **Couverture large:**  Peut d√©tecter diff√©rents types d'informations sensibles.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Faux positifs possibles:**  Peut g√©n√©rer des faux positifs en fonction de la configuration et de la complexit√© du code.  Un ajustement fin des r√©glages est souvent n√©cessaire.\n* **D√©pendance aux patterns:**  La d√©tection repose sur des patterns pr√©d√©finis, ce qui signifie qu'il peut manquer des types d'informations sensibles non couverts par ces patterns.\n* **Ne remplace pas une revue de code compl√®te:**  Doit √™tre consid√©r√© comme un outil compl√©mentaire √† une bonne pratique de revue de code.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "e4cdf907-2f2b-4a47-ab7b-735192fb7394",
        "title": "Grafana",
        "description": "---\nid: 73f08fc3-729a-40a2-8abd-96cbe6ca9970\n---\n# Rapidement c'est quoi‚ùì\n\nGrafana est un outil open-source de visualisation et d'analyse de donn√©es. Il permet de cr√©er des dashboards interactifs et personnalisables √† partir de nombreuses sources de donn√©es diff√©rentes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nGrafana est une plateforme d'analyse de donn√©es qui permet de visualiser et d'interroger des donn√©es provenant de diverses sources, telles que des [[Base de donn√©e]] ([[PostgreSQL]], [[MySQL]], [[MongoDB]], etc.), des m√©triques syst√®me ([[Prometheus]], [[Graphite]]), des logs ([[Elasticsearch]], [[Loki]]), des clouds ([[AWS]], [[Azure]], [[GCP]]) et bien d'autres.  Il offre une interface utilisateur intuitive pour cr√©er des dashboards personnalis√©s avec des graphiques, des tableaux, des cartes et autres visualisations.  Ces dashboards peuvent √™tre partag√©s et collaboratifs.  Grafana poss√®de un syst√®me de plugins extensif permettant d'ajouter des fonctionnalit√©s et de supporter de nouvelles sources de donn√©es.  L'utilisateur peut effectuer des requ√™tes directement sur les donn√©es, d√©finir des alertes bas√©es sur des seuils et int√©grer des fonctionnalit√©s d'exploration de donn√©es.  Au-del√† de la visualisation, Grafana permet une analyse temporelle des donn√©es, indispensable pour le monitoring et l'investigation d'incidents.  Il offre √©galement des fonctionnalit√©s d'annotation pour enrichir les donn√©es avec des informations contextuelles.  Enfin, Grafana est disponible en version open-source et en version entreprise avec des fonctionnalit√©s additionnelles.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Interface utilisateur intuitive et conviviale:** La cr√©ation et la personnalisation de dashboards est relativement facile, m√™me pour les utilisateurs non-experts.\n* **Support d'un large √©ventail de sources de donn√©es:** Grafana s'int√®gre avec de nombreux outils et technologies, ce qui en fait une solution polyvalente.\n* **Fonctionnalit√©s avanc√©es d'analyse et d'exploration:**  Au-del√† de la simple visualisation, Grafana permet une analyse approfondie des donn√©es.\n* **Communaut√© active et support important:** La communaut√© open-source est vaste et active, assurant un bon support et une disponibilit√© de ressources.\n* **Extensible gr√¢ce aux plugins:**  L'ajout de nouvelles fonctionnalit√©s et sources de donn√©es se fait facilement via les plugins.\n* **Open-source (avec une version entreprise):**  Offre un bon √©quilibre entre gratuit√© et fonctionnalit√©s avanc√©es.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© pour des configurations avanc√©es:**  La personnalisation pouss√©e et la gestion de sources de donn√©es complexes peuvent devenir difficiles.\n* **Performances potentiellement limit√©es pour des volumes de donn√©es tr√®s importants:**  Les performances peuvent √™tre affect√©es par la taille et la complexit√© des dashboards et des requ√™tes.\n* **Courbe d'apprentissage pour ma√Ætriser toutes les fonctionnalit√©s:** Bien que l'interface soit intuitive, ma√Ætriser toutes les fonctionnalit√©s avanc√©es demande du temps et de l'apprentissage.\n* **D√©pendance aux plugins pour certaines sources de donn√©es:** L'int√©gration avec certaines sources de donn√©es peut n√©cessiter l'installation et la configuration de plugins sp√©cifiques.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "447992ea-077d-4520-a2ce-324d10237189",
        "title": "Harbor",
        "description": "---\nid: 98410515-bfb3-4709-982f-a9c8134b68d5\n---\n# Rapidement c'est quoi‚ùì\n\nHarbor est un registre de conteneurs [[Open-source]], s√©curis√© et de niveau entreprise,  qui √©tend les fonctionnalit√©s de base de [[Registry Docker]].  Il ajoute des fonctionnalit√©s de gestion d'acc√®s, de scan de vuln√©rabilit√©s et de gestion de cycle de vie des images.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nHarbor est une solution de registre de conteneurs qui s'appuie sur le registre Docker standard mais y ajoute des fonctionnalit√©s cruciales pour les d√©ploiements en production.  Il permet de stocker, g√©rer et s√©curiser les images de conteneurs.  Plus pr√©cis√©ment, il offre :\n\n* **Gestion d'acc√®s robuste:**  Contr√¥le d'acc√®s bas√© sur les r√¥les ([[Role Based Access Control (RBAC]]) pour une gestion fine des permissions sur les images, permettant de d√©finir des politiques d'acc√®s granulaires pour les diff√©rents utilisateurs et √©quipes.  L'int√©gration avec des syst√®mes d'authentification existants ([[LDAP]], [[Active Directory]]) est possible.\n\n* **Scan de vuln√©rabilit√©s:** Int√©gration avec des outils de scan de vuln√©rabilit√©s (comme [[Clair]]) pour analyser les images √† la recherche de failles de s√©curit√© connues avant leur d√©ploiement.  Cela permet de d√©tecter et de corriger les vuln√©rabilit√©s potentielles d√®s la phase de d√©veloppement.\n\n* **Gestion du cycle de vie des images:**  Harbor offre des fonctionnalit√©s pour g√©rer le cycle de vie complet des images, de leur cr√©ation √† leur suppression.  Ceci inclut la gestion des versions, la promotion d'images entre diff√©rents environnements (d√©veloppement, test, production), et la gestion des politiques de r√©tention.\n\n* **R√©plication:**  Possibilit√© de r√©pliquer les images de conteneurs vers d'autres registres Harbor, permettant la cr√©ation de registres miroirs pour la haute disponibilit√© et la r√©duction de la latence.\n\n* **Audit:**  Suivi complet des actions effectu√©es sur le registre, fournissant un historique auditable pour des raisons de conformit√© et de s√©curit√©.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **S√©curit√© renforc√©e:**  Le contr√¥le d'acc√®s fin et la fonctionnalit√© de scan de vuln√©rabilit√©s contribuent grandement √† la s√©curit√© des images de conteneurs.\n* **Gestion compl√®te du cycle de vie:**  Simplifie les op√©rations et am√©liore l'efficacit√© en centralisant la gestion des images.\n* **Open source et extensible:**  Permet une grande flexibilit√© et permet des int√©grations personnalis√©es.\n* **Haute disponibilit√© et r√©plication:**  Assure la fiabilit√© et la disponibilit√© du registre.\n* **Interface utilisateur intuitive:**  Facilite la gestion et le suivi des images.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:**  La configuration initiale peut √™tre complexe pour les utilisateurs novices.\n* **Ressources n√©cessaires:**  N√©cessite des ressources serveur pour fonctionner, ce qui peut √™tre un inconv√©nient pour les petites infrastructures.\n* **D√©pendances:**  D√©pend de plusieurs composants et outils, ce qui peut compliquer la maintenance et le d√©pannage.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "15291a12-30f8-4a45-9154-edc382fca715",
        "title": "Htmx",
        "description": "---\nid: 5d0f7309-8e45-4091-b0fe-c2d1f341b3a5\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nHTMX est une biblioth√®que qui permet d'√©viter d'√©crire du [[JavaScript]] pour g√©rer les interactions sur une page web, en utilisant uniquement des attributs HTML pour g√©rer des requ√™tes [[HTTP]] dynamiques.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nHTMX simplifie l'interactivit√© web en permettant de d√©finir des comportements de requ√™tes [[HTTP]] directement via des attributs `hx-` sur les balises HTML. Il permet de :\n\n- Effectuer des requ√™tes HTTP sans JavaScript (ex : `hx-get`, `hx-post`).\n- Traiter et manipuler les r√©ponses avant et apr√®s leur insertion dans le [[DOM]].\n- G√©rer des actions comme le rafra√Æchissement de parties sp√©cifiques d'une page sans recharger la page enti√®re.\n\nCela fonctionne sur n'importe quel serveur g√©n√©rant du HTML, comme ceux en [[Go]], [[Rust]], ou [[JTE]].\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplicit√©** : Remplace une grande partie de [[JavaScript]] pour des interactions simples avec des formulaires et des requ√™tes.\n- **Adapt√© aux petits projets** : Id√©al pour les applications [[backend]] simples sans n√©cessiter de frameworks [[JavaScript]] lourds.\n- **Moins de [[JavaScript]] √† maintenir** : La logique d'interaction est d√©finie dans le [[HTML]], ce qui simplifie la gestion du code.\n- **Compatibilit√© avec n'importe quel backend** : Fonctionne avec n'importe quel serveur g√©n√©rant du [[HTML]].\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Limit√© pour des interactions complexes** : D√®s qu'il y a des traitements complexes ou des manipulations de donn√©es avant l'envoi, HTMX devient difficile √† utiliser.\n- **D√©pendance au HTML** : N√©cessite que les endpoints retournent du HTML, ce qui peut ne pas √™tre adapt√© pour des applications plus modernes qui n√©cessitent du [[JSON]].\n- **Moins flexible que le [[JavaScript]] natif** : Certaines interactions complexes peuvent √™tre plus facilement r√©alis√©es avec JavaScript plut√¥t qu'avec HTMX.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "b40bc9b4-b756-4136-9af1-c2a7fff4d923",
        "title": "Http 103 Early Hints",
        "description": "---\nid: 5bae96ff-d0fa-4198-b12f-edab95488e95\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n[[HTTP]] 103 \"Early Hints\" est un code de statut HTTP qui permet d'indiquer au client, avant la r√©ponse finale du serveur, quelles ressources pr√©charger pour am√©liorer la vitesse de rendu de la page web.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe code HTTP 103 est envoy√© par le serveur avant la r√©ponse finale √† une requ√™te [[HTTP]]. Il informe le client des ressources √† pr√©charger (comme des fichiers [[CSS]], [[JavaScript]] ou des images). Cela permet au navigateur de commencer √† charger ces ressources pendant que le serveur g√©n√®re la r√©ponse principale, r√©duisant ainsi le temps n√©cessaire pour afficher la page.\n\nLe processus fonctionne ainsi :\n\n1. Le client envoie une requ√™te au serveur.\n2. Le serveur r√©pond avec un code 103 et une liste de ressources √† pr√©charger.\n3. Le client commence √† charger ces ressources imm√©diatement.\n4. Le serveur termine le traitement et envoie la page finale, qui peut √™tre affich√©e plus rapidement puisque les ressources ont d√©j√† √©t√© pr√©charg√©es.\n\nCe m√©canisme am√©liore le temps de chargement des pages, en particulier pour les sites avec beaucoup de ressources externes.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Am√©lioration du temps de chargement** : R√©duit de mani√®re significative le temps n√©cessaire pour afficher la page (environ 30% de gain).\n- **Simplicit√© de mise en ≈ìuvre** : Facile √† configurer avec des serveurs comme [[Caddy]] et [[Apache]], en particulier avec HTTP/2.\n- **Exp√©rience utilisateur am√©lior√©e** : Le contenu de la page se charge plus rapidement gr√¢ce au pr√©chargement des ressources.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Support limit√©** : Ne fonctionne pas avec [[HTTP/1]] et n'est pas support√© par [[Nginx]].\n- **Gestion des ressources** : La gestion des ressources √† pr√©charger peut √™tre d√©licate, il faut bien s'assurer qu'elles sont n√©cessaires et g√©r√©es correctement.\n- **D√©pendance au serveur et au client** : N√©cessite un serveur compatible et un client capable de g√©rer le code 103, ce qui limite son adoption imm√©diate.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "64dc974d-6ff7-4106-b3ef-ca7485f6ddec",
        "title": "Husky",
        "description": "---\nid: fe07726f-b2ce-4806-bbe0-a77bc3cd9da7\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nHusky est un outil permettant d'ajouter et de g√©rer des [[Git Hook]] (scripts ex√©cut√©s √† des moments cl√©s du cycle de vie d'un d√©p√¥t [[Git]], comme avant un commit) pour automatiser des t√¢ches comme des tests ou des v√©rifications de code.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nHusky simplifie l'int√©gration des [[Git Hook]] dans un projet [[JavaScript]]. En l'installant dans un projet, il cr√©e un r√©pertoire `.husky` qui contient les scripts des hooks (comme `pre-commit`, `pre-push`). Ces hooks permettent d'automatiser des processus, tels que :\n\n- Lancer des tests avant de valider un commit (`pre-commit`).\n- V√©rifier le format du code (`commit-msg`).\n- Bloquer un push si certaines conditions ne sont pas remplies (`pre-push`).\n\nHusky s'installe via npm et est facile √† configurer avec des commandes simples. Il permet aussi de d√©sactiver des hooks temporairement en ajoutant des arguments ou des variables d'environnement.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Automatisation facile** : Int√©gration simple des hooks Git dans les projets.\n- **Gestion des erreurs** : Permet d‚Äôemp√™cher des commits ou des pushs si des conditions ne sont pas remplies (tests √©chou√©s, mauvaise convention de commit, etc.).\n- **Souplesse** : Facile √† activer ou d√©sactiver via des variables d‚Äôenvironnement ou des arguments Git.\n- **Large compatibilit√©** : Fonctionne avec la plupart des projets [[Git]], quel que soit le framework ou l'outil utilis√©.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance au projet** : N√©cessite un environnement [[Node.js]] et l'installation via [[npm]] pour fonctionner.\n- **Peut ralentir le d√©veloppement** : Les hooks mal configur√©s ou trop nombreux peuvent freiner le d√©veloppement, surtout avec des v√©rifications de tests lourdes.\n- **Gestion des d√©sactivations** : Bien que possible, la d√©sactivation des hooks peut ne pas √™tre triviale dans certains contextes (par exemple dans [[CI/CD]]).\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "a28276a6-3156-4612-a0cf-64eb71fe9552",
        "title": "ImportMap (JS)",
        "description": "---\nid: 302b5d4b-497b-48db-b249-9fa80b82c068\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nUn ImportMap en [[JavaScript]] est un objet [[JSON]] qui permet de simplifier et g√©rer les imports dans une application en cr√©ant des alias pour les modules. Cela facilite la gestion des d√©pendances en permettant de d√©finir des chemins d'acc√®s personnalis√©s pour les imports.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn ImportMap est utilis√© pour d√©finir des correspondances entre les cl√©s d'import (les noms des modules) et leurs chemins r√©els (URLs ou fichiers locaux). Cela permet de contr√¥ler o√π un module est charg√©, simplifiant ainsi la gestion des d√©pendances dans un projet.\n\nExemple : au lieu d'importer directement un fichier via un long chemin, vous pouvez d√©finir un alias comme \"my-component\" dans l'ImportMap et l'utiliser ensuite dans les imports de vos modules.\n\n- **D√©ploiement [[Micros Frontends]]** : Changez dynamiquement les versions de vos composants sans modifier le code, en mettant √† jour uniquement l'ImportMap.\n- **Revue de code** : Permet de rediriger facilement les imports vers des versions sp√©cifiques pour tester des modifications en direct sans toucher au code source.\n\n```html\n<script type=\"importmap\">\n\t{\n\t\t\"imports\" : {\n\t\t\t\"my-component\": \"http://localhost:8080/src/my-component.js\"\n\t\t}\n\t}\n</script>\n\n<script type=\"module\">\n\timport { MyComponent } from \"my-component\"; // L'alias d√©fini dans l'ImportMap\n</script>\n```\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplification des imports** : Les alias permettent d'√©viter des chemins d'import longs et complexes.\n- **Flexibilit√©** : Possibilit√© de modifier les sources des modules sans toucher au code, utile pour le d√©ploiement de micro frontends et le rollback.\n- **Am√©lioration de la revue de code** : Permet de tester et valider rapidement des modifications dans des environnements sans modifier le code source.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Compatibilit√© limit√©e** : L'usage des ImportMaps est encore relativement nouveau et n'est pas pris en charge par tous les navigateurs (n√©cessite des fonctionnalit√©s modernes du navigateur).\n- **Gestion des versions** : Lors de l'utilisation avec des syst√®mes complexes, le suivi et la mise √† jour des versions des modules peuvent devenir difficiles si l'ImportMap n'est pas bien g√©r√©.\n- **Pas de support pour les outils de bundling** : L'ImportMap fonctionne c√¥t√© client mais ne remplace pas les outils de bundling comme [[Webpack]] pour une gestion avanc√©e des modules.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "56274708-5613-4cbd-9d09-78bd95f972b7",
        "title": "Incremental Static Regeneration (ISR)",
        "description": "---\nid: 29cf6b6a-38cb-4f64-9238-309f5dfb2bed\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nIncremental Static Regeneration (ISR) est une am√©lioration du processus de g√©n√©ration statique des pages ([[Server Side Generation (SSG)]]), permettant de mettre √† jour les pages statiques d√©j√† g√©n√©r√©es sans n√©cessiter une reconstruction compl√®te du site. ISR permet de r√©g√©n√©rer des pages statiques de mani√®re incr√©mentielle √† chaque requ√™te, tout en pr√©servant les performances.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nISR permet de g√©n√©rer des pages statiques de mani√®re classique, mais avec la possibilit√© de r√©g√©n√©rer et mettre √† jour ces pages √† la demande (en fonction du temps ou de l'action de l'utilisateur) sans recompiler l'ensemble du site. Cela permet une mise √† jour progressive du contenu sans impact sur la performance globale.\n\nLe processus fonctionne ainsi :\n\n1. Lorsqu'une page est demand√©e, elle est servie statiquement si elle a d√©j√† √©t√© g√©n√©r√©e.\n2. Si la page doit √™tre mise √† jour, le serveur la r√©g√©n√®re en arri√®re-plan tout en servant l'ancienne version.\n3. Une fois la r√©g√©n√©ration termin√©e, la nouvelle version est disponible pour les requ√™tes suivantes.\n\nCela est utile dans les cas o√π les pages doivent √™tre r√©guli√®rement mises √† jour mais sans sacrifier les avantages du contenu statique.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Performance rapide** : Le contenu statique est servi tr√®s rapidement sans travail c√¥t√© serveur.\n- **SEO optimis√©** : Le contenu est index√© par les moteurs de recherche comme du contenu statique, ce qui est id√©al pour le r√©f√©rencement.\n- **Mise √† jour incr√©mentielle** : Permet de mettre √† jour des pages sp√©cifiques sans recompilation compl√®te du site.\n- **Scalabilit√©** : Id√©al pour des sites avec beaucoup de pages ou du contenu qui change r√©guli√®rement.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Temps de compilation** : Le processus de g√©n√©ration initiale des pages peut √™tre long, surtout pour les grands sites.\n- **Non adapt√© au contenu dynamique** : Pas efficace pour les pages qui changent fr√©quemment ou qui n√©cessitent une interaction en temps r√©el.\n- **Complexit√© de gestion des mises √† jour** : Suivre quelles pages doivent √™tre r√©g√©n√©r√©es et quand peut devenir difficile √† g√©rer √† grande √©chelle.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "bedba0c6-f509-4e04-b2f4-feb4b460971d",
        "title": "Interface fonctionnelle",
        "description": "---\nid: 1dc25831-3209-4d96-aa65-41a3b48815c0\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nUne interface fonctionnelle en [[Java]] est une interface qui ne poss√®de qu'une seule m√©thode abstraite.  Elle sert principalement √† cr√©er des expressions lambda et des r√©f√©rences √† des m√©thodes.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nEn [[Java]], une interface est un type qui d√©finit un contrat pour les classes qui l'impl√©mentent.  Une interface fonctionnelle simplifie ce contrat en exigeant la d√©finition d'une seule m√©thode.  Cela permet d'utiliser des expressions lambda (une forme concise d'√©crire des objets impl√©mentant une interface fonctionnelle) et des r√©f√©rences de m√©thodes (une mani√®re compacte de passer une m√©thode existante comme argument).  L'annotation `@FunctionalInterface` est utilis√©e pour indiquer qu'une interface est con√ßue comme une interface fonctionnelle.  Si une interface annot√©e avec `@FunctionalInterface` d√©finit plus d'une m√©thode abstraite, une erreur de compilation se produira.  Cependant, elle peut contenir des m√©thodes de d√©faut (avec une impl√©mentation par d√©faut), des m√©thodes statiques, et des m√©thodes priv√©es.\n\n**Exemple:**\n\n```java\n@FunctionalInterface\ninterface Print {\n    void execute(String label);\n}\n\nclass UseCase {\n    Print print;\n\n    void printAll(List<String> labels) {\n        labels.forEach(label -> print.execute(label)); // Utilisation d'une expression lambda\n    }\n\n    public static void main(String[] args) {\n        UseCase useCase = new UseCase();\n        useCase.print = label -> System.out.println(\"Label: \" + label); // affectation d'une lambda expression √† print\n\n        List<String> labels = List.of(\"Label 1\", \"Label 2\", \"Label 3\");\n        useCase.printAll(labels);\n    }\n}\n```\n\nDans cet exemple, `Print` est une interface fonctionnelle avec une seule m√©thode abstraite `execute`.  La m√©thode `printAll` utilise une expression lambda `label -> System.out.println(\"Label: \" + label)` pour fournir une impl√©mentation de `Print` directement dans l'appel de `forEach`.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Concision du code:** Les expressions lambda rendent le code plus concis et plus lisible que les classes anonymes traditionnelles.\n* **Fonctionnalit√© expressive:**  Permet d'exprimer des concepts fonctionnels (comme le passage de fonctions comme arguments) de mani√®re √©l√©gante et naturelle en [[Java]].\n* **Am√©lioration de la lisibilit√©:** Le code utilisant les interfaces fonctionnelles est g√©n√©ralement plus facile √† lire et √† comprendre.\n* **Interop√©rabilit√©:**  Facilite l'utilisation de biblioth√®ques fonctionnelles et de concepts fonctionnels dans les applications [[Java]].\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle pour les d√©butants:**  La compr√©hension des concepts fonctionnels peut prendre du temps pour les programmeurs habitu√©s √† la programmation imp√©rative.\n* **D√©bogage:** Le d√©bogage des expressions lambda peut √™tre l√©g√®rement plus complexe qu'avec des m√©thodes classiques.  Le nom de la m√©thode √©tant implicite, l‚Äôidentification de la source d‚Äôun bug peut prendre plus de temps.\n* **Surutilisation potentielle:** Une surutilisation des interfaces fonctionnelles peut rendre le code moins lisible si les expressions lambda deviennent trop complexes ou si l'intention du code n'est pas claire.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "be6a1edb-d8a6-44c7-a730-c2b2b95faaa2",
        "title": "Certification Java 17 - Internationalisation et Localisation",
        "description": "---\nid: 2726c3d7-2090-4f23-99f6-b0b1ea5a3ff1\n---\nL‚Äô**internationalisation (i18n)** et la **localisation (l10n)** permettent d‚Äôadapter une application Java √† diff√©rentes langues et r√©gions.\n\n## **13.1. `Locale` : D√©finition de la langue et du pays**\n\n### **1. Cr√©ation d‚Äôun `Locale`**\n\n```java\nimport java.util.Locale;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        Locale fr = new Locale(\"fr\", \"FR\"); // Fran√ßais (France)\n        Locale us = new Locale(\"en\", \"US\"); // Anglais (√âtats-Unis)\n\n        System.out.println(fr.getDisplayLanguage()); // Fran√ßais\n        System.out.println(us.getDisplayCountry());  // United States\n    }\n}\n```\n\nüìå **`Locale(language, country)` : d√©finit une langue et un pays.**\n\n---\n\n### **2. `Locale.getDefault()` : D√©tecter la langue du syst√®me**\n\n```java\nLocale localeParDefaut = Locale.getDefault();\nSystem.out.println(localeParDefaut); // Ex : fr_FR ou en_US\n```\n\nüìå **On peut aussi changer la locale par d√©faut :**\n\n```java\nLocale.setDefault(new Locale(\"es\", \"ES\")); // Espagnol (Espagne)\n```\n\n---\n\n## **13.2. `ResourceBundle` : Chargement de textes multilingues**\n\nüìå **Les fichiers de ressources (`.properties`) permettent de stocker les traductions.**\n\n### **1. Cr√©ation des fichiers `messages.properties`**\n\nüìÇ **Structure du projet :**\n\n```\n/src\n  /messages_fr.properties\n  /messages_en.properties\n```\n\nüìÑ **messages_fr.properties**\n\n```\nsalutation=Bonjour !\n```\n\nüìÑ **messages_en.properties**\n\n```\nsalutation=Hello!\n```\n\n### **2. Chargement des ressources avec `ResourceBundle`**\n\n```java\nimport java.util.*;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        Locale locale = new Locale(\"fr\", \"FR\"); // Changez en \"en\", \"US\" pour tester\n        ResourceBundle bundle = ResourceBundle.getBundle(\"messages\", locale);\n\n        System.out.println(bundle.getString(\"salutation\")); // Affiche \"Bonjour !\" ou \"Hello!\"\n    }\n}\n```\n\nüìå **Le fichier correspondant √† la `Locale` est automatiquement s√©lectionn√©.**\n\n---\n\n## **13.3. Formatage des Dates, Nombres et Devises**\n\n### **1. `NumberFormat` : Formatage des nombres et devises**\n\n```java\nimport java.text.NumberFormat;\nimport java.util.Locale;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        double montant = 1234.56;\n\n        NumberFormat formatFr = NumberFormat.getCurrencyInstance(Locale.FRANCE);\n        NumberFormat formatUs = NumberFormat.getCurrencyInstance(Locale.US);\n\n        System.out.println(formatFr.format(montant)); // 1 234,56 ‚Ç¨\n        System.out.println(formatUs.format(montant)); // $1,234.56\n    }\n}\n```\n\nüìå **`getCurrencyInstance(Locale)` formate selon la devise locale.**\n\n---\n\n### **2. `DateTimeFormatter` : Formatage des dates**\n\n```java\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.now();\n\n        DateTimeFormatter formatterFr = DateTimeFormatter.ofPattern(\"EEEE dd MMMM yyyy\", Locale.FRANCE);\n        DateTimeFormatter formatterUs = DateTimeFormatter.ofPattern(\"EEEE, MMMM dd, yyyy\", Locale.US);\n\n        System.out.println(date.format(formatterFr)); // Ex : mercredi 06 mars 2025\n        System.out.println(date.format(formatterUs)); // Ex : Wednesday, March 06, 2025\n    }\n}\n```\n\nüìå **`ofPattern(\"EEEE dd MMMM yyyy\", Locale)` formate la date selon la langue.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **`Locale` : D√©finit la langue et le pays (`Locale(\"fr\", \"FR\")`).**  \n‚úÖ **`ResourceBundle` : Charge des fichiers `.properties` pour les traductions.**  \n‚úÖ **`NumberFormat` : Formate les nombres et devises selon la locale.**  \n‚úÖ **`DateTimeFormatter` : Affiche les dates dans le format localis√©.**"
    },
    {
        "id": "a6594301-4ed1-451d-b843-a3e8c5e95706",
        "title": "Jpa Specification",
        "description": "---\nid: ec614572-79e3-4b20-bd55-75d790f3a468\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **JPA Specifications** permettent de cr√©er des requ√™tes dynamiques en utilisant l'API **[[Criteria]]** de [[Spring Data ]]. Elles sont utiles pour filtrer ou rechercher des entit√©s en fonction de crit√®res variables et complexes sans avoir √† √©crire des requ√™tes [[SQL]] statiques.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLes JPA Specifications sont des interfaces permettant de d√©finir des crit√®res de recherche dynamiques avec **[[Spring Data JPA]]**. Elles utilisent l'API **[[Criteria]]** pour cr√©er des requ√™tes complexes, notamment des filtres dynamiques bas√©s sur des conditions `WHERE`. Les crit√®res sont repr√©sent√©s par des **Predicates**, qui combinent des conditions logiques et des expressions de filtrage.\n\nUne Specification est construite √† partir d'un `Predicate`, qui est une condition logique sur les donn√©es, comme un test d'√©galit√©, de comparaison ou une recherche de texte. Vous pouvez combiner plusieurs Specifications avec des m√©thodes comme `and()`, `or()`, et `not()` pour cr√©er des requ√™tes complexes.\n\nExemple de Specification :\n\n```java\npublic static Specification<User> firstNameLike(String firstName) {\n    return (root, criteriaQuery, criteriaBuilder) -> criteriaBuilder.like(root.get(\"firstName\"), \"%\" + firstName + \"%\");\n}\n```\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Flexibilit√©** : Cr√©er des requ√™tes dynamiques et personnalis√©es en fonction des besoins de l'utilisateur.\n- **R√©utilisabilit√©** : Les Specifications peuvent √™tre combin√©es et r√©utilis√©es dans diff√©rentes parties du projet.\n- **Lisibilit√©** : Permet de garder un code propre et lisible en √©vitant des requ√™tes [[SQL]] complexes int√©gr√©es directement dans le code.\n- **Int√©gration avec [[Spring Data JPA]]** : Facile √† utiliser avec des repositories Spring en √©tendant `JpaSpecificationExecutor`.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© des requ√™tes** : Lorsque les crit√®res deviennent trop complexes, la lecture et la compr√©hension des Specifications peuvent devenir difficiles.\n- **Performance** : Les requ√™tes g√©n√©r√©es peuvent √™tre lentes pour des bases de donn√©es volumineuses, n√©cessitant une surveillance attentive de la performance.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Base de donn√©e SQL]]"
    },
    {
        "id": "08fad616-b3cf-4f10-88ee-af456f64777e",
        "title": "Kibana",
        "description": "---\nid: d9182905-f3b8-4196-9a7a-a168a04da247\n---\n# Rapidement c'est quoi‚ùì\n\nKibana est une plateforme d'analyse et de visualisation de donn√©es open-source, principalement utilis√©e pour explorer et interagir avec des donn√©es index√©es par [[Elasticsearch]].  Elle permet de cr√©er des tableaux de bord, des graphiques et des visualisations interactives.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nKibana est une application web qui se connecte √† un cluster [[Elasticsearch]].  Elle utilise les donn√©es index√©es dans [[Elasticsearch]] pour g√©n√©rer des visualisations personnalis√©es.  Elle offre un large √©ventail de fonctionnalit√©s, notamment :\n\n* **Visualisation de donn√©es:** Cr√©ation de diff√©rents types de graphiques (barres, lignes, camemberts, cartes, etc.), de tableaux et d'autres repr√©sentations visuelles des donn√©es.  Ces visualisations peuvent √™tre interactives, permettant aux utilisateurs de filtrer, d'explorer et d'analyser les donn√©es de mani√®re dynamique.\n* **Exploration de donn√©es:**  Kibana permet une exploration ad-hoc des donn√©es via une interface intuitive de recherche et de filtrage.  L'utilisateur peut poser des questions aux donn√©es et obtenir des r√©ponses instantan√©ment gr√¢ce √† des requ√™tes [[Elasticsearch]].\n* **Cr√©ation de tableaux de bord:**  Agr√©gation de plusieurs visualisations en un seul tableau de bord personnalisable, offrant une vue d'ensemble des donn√©es importantes.  Ces tableaux de bord peuvent √™tre partag√©s avec d'autres utilisateurs.\n* **Monitoring:**  Surveillance des performances d'[[Elasticsearch]] et des applications qui s'y connectent.\n* **Alerting:**  Mise en place de notifications bas√©es sur des conditions sp√©cifiques d√©finies sur les donn√©es.\n* **Machine Learning:**  Int√©gration avec les capacit√©s de machine learning d'[[Elasticsearch]] pour la d√©tection d'anomalies et la pr√©diction.\n* **Gestion des utilisateurs et des r√¥les:**  Contr√¥le d'acc√®s aux donn√©es et aux fonctionnalit√©s de Kibana.\n\nKibana est con√ßu pour √™tre flexible et extensible, permettant aux utilisateurs de cr√©er des visualisations personnalis√©es et d'int√©grer des donn√©es provenant de diff√©rentes sources.  Son interface utilisateur est intuitive et conviviale, facilitant l'analyse de donn√©es m√™me pour des utilisateurs sans expertise technique approfondie.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Interface utilisateur intuitive et conviviale:**  Facile √† apprendre et √† utiliser, m√™me pour les utilisateurs moins exp√©riment√©s.\n* **Large vari√©t√© de visualisations:**  Offre un large choix de graphiques et de tableaux pour repr√©senter les donn√©es de mani√®re efficace.\n* **Flexibilit√© et extensibilit√©:**  Permet de cr√©er des visualisations personnalis√©es et de s'int√©grer √† d'autres syst√®mes.\n* **[[Open-source]]:**  Gratuit et accessible √† tous.\n* **Int√©gration avec [[Elasticsearch]]:**  Synergie parfaite avec [[Elasticsearch]] pour une exploration et une visualisation des donn√©es optimis√©es.\n* **Fonctionnalit√©s avanc√©es:**  Offre des fonctionnalit√©s puissantes comme l'alerte, le monitoring et le machine learning.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Performances pour de tr√®s gros volumes de donn√©es:**  Peut devenir lent avec des ensembles de donn√©es extr√™mement volumineux.  Une optimisation de l'indexation et de la requ√™te Elasticsearch est alors n√©cessaire.\n* **Courbe d'apprentissage pour les fonctionnalit√©s avanc√©es:**  Certaines fonctionnalit√©s plus techniques (comme le scripting ou les requ√™tes complexes) peuvent n√©cessiter une expertise plus pouss√©e.\n* **D√©pendance √† [[Elasticsearch]]:**  N√©cessite un cluster [[Elasticsearch]] fonctionnel pour fonctionner.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "5ffac79c-2a16-420e-a848-17e8e04395ba",
        "title": "Logstash",
        "description": "---\nid: 6dd4b62f-dfea-48d8-bc6d-31eb62dd914d\n---\n# Rapidement c'est quoi‚ùì\n\nLogstash est un outil open source de traitement de donn√©es en temps r√©el. Il collecte, traite et exp√©die des donn√©es provenant de diverses sources.  On parle d'[[ETL]] (Extraction, Transformation, Loading).\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLogstash est une application √©crite en [[Ruby]], con√ßue pour collecter des donn√©es de multiples sources (logs, bases de donn√©es, applications, etc.), les transformer selon des r√®gles d√©finies par l'utilisateur (filtrage, enrichissement, agr√©gation, etc.) et les envoyer vers des destinations vari√©es (bases de donn√©es, syst√®mes de stockage cloud, syst√®mes de visualisation de donn√©es, etc.).  Il fonctionne comme un pipeline modulaire, o√π chaque √©tape est d√©finie par un plugin.  Ces plugins permettent une grande flexibilit√© et une int√©gration avec un vaste √©cosyst√®me d'outils.  \n\nLe processus se d√©compose en trois phases :\n\n* **Extraction (Input):**  Logstash r√©cup√®re les donn√©es depuis les sources d√©finies.  Les plugins d'entr√©e sont nombreux et permettent de se connecter √† des sources vari√©es (filesystems, r√©seaux, bases de donn√©es, APIs, etc.).\n\n* **Transformation (Filter):**  Logstash manipule les donn√©es.  Les plugins de filtres permettent de r√©aliser des op√©rations telles que le parsing de logs, la modification de champs, l'ajout de nouveaux champs bas√©s sur des calculs, la suppression de donn√©es sensibles, etc.  Ces transformations sont d√©finies via des configurations en langage [[JSON]].\n\n* **Chargement (Output):**  Logstash envoie les donn√©es transform√©es vers les destinations sp√©cifi√©es.  Les plugins de sortie permettent d'envoyer les donn√©es vers [[Elasticsearch]], des [[Base de donn√©e]], des filesystems, des messageries ([[Apache Kafka]], [[RabbitMQ]]), etc.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Flexibilit√© et extensibilit√©:** Gr√¢ce √† son architecture modulaire bas√©e sur les plugins, Logstash s'adapte facilement √† de nombreux cas d'utilisation et s'int√®gre √† une large vari√©t√© d'outils.\n* **Open source:**  Gratuit et accessible √† tous, avec une large communaut√© contribuant √† son d√©veloppement et √† son support.\n* **Traitement en temps r√©el:**  Permet de traiter les donn√©es au fur et √† mesure de leur arriv√©e, ce qui est crucial pour certaines applications.\n* **Configuration d√©clarative:**  La configuration se fait via des fichiers JSON, facilitant la gestion et le partage des configurations.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La configuration peut devenir complexe pour des pipelines sophistiqu√©s, n√©cessitant une bonne compr√©hension de son fonctionnement et des plugins utilis√©s.\n* **Performances:**  Pour des volumes de donn√©es tr√®s importants, les performances de Logstash peuvent √™tre un point de blocage, n√©cessitant l'optimisation de la configuration et potentiellement l'utilisation de solutions plus performantes.\n* **D√©pendance √† Ruby:**  Bien que performant, [[Ruby]] peut √™tre un frein pour certains d√©veloppeurs.\n* **Maintenance et mises √† jour:**  Comme tout logiciel, Logstash n√©cessite une maintenance r√©guli√®re et la prise en compte des mises √† jour de s√©curit√©.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "e7d73c5a-a571-452f-af78-02a88e191259",
        "title": "Micrometer",
        "description": "---\nid: cab051d2-e62d-413b-acab-5c1c7aefa9de\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Micrometer** est une biblioth√®que [[Java]] qui permet de collecter et exporter des m√©triques de performance d'applications vers diff√©rents syst√®mes de monitoring tels que [[Prometheus]], [[Graphite]], [[Datadog]], et [[InfluxDB]]. Elle est souvent utilis√©e avec [[Spring Boot]].\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nMicrometer fournit une API unifi√©e pour int√©grer des m√©triques dans vos applications [[Java]]. Elle supporte plusieurs types de m√©triques, telles que les compteurs, jauges, histogrammes et timers. Ces m√©triques peuvent √™tre envoy√©es vers des syst√®mes de monitoring via des `exporters`.\n\n**Types de m√©triques :**\n\n- **Compteurs** : Compte des √©v√©nements (ex : nombre de requ√™tes HTTP).\n- **Jauges** : Mesure un √©tat variable (ex : taille d‚Äôun cache).\n- **Histogrammes** : Collecte des donn√©es statistiques (ex : latence des requ√™tes).\n- **Timers** : Mesure la dur√©e d‚Äôun √©v√©nement (ex : temps de r√©ponse d‚Äôune requ√™te HTTP).\n\n**Tags** : Vous pouvez ajouter des √©tiquettes (tags) aux m√©triques pour les diff√©rencier par exemple par type de requ√™tes ou r√©gion g√©ographique.\n\nAvec [[Spring Boot]], Micrometer s'int√®gre facilement via le module **[[Spring Boot Actuator]]**, et expose les m√©triques via des endpoints comme `/actuator/prometheus`.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Int√©gration facile avec [[Spring Boot]]** : Micrometer fonctionne bien avec [[Spring Boot]], surtout avec [[Spring Boot Actuator]].\n- **Support multiple pour les syst√®mes de monitoring** : Vous pouvez exporter les m√©triques vers de nombreux backends comme [[Prometheus]], [[Datadog]], [[Graphite]], etc.\n- **Flexibilit√© avec les tags** : Les tags permettent de filtrer et analyser les m√©triques selon plusieurs crit√®res (ex : type de requ√™tes, zones g√©ographiques).\n- **Types de m√©triques vari√©s** : Compteurs, jauges, histogrammes et timers couvrent tous les besoins courants de collecte de m√©triques.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© avec des configurations avanc√©es** : Pour des cas complexes de m√©triques personnalis√©es ou des syst√®mes de monitoring moins communs, la configuration peut devenir d√©licate.\n- **D√©pendance √† des backends externes** : La collecte et l'exportation des m√©triques n√©cessitent une configuration des syst√®mes de monitoring externes.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "fefe5553-dc94-4de2-9dd2-0288dca655c3",
        "title": "Mobile First",
        "description": "---\nid: d7eada46-6aee-42e1-8e29-8aaf4ff9526f\n---\n# Rapidement c'est quoi‚ùì\n\nUne m√©thode de conception web consistant √† prioriser l'exp√©rience utilisateur sur les petits √©crans (mobiles) avant de l'adapter aux plus grands (tablettes, ordinateurs).\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe principe \"mobile-first\" est une approche de d√©veloppement web qui place l'exp√©rience utilisateur mobile au c≈ìur du processus de conception.  Au lieu de concevoir d'abord pour les ordinateurs de bureau et ensuite de r√©duire l'interface pour les mobiles (approche \"desktop-first\"), le mobile-first commence par cr√©er une version optimis√©e pour les petits √©crans.  Cette version inclut uniquement les √©l√©ments essentiels et les fonctionnalit√©s cl√©s.  Ensuite, on ajoute progressivement des fonctionnalit√©s et du contenu pour les √©crans plus grands (tablettes et ordinateurs), en utilisant des requ√™tes [[CSS]] media pour adapter l'affichage.  L'objectif est de garantir que le site web fonctionne correctement et offre une bonne exp√©rience utilisateur, m√™me sur des appareils avec des ressources limit√©es (bande passante, puissance de calcul). Cela implique de prioriser la vitesse de chargement, la lisibilit√© et la simplicit√© de navigation sur mobile.  L'adaptation pour les √©crans plus grands se fait ensuite par ajout de contenu, d'√©l√©ments visuels, et d'une meilleure organisation de l'information, plut√¥t que par une simple mise √† l'√©chelle.  Cette approche am√©liore l'accessibilit√© et l'exp√©rience utilisateur sur tous les appareils.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Exp√©rience utilisateur optimis√©e sur mobile:**  Priorise l'exp√©rience sur les appareils les plus utilis√©s aujourd'hui.\n* **Vitesse de chargement plus rapide:**  Version all√©g√©e initialement con√ßue pour les appareils avec une bande passante limit√©e.\n* **Meilleure accessibilit√©:**  Conception plus simple et plus intuitive, facilitant la navigation pour tous les utilisateurs.\n* **Maintenance simplifi√©e:**  Un code plus propre et plus organis√©, facilitant les mises √† jour et les corrections de bogues.\n* **Adaptabilit√© et flexibilit√©:**  La conception r√©pond naturellement aux diff√©rentes tailles d'√©cran.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Potentiellement plus de travail initial:** Bien que simplifiant la maintenance √† long terme, la conception initiale peut n√©cessiter une r√©flexion plus approfondie pour adapter le contenu aux diff√©rents niveaux d'affichage.\n* **N√©cessite une bonne ma√Ætrise du [[CSS]]:** L'utilisation efficace des requ√™tes media est indispensable pour une bonne adaptation.\n* **Peut √™tre moins intuitif pour les d√©veloppeurs habitu√©s √† la m√©thode \"desktop-first\".**  Un changement de paradigme est n√©cessaire.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "27b397ff-ecad-4089-bd0d-8b2ff8680213",
        "title": "Mol√©cule",
        "description": "---\nid: bf25037e-5dd1-4369-a7aa-d581e9371615\n---\n# Rapidement c'est quoi‚ùì\n\nMol√©cule est un outil [[Python]] qui utilise [[Ansible]] et [[Testinfra]] pour tester l'infrastructure en provisionnant des environnements avec [[Docker]].  Il permet de r√©aliser des [[Test d'int√©gration]] plus rapidement qu'avec des [[VM]].\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nMol√©cule est un framework de [[Test d'infrastructure]] bas√© sur [[Python]]. Il permet de d√©finir, provisionner et tester des environnements d'infrastructure de mani√®re automatis√©e. Il s'appuie sur [[Ansible]] pour la configuration et le d√©ploiement de l'infrastructure, et sur [[Testinfra]] pour la validation et la v√©rification de l'√©tat de l'infrastructure apr√®s d√©ploiement.  L'utilisation de [[Docker]] permet de cr√©er et de d√©truire rapidement des environnements de test, acc√©l√©rant ainsi le cycle de d√©veloppement et de test.  Le principe est de d√©finir la configuration de l'infrastructure souhait√© dans un fichier de configuration (g√©n√©ralement YAML), puis Mol√©cule se charge de la cr√©ation de l'environnement [[Docker]], du d√©ploiement via [[Ansible]] et enfin de l'ex√©cution des tests [[Testinfra]] pour v√©rifier que l'infrastructure d√©ploy√©e correspond √† la configuration attendue.  Ce processus permet de tester l'infrastructure de mani√®re reproductible et fiable.\n\nCet outil rend possible le [[Test Driven Developpement (TDD)]] sur de l'[[Infra as Code (IaC]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Rapidit√©:** L'utilisation de [[Docker]] permet un provisionnement et un nettoyage rapides des environnements de test, comparativement √† l'utilisation de machines virtuelles.\n* **Reproductibilit√©:** Les tests sont ex√©cut√©s dans un environnement contr√¥l√© et reproductible, garantissant la coh√©rence des r√©sultats.\n* **Int√©gration avec [[Ansible]] et [[Testinfra]]:** Mol√©cule tire parti de la puissance d'[[Ansible]] pour le d√©ploiement et de [[Testinfra]] pour la v√©rification de l'√©tat de l'infrastructure, cr√©ant une synergie efficace.\n* **Automatisation:** L'ensemble du processus de test est automatis√©, r√©duisant le temps et l'effort manuel n√©cessaires.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Diff√©rences entre conteneurs et machines virtuelles:** Les conteneurs [[Docker]] ne reproduisent pas parfaitement l'environnement d'une machine virtuelle.  Certaines particularit√©s de fonctionnement peuvent entra√Æner des diff√©rences de comportement et des √©checs de test, n√©cessitant une adaptation des tests et des configurations.\n* **Mocking des services externes:**  Le mocking de services externes peut √™tre complexe et n√©cessiter des solutions sp√©cifiques, selon la d√©pendance du syst√®me test√©.\n* **Courbe d'apprentissage:**  La ma√Ætrise d'[[Ansible]] et de [[Testinfra]] est n√©cessaire pour utiliser efficacement Mol√©cule.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]][[MOC_Testing]]"
    },
    {
        "id": "ca07ae2e-28ac-4040-b12c-3318f0c63df4",
        "title": "Nitro",
        "description": "---\nid: 87c37a5c-546e-4b54-a1f1-db9d7e9b3d00\n---\n# Rapidement c'est quoi‚ùì\n\nNitro est le moteur [[HTTP]] de [[Nuxt.js]] 3, permettant un rendu [[Server Side Rendering (SSR)]] performant et la [[Server Side Generation (SSG)]] de sites web.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nNitro est le runtime de [[Nuxt.js]] 3, un framework [[Vue.js]].  Il remplace le pr√©c√©dent syst√®me bas√© sur [[koa.js]] et offre des am√©liorations significatives en termes de performance et de flexibilit√©.  Son c≈ìur de m√©tier est la gestion des requ√™tes [[HTTP]], permettant √† Nuxt de servir des pages web dynamiques ou pr√©-rendues.  Il g√®re :\n\n* **[[Server Side Rendering (SSR)]]:**  Le code [[Vue.js]] est ex√©cut√© sur le serveur, et le [[HTML]] r√©sultant est envoy√© au navigateur.  Cela permet un meilleur r√©f√©rencement [[SEO]] et une exp√©rience utilisateur plus rapide dans certains cas.\n* **[[Server Side Generation (SSG)]]:**  Nitro permet de g√©n√©rer des pages HTML statiques au moment du build, optimisant le temps de chargement et la performance.  Id√©al pour des sites web √† contenu statique ou peu variable.\n* **API routes:**  Permet de cr√©er facilement des API [[RESTful]].\n* **Int√©gration avec des services [[Function as a Service (FaaS)]]:**  Nitro peut d√©ployer vos applications sur des plateformes serverless comme [[AWS Lambda]], [[Netlify Functions]], etc.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance:** Nitro est significativement plus rapide que le moteur [[HTTP]] de Nuxt 2.\n* **Flexibilit√©:**  Il offre une grande vari√©t√© d'options de d√©ploiement et de configuration.\n* **Int√©gration Serverless:** Simplifie le d√©ploiement sur des plateformes cloud sans serveur.\n* **Maintenance et Am√©lioration:** √âtant le moteur de la nouvelle version de Nuxt, il b√©n√©ficie d'une maintenance active et d'am√©liorations r√©guli√®res.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  Pour les d√©veloppeurs habitu√©s √† Nuxt 2, l'adaptation √† Nitro peut n√©cessiter un certain temps d'apprentissage.\n* **Complexit√©:**  La configuration de Nitro peut √™tre complexe pour des applications tr√®s vastes et complexes.\n* **D√©pendances:**  La bonne performance de Nitro d√©pend fortement de la configuration et des optimisations mises en place.  Une mauvaise configuration peut d√©grader les performances.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]][[MOC_DevSecOps]]"
    },
    {
        "id": "c0d70da5-2d60-4fd4-8d80-22d7bbc471db",
        "title": "Open Feature",
        "description": "---\nid: ac13e1c4-96e2-4632-b280-c159bdad84c8\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nOpenFeature est un framework qui permet de g√©rer de mani√®re centralis√©e l‚Äôutilisation de [[Feature Flag]] dans une application. Il offre une abstraction qui permet de d√©finir des r√®gles pour activer ou d√©sactiver des fonctionnalit√©s en fonction de crit√®res d√©finis.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOpenFeature permet d‚Äôint√©grer des [[Feature Flag]] dans des applications pour activer ou d√©sactiver certaines fonctionnalit√©s √† la vol√©e. Cela permet de tester des nouvelles fonctionnalit√©s sans modifier le code ou d√©ployer une nouvelle version.\n\n- Il supporte l'utilisation de _providers_, tels que [[Flagd]], pour g√©rer les √©tats des [[Feature Flag]].\n- Chaque [[Feature Flag]] peut avoir plusieurs variantes (par exemple, activer une fonctionnalit√© √† 20% des utilisateurs).\n- Avec un provider comme [[Flagd]], la configuration des [[Feature Flag]] peut √™tre d√©finie dans un fichier [[JSON]].\n- L'int√©gration avec des frameworks comme [[Spring Boot]] permet de conditionner des comportements selon l‚Äô√©tat d‚Äôun [[Feature Flag]] dans le code, offrant ainsi un contr√¥le granulaire sur les fonctionnalit√©s activ√©es.\n\nUn exemple d‚Äôutilisation est de configurer un flag pour activer un message de bienvenue uniquement pour certains utilisateurs.\n\n# Qu'est ce qui est top ? üëç\n\n- **Abstraction simple** : OpenFeature fournit une abstraction standard pour g√©rer les [[Feature Flag]], ce qui permet de les int√©grer facilement dans diff√©rentes applications sans d√©pendre d‚Äôune impl√©mentation sp√©cifique.\n- **Flexibilit√©** : Il permet de tester des fonctionnalit√©s en production sans risque, en activant des flags pour une fraction des utilisateurs.\n- **Int√©gration fluide avec [[Spring Boot]]** : OpenFeature peut √™tre facilement int√©gr√© avec des frameworks populaires comme [[Spring Boot]] pour g√©rer dynamiquement l‚Äôactivation des fonctionnalit√©s via des flags.\n- **Support des providers multiples** : OpenFeature peut se connecter √† diff√©rents _providers_ comme [[Flagd]], offrant ainsi un large √©ventail d‚Äôoptions pour g√©rer les [[Feature Flag]].\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **N√©cessit√© d'un provider** : Pour une utilisation compl√®te, il est n√©cessaire de configurer un provider externe (comme [[Flagd]]), ce qui peut √™tre un surco√ªt de gestion pour de petites applications.\n- **Configuration suppl√©mentaire** : La configuration des [[Feature Flag]] et de leur provider n√©cessite une gestion suppl√©mentaire, notamment au niveau de l‚Äôenvironnement (ex. fichiers JSON et lancement de services).\n- **Complexit√© pour les petites applications** : Pour des projets simples, l‚Äôint√©gration d‚ÄôOpenFeature avec un provider externe peut ajouter une complexit√© inutile par rapport √† une gestion manuelle des [[Feature Flag]].\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "b32b473f-a83e-4228-b69a-812ac8669528",
        "title": "Open Service Gateway initiative (OSGi)",
        "description": "---\nid: 0fa947ed-276d-411b-9b71-cc251c56f62d\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**OSGi (Open Service Gateway Initiative)** est un framework [[Java]] qui permet de cr√©er des applications modulaires, o√π des composants appel√©s **bundles** peuvent √™tre install√©s, mis √† jour ou supprim√©s dynamiquement sans red√©marrer l'application.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOSGi facilite la cr√©ation d'applications modulaires en permettant aux composants de s'ajouter, se mettre √† jour ou se retirer √† la vol√©e. Les applications sont constitu√©es de **bundles** (fichiers JAR) qui exposent des **services**. Ces services peuvent √™tre consomm√©s par d'autres bundles de mani√®re dynamique gr√¢ce √† un syst√®me de gestion des d√©pendances et de la d√©couverte de services.\n\n**Principaux concepts :**\n\n- **Bundle** : Un module autonome contenant des services, souvent sous forme de JAR.\n- **Service** : Fonctionnalit√© offerte par un bundle, accessible √† d'autres bundles.\n- **Framework OSGi** : G√®re l'installation, la mise √† jour, la suppression et la r√©solution des d√©pendances des bundles.\n\nLes bundles peuvent interagir dynamiquement via des **r√©f√©rences de services**, permettant une communication fluide sans d√©pendances statiques.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Modularit√©** : Permet de structurer des applications complexes en modules autonomes.\n- **Dynamisme** : Ajout, mise √† jour ou retrait de modules sans interruption du service global.\n- **Flexibilit√©** : La communication entre les bundles via des services est dynamique et d√©coupl√©e.\n- **Gestion des d√©pendances** : OSGi r√©sout automatiquement les d√©pendances entre les modules.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√©** : La configuration et gestion de l'OSGi peut devenir complexe, surtout dans les applications tr√®s grandes ou avec de multiples d√©pendances.\n- **Performance** : L'overhead de gestion dynamique des bundles peut affecter les performances dans des syst√®mes tr√®s sollicit√©s.\n- **√âcosyst√®me limit√©** : Moins d'adoption dans l'√©cosyst√®me [[Java]] moderne compar√© √† d'autres solutions comme les conteneurs ou les [[Micros services]].\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "2bc77698-0a7d-453d-9044-0f6a151c7a02",
        "title": "OpenAPI",
        "description": "---\nid: d256da53-27ac-4a9e-a46c-98cea1cd5d5c\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nOpenAPI est une sp√©cification standardis√©e qui permet de d√©crire les interfaces d'API de mani√®re structur√©e, g√©n√©ralement en format YAML ou JSON. Elle permet de documenter, interagir et g√©n√©rer du code pour une API de fa√ßon automatis√©e.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOpenAPI est une sp√©cification qui standardise la description des API REST. Elle permet de d√©finir de mani√®re pr√©cise les routes, les param√®tres d'entr√©e, les types de r√©ponse, et d'autres aspects d'une API, tout en facilitant l'automatisation du d√©veloppement et de la documentation.\n\n- **Swagger vs OpenAPI** : Swagger √©tait le nom original de la sp√©cification avant son acquisition par SmartBear, qui a transf√©r√© la gestion de la sp√©cification √† l'OpenAPI Initiative. Swagger est d√©sormais utilis√© pour les outils li√©s √† cette sp√©cification.\n- **Documentation API** : La sp√©cification d√©crit les endpoints d'une API, leur m√©thode (GET, POST, etc.), les param√®tres attendus et les r√©ponses, avec des exemples et des codes de statut.\n- **G√©n√©ration de code** : En utilisant la sp√©cification OpenAPI, des outils peuvent g√©n√©rer automatiquement des clients API, des serveurs, ou des SDKs dans diff√©rents langages.\n- **Exemple** : Un fichier YAML peut d√©crire un endpoint API comme `/users`, les param√®tres qu'il accepte, et la structure de la r√©ponse (par exemple, une liste d'utilisateurs au format JSON).\n\n# Qu'est ce qui est top ? üëç\n\n- **Standardisation** : OpenAPI offre un format standard qui est largement adopt√©, ce qui simplifie l‚Äôinterop√©rabilit√© entre syst√®mes.\n- **G√©n√©ration automatique** : Outils comme Swagger peuvent g√©n√©rer automatiquement des clients et serveurs √† partir de la sp√©cification, r√©duisant le besoin de coder manuellement.\n- **Documentation interactive** : Gr√¢ce √† des outils comme Swagger UI, la documentation devient interactive, permettant aux d√©veloppeurs de tester directement les API via une interface web.\n- **Support √©tendu** : OpenAPI est bien support√© par de nombreux outils et langages, ce qui permet de l‚Äôint√©grer facilement dans des projets existants.\n- **Validation et autocompl√©tion** : Les outils peuvent valider les requ√™tes envoy√©es √† l‚ÄôAPI et offrir de l‚Äôautocompl√©tion dans les IDE pour simplifier le d√©veloppement.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© pour les petites API** : Pour de simples API, l'utilisation d'OpenAPI peut sembler un peu trop lourde, avec la n√©cessit√© de maintenir un fichier de sp√©cification.\n- **Peu adapt√© aux APIs non-REST** : Bien que l'OpenAPI soit con√ßu pour les API REST, il n‚Äôest pas aussi adapt√© pour d'autres architectures d‚ÄôAPI, comme GraphQL.\n- **N√©cessite un bon maintien de la sp√©cification** : Pour que la sp√©cification OpenAPI soit r√©ellement utile, elle doit √™tre mise √† jour √† chaque modification de l'API, ce qui demande une discipline de maintenance continue.\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "6ed60fdf-ad49-47cb-9abd-f529c1b03e76",
        "title": "OpenFaas",
        "description": "---\nid: 6e46487a-240e-46da-8086-578df2c86d75\n---\n# Rapidement c'est quoi‚ùì\n\nOpenFaaS est une plateforme serverless open source permettant de d√©ployer et g√©rer des fonctions sans serveur ([[Function as a Service (FaaS)]]). Elle est con√ßue pour la production et int√®gre des outils de monitoring.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOpenFaaS est une plateforme de fonctions-as-a-service ([[Function as a Service (FaaS)]]) open source qui simplifie le d√©ploiement et la gestion de [[Micros services]] encapsul√©s sous forme de fonctions.  Elle utilise des conteneurs [[Docker]] pour encapsuler chaque fonction, ce qui permet une isolation et une portabilit√© √©lev√©es. OpenFaaS fournit une interface utilisateur et une API pour g√©rer le cycle de vie complet des fonctions : d√©ploiement, mise √† jour, scaling et monitoring.  Elle supporte plusieurs langages de programmation ([[Go]], [[Node.js]], [[Python]], etc.) sous la forme de template et offre une int√©gration avec des outils d'orchestration de conteneurs comme [[Kubernetes]].  Le monitoring int√©gr√© permet de surveiller les performances et l'√©tat de sant√© des fonctions d√©ploy√©es, fournissant des m√©triques cruciales pour la gestion et le d√©bogage.  La plateforme est con√ßue pour la production,  garantissant une haute disponibilit√© et une scalabilit√©.  Le \"lourd\" mentionn√© initialement se r√©f√®re probablement √† la complexit√© de la plateforme par rapport √† des solutions plus l√©g√®res, mais cette complexit√© est compens√©e par ses fonctionnalit√©s avanc√©es et sa robustesse pour les environnements de production.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open Source et communautaire:**  B√©n√©ficie d'une communaut√© active et d'un code source librement accessible, favorisant la transparence et la collaboration.\n* **Production-ready:**  Con√ßu pour des environnements de production exigeants, avec une forte attention port√©e √† la stabilit√© et √† la scalabilit√©.\n* **Int√©gration avec [[Kubernetes]]:**  Permet un d√©ploiement facile et une gestion efficace des fonctions dans des clusters Kubernetes.\n* **Monitoring int√©gr√©:**  Fournit des outils de monitoring complets pour surveiller les performances et l'√©tat de sant√© des fonctions.\n* **Support de multiples langages:**  Permet d'utiliser le langage de programmation le plus adapt√© √† chaque fonction.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La configuration et la gestion d'OpenFaaS peuvent √™tre plus complexes que des solutions FaaS plus simplifi√©es.  La courbe d'apprentissage est plus raide.\n* **Ressources:**  N√©cessite des ressources plus importantes que les solutions plus l√©g√®res, surtout pour les environnements √† forte charge.\n* **Monitoring int√©gr√©** : Il peut ne pas √™tre √©vident de brancher OpenFaaS √† son propre syst√®me de monitoring\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]][[MOC_DevSecOps]]\n\n"
    },
    {
        "id": "e09a057d-c675-4911-9715-4d9703cdac1c",
        "title": "Certification Java 17 - Packages et Modules",
        "description": "---\nid: cb5d98b8-992b-410a-94cd-54c70b45c82a\n---\n## **3.1. Organisation des classes en packages**\n\nEn Java, un **package** est un regroupement logique de classes permettant d‚Äôorganiser le code et d'√©viter les conflits de noms.\n\n### **D√©claration d‚Äôun package**\n\nChaque classe Java peut appartenir √† un package d√©fini en haut du fichier source :\n\n```java\npackage com.exemple.util;\n\npublic class Outil {\n    public static void afficherMessage() {\n        System.out.println(\"Message d'un outil\");\n    }\n}\n```\n\nüìå **Le package doit correspondre √† l‚Äôarborescence des fichiers :**  \nüìÇ `com/exemple/util/Outil.java`\n\n### **Utilisation d‚Äôun package (`import`)**\n\nDans une autre classe, on importe la classe `Outil` :\n\n```java\nimport com.exemple.util.Outil;\n\npublic class Main {\n    public static void main(String[] args) {\n        Outil.afficherMessage();\n    }\n}\n```\n\nüìå **Sans `import`**, on doit utiliser le nom complet :\n\n```java\ncom.exemple.util.Outil.afficherMessage();\n```\n\n### **Types d‚Äôacc√®s dans un package**\n\n|Modificateur|M√™me classe|M√™me package|H√©ritage|Autres classes|\n|---|---|---|---|---|\n|`public`|‚úÖ|‚úÖ|‚úÖ|‚úÖ|\n|_(default)_|‚úÖ|‚úÖ|‚ùå|‚ùå|\n|`protected`|‚úÖ|‚úÖ|‚úÖ|‚ùå|\n|`private`|‚úÖ|‚ùå|‚ùå|‚ùå|\n\nüìå **Les classes d‚Äôun m√™me package ont acc√®s aux membres `default` et `protected`.**\n\n---\n\n## **3.2. Java Platform Module System (JPMS)** _(Depuis Java 9)_\n\nJPMS permet d‚Äôorganiser le code en **modules** pour am√©liorer la maintenance et la s√©curit√©.\n\n### **Qu‚Äôest-ce qu‚Äôun module ?**\n\nUn module est un **groupe de packages** d√©clar√©s dans un fichier sp√©cial `module-info.java`.\n\nüìÇ **Structure d‚Äôun projet modulaire :**\n\n```\n/mon-projet\n  /src\n    /com.exemple.util\n      Outil.java\n    /com.exemple.app\n      Main.java\n    module-info.java\n```\n\n---\n\n## **3.3. D√©finition d‚Äôun module**\n\nChaque module a un fichier `module-info.java` d√©finissant ses **d√©pendances** et les packages qu‚Äôil expose.\n\n### **Cr√©er un module `com.exemple.util`**\n\nüìÑ `module-info.java`\n\n```java\nmodule com.exemple.util {\n    exports com.exemple.util;  // Exporte le package pour qu‚Äôil soit utilisable ailleurs\n}\n```\n\nüìÑ `Outil.java`\n\n```java\npackage com.exemple.util;\n\npublic class Outil {\n    public static void afficherMessage() {\n        System.out.println(\"Message du module util\");\n    }\n}\n```\n\n### **Utiliser un module dans un autre (`com.exemple.app`)**\n\nüìÑ `module-info.java`\n\n```java\nmodule com.exemple.app {\n    requires com.exemple.util;  // D√©pendance au module util\n}\n```\n\nüìÑ `Main.java`\n\n```java\npackage com.exemple.app;\n\nimport com.exemple.util.Outil;\n\npublic class Main {\n    public static void main(String[] args) {\n        Outil.afficherMessage();\n    }\n}\n```\n\nüìå **Sans `exports` dans `com.exemple.util`, `Outil` ne serait pas accessible !**\n\n---\n\n## **3.4. D√©pendances entre modules**\n\nUn module peut d√©pendre d‚Äôun autre gr√¢ce √† `requires`.\n\n```java\nmodule com.exemple.app {\n    requires com.exemple.util;  // D√©pend de ce module\n}\n```\n\n### **Types de `requires`**\n\n|Directive|Description|\n|---|---|\n|`requires`|D√©pendance obligatoire|\n|`requires transitive`|Propag√© aux modules d√©pendants|\n|`requires static`|D√©pendance uniquement √† la compilation|\n\nüìå **Exemple de `requires transitive`**  \nSi `com.exemple.ui` d√©pend de `com.exemple.util`, on peut propager la d√©pendance :\n\n```java\nmodule com.exemple.ui {\n    requires transitive com.exemple.util;\n}\n```\n\nMaintenant, tout module **utilisant `com.exemple.ui` aura aussi acc√®s √† `com.exemple.util`**.\n\n---\n\n## **3.5. Services dans JPMS**\n\nLe JPMS introduit un syst√®me de **services** pour **d√©finir et charger dynamiquement des impl√©mentations**.\n\n### **D√©finition d‚Äôun service**\n\nüìÑ `Service.java`\n\n```java\npackage com.exemple.service;\n\npublic interface Service {\n    void executer();\n}\n```\n\n### **Impl√©mentation du service**\n\nüìÑ `ServiceImpl.java`\n\n```java\npackage com.exemple.impl;\n\nimport com.exemple.service.Service;\n\npublic class ServiceImpl implements Service {\n    public void executer() {\n        System.out.println(\"Service ex√©cut√© !\");\n    }\n}\n```\n\n### **Module d√©finissant le service (`provides`)**\n\nüìÑ `module-info.java` dans `com.exemple.impl`\n\n```java\nmodule com.exemple.impl {\n    requires com.exemple.service;\n    provides com.exemple.service.Service with com.exemple.impl.ServiceImpl;\n}\n```\n\n### **Utilisation du service (`uses`)**\n\nüìÑ `module-info.java` dans `com.exemple.app`\n\n```java\nmodule com.exemple.app {\n    requires com.exemple.service;\n    uses com.exemple.service.Service;\n}\n```\n\nüìÑ `Main.java`\n\n```java\npackage com.exemple.app;\n\nimport com.exemple.service.Service;\nimport java.util.ServiceLoader;\n\npublic class Main {\n    public static void main(String[] args) {\n        ServiceLoader<Service> loader = ServiceLoader.load(Service.class);\n        for (Service service : loader) {\n            service.executer();  // Ex√©cute automatiquement les impl√©mentations\n        }\n    }\n}\n```\n\nüìå **Les services permettent d'ajouter dynamiquement des impl√©mentations sans modifier le code existant.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Packages** : Organisation en namespaces (`package` et `import`).  \n‚úÖ **Modules** : Groupes de packages, isol√©s avec `module-info.java`.  \n‚úÖ **D√©pendances** : `requires`, `requires transitive`.  \n‚úÖ **Services** : `provides` et `uses` pour une architecture modulaire et flexible.\n\n---\n"
    },
    {
        "id": "a64ba342-46d1-4714-b28f-193017033846",
        "title": "Pipe Angular",
        "description": "---\nid: 750c7ad4-f7ec-4a65-ae5e-a2b0f34af3be\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nUn **pipe** en [[Angular]] est un outil permettant de transformer les valeurs dans un template. Il s'agit d'une classe qui impl√©mente l'interface `PipeTransform`, utilis√©e pour effectuer des transformations sur des donn√©es avant de les afficher, tout en √©tant optimis√©e pour les performances.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn **pipe** est une fonction qui prend une valeur en entr√©e, effectue une transformation et retourne une nouvelle valeur. Elle est utilis√©e dans les templates Angular pour formater ou modifier les donn√©es de mani√®re d√©clarative.\n\n### Fonctionnement :\n\n- Les **pipes** sont impl√©ment√©s en cr√©ant une classe qui impl√©mente l'interface `PipeTransform`, et en red√©finissant la m√©thode `transform`.\n- Lorsqu'un pipe est utilis√© dans un template, il prend la donn√©e √† transformer comme argument et applique la transformation d√©finie dans la m√©thode `transform`.\n- Par d√©faut, les pipes sont **[[M√©thode pure]]**, ce qui signifie qu'ils ne modifient pas directement la valeur pass√©e, mais retournent une nouvelle instance. Cela aide [[Angular]] √† optimiser les rendus en √©vitant des calculs redondants.\n\n### Exemple de pipe :\n\n1. **Cr√©ation** : Via la CLI [[Angular]] :\n    \n    ```\n    ng g p nom_du_pipe\n    ```\n    \n2. **Utilisation** dans le template :\n    \n    ```\n    {{ maVariable | nom_du_pipe }}\n    ```\n    \n3. **Passage de plusieurs arguments** :\n    \n    ```\n    transform(val: string | undefined, valSiVide: string): string {\n        return val ? val : valSiVide;\n    }\n    \n    {{ maVariable | nom_du_pipe : '-' }}\n    ```\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Optimisation des performances** : Les pipes sont des [[M√©thode pure]] par d√©faut, ce qui √©vite des recalculs inutiles lors des re-renders.\n- **Simplicit√©** : Les transformations dans les templates sont faciles √† mettre en place, sans avoir besoin de logique complexe dans les composants.\n- **R√©utilisabilit√©** : Les pipes peuvent √™tre r√©utilis√©s dans plusieurs templates, ce qui rend le code plus propre et modulaire.\n- **Personnalisation** : Possibilit√© de cr√©er des pipes personnalis√©s pour des transformations sp√©cifiques.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Ex√©cution fr√©quente** : Bien que les pipes purs soient optimis√©s, si des m√©thodes lourdes sont ex√©cut√©es √† l‚Äôint√©rieur d'un pipe non pur, elles risquent de diminuer les performances.\n- **Complexit√© pour les pipes impurs** : Si un pipe a des effets secondaires ou des calculs qui doivent se produire m√™me sans changement de valeur, il peut devenir difficile √† g√©rer et √† optimiser.\n- **Difficult√© avec les types complexes** : Les pipes qui manipulent des objets complexes ou des tableaux peuvent parfois entra√Æner des comportements inattendus, en raison des v√©rifications de changement de r√©f√©rence.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "426b06ca-5a74-48db-95ca-e19b5d566a06",
        "title": "Pitest",
        "description": "---\nid: 3f5a054c-06a1-4812-9802-1e1df6fe8452\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**PiTest** est une biblioth√®que de [[Test de mutation]] pour [[Java]]. Elle permet de tester la robustesse des tests unitaires en introduisant des mutations (modifications) dans le code source et en v√©rifiant si les tests les d√©tectent.\nOn surnomme cette librarie PIT.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nPiTest g√©n√®re des mutants dans le code source, c'est-√†-dire des modifications al√©atoires ou dirig√©es, et ex√©cute les tests unitaires pour voir si ces changements sont d√©tect√©s. Cela permet de mesurer l'efficacit√© des tests existants. Par exemple, un test qui ne d√©tecte pas une mutation est consid√©r√© comme insuffisant.\n\n**Fonctionnement :**\n\n- L‚Äôoutil prend un projet [[Java]] et applique des mutations sur les classes de l‚Äôapplication.\n- Il ex√©cute les tests unitaires pour chaque mutation, et g√©n√®re des rapports d√©taillant les mutations d√©tect√©es ou non par les tests.\n- Configurable via [[Maven]] ou [[Gradle]], PiTest peut √™tre ajust√© pour cibler des classes ou des tests sp√©cifiques.\n\n**Installation :**\n\n- Ajout d‚Äôun plugin dans le fichier `pom.xml` ou `build.gradle`.\n\n**Ex√©cution :**\n\n- Lancer la commande `mvn test-compile org.pitest:pitest-maven:mutationCoverage` pour commencer l'analyse.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Facilit√© d'int√©gration** : Ajout simple via [[Maven]] ou [[Gradle]].\n- **Rapports d√©taill√©s** : Produit des rapports de couverture des mutations qui aident √† √©valuer la qualit√© des tests.\n- **Param√©trable** : Permet de cibler des classes et tests sp√©cifiques pour une analyse plus fine.\n- **Am√©lioration continue** : Aide √† am√©liorer la qualit√© du code en s‚Äôassurant que les tests couvrent bien tous les cas de mutation.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Performance** : L'ex√©cution peut √™tre longue, surtout avec de grandes bases de code ou de nombreux tests.\n- **Complexit√© croissante** : Une fois les mutations et les tests multipli√©s, l‚Äôanalyse peut devenir difficile √† interpr√©ter et √† g√©rer.\n- **Faux positifs** : Certains mutants peuvent ne pas √™tre pertinents pour tous les projets, ce qui n√©cessite des ajustements fins pour √©viter des faux n√©gatifs.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "45af2e5c-f8f4-4925-8f42-792e76f6d8f8",
        "title": "Certification Java 17 - Programmation Concurrente",
        "description": "---\nid: 84743d0a-b01c-4a99-9742-863cc98bedf2\n---\n## **9.1. Threads (`Runnable`, `Callable`)**\n\nUn **thread** permet d‚Äôex√©cuter une t√¢che en parall√®le d‚Äôautres instructions.  \nJava propose deux interfaces principales :\n\n- `Runnable` (pas de retour de valeur)\n- `Callable<V>` (retourne une valeur et peut lever une exception)\n\n---\n\n### **1. Cr√©ation d‚Äôun `Thread` avec `Runnable`**\n\n```java\nclass Tache implements Runnable {\n    public void run() {\n        System.out.println(\"Thread ex√©cut√© !\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread(new Tache());\n        t.start();  // D√©marre le thread\n    }\n}\n```\n\nüìå **Ne pas appeler `run()` directement, utiliser `start()`.**\n\n---\n\n### **2. Cr√©ation d‚Äôun `Thread` avec `Callable` (retour de valeur)**\n\n```java\nimport java.util.concurrent.*;\n\npublic class Exemple {\n    public static void main(String[] args) throws Exception {\n        Callable<Integer> tache = () -> 42;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        Future<Integer> futur = executor.submit(tache);\n\n        System.out.println(futur.get()); // 42\n        executor.shutdown();\n    }\n}\n```\n\nüìå **`Callable<V>` retourne une valeur via `Future<V>`.**\n\n---\n\n## **9.2. `ExecutorService`, `ForkJoinPool`**\n\n### **1. `ExecutorService` : Gestion des threads**\n\n```java\nExecutorService executor = Executors.newFixedThreadPool(3);\nexecutor.submit(() -> System.out.println(\"Thread lanc√©\"));\nexecutor.shutdown();\n```\n\nüìå **Avantages :**\n\n- G√®re automatiquement les threads.\n- Optimise l‚Äôutilisation des ressources.\n\n|**Type d‚ÄôExecutor**|**Description**|\n|---|---|\n|`newFixedThreadPool(n)`|Pool de `n` threads fixes|\n|`newCachedThreadPool()`|Cr√©e des threads √† la demande|\n|`newSingleThreadExecutor()`|1 seul thread (ex√©cution s√©quentielle)|\n\n---\n\n### **2. `ForkJoinPool` : Ex√©cution de t√¢ches r√©cursives**\n\nUtilis√© pour **diviser une t√¢che complexe** en sous-t√¢ches ex√©cut√©es en parall√®le.\n\n```java\nimport java.util.concurrent.*;\n\nclass TacheRecursive extends RecursiveTask<Integer> {\n    int n;\n    TacheRecursive(int n) { this.n = n; }\n\n    protected Integer compute() {\n        if (n <= 1) return n;\n        TacheRecursive t1 = new TacheRecursive(n - 1);\n        TacheRecursive t2 = new TacheRecursive(n - 2);\n        t1.fork();\n        return t2.compute() + t1.join();\n    }\n}\n\npublic class Exemple {\n    public static void main(String[] args) {\n        ForkJoinPool pool = new ForkJoinPool();\n        int result = pool.invoke(new TacheRecursive(10));\n        System.out.println(result);\n    }\n}\n```\n\nüìå **Optimis√© pour les calculs r√©cursifs lourds (`divide & conquer`).**\n\n---\n\n## **9.3. Threads Virtuels (`Virtual Threads`, `Thread.ofVirtual()`)**\n\nIntroduits en **Java 21**, les **Virtual Threads** permettent d‚Äôex√©cuter **des millions de t√¢ches concurrentes** avec peu de threads physiques.\n\n```java\nThread.startVirtualThread(() -> {\n    System.out.println(\"Thread virtuel lanc√© !\");\n});\n```\n\nüìå **Avantages :**\n\n- Tr√®s l√©ger (pas li√© √† un thread syst√®me).\n- Optimis√© pour des t√¢ches bloquantes (I/O, bases de donn√©es).\n\n---\n\n### **Cr√©ation d‚Äôun `Virtual Thread` avec un `Executor`**\n\n```java\nExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\nexecutor.submit(() -> System.out.println(\"T√¢che ex√©cut√©e\"));\nexecutor.shutdown();\n```\n\nüìå **Chaque t√¢che a son propre thread virtuel sans surcharger le CPU.**\n\n---\n\n## **9.4. Verrous (`synchronized`, `Lock`, `ReadWriteLock`)**\n\n### **1. `synchronized` : Verrouillage automatique**\n\n```java\nclass Compteur {\n    private int valeur = 0;\n\n    public synchronized void incrementer() {\n        valeur++;\n    }\n}\n```\n\nüìå **Seul un thread peut ex√©cuter `incrementer()` √† la fois.**\n\n---\n\n### **2. `Lock` : Gestion manuelle des verrous**\n\n```java\nimport java.util.concurrent.locks.*;\n\nclass Ressource {\n    private final Lock lock = new ReentrantLock();\n\n    public void acces() {\n        lock.lock();\n        try {\n            System.out.println(\"Acc√®s s√©curis√©\");\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n```\n\nüìå **`ReentrantLock` offre plus de contr√¥le que `synchronized`.**\n\n---\n\n### **3. `ReadWriteLock` : Optimisation des acc√®s concurrents**\n\n- Plusieurs lectures simultan√©es.\n- √âcriture exclusive.\n\n```java\nimport java.util.concurrent.locks.*;\n\nclass Cache {\n    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n    private int valeur = 0;\n\n    public int lire() {\n        lock.readLock().lock();\n        try { return valeur; }\n        finally { lock.readLock().unlock(); }\n    }\n\n    public void ecrire(int nouvelleValeur) {\n        lock.writeLock().lock();\n        try { valeur = nouvelleValeur; }\n        finally { lock.writeLock().unlock(); }\n    }\n}\n```\n\nüìå **Optimise les lectures fr√©quentes avec peu d‚Äô√©critures.**\n\n---\n\n## **9.5. Collections Concurrentes et Streams Parall√®les**\n\n### **1. Collections Concurrentes**\n\n|**Classe**|**Description**|\n|---|---|\n|`ConcurrentHashMap`|`HashMap` thread-safe|\n|`CopyOnWriteArrayList`|`ArrayList` modifiable sans verrou|\n|`BlockingQueue`|File d‚Äôattente bloquante|\n\n**Exemple avec `ConcurrentHashMap` :**\n\n```java\nimport java.util.concurrent.*;\n\nMap<String, Integer> map = new ConcurrentHashMap<>();\nmap.put(\"A\", 1);\nSystem.out.println(map.get(\"A\"));\n```\n\n---\n\n### **2. `Stream` Parall√®le (`parallelStream()`)**\n\nTransforme un `Stream` en version parall√®le.\n\n```java\nList<Integer> nombres = List.of(1, 2, 3, 4, 5);\nint somme = nombres.parallelStream()\n    .mapToInt(Integer::intValue)\n    .sum();\nSystem.out.println(somme);\n```\n\nüìå **Am√©liore les performances pour les grandes collections.**\n\n‚ö† **Attention :**\n\n- Un `Stream` parall√®le ne garantit pas l‚Äôordre des r√©sultats.\n- Peut √™tre moins performant pour des petites collections.\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Threads (`Runnable`, `Callable`)** : Ex√©cuter des t√¢ches en parall√®le.  \n‚úÖ **`ExecutorService`, `ForkJoinPool`** : Gestion optimis√©e des threads.  \n‚úÖ **Threads Virtuels (`VirtualThread`)** : Tr√®s l√©gers, optimis√©s pour I/O.  \n‚úÖ **Verrous (`synchronized`, `Lock`, `ReadWriteLock`)** : Gestion des acc√®s concurrents.  \n‚úÖ **Collections Concurrentes et Streams Parall√®les** : `ConcurrentHashMap`, `parallelStream()`."
    },
    {
        "id": "fae7c92e-e8a3-454a-b8d9-7c971756468c",
        "title": "Certification Java 17 - Programmation Orient√©e Objet (OOP)",
        "description": "---\nid: df0b5c7d-a921-49b3-8778-71e5ae745df5\n---\n## **2.1. D√©claration et instanciation d‚Äôobjets**\n\nEn Java, tout repose sur les **objets** et les **classes**.\n\n### **D√©finition d‚Äôune classe et cr√©ation d‚Äôobjets**\n\n```java\nclass Voiture {\n    String marque;\n    \n    Voiture(String marque) {\n        this.marque = marque;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Voiture v1 = new Voiture(\"Toyota\");  // Instanciation d‚Äôun objet\n        System.out.println(v1.marque); // Toyota\n    }\n}\n```\n\nüìå **`new` alloue de la m√©moire et retourne une r√©f√©rence √† l'objet.**\n\n### **Diff√©rences entre `new` et `newInstance()`**\n\n- `new` est utilis√© directement.\n- `Class.forName(\"NomDeClasse\").newInstance();` permet une instanciation dynamique.\n\n---\n\n## **2.2. Cycle de vie des objets**\n\nLe **cycle de vie** d‚Äôun objet comprend :\n\n1. **Cr√©ation** (`new`)\n2. **Utilisation** (modifications, appels de m√©thodes)\n3. **Perte de r√©f√©rence** (`null` ou sortie du scope)\n4. **Garbage Collection** (ramasse-miettes)\n\n**Exemple de perte de r√©f√©rence :**\n\n```java\nVoiture v1 = new Voiture(\"Renault\");\nv1 = null; // L'objet devient √©ligible au Garbage Collector\n```\n\n### **Garbage Collector (GC)**\n\nLe **GC** lib√®re la m√©moire des objets **inaccessibles**.\n\n- `System.gc();` demande un ramassage (sans garantie).\n- `finalize()` (d√©pr√©ci√©) √©tait invoqu√© avant suppression d‚Äôun objet.\n\n---\n\n## **2.3. Encapsulation et immutabilit√©**\n\n### **Encapsulation (getter/setter)**\n\nPrincipe : **cacher les champs** et y acc√©der via **des m√©thodes publiques**.\n\n```java\nclass CompteBancaire {\n    private double solde;\n\n    public double getSolde() { return solde; }\n    public void deposer(double montant) { solde += montant; }\n}\n```\n\n‚úÖ **S√©curise les donn√©es**  \n‚úÖ **Permet des r√®gles m√©tier (ex: solde min.)**\n\n### **Immutabilit√©**\n\nUn objet **immuable** ne peut pas √™tre modifi√© apr√®s cr√©ation.  \n**Bonne pratique :** D√©clarer les champs `private final` et ne fournir aucun setter.\n\n```java\nclass Client {\n    private final String nom;\n\n    Client(String nom) { this.nom = nom; }\n    public String getNom() { return nom; }\n}\n```\n\n---\n\n## **2.4. H√©ritage, classes abstraites et classes scell√©es (sealed)**\n\n### **H√©ritage (`extends`)**\n\nPermet de r√©utiliser le code d'une classe m√®re.\n\n```java\nclass Animal {\n    String type = \"Mammif√®re\";\n}\n\nclass Chien extends Animal {\n    String race = \"Labrador\";\n}\n```\n\nüìå **Un objet `Chien` poss√®de aussi `type`.**\n\n### **Classes Abstraites (`abstract`)**\n\nImpossible √† instancier, sert de mod√®le.\n\n```java\nabstract class Animal {\n    abstract void faireDuBruit();  // M√©thode abstraite\n}\nclass Chien extends Animal {\n    void faireDuBruit() { System.out.println(\"Woof!\"); }\n}\n```\n\n### **Classes Sealed (`sealed`)** _(Java 17)_\n\nRestreint l‚Äôh√©ritage √† des classes pr√©cises.\n\n```java\nsealed class Animal permits Chien, Chat {}\nfinal class Chien extends Animal {}  // Pas d‚Äôh√©ritage possible\nnon-sealed class Chat extends Animal {}  // H√©ritage permis\n```\n\n---\n\n## **2.5. Polymorphisme, type objet vs type r√©f√©rence**\n\n**Polymorphisme** : une m√©thode peut se comporter diff√©remment selon l‚Äôobjet.\n\n```java\nclass Animal {\n    void faireDuBruit() { System.out.println(\"Bruit d‚Äôanimal\"); }\n}\nclass Chien extends Animal {\n    void faireDuBruit() { System.out.println(\"Woof!\"); }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Animal a = new Chien();  // Type r√©f√©rence : Animal, type objet : Chien\n        a.faireDuBruit();  // Woof! (m√©thode de Chien)\n    }\n}\n```\n\nüìå **Le type objet d√©termine la m√©thode ex√©cut√©e.**\n\n---\n\n## **2.6. Op√©rateur `instanceof` et Pattern Matching**\n\n### **Op√©rateur `instanceof`** _(avant Java 16)_\n\n```java\nif (obj instanceof Chien) {\n    Chien c = (Chien) obj;\n    c.aboyer();\n}\n```\n\n### **Pattern Matching (`instanceof`)** _(Java 16+)_\n\n```java\nif (obj instanceof Chien c) {\n    c.aboyer();  // Plus besoin de caster !\n}\n```\n\n---\n\n## **2.7. Interfaces : m√©thodes `default`, `static`, priv√©es**\n\nUne **interface** d√©finit un **contrat** que les classes doivent respecter.\n\n```java\ninterface Animal {\n    void faireDuBruit();\n}\nclass Chien implements Animal {\n    public void faireDuBruit() { System.out.println(\"Woof!\"); }\n}\n```\n\n### **M√©thodes `default`**\n\nPermet d‚Äôajouter une m√©thode sans casser les impl√©mentations existantes.\n\n```java\ninterface Animal {\n    default void dormir() { System.out.println(\"Je dors\"); }\n}\n```\n\n### **M√©thodes `static`**\n\nUne m√©thode statique appartient √† l'interface et ne peut pas √™tre red√©finie.\n\n```java\ninterface Utilitaire {\n    static void afficherMessage() { System.out.println(\"Message statique\"); }\n}\n```\n\n### **M√©thodes priv√©es** _(Java 9+)_\n\nPermet d'√©viter la duplication de code dans une interface.\n\n```java\ninterface Animal {\n    default void action() {\n        preparer();\n        System.out.println(\"Faire une action\");\n    }\n    private void preparer() {\n        System.out.println(\"Pr√©paration...\");\n    }\n}\n```\n\n---\n\n## **2.8. Enums avec champs, m√©thodes et constructeurs**\n\nUn **enum** repr√©sente un ensemble **fixe** de valeurs.\n\n```java\nenum Jour {\n    LUNDI, MARDI, MERCREDI;\n}\n```\n\n### **Enum avec champs et m√©thodes**\n\n```java\nenum Statut {\n    EN_COURS(1), TERMINE(2);\n\n    private final int code;\n    \n    Statut(int code) { this.code = code; }\n    public int getCode() { return code; }\n}\n```\n\nüìå **Les `enum` peuvent avoir des m√©thodes et des constructeurs priv√©s.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Encapsulation** avec `private` et `getter/setter`  \n‚úÖ **Immutabilit√©** : `final` et pas de setter  \n‚úÖ **H√©ritage** : `extends` pour sp√©cialiser une classe  \n‚úÖ **Classes abstraites** : mod√®le de base √† impl√©menter  \n‚úÖ **Classes `sealed`** : restreint l'h√©ritage (Java 17)  \n‚úÖ **Polymorphisme** : le type objet dicte le comportement  \n‚úÖ **`instanceof` avec Pattern Matching** : simplifie les cast  \n‚úÖ **Interfaces avec m√©thodes `default`, `static`, priv√©es`** ‚úÖ **`enum` avec m√©thodes et champs priv√©s**\n\n---\n\n[[Java]] [[Certification Java 17]]"
    },
    {
        "id": "37d4edee-5398-4339-b662-b16aff7c6389",
        "title": "Prometheus",
        "description": "---\nid: ec08a5df-a7b8-4dd1-bbca-5109de9470bd\n---\n# Rapidement c'est quoi‚ùì\n\nPrometheus est un syst√®me de [[Monitoring]] et d'alerte [[Open-source]] qui stocke les donn√©es sous forme de s√©ries temporelles.  Il r√©cup√®re des m√©triques et les affiche via un tableau de bord.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nPrometheus est un syst√®me de surveillance et d'alerte open source bas√© sur une architecture de pull (contrairement √† une architecture de push).  Il fonctionne en interrogeant r√©guli√®rement (par d√©faut toutes les 15 secondes) des targets (applications, serveurs, etc.) exposant des m√©triques via une interface [[HTTP]] (g√©n√©ralement le port 9100).  Ces m√©triques sont des s√©ries temporelles, c'est-√†-dire des donn√©es associ√©es √† un timestamp.  Chaque m√©trique est identifi√©e par un nom et un ensemble d'√©tiquettes (labels) qui permettent de filtrer et agr√©ger les donn√©es.\n\nPrometheus stocke ces donn√©es dans une [[Base de donn√©e]] interne et les expose via une interface utilisateur web.  Il permet de cr√©er des alertes bas√©es sur des r√®gles d√©finies sur les m√©triques (ex:  si la latence d√©passe 500ms, envoyer une alerte).  L'outil offre des fonctionnalit√©s de visualisation des donn√©es et de cr√©ation de dashboards pour suivre l'√©tat de son infrastructure.  Il peut √™tre √©tendu via des exporters (pour collecter des m√©triques de diff√©rents syst√®mes) et des librairies clientes pour exposer des m√©triques personnalis√©es.  Contrairement √† certains syst√®mes de monitoring qui utilisent une architecture de push (o√π les targets envoient les m√©triques √† un serveur central), Prometheus utilise une architecture de pull, ce qui simplifie la configuration et am√©liore la fiabilit√©.  Cependant, cela n√©cessite que les targets soient toujours accessibles √† Prometheus.  Son stockage interne est bas√© sur un mod√®le de donn√©es temps-s√©rie optimis√© pour les requ√™tes de donn√©es et la performance des requ√™tes.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open source et gratuit:**  Large communaut√©, documentation abondante et contributions constantes.\n* **Architecture robuste et scalable:**  Capable de g√©rer un grand nombre de m√©triques et de targets.\n* **Flexibilit√© et extensibilit√©:**  Large choix d'exporters et de librairies clientes.\n* **Syst√®me d'alertes puissant:**  Cr√©ation facile de r√®gles d'alerte complexes.\n* **Interface utilisateur intuitive:**  Visualisation et exploration des donn√©es simples et efficaces.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Architecture de pull:**  N√©cessite que les targets soient toujours disponibles et accessibles.  Les targets inaccessibles ne sont pas monitor√©es.\n* **Stockage interne limit√©:**  Pour de tr√®s grands volumes de donn√©es, une solution de stockage externe est n√©cessaire (comme [[Thanos]], par exemple).\n* **Courbe d'apprentissage:**  La configuration et l'utilisation peuvent n√©cessiter une certaine expertise pour tirer pleinement parti de ses fonctionnalit√©s avanc√©es.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "ba0218cf-bb84-4722-9d0a-517f4c6f82be",
        "title": "Raison d‚Äôune bonne architecture d‚Äôun SI",
        "description": "---\nid: ce97e1da-3b18-44bc-a286-a42fc3195261\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nUne bonne architecture d'un Syst√®me d'Information (SI) est une structure flexible, √©volutive et adapt√©e aux besoins actuels et futurs de l'organisation. Elle doit √™tre con√ßue pour faciliter le changement sans sacrifier la stabilit√©.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUne bonne architecture d‚Äôun SI permet de r√©pondre efficacement aux besoins imm√©diats tout en restant ouverte aux √©volutions futures. Elle doit √™tre :\n\n- **Adapt√©e au besoin** : Chaque architecture doit √™tre align√©e avec les objectifs m√©tiers et les contraintes techniques sp√©cifiques √† l'organisation.\n- **Flexible** : Elle doit permettre des changements rapides sans compromettre la performance ou la stabilit√© du syst√®me.\n- **Minimiser les anticipations excessives** : Une architecture trop rigide, construite autour de changements futurs incertains, peut devenir obsol√®te rapidement. Il est souvent plus facile de modifier une architecture au fil de l‚Äôeau plut√¥t que de tenter de tout pr√©voir.\n- **Architecture continue** : Elle √©volue de mani√®re incr√©mentale, en r√©pondant aux besoins imm√©diats et en int√©grant progressivement les changements sans s‚Äôimposer des mod√®les rigides.\n\nL'id√©e est d'√©viter le \"gros DAT\" ([[Document d'Architecture Technique]]) fig√© qui restreint l'innovation et de favoriser une approche agile et √©volutive, o√π l'architecture peut se r√©ajuster au fur et √† mesure des besoins.\n\n# Qu'est ce qui est top ? üëç\n\n- **Flexibilit√©** : Permet de s'adapter rapidement aux √©volutions du march√© et aux besoins changeants des utilisateurs.\n- **√âvolutivit√©** : L'architecture est construite pour int√©grer facilement de nouveaux composants ou de nouvelles fonctionnalit√©s.\n- **R√©activit√©** : Une architecture continue facilite la gestion des impr√©vus sans perturber l‚Äôensemble du syst√®me.\n- **Optimisation des co√ªts** : En adaptant les ressources en fonction des besoins r√©els et non des projections, l‚Äôarchitecture √©vite le gaspillage.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© √† court terme** : Lors de la mise en place d‚Äôune architecture flexible, il peut √™tre difficile de g√©rer une transition en douceur avec les syst√®mes existants.\n- **Risque d'it√©ration non ma√Ætris√©e** : Une trop grande flexibilit√© peut mener √† des ajustements constants et √† une incoh√©rence entre les diff√©rentes parties du syst√®me.\n- **Gestion de la dette technique** : Sans une vision claire, l'architecture continue peut accumuler de la dette technique au fil des ajustements successifs.\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "3f37d305-6168-491b-8487-7d9c7316354c",
        "title": "Redis Sentinel",
        "description": "---\nid: 7c33ceca-69d3-469a-9986-edcee3a042f4\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nRedis Sentinel est un outil de haute disponibilit√© pour [[Redis]], permettant de surveiller un serveur Redis principal (master) et ses r√©pliques (slaves), et de promouvoir automatiquement un slave en master en cas de d√©faillance du master actuel.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nRedis Sentinel est con√ßu pour assurer la disponibilit√© et la r√©silience des instances Redis. Il surveille le serveur [[Redis]] master et ses r√©pliques (slaves) pour d√©tecter toute panne. En cas de d√©faillance du master, Sentinel s√©lectionne un slave (celui ayant la derni√®re mise √† jour) pour le promouvoir en master et ainsi maintenir la disponibilit√© du service Redis.\n\n- **Architecture** : Un master [[Redis]] avec plusieurs r√©pliques (slaves) synchronis√©es.\n- **R√¥le des Sentinels** : Surveiller l'√©tat du master et des slaves, d√©tecter les pannes, et effectuer un basculement automatique (failover) en cas de d√©faillance.\n- **Crit√®res de promotion** : Le slave avec la derni√®re mise √† jour devient le nouveau master.\n- **Limitation** : Redis Sentinel ne constitue pas un cluster Redis distribu√© complet, car il ne g√®re pas la r√©partition des donn√©es entre plusieurs instances. Il se concentre uniquement sur la haute disponibilit√©.\n\n# Qu'est ce qui est top ? üëç\n\n- **Haute disponibilit√©** : En cas de panne du master, un slave est automatiquement promu pour minimiser les interruptions de service.\n- **Surveillance continue** : Sentinel surveille en permanence l'√©tat des instances [[Redis]], garantissant une d√©tection rapide des probl√®mes.\n- **Failover automatique** : Pas besoin d'intervention manuelle pour promouvoir un nouveau master, ce qui r√©duit le risque d'erreur et am√©liore la r√©activit√©.\n- **Simplicit√©** : Configuration relativement simple pour g√©rer la [[Haute disponibilit√©]] avec Redis.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Pas un cluster Redis complet** : Redis Sentinel ne g√®re pas la distribution des donn√©es ou le partitionnement, contrairement √† un cluster Redis distribu√©.\n- **D√©pendance au r√©seau** : Si Sentinel et les instances Redis sont mal configur√©s ou s'il y a des probl√®mes r√©seau, le failover peut √©chouer.\n- **S√©lection du nouveau master** : Le processus de promotion d'un slave peut parfois √™tre lent si les instances Redis ne sont pas bien synchronis√©es.\n- **Limit√© √† la [Haute disponibilit√©]]** : Redis Sentinel ne prend pas en charge d'autres fonctionnalit√©s avanc√©es comme la gestion automatique des partitions ou des volumes de donn√©es.\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "6b6bd7b1-3d82-4f65-be46-aa30c20f278f",
        "title": "Redis",
        "description": "---\nid: c3202556-f6cf-4e20-b7e8-09270e6ab143\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Redis** est une [[Base de donn√©e NoSQL]] , utilis√©e comme cache et store de structures de donn√©es telles que des cha√Ænes de caract√®res, des listes, des ensembles, etc. Elle est populaire pour sa rapidit√© et sa simplicit√© d‚Äôutilisation, particuli√®rement pour la gestion de donn√©es temporaires.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nRedis offre des fonctionnalit√©s diverses comme le caching, la gestion de sessions et le stockage temporaire de donn√©es, gr√¢ce √† sa capacit√© √† stocker des donn√©es en m√©moire et √† les manipuler tr√®s rapidement.\n\nAvec [[Java]], Redis peut √™tre int√©gr√© via plusieurs m√©canismes :\n\n1. **Redis Template** :  \n    Permet d'interagir avec Redis √† un niveau bas, proche de la ligne de commande. Il est flexible mais n√©cessite plus de gestion manuelle des op√©rations Redis.\n    \n2. **[[Spring Data Redis]]** :  \n    Permet d'utiliser Redis avec l'API de [[Spring Data]], offrant une interface plus haut niveau pour interagir avec Redis comme avec une base de donn√©es traditionnelle (similaire √† Spring [[Data JPA]]). Cependant, pour des objets complexes, cette approche peut mener √† des requ√™tes excessives, impactant ainsi la performance.\n    \n3. **[[Spring Cache]]** :  \n    Permet une gestion de cache plus simple en annotant les m√©thodes avec `@Cacheable`, ce qui permet de stocker et de r√©cup√©rer les r√©sultats des m√©thodes dans Redis sans code suppl√©mentaire complexe.\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **[[Redis Template]]** :\n    - Permet une gestion fine des interactions avec Redis.\n    - Offre plus de flexibilit√© pour des cas d‚Äôusage sp√©cifiques.\n\n- **[[Spring Data Redis]]** :    \n    - Permet une int√©gration transparente avec [[Spring Framework]].\n    - Facile √† utiliser pour les utilisateurs d√©j√† familiers avec Spring Data.\n\n- **[[Spring Cache]]** :\n    - Tr√®s simple √† impl√©menter pour la mise en cache des r√©sultats de m√©thodes.\n    - Automatisation des processus de cache sans complexit√© suppl√©mentaire.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Redis Template** :\n    - N√©cessite de g√©rer soi-m√™me les interactions avec Redis, ce qui peut augmenter la complexit√© du code.\n- **Spring Data Redis** :\n    - Peut entra√Æner des probl√®mes de performance pour des objets complexes en raison du nombre √©lev√© de requ√™tes n√©cessaires pour r√©cup√©rer un objet complet.\n- **Spring Cache** :\n    - Peut √™tre limit√© en termes de contr√¥le pr√©cis sur les strat√©gies de cache et la gestion des donn√©es en m√©moire.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "86b2d35e-3053-4031-ad65-92db698ddade",
        "title": "Renovate_Bot",
        "description": "---\nid: 98f7085c-54d4-4d54-a6ba-7512a4ffaed8\n---\n# Rapidement c'est quoi‚ùì\n\nRenovate Bot est un outil automatis√© qui analyse les d√©pendances de vos projets [[Git]]  et cr√©e des pull/merge requests pour mettre √† jour ces d√©pendances vers leurs derni√®res versions stables ou sp√©cifiques.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nRenovate Bot est un outil d'automatisation de la gestion des d√©pendances logicielles. Il fonctionne en analysant le fichier de configuration de votre projet (ex: `package.json` pour [[Node.js]], `pom.xml` pour [[Maven]] ...) afin d'identifier toutes les d√©pendances utilis√©es.  Il compare ensuite les versions actuelles avec les derni√®res versions disponibles sur les registres de paquets (ex: [[npm]], [[Maven Central]]).  Pour chaque d√©pendance obsol√®te, Renovate Bot cr√©e une pull request s√©par√©e contenant les mises √† jour n√©cessaires.  L'utilisateur peut ensuite examiner et fusionner ces pull requests, automatisant ainsi le processus fastidieux et potentiellement risqu√© de mise √† jour manuelle des d√©pendances.  L'outil est configurable pour d√©finir des r√®gles de mise √† jour (ex:  mise √† jour majeure, mineure, patch, fr√©quence de scan, branches cibles, etc.).  Il prend en charge un large √©ventail de gestionnaires de paquets et de langages de programmation.  Renovate Bot peut √™tre int√©gr√© √† des [[pipelines CI/CD]] comme [[GitHub Action]] ou [[GitLab CI]].  Il permet √©galement la gestion de configurations complexes en utilisant des fichiers de configuration YAML ou JSON.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Automatisation:**  √âlimine le besoin de mises √† jour manuelles chronophages et sujettes aux erreurs.\n* **S√©curit√©:**  Aide √† maintenir les d√©pendances √† jour, r√©duisant les risques de vuln√©rabilit√©s.\n* **Flexibilit√©:**  Configuration personnalis√©e pour contr√¥ler le processus de mise √† jour (fr√©quence, versions cibles, etc.).\n* **Support multi-langage et multi-gestionnaire de paquets:** Couverture large des √©cosyst√®mes de d√©veloppement.\n* **Int√©gration facile:**  Int√©gration avec les plateformes [[Git]] les plus populaires.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:**  La configuration peut √™tre complexe pour des projets avec des d√©pendances nombreuses ou des exigences sp√©cifiques.\n* **D√©pendance √† un service tiers:**  La fonctionnalit√© d√©pend d'une connexion stable √† l'infrastructure de Renovate Bot.\n* **Potentiel de conflits de fusion:**  Les mises √† jour automatiques peuvent parfois cr√©er des conflits avec d'autres modifications, n√©cessitant une intervention manuelle.\n* **Surveillance n√©cessaire:**  Bien que automatis√©, il est toujours n√©cessaire de surveiller les pull requests g√©n√©r√©es pour √©viter les probl√®mes.\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension des gestionnaires de paquets et des principes de gestion des d√©pendances.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "e8412082-486c-4479-8ffb-666b4cc1ff5f",
        "title": "Responsive des images html css",
        "description": "---\nid: 7822de72-7567-4eb4-9a12-3980e4e48032\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe responsive des images [[HTML]]/[[CSS]] permet de charger des images diff√©rentes en fonction de la taille de l'√©cran, de l'orientation ou d'autres crit√®res. Cela permet d'optimiser le temps de chargement et la performance d'un site web.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe balisage `<picture>` et les √©l√©ments `<source>` dans HTML permettent de d√©finir des images sp√©cifiques √† afficher selon des conditions pr√©cises, comme la taille de l'√©cran ou l'orientation du dispositif. Chaque `<source>` peut contenir une condition via l'attribut `media` et d√©finir la source de l'image avec `srcset`. Le navigateur choisira automatiquement l'image la plus adapt√©e.\n\nExemple :\n\n```html\n<picture>\n  <source media=\"(orientation: portrait) and (max-width: 700px)\" srcset=\"https://url_image\" sizes=\"100vw\" />\n  <source media=\"(orientation: portrait)\" srcset=\"https://url_image\" sizes=\"100vw\" />\n</picture>\n```\n\nCela permet de ne charger que l'image n√©cessaire, en fonction de la configuration du p√©riph√©rique, r√©duisant ainsi la consommation de bande passante et am√©liorant la performance du site.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Optimisation des performances** : Le navigateur choisit l'image la plus appropri√©e en fonction des conditions d√©finies, ce qui r√©duit la taille des fichiers t√©l√©charg√©s.\n- **R√©duction du temps de chargement** : En ne chargeant que l'image n√©cessaire selon la taille d'√©cran ou l'orientation, on √©vite de t√©l√©charger des images inutiles.\n- **Flexibilit√©** : Permet d'utiliser plusieurs images avec des tailles et r√©solutions diff√©rentes selon le contexte (ex : mobile vs desktop).\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© accrue** : La gestion des multiples sources d'image peut devenir complexe avec plusieurs conditions √† g√©rer.\n- **Compatibilit√© limit√©e** : Tous les navigateurs ne supportent pas parfaitement la balise `<picture>`, bien que la prise en charge soit d√©sormais largement r√©pandue.\n- **Charge serveur** : Bien qu'il y ait une optimisation c√¥t√© client, le serveur doit g√©rer plusieurs versions d'images, augmentant la gestion c√¥t√© backend.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Responsive en CSS]]"
    },
    {
        "id": "9591fb64-906a-4a68-9998-f99e437f7581",
        "title": "Responsive en CSS",
        "description": "---\nid: 4797285a-dc72-4c05-a1d0-75bf11fb9382\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe responsive design en [[CSS]] permet d'adapter l'apparence d'une page web √† diff√©rentes tailles d'√©crans et r√©solutions, en utilisant des unit√©s flexibles et des techniques comme les media queries pour offrir une exp√©rience optimale sur mobile, tablette et desktop.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe responsive design en [[CSS]] repose sur plusieurs concepts permettant d'adapter le contenu d'une page web en fonction des caract√©ristiques de l'√©cran (taille, orientation, r√©solution) :\n\n- **Unit√©s dynamiques** : Des unit√©s comme `vw` (viewport width), `vh` (viewport height), et `vmin` (la plus petite valeur entre `vh` et `vw`) permettent de cr√©er des √©l√©ments qui s'ajustent √† la taille de l'√©cran de mani√®re fluide.\n- **Media Queries** : Ces r√®gles permettent de sp√©cifier diff√©rents styles CSS en fonction de crit√®res comme la taille de l'√©cran, l'orientation ou la r√©solution.\n- **Element `<picture>`** : Utilis√© pour charger des images diff√©rentes selon les conditions d√©finies (par exemple, orientation ou taille d'√©cran). Cela optimise le temps de chargement et am√©liore la performance, en ne chargeant que l'image la plus appropri√©e pour l'affichage.\n\n# Qu'est ce qui est top ? üëç\n\n- **Adaptabilit√©** : Le design r√©actif garantit une exp√©rience utilisateur optimale, quelle que soit la taille de l'√©cran.\n- **Performance** : L‚Äôutilisation du `<picture>` pour les images et des unit√©s dynamiques r√©duit la quantit√© d‚Äôimages ou de ressources inutiles √† charger, am√©liorant ainsi la vitesse de chargement.\n- **Facilit√© d‚Äôimpl√©mentation** : L‚Äôutilisation des media queries permet de faire √©voluer l‚Äôaffichage de mani√®re fluide sans n√©cessiter de red√©veloppement complet pour chaque taille d‚Äô√©cran.\n- **Mobile-first** : Cette approche assure que le site est toujours fonctionnel sur les appareils mobiles, qui sont souvent les plus contraints en termes de taille d'√©cran et de performance.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© accrue** : G√©rer de multiples tailles d‚Äô√©cran et orientations peut compliquer le processus de d√©veloppement et de maintenance.\n- **D√©bogage difficile** : Tester sur tous les types d'√©crans et simulateurs peut √™tre long et fastidieux, surtout lorsque les styles ne sont pas coh√©rents entre diff√©rents appareils.\n- **Temps de chargement** : Bien que l'utilisation du `<picture>` soit performante, si mal configur√©e, cela peut entra√Æner des d√©lais de chargement en fonction de la taille des images et du nombre de sources utilis√©es.\n\n# A quoi c'est li√© ? ü™¢\n[[Mobile First]]"
    },
    {
        "id": "42c711ee-117b-417a-8c6e-9b684a10120c",
        "title": "R√©activit√©",
        "description": "---\nid: 4094d186-18e0-4673-a238-ad66d828c305\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLa **programmation r√©active** est une approche qui permet aux programmes de r√©agir de mani√®re asynchrone et dynamique aux changements d'√©tat dans leur environnement. Cela permet d'am√©liorer la r√©activit√© des applications, en particulier dans des contextes interactifs et temps r√©el.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLa programmation r√©active se base sur l'id√©e que les applications doivent √™tre capables de r√©agir √† des changements en temps r√©el, comme les √©v√©nements utilisateur ou les mises √† jour de donn√©es. Diff√©rentes biblioth√®ques et frameworks utilisent cette approche pour g√©rer l'√©tat et les interactions de mani√®re plus fluide et r√©active.\n\n### Types de r√©activit√© :\n\n1. **Value-based** (ex : [[Angular]], [[React]]) :  \n    Les anciennes valeurs sont compar√©es aux nouvelles, et si elles diff√®rent, l'application met √† jour l'√©tat. Ce mod√®le est simple √† impl√©menter mais peut √™tre inefficace pour les grandes applications car il n√©cessite une comparaison exhaustive des valeurs √† chaque changement.\n    \n2. **Observable-based** (ex : [[Svelte]], [[RxJS]]) :  \n    L'application s'abonne √† des **Observables** (flux de donn√©es) et r√©agit aux changements de mani√®re asynchrone. Cela permet d‚Äôoptimiser la performance, mais rend le code plus complexe et sujet √† des probl√®mes comme les fuites de m√©moire si l'abonnement n'est pas correctement g√©r√©.\n    \n3. **Signal-based** (ex : [[Vue]],[[ Solid]], et [[Angular]]) :  \n    Les variables sont stock√©es avec des r√©f√©rences uniques et chaque acc√®s passe par une gestion centralis√©e des r√©f√©rences. Ce mod√®le est performant et synchrone, mais il peut √™tre plus contraignant en termes de structure du code. [[Angular]], par exemple, exp√©rimente cette approche mais rencontre des difficult√©s dans son adoption.\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Observable-based** :\n    - Tr√®s performant pour les applications complexes et r√©actives.\n    - Permet de g√©rer des flux de donn√©es en temps r√©el avec une gestion fine des mises √† jour.\n\n- **Signal-based** :\n    - Offre une r√©activit√© plus synchrone, ce qui r√©duit les risques d'incoh√©rences de donn√©es.\n    - Optimisation de la gestion des acc√®s √† des variables partag√©es.\n\n- **Value-based** :\n    - Facile √† comprendre et √† mettre en place, id√©al pour des applications plus simples.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Observable-based** :\n    - Peut devenir difficile √† g√©rer, surtout avec les abonnements et d√©sabonnements, ce qui peut conduire √† des fuites m√©moire si mal g√©r√©.\n    - Asynchrone, ce qui complique la gestion du flux d'ex√©cution et du d√©bogage.\n\n- **Signal-based** :    \n    - Le mod√®le strict peut rendre le code moins flexible et plus difficile √† maintenir.\n    - Angular a des difficult√©s √† impl√©menter cette approche de mani√®re fluide et standardis√©e.\n\n- **Value-based** :    \n    - Moins performant √† grande √©chelle, n√©cessite de comparer chaque changement, ce qui peut ralentir les applications avec de nombreux √©l√©ments √† surveiller.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "8a8d58b5-9071-4444-8711-dd893676ac39",
        "title": "R√¥les dans l‚Äôarchitecture d‚Äôun SI",
        "description": "---\nid: b5e075e4-d8ca-4274-997f-ec7a18462829\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes r√¥les dans l‚Äôarchitecture d‚Äôun Syst√®me d'Information (SI) d√©finissent les responsabilit√©s et la gestion des pratiques techniques, allant de la d√©finition des grandes lignes architecturales √† l'impl√©mentation technique dans les applications.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **Architecte d'entreprise** : D√©finit les directives et normes architecturales √† l'√©chelle globale du SI. Il s'assure de l'harmonisation des pratiques et de la coh√©rence entre les diff√©rents syst√®mes.\n    \n- **Architecte solution** : Applique les directives de l'architecte d'entreprise au niveau des applications sp√©cifiques. Il s‚Äôassure que chaque solution r√©ponde aux normes architecturales globales tout en r√©pondant aux besoins des projets.\n    \n- **Architecte technique / Lead dev** : G√®re les choix techniques et les d√©cisions micro-niveau au sein des projets. Il assure la coh√©rence technique des solutions et prend des d√©cisions d√©taill√©es pour r√©soudre des probl√®mes sp√©cifiques dans le code.\n    \n- **Equipe de d√©veloppement** : Suit les directives d‚Äôarchitecture et contribue aux discussions techniques. Les d√©veloppeurs mettent en ≈ìuvre les choix d√©cid√©s par les architectes dans le cadre des projets.\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Clart√© des r√¥les** : Chaque acteur a une vision claire de ses responsabilit√©s, ce qui permet une gestion structur√©e du SI.\n- **Harmonisation des pratiques** : Les d√©cisions sont prises √† diff√©rents niveaux, ce qui permet de respecter des standards tout en √©tant agile dans les projets.\n- **Collaboration entre les r√¥les** : Les architectes travaillent en √©troite collaboration avec l‚Äô√©quipe de d√©veloppement, assurant la mise en ≈ìuvre des directives avec une bonne prise en compte des r√©alit√©s du terrain.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© hi√©rarchique** : Avec plusieurs niveaux d'architecture, la communication peut devenir plus complexe et les d√©cisions peuvent √™tre retard√©es.\n- **Risque de d√©connexion entre les niveaux** : Si les architectes d‚Äôentreprise ne sont pas bien align√©s avec les architectes solution, ou si les d√©veloppeurs ne comprennent pas les directives, cela peut cr√©er des incoh√©rences dans l'impl√©mentation.\n- **Charge de gestion** : Les architectes, notamment d'entreprise et solution, peuvent √™tre submerg√©s par des t√¢ches de coordination et de contr√¥le, ce qui peut ralentir les processus.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "c6cf519c-fd09-44ee-a12a-bbef14ae767c",
        "title": "Server Side Generation (SSG)",
        "description": "---\nid: cb7dd7c1-468d-46c0-8bc8-7bc4fc778f04\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLa **Server Side Generation (SSG)** consiste √† g√©n√©rer des pages web statiques au moment de la compilation du projet, avant m√™me le lancement du serveur. Les pages sont rendues sous forme de fichiers [[HTML]] pr√™ts √† √™tre servis.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe processus de SSG consiste √† pr√©-g√©n√©rer toutes les pages d'un site pendant le processus de build, ce qui permet de les servir directement sous forme de fichiers statiques au moment de la demande de l'utilisateur. Le serveur ne fait plus que renvoyer ces fichiers [[HTML]] statiques, sans avoir besoin de calculer ou d'interagir avec une base de donn√©es √† chaque requ√™te.\n\n- **G√©n√©ration statique** : Les pages sont rendues √† la compilation du projet, ce qui acc√©l√®re le temps de r√©ponse du serveur.\n- **Pas d'interaction serveur** : Une fois les pages g√©n√©r√©es, le serveur sert directement les fichiers [[HTML]], ce qui r√©duit la charge c√¥t√© serveur.\n- **[[SEO]] optimis√©** : Puisque les pages sont d√©j√† pr√™tes, les moteurs de recherche peuvent facilement les indexer.\n\n# Qu'est ce qui est top ? üëç\n\n- **Performance rapide** : Les pages sont statiques, ce qui signifie que le serveur a juste √† envoyer le fichier [[HTML]] sans traitement suppl√©mentaire.\n- **[[SEO]] optimis√©** : Le contenu statique est id√©al pour l‚Äôindexation par les moteurs de recherche, augmentant ainsi la visibilit√© du site.\n- **Simplicit√© du serveur** : Aucune logique c√¥t√© serveur, ce qui simplifie l‚Äôarchitecture du backend.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Temps de compilation long** : Si le site poss√®de de nombreuses pages, la g√©n√©ration statique peut √™tre lente et consommer des ressources.\n- **Pas adapt√© au contenu dynamique** : Pour des sites n√©cessitant une mise √† jour constante de contenu (par exemple des blogs ou des plateformes sociales), le SSG peut devenir peu pratique, car il faut recompiler les pages √† chaque changement.\n- **Gestion des donn√©es** : Le contenu dynamique doit √™tre g√©r√© avant la compilation, ce qui peut limiter l'interactivit√© des pages.\n\n# A quoi c'est li√© ? ü™¢\n[[Server Side Rendering (SSR)]] [[Incremental Static Regeneration (ISR)]] "
    },
    {
        "id": "3a646b78-b3e7-42f5-a4d1-7963e2b48a0e",
        "title": "Server Side Rendering (SSR)",
        "description": "---\nid: 3d88ac3a-ed12-451b-972e-c306b861b37d\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe Server Side Rendering (SSR) est une technique o√π le serveur g√©n√®re et envoie une page [[HTML]] presque compl√®te au navigateur. Contrairement √† du rendu c√¥t√© client, c'est le serveur qui ex√©cute le [[JavaScript]] et construit la page avant de l'envoyer au client.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe SSR permet de pr√©-rendre une page [[HTML]] compl√®te c√¥t√© serveur, incluant les ressources n√©cessaires (images, scripts, etc.), avant de la renvoyer au client. Le [[JavaScript]] c√¥t√© client prend ensuite le relais pour l'[[hydratation]], c'est-√†-dire pour rendre la page interactive. Cette approche am√©liore les performances initiales du chargement, car le navigateur n‚Äôa qu'√† afficher la page g√©n√©r√©e, sans avoir √† attendre que le [[JavaScript]] s'ex√©cute pour cr√©er le contenu.\n\nLe SSR est souvent utilis√© avec des frameworks comme [[Next.js]] pour [[React]], [[Nuxt.js]] pour [[Vue.js]] ou [[Analog.js]] pour [[Angular]]\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Am√©lioration des performances initiales** : Le contenu est d√©j√† pr√©-rendu, ce qui permet un affichage plus rapide.\n- **[[SEO]] optimis√©** : Comme le contenu est disponible d√®s le chargement de la page, les moteurs de recherche peuvent mieux l'indexer.\n- **Exp√©rience utilisateur am√©lior√©e** : Le temps jusqu'√† l'affichage est plus court, surtout pour les utilisateurs ayant des connexions lentes.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© c√¥t√© serveur** : La gestion des sessions, du cache et du rendu dynamique est plus complexe √† impl√©menter.\n- **[[Hydratation]]** : Apr√®s le rendu initial, le [[JavaScript]] c√¥t√© client doit \"prendre le relais\" pour rendre la page interactive, ce qui peut entra√Æner un d√©lai suppl√©mentaire.\n- **Ressources serveur** : Plus de travail est effectu√© sur le serveur pour g√©n√©rer chaque page, ce qui peut augmenter la charge serveur et les co√ªts.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Server Side Generation (SSG)]][[Incremental Static Regeneration (ISR)]]\n"
    },
    {
        "id": "8c1b08b7-54d7-41a2-82f9-2f07277a619e",
        "title": "Signal (Angular)",
        "description": "---\nid: 1b418003-bf67-4b2a-9a0f-955a4f39a7ad\n---\n# Rapidement c'est quoi‚ùì\n\nSignal est un m√©canisme de [[R√©activit√©]] int√©gr√© √† [[Angular]] depuis la version 14, offrant une alternative plus simple et parfois plus performante √† [[RxJS]] pour g√©rer les changements de donn√©es et d√©clencher des mises √† jour d'interface.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAngular Signals fournit une nouvelle approche pour la gestion de la r√©activit√© dans les applications Angular.  Au lieu de s'appuyer sur les Observables de [[RxJS]], il utilise un syst√®me plus l√©ger et plus intuitif bas√© sur des \"signals\". Un signal est une r√©f√©rence √† une valeur qui peut changer au cours du temps.  Lorsqu'une valeur de signal change, Angular d√©tecte automatiquement cette modification et met √† jour le DOM en cons√©quence.  Ceci permet de simplifier le code et d'am√©liorer les performances dans certains cas d'utilisation, notamment pour les mises √† jour simples et fr√©quentes de donn√©es.\n\nLes composants cl√©s sont :\n\n* **`signal()`:**  Fonction qui cr√©e un signal √† partir d'une valeur initiale.  Cette fonction retourne un objet poss√©dant deux propri√©t√©s : `.value` (pour acc√©der √† la valeur actuelle) et `.subscribe()` (pour s'abonner aux changements de valeur, similaire aux observables [[RxJS]] mais plus l√©ger).\n* **`computed()`:** Fonction qui permet de cr√©er des signals d√©riv√©s √† partir d'autres signals.  La valeur d'un signal `computed` est recalcul√©e automatiquement chaque fois qu'un des signals dont il d√©pend est mis √† jour. Ceci est similaire aux op√©rateurs [[RxJS]] comme `map` ou `combineLatest` mais avec une syntaxe plus concise.\n* **`effect()`:** Fonction qui ex√©cute une fonction chaque fois qu'un ou plusieurs signals dont elle d√©pend changent. Ceci permet de r√©agir aux changements de donn√©es et d'effectuer des actions secondaires, comme des appels API ou des navigations.\n\n\nL'utilisation de Signals est souvent plus concise et lisible que [[RxJS]] pour les cas simples de gestion de la r√©activit√©.  Il est cependant important de comprendre que Signals ne remplacent pas compl√®tement [[RxJS]], mais offrent une alternative int√©ressante pour certains types de probl√®mes.  [[RxJS]] reste pertinent pour les cas d'utilisation plus complexes n√©cessitant des op√©rations avanc√©es de transformation et de gestion des flux d'√©v√©nements asynchrones.\n\nLes signaux sont aussi utilis√©s par [[Vue.js]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplicit√© et lisibilit√©:** La syntaxe des Signals est plus concise et plus facile √† comprendre que [[RxJS]], facilitant le d√©veloppement et la maintenance.\n* **Performances:** Dans certains cas, les Signals peuvent offrir de meilleures performances que [[RxJS]], notamment pour les mises √† jour fr√©quentes de donn√©es simples.\n* **Int√©gration native dans Angular:**  L'int√©gration transparente avec le framework Angular simplifie l'utilisation et √©vite les probl√®mes de compatibilit√©.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Moins puissant que [[RxJS]]:** Les Signals ne poss√®dent pas la m√™me richesse fonctionnelle que RxJS.  Pour des sc√©narios complexes de manipulation de flux d'√©v√©nements asynchrones, RxJS reste n√©cessaire.\n* **Relatif manque de maturit√©:**  √âtant une fonctionnalit√© plus r√©cente, la communaut√© et la documentation autour des Signals sont moins √©tendues que pour RxJS.\n* **Courbe d'apprentissage (m√™me si faible) :**  Il faut un temps d'adaptation m√™me si la syntaxe est plus simple.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "928cc68c-9624-4fe4-b1a1-69ee470283f5",
        "title": "Slim Faas",
        "description": "---\nid: 8b302316-614f-4cea-af00-28858b4f0603\n---\n# Rapidement c'est quoi‚ùì\n\nSlim Faas est une plateforme [[Function as a Service (FaaS)]] l√©g√®re, alternative √† [[OpenFaaS]], d√©velopp√©e et utilis√©e en interne par AXA.  Elle se concentre sur la simplicit√© et l'efficacit√©.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nSlim Faas est une impl√©mentation simplifi√©e et optimis√©e de la plateforme serverless [[OpenFaaS]].  Contrairement √† [[OpenFaaS]] qui offre une large gamme de fonctionnalit√©s et de complexit√©, Slim Faas se concentre sur l'essentiel: le d√©ploiement et l'ex√©cution de fonctions sans serveur.  Elle est con√ßue pour √™tre l√©g√®re, facile √† d√©ployer et √† maintenir, et particuli√®rement adapt√©e aux environnements o√π les ressources sont limit√©es ou o√π une configuration minimale est souhaitable.  Son architecture simplifi√©e r√©duit la surface d'attaque et la complexit√© de gestion.  Elle repose g√©n√©ralement sur des technologies conteneuris√©es (comme [[Docker]]) et un [[Orchestrateur de conteneur]] (comme [[Nomad]] ou [[Kubernetes]], bien que son architecture permette une plus grande flexibilit√©).  L'objectif principal est de fournir une solution serverless performante et facile √† utiliser, sans les surcharges li√©es aux fonctionnalit√©s plus avanc√©es d'[[OpenFaaS]].  AXA l'utilise en interne, ce qui sugg√®re une adoption pour des cas d'usage sp√©cifiques n√©cessitant une solution plus l√©g√®re et plus contr√¥l√©e.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **L√©g√®ret√© et simplicit√©:**  Sa conception minimaliste facilite le d√©ploiement, la maintenance et la gestion.\n* **Efficacit√©:**  Optimis√©e pour les ressources limit√©es, elle consomme moins de ressources que les solutions plus compl√®tes.\n* **S√©curit√©:**  La surface d'attaque r√©duite am√©liore la s√©curit√© globale.\n* **Contr√¥le:**  AXA ayant d√©velopp√© la solution, le contr√¥le et l'adaptation √† ses besoins sp√©cifiques sont facilit√©s.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Manque de fonctionnalit√©s:**  Son approche minimaliste signifie l'absence de certaines fonctionnalit√©s avanc√©es pr√©sentes dans [[OpenFaaS]] (monitoring sophistiqu√©, gestion d'√©v√©nements complexes, etc.).\n* **Documentation limit√©e:**  √âtant une solution interne √† AXA, la documentation publique est probablement limit√©e ou inexistante.\n* **Adoption limit√©e:**  Le manque de large adoption limite la communaut√© et le support disponible.\n* **D√©pendance √† AXA:**  Le futur et le maintien de la solution d√©pendent des priorit√©s d'AXA.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "0158b215-3c8b-4d22-b80a-0dbae9306a1c",
        "title": "Spring AOP",
        "description": "---\nid: d1d0d5d0-ec94-4cb7-8dac-7b39d73a115b\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nSpring AOP ([[Aspect Oriented Programming (AOP)]]) est un framework [[Java]], bas√© sur [[Spring Framework]] qui permet d'ajouter des fonctionnalit√©s transversales √† une application sans modifier le code source principal.  Il permet de modulariser le code qui g√®re des pr√©occupations comme la journalisation, la s√©curit√©, ou la gestion des transactions, en les s√©parant du code m√©tier principal.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring AOP utilise un m√©canisme de *[[Proxy]]* pour intercepter les appels de m√©thodes et ex√©cuter du code additionnel avant, apr√®s, ou autour de l'appel de la m√©thode cibl√©e.  Ces morceaux de code additionnels sont appel√©s *aspects*.  Un aspect est d√©fini par un ensemble de *conseils* (*advice*), qui sp√©cifient quand et comment le code additionnel doit √™tre ex√©cut√©.  Les points d'ex√©cution de ces conseils sont d√©finis par des *points de jonction* (*join points*), qui repr√©sentent des points sp√©cifiques dans l'ex√©cution du programme (par exemple, l'appel d'une m√©thode, la manipulation d'une exception).\n\nSpring AOP supporte diff√©rents types de conseils :\n\n* **Avant (Before):** Le code s'ex√©cute avant l'appel de la m√©thode cibl√©e.\n* **Apr√®s (After):** Le code s'ex√©cute apr√®s l'appel de la m√©thode cibl√©e, que celle-ci r√©ussisse ou √©choue.\n* **Apr√®s retour (After returning):** Le code s'ex√©cute apr√®s l'appel de la m√©thode cibl√©e si celle-ci retourne une valeur avec succ√®s.\n* **Apr√®s lancement d'exception (After throwing):** Le code s'ex√©cute apr√®s l'appel de la m√©thode cibl√©e si celle-ci lance une exception.\n* **Autour (Around):** Le code s'ex√©cute avant et apr√®s l'appel de la m√©thode cibl√©e, et permet de contr√¥ler compl√®tement l'ex√©cution de la m√©thode.\n\n**Exemple utilisant annotations:**\n\n```java\nimport org.aspectj.lang.annotation.*;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\npublic class LoggingAspect {\n\n    @Before(\"execution(* com.example.service.*.*(..))\")\n    public void beforeMethodExecution(JoinPoint joinPoint) {\n        System.out.println(\"Avant l'ex√©cution de : \" + joinPoint.getSignature());\n    }\n\n    @AfterReturning(pointcut = \"execution(* com.example.service.*.*(..))\", returning = \"result\")\n    public void afterMethodExecution(JoinPoint joinPoint, Object result) {\n        System.out.println(\"Apr√®s l'ex√©cution de : \" + joinPoint.getSignature() + \" - R√©sultat : \" + result);\n    }\n\n    @AfterThrowing(pointcut = \"execution(* com.example.service.*.*(..))\", throwing = \"exception\")\n    public void afterThrowing(JoinPoint joinPoint, Throwable exception) {\n        System.out.println(\"Exception lev√©e lors de l'ex√©cution de : \" + joinPoint.getSignature() + \" - Exception : \" + exception.getMessage());\n    }\n}\n```\n\nCet exemple utilise des expressions pointcut pour d√©finir les m√©thodes √† intercepter.  `execution(* com.example.service.*.*(..))` intercepte toutes les m√©thodes de tous les classes dans le package `com.example.service`.\n\nA la diff√©rence de [[AspectJ]], Spring AOP cr√©er des proxy autour des objets afin d'ajouter les comportements voulu. Quand √† lui [[AspectJ]], vient modifier directement les objets au d√©marrage de l'application. Le code est concret.\nLa diff√©rence se fait donc dans la port√© offerte par les deux frameworks. [[AspectJ]] permet de toucher tout les fichiers (m√™me ceux des librairies), tandis que Spring AOP va se restreindre aux beans (m√™me port√© que [[Spring Framework]]).\n\n## Qu'est-ce qui est top ? üëç\n\n* **Modularit√©:** S√©pare les pr√©occupations transversales du code m√©tier, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application.\n* **Simplicit√©:**  L'int√©gration avec [[Spring Framework]] est simple et bien document√©e.\n* **Pouvoir d'expression:** Les expressions Pointcut permettent de cibler pr√©cis√©ment les m√©thodes √† intercepter.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:**  Pour des applications complexes, la configuration et la gestion des aspects peuvent devenir difficiles.\n* **D√©bogage:**  Le d√©bogage peut √™tre plus complexe en raison de l'utilisation des [[Proxy]].\n* **Performances:** L'utilisation des [[Proxy]] peut avoir un l√©ger impact sur les performances, bien que g√©n√©ralement n√©gligeable.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n(Laisser vide)\n"
    },
    {
        "id": "9e434a98-3fa9-48e3-9369-8abea2e18897",
        "title": "Spring Boot Actuator",
        "description": "---\nid: d8c7dbd9-13a6-477b-b02b-4905b243151c\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Spring Boot Actuator** est un module de [[Spring Boot]] qui permet d'ajouter des fonctionnalit√©s de gestion et de surveillance √† une application, en exposant des **endpoints** pour r√©cup√©rer des informations sur son √©tat, ses m√©triques, sa sant√©, etc.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nSpring Boot Actuator offre un ensemble d'**endpoints** accessibles via HTTP qui fournissent des informations sur la sant√©, les performances et la configuration de l‚Äôapplication en temps r√©el. Ces endpoints sont principalement utilis√©s pour :\n\n- **Surveillance** : Permet de suivre l'√©tat de sant√© de l'application, ses m√©triques de performance, et la configuration environnementale.\n- **Gestion des logs** : Permet d'ajuster dynamiquement les niveaux de logs.\n- **Diagnostics** : Fournit des informations d√©taill√©es sur les threads ou la m√©moire pour d√©tecter des probl√®mes de performance.\n\nQuelques endpoints cl√©s :\n\n- `/actuator/health` : Indique la sant√© de l‚Äôapplication.\n- `/actuator/metrics` : Expose les statistiques de performance (via [[Micrometer]]).\n- `/actuator/info` : Informations g√©n√©rales sur l'application.\n- `/actuator/env` : D√©taille les propri√©t√©s d‚Äôenvironnement.\n- `/actuator/loggers` : Permet de g√©rer les niveaux de logs.\n- `/actuator/threaddump` : Affiche un dump des threads pour aider au diagnostic des probl√®mes de performance.\n- `/actuator/heapdump` : Permet de prendre un dump de la m√©moire Java.\n\n**Important** : En production, il est crucial de s√©curiser ou masquer certains endpoints pour √©viter des risques de s√©curit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Surveillance facilit√©e** : Permet de suivre facilement l'√©tat de l'application et d'effectuer des diagnostics.\n- **Int√©gration avec [[Prometheus]]** : Expose des m√©triques que [[Prometheus]] peut r√©cup√©rer via `/actuator/metrics`, gr√¢ce √† l'int√©gration avec **[[Micrometer]]**.\n- **Gestion dynamique des logs** : Permet de changer les niveaux de logs √† chaud, ce qui facilite le d√©bogage en production.\n- **Large gamme d'endpoints** : Fournit une vari√©t√© d'informations (sant√©, performance, m√©moire, etc.) pour un contr√¥le complet de l'application.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **S√©curit√©** : Par d√©faut, les endpoints peuvent exposer des informations sensibles. Il est essentiel de les s√©curiser en production.\n- **Performance** : L'ajout de plusieurs endpoints peut avoir un impact sur la performance, surtout s'ils sont mal configur√©s ou trop nombreux.\n- **D√©pendance √† [[Micrometer]]** : Pour certaines fonctionnalit√©s comme les m√©triques, il est n√©cessaire d'int√©grer [[Micrometer]], ce qui peut ajouter une couche de complexit√©.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "7e4eec89-9862-487b-add2-797220c08b74",
        "title": "Spring Cloud Config",
        "description": "---\nid: a725a0a3-511b-459b-a1d0-6f946cf0c527\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nSpring Cloud Config est un outil permettant de centraliser la gestion des configurations dans une architecture de [[Micros services]]. Il permet √† tous les services de r√©cup√©rer leurs configurations depuis un serveur centralis√©.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nSpring Cloud Config permet de centraliser les configurations de tous les [[Micros services]] d'une application dans un serveur de configuration. Ce serveur peut r√©cup√©rer les configurations depuis divers fournisseurs (comme [[Git]] ou [[S3]]). Chaque [[Micros services]], √† son d√©marrage, se connecte √† ce serveur pour r√©cup√©rer sa propre configuration, ce qui simplifie la gestion de configurations multiples et complexes dans une architecture distribu√©e.\n\n- Un serveur Spring Cloud Config est mis en place en ajoutant une d√©pendance et en activant `@EnableConfigServer` sur la classe de d√©marrage.\n- Le serveur peut r√©cup√©rer des configurations depuis des sources comme [[Git]], avec un format sp√©cifique de fichiers (`application.yml`, `application.properties`).\n- Chaque [[Micros services]] client r√©cup√®re sa configuration via un URL sp√©cifique en fonction de son nom, de son profil et de son label [[Git]].\n\nLes configurations sont versionn√©es et g√©r√©es comme du code, permettant de b√©n√©ficier d'un suivi et de la r√©versibilit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Centralisation des configurations** : Une seule source pour g√©rer toutes les configurations des [[Micros services]], ce qui simplifie la maintenance.\n- **Versioning** : Utiliser [[Git]] pour stocker les configurations permet de versionner, suivre l'historique et revenir √† des versions pr√©c√©dentes facilement.\n- **Flexibilit√© des sources de configuration** : Supporte divers fournisseurs comme [[Git]], [[S3]], ce qui permet de s‚Äôadapter √† diff√©rents environnements.\n- **Simplicit√© d'int√©gration** : L'int√©gration dans [[Spring Boot]] se fait via de simples d√©pendances et annotations.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance au serveur de configuration** : Si le serveur de configuration tombe, les services ne pourront plus r√©cup√©rer leurs configurations.\n- **Complexit√© de mise en place** : Bien que la configuration de base soit simple, la gestion de multiples profils et labels [[Git]] peut compliquer la configuration des services.\n- **Scalabilit√© du serveur** : Il est important de mettre en place des r√©plicas du serveur pour garantir la disponibilit√©, mais cela peut ajouter de la complexit√©.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "d022bf8a-c96a-4f14-90a3-ae8cb7ad7e26",
        "title": "Certification Java 17 - Streams et Expressions Lambda",
        "description": "---\nid: 4278c6cd-387f-47f0-a011-d5c10f9d1b1c\n---\n## **8.1. Utilisation des `Stream<T>`, `IntStream`, `DoubleStream`**\n\nUn **Stream** est une s√©quence d‚Äô√©l√©ments pouvant √™tre trait√©e de mani√®re d√©clarative et fonctionnelle.\n\n|**Type**|**Description**|\n|---|---|\n|`Stream<T>`|Flux d‚Äôobjets g√©n√©riques|\n|`IntStream`|Flux de `int` (√©vite l‚Äôauto-boxing)|\n|`DoubleStream`|Flux de `double`|\n|`LongStream`|Flux de `long`|\n\n### **Cr√©ation d‚Äôun `Stream`**\n\n```java\nimport java.util.stream.*;\n\nList<String> noms = List.of(\"Alice\", \"Bob\", \"Charlie\");\nStream<String> stream = noms.stream();\nstream.forEach(System.out::println);\n```\n\nüìå **Un `Stream` ne peut √™tre consomm√© qu‚Äôune seule fois.**\n\n---\n\n### **Utilisation des `IntStream`, `DoubleStream`**\n\n```java\nIntStream.range(1, 5).forEach(System.out::print); // 1234\nDoubleStream.of(3.14, 2.71, 1.41).forEach(System.out::println);\n```\n\nüìå **`range(1,5)` g√©n√®re `{1, 2, 3, 4}` (exclut `5`), `rangeClosed(1,5)` inclut `5`.**\n\n---\n\n## **8.2. `filter()`, `map()`, `reduce()`, `collect()`**\n\n### **1. `filter()` : S√©lectionne les √©l√©ments correspondant √† une condition**\n\n```java\nList<String> noms = List.of(\"Alice\", \"Bob\", \"Charlie\");\nList<String> resultat = noms.stream()\n    .filter(n -> n.startsWith(\"A\"))\n    .toList(); // Java 16+\nSystem.out.println(resultat); // [Alice]\n```\n\n---\n\n### **2. `map()` : Transforme les √©l√©ments**\n\n```java\nList<Integer> longueurs = noms.stream()\n    .map(String::length)\n    .toList();\nSystem.out.println(longueurs); // [5, 3, 7]\n```\n\nüìå **`map()` applique une fonction √† chaque √©l√©ment du `Stream`.**\n\n---\n\n### **3. `reduce()` : R√©duction des √©l√©ments √† une seule valeur**\n\n```java\nint somme = IntStream.of(1, 2, 3, 4)\n    .reduce(0, Integer::sum);\nSystem.out.println(somme); // 10\n```\n\nüìå **Permet de combiner les √©l√©ments (somme, multiplication, concat√©nation, etc.).**\n\n---\n\n### **4. `collect()` : Transformer un `Stream` en collection**\n\n```java\nList<String> listeMaj = noms.stream()\n    .map(String::toUpperCase)\n    .collect(Collectors.toList());\nSystem.out.println(listeMaj); // [ALICE, BOB, CHARLIE]\n```\n\nüìå **`collect()` permet de rassembler les √©l√©ments dans une `List`, `Set` ou `Map`.**\n\n---\n\n## **8.3. D√©composition, concat√©nation, partitionnement**\n\n### **1. `flatMap()` : D√©composition d‚Äô√©l√©ments imbriqu√©s**\n\n```java\nList<List<Integer>> listOfLists = List.of(List.of(1, 2), List.of(3, 4));\nList<Integer> flattenedList = listOfLists.stream()\n    .flatMap(List::stream)\n    .toList();\nSystem.out.println(flattenedList); // [1, 2, 3, 4]\n```\n\nüìå **`flatMap()` aplatit plusieurs collections en un seul `Stream`.**\n\n---\n\n### **2. Concat√©nation de `Stream`**\n\n```java\nStream<String> s1 = Stream.of(\"A\", \"B\");\nStream<String> s2 = Stream.of(\"C\", \"D\");\n\nStream<String> concatStream = Stream.concat(s1, s2);\nconcatStream.forEach(System.out::print); // ABCD\n```\n\nüìå **`Stream.concat(s1, s2)` fusionne deux flux.**\n\n---\n\n### **3. Partitionnement (`partitioningBy`)**\n\n```java\nMap<Boolean, List<String>> partition = noms.stream()\n    .collect(Collectors.partitioningBy(n -> n.length() > 3));\n\nSystem.out.println(partition);\n// {false=[Bob], true=[Alice, Charlie]}\n```\n\nüìå **Retourne deux groupes : ceux qui respectent la condition (`true`) et les autres (`false`).**\n\n---\n\n## **8.4. Streams S√©quentiels et Parall√®les**\n\n### **1. `parallelStream()` : Ex√©cution multi-thread**\n\n```java\nList<String> noms = List.of(\"Alice\", \"Bob\", \"Charlie\");\nnoms.parallelStream()\n    .forEach(System.out::println); // Ex√©cution parall√®le\n```\n\nüìå **Peut am√©liorer les performances sur des collections volumineuses.**\n\n### **2. `parallel()` sur un `Stream` existant**\n\n```java\nnoms.stream()\n    .parallel()\n    .forEach(System.out::println);\n```\n\nüìå **Attention aux op√©rations d√©pendant de l‚Äôordre !**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Cr√©ation de `Stream<T>`, `IntStream`, `DoubleStream`**  \n‚úÖ **Op√©rations `filter()`, `map()`, `reduce()`, `collect()`**  \n‚úÖ **D√©composition (`flatMap`), concat√©nation, partitionnement**  \n‚úÖ **Utilisation des `Streams` s√©quentiels et parall√®les**\n\n---"
    },
    {
        "id": "c52446cb-bd97-4c08-a19f-20ea2a450b58",
        "title": "Supprimer des fichiers sensibles pousser sur un repository",
        "description": "---\nid: 80596fd6-1ff6-4512-8919-fe89db6b5c22\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Supprimer des fichiers sensibles pouss√©s sur un repo** consiste √† retirer des fichiers contenant des informations sensibles (comme des mots de passe ou des cl√©s API) qui ont √©t√© accidentellement pouss√©s dans un d√©p√¥t [[Git]]. Pour cela, des outils comme `git-filter-branch` ou `bfg-repo-cleaner` permettent de nettoyer l'historique du d√©p√¥t.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **git-filter-branch** : Outil int√©gr√© √† Git qui permet de r√©√©crire l'historique d'un d√©p√¥t en supprimant des fichiers ou des r√©pertoires sp√©cifiques, ainsi que toutes leurs traces dans l‚Äôhistorique des commits.\n    \n- **bfg-repo-cleaner** : Outil tiers √©crit en Scala, con√ßu sp√©cifiquement pour nettoyer un d√©p√¥t Git en supprimant rapidement des fichiers ou des objets (comme des cl√©s API) qui ne doivent pas √™tre pr√©sents. Il est plus rapide et plus simple que `git-filter-branch` et peut √™tre √©tendu en Scala si n√©cessaire.\n    \n\nExemples de commandes avec BFG :\n\n- `bfg --delete-files id_{dsa,rsa} my-repo.git` : Supprime les fichiers de type id_dsa et id_rsa.\n- `bfg --strip-blobs-bigger-than 50M my-repo.git` : Supprime les fichiers de plus de 50 Mo.\n- `bfg --replace-text passwords.txt my-repo.git` : Remplace les mots contenus dans un fichier texte (par exemple des mots de passe) dans tout l'historique.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **BFG est plus rapide** : Par rapport √† `git-filter-branch`, il est plus rapide et plus efficace, surtout pour les gros d√©p√¥ts.\n- **Simplicit√©** : BFG est con√ßu uniquement pour la suppression de fichiers sensibles, rendant son usage plus direct et moins complexe que `git-filter-branch`.\n- **Extensible** : √âtant √©crit en Scala, il est possible de l‚Äôadapter √† des besoins sp√©cifiques.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **git-filter-branch plus flexible** : Bien que BFG soit plus rapide, `git-filter-branch` reste plus flexible pour les t√¢ches complexes n√©cessitant une r√©√©criture d‚Äôhistorique plus fine.\n- **Pas de protection native contre les fichiers d√©j√† clon√©s** : La suppression dans l'historique ne les retire pas des copies locales d√©j√† clon√©es du d√©p√¥t. Il est donc n√©cessaire d'informer les autres contributeurs pour √©viter qu'ils ne poussent √† nouveau ces fichiers sensibles.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "3926e5c7-d157-433e-b410-32b6cfcc9a63",
        "title": "Test Driven Developpement (TDD)",
        "description": "---\nid: ff0f5989-5d86-4a56-aeed-d3be0809cc54\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi ‚ùì\n\nLe **TDD** (Test Driven Development) est une m√©thode de d√©veloppement (Et pas simplement une strat√©gie de test) o√π les tests sont √©crits avant le code. Contrairement aux m√©thodes classiques o√π les tests viennent apr√®s le d√©veloppement, le TDD place les tests au centre du processus pour garantir un code de meilleure qualit√©.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n## Cycle du TDD\nLe TDD suit un cycle it√©ratif en trois √©tapes :\n\n1. **√âcrire un test qui √©choue** : On commence par cr√©er un test qui v√©rifie un comportement sp√©cifique, sachant qu'il √©chouera au d√©part.\n2. **√âcrire le minimum de code pour faire passer le test** : Ensuite, on r√©dige juste assez de code pour que le test passe, sans chercher √† le rendre complexe.\n\t- C'est super important de faire des baby steps. C'est comme √ßa qu'on arrive √† la meilleure conception. Il faut √©viter de trop anticiper la conception.\n3. **Refactoriser le code** : Une fois que le test passe, on am√©liore et optimise le code tout en s‚Äôassurant qu‚Äôil reste fonctionnel (les tests passent toujours).\n\nLe processus permet d'am√©liorer la qualit√© du code de mani√®re incr√©mentale et de rendre la conception plus simple et fiable.\nOn va clairement moins s'emmerder, et rendre le code plus fiable et plus simple.\nIl est tr√®s important de soigner autant le code de test que le code de prod, si on veut qu'ils puissent √™tre maintenable.\n\n## Ecoles de TDD\n### Chicago/Detroit School :\n- Ces √©coles sont parfois consid√©r√©es comme des variantes de la **TDD classique** mais avec une approche plus stricte et plus disciplin√©e dans l'application du processus.\n- Les partisans de ces √©coles insistent sur l'importance de ne **jamais √©crire de code** qui n‚Äôa pas d'abord √©t√© test√©. Leurs pratiques privil√©gient la simplicit√© et la rigueur dans le respect du cycle TDD (√©crire un test, coder, refactoriser).\n- L'accent est mis sur un **code tr√®s test√©**, mais parfois au prix d'une mise en ≈ìuvre plus rigide de la m√©thode.\n### London School :    \n- La **London School** adopte une approche plus souple et pragmatique du TDD.\n- Elle met l'accent sur l‚Äôimportance d'√©crire des tests qui sont facilement compr√©hensibles et utiles √† long terme. Plut√¥t que de se concentrer strictement sur la couverture de test, cette √©cole encourage √† **distinguer les tests utiles des tests superflus**.\n- L‚Äôid√©e est de faire en sorte que le processus soit **adaptable au projet**, en fonction des besoins r√©els.\n### Le style Ian Cooper :\n- Ian Cooper, un d√©fenseur du **TDD moderne**, met l'accent sur l‚Äôapplication du TDD pour une **architecture propre et √©volutive**.\n- Il insiste sur l'importance de tester des **unit√©s de travail coh√©rentes et isol√©es**, et de se concentrer sur des tests qui correspondent vraiment √† l‚Äôintention et √† la conception du syst√®me.\n- Son style met en avant la pratique de **ne pas tester √† outrance** et de bien d√©finir les limites des tests pour garantir qu'ils aient un impact r√©el sur la qualit√© du code.\n### Diamond TDD :\n- Le **Diamond TDD** est une approche qui introduit une **flexibilit√© dans le cycle TDD** traditionnel, en adoptant une structure en forme de diamant.\n- Ce style combine **refactoring, test et d√©veloppement** en fonction des besoins du projet et du code, plut√¥t que de suivre rigoureusement les √©tapes lin√©aires de TDD classique. L'id√©e est de **r√©√©valuer constamment la conception** et les tests pour trouver un √©quilibre optimal.\n- Il s'agit d'une approche plus dynamique, o√π le d√©veloppement et les tests ne sont pas forc√©ment r√©alis√©s dans un ordre strict, mais peuvent s'adapter en fonction des retours imm√©diats.\n\n## Documentation as code\nIl est possible d'utiliser le TDD comme d'une documentation fonctionnelle. Pour cela on va pouvoir utiliser l'[[Ubiquitous Language]] du projet afin de n'importe qui puisse comprendre les sp√©cificit√©s de la fonctionnalit√©.\n\n---\n# Qu'est ce qui est top ? üëç\n\n- **Documentation vivante** : Les tests servent de documentation dynamique, qui est mise √† jour en fonction des √©volutions du code. Si un test √©choue, cela indique qu‚Äôune modification est n√©cessaire, ce qui aide √† suivre l‚Äô√©volution du code et √† pr√©server les exigences m√©tiers.\n- **S√©curit√© lors du refactoring** : Le TDD offre un filet de s√©curit√©, ce qui permet de modifier le code ou de le refactoriser sans risque de r√©gression, car les tests signalent rapidement les erreurs introduites.\n- Force √† rendre son code testable. On cr√©ant des abstractions sur les d√©pendances afin de les mocker ou de cr√©er des stubs (en fonction de l'√©cole).\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Processus contraignant au d√©part** : L'√©criture des tests avant le code peut sembler difficile et ralentir initialement le d√©veloppement.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "a39dfca8-2229-4e91-90f6-1230c3170a4b",
        "title": "Test de mutation",
        "description": "---\nid: 344bca62-9704-4c85-9b12-7e21128579e2\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe test de mutation est une technique utilis√©e pour √©valuer la qualit√© des [[Test unitaire]]. Il consiste √† introduire des mutations (modifications) dans le code et √† v√©rifier si les tests √©chouent. Si un test passe apr√®s la mutation, cela signifie que le test n'est pas suffisamment pr√©cis pour d√©tecter les erreurs.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **But** : V√©rifier l'efficacit√© des [[Test unitaire]] en s'assurant qu'ils d√©tectent bien les changements dans le code.\n- **Mutations** : Ce sont des modifications syst√©matiques dans le code, comme changer un op√©rateur, inverser une condition, ou supprimer une instruction.\n- **Processus** :\n    1. V√©rification de la validit√© des [[Test unitaire]] existants.\n    2. Application de mutations sur le code.\n    3. Ex√©cution des [[Test unitaire]] sur les mutants g√©n√©r√©s.\n- **Analyse** : Si un test passe malgr√© une mutation, cela indique que le test est incomplet ou trop laxiste. L'objectif est que tous les mutants √©chouent, ce qui montre que le test est robuste.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Am√©liore la couverture des tests** : Permet de s'assurer que les tests couvrent r√©ellement tous les cas possibles.\n- **Identifie les tests inefficaces** : Permet de rep√©rer les tests qui ne d√©tectent pas les erreurs dans le code.\n- **Renforce la qualit√© du code** : En am√©liorant les tests, la qualit√© globale du projet est am√©lior√©e.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Consommation de ressources** : G√©n√©rer et tester des mutants peut √™tre co√ªteux en termes de temps et de ressources.\n- **Peut donner des faux positifs** : Si le pool de mutations est mal con√ßu, certains mutants peuvent passer, faussant ainsi l'√©valuation de la qualit√© des tests.\n- **Complexit√©** : La mise en place d'un test de mutation n√©cessite une bonne configuration et peut √™tre complexe √† int√©grer dans le flux de travail de d√©veloppement.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "66b6af95-a52b-458d-8494-57219fc88ff9",
        "title": "Testinfra",
        "description": "---\nid: 6697390d-2ee4-497d-9f15-9728cd165ca0\n---\n# Rapidement c'est quoi‚ùì\n\nTestinfra est un framework de [[Test d'infrastructure]] bas√© sur [[Python]]. Il permet de v√©rifier l'√©tat de vos serveurs et de votre infrastructure en ex√©cutant des tests √©crits en [[Python]] simple et lisible.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nTestinfra est un outil puissant pour l'automatisation des [[Test d'infrastructure]].  Il fonctionne en se connectant √† des machines distantes (via [[SSH]], [[WinRM]], etc.) et en ex√©cutant des assertions sur l'√©tat du syst√®me.  Au lieu de d√©pendre de commandes sp√©cifiques √† un syst√®me d'exploitation ou √† un outil de provisionnement, Testinfra utilise les modules [[Python]] standard et les modules sp√©cifiques √† l'infrastructure pour interagir avec le syst√®me cible.  Cela assure une grande portabilit√© et une simplification du processus de test.\n\nLes tests sont √©crits en Python et utilisent une syntaxe simple et intuitive.  On peut tester une vari√©t√© de choses, incluant :\n\n* **Pr√©sence de fichiers et de dossiers:** V√©rifier si un fichier existe, s'il est lisible, s'il a les permissions appropri√©es.\n* **Services syst√®me:** V√©rifier si un service est en marche, arr√™t√©, ou en cours de red√©marrage.\n* **Packages logiciels:** V√©rifier si un package est install√©, sa version, etc.\n* **Ports r√©seau:** V√©rifier si un port est ouvert ou ferm√©.\n* **Contenu de fichiers de configuration:** V√©rifier la pr√©sence de lignes sp√©cifiques dans un fichier de configuration.\n* **Commandes syst√®me:** Ex√©cuter des commandes et valider leur sortie.\n* **Utilisateurs et groupes:** V√©rifier l'existence et les permissions des utilisateurs et des groupes.\n\n\nTestinfra s'int√®gre facilement dans les [[pipelines CI/CD]] et permet de valider l'√©tat de votre infrastructure de mani√®re automatis√©e et fiable.  Il est particuli√®rement utile pour le test d'[[Infra as Code (IaC]] en permettant de v√©rifier que l'infrastructure provisionn√©e correspond bien √† la configuration souhait√©e.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplicit√© et lisibilit√©:** Les tests sont √©crits en Python, ce qui les rend faciles √† √©crire, √† lire et √† maintenir.\n* **Portabilit√©:** Fonctionne sur plusieurs syst√®mes d'exploitation ([[Linux]], [[Windows]], [[macOS]]) et utilise un langage de test ind√©pendant des outils de provisionnement.\n* **Int√©gration CI/CD:** S'int√®gre facilement dans les [[pipelines CI/CD]].\n* **Large couverture:** Permet de tester une grande vari√©t√© d'aspects de l'infrastructure.\n* **Bas√© sur [[Python]]:**  Tire parti de l'√©cosyst√®me riche de [[Python]] et de ses librairies.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:** N√©cessite une connaissance de base de [[Python]].\n* **D√©pendance √† [[Python]]:**  Fonctionne uniquement avec [[Python]].\n* **D√©bogage:** Le d√©bogage des tests peut √™tre plus complexe que avec certains outils sp√©cifiques.  (Cependant, les capacit√©s de d√©bogage de [[Python]] restent disponibles)\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "87ba0245-8bf1-4701-ade6-2b36a270bc94",
        "title": "Unit√© responsive css",
        "description": "---\nid: 26571386-fada-49d8-b94c-b71bcd74cc84\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes unit√©s responsive [[CSS]] permettent de d√©finir des tailles relatives en fonction de la taille du viewport, c‚Äôest-√†-dire la fen√™tre d'affichage. Elles sont particuli√®rement utiles pour les designs fluides et adaptatifs sur diff√©rents appareils.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **`vh` (viewport height)** : Repr√©sente 1% de la hauteur du viewport. Par exemple, `100vh` occupe toute la hauteur de l'√©cran.\n- **`vw` (viewport width)** : Repr√©sente 1% de la largeur du viewport. Par exemple, `100vw` occupe toute la largeur de l'√©cran.\n- **`lvh` (large viewport height)** : Unit√© relative √† la hauteur du \"grand viewport\". Elle est stable et ignore les variations dues √† la barre d'adresse des appareils mobiles.\n- **`svh` (small viewport height)** : Repr√©sente la hauteur en excluant les √©l√©ments qui se cachent (comme la barre d'adresse sur mobile), utile pour un redimensionnement plus stable.\n- **`dvh` (dynamic viewport height)** : Similaire √† `lvh` et `svh`, mais prend en compte les changements dynamiques du viewport dus √† l‚Äôorientation ou des √©v√©nements d‚Äôinterface utilisateur.\n- **`vmin` (viewport minimum)** : Repr√©sente la plus petite des valeurs entre `vh` et `vw`, pour maintenir une proportion uniforme entre la largeur et la hauteur du viewport, quel que soit l'orientation de l'appareil.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Adaptabilit√©** : Ces unit√©s permettent de cr√©er des interfaces qui s'ajustent automatiquement √† la taille du viewport, rendant le design plus flexible.\n- **Stabilit√© sur mobile** : Les unit√©s comme `lvh`, `svh`, et `dvh` sont sp√©cialement con√ßues pour g√©rer les variations de taille sur les appareils mobiles, offrant une exp√©rience utilisateur plus pr√©visible.\n- **Proportions coh√©rentes** : `vmin` permet de maintenir des proportions constantes entre la largeur et la hauteur du viewport, quelle que soit l'orientation de l'√©cran.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Probl√®mes de compatibilit√©** : Certaines unit√©s comme `lvh`, `svh`, et `dvh` peuvent ne pas √™tre support√©es de mani√®re uniforme dans tous les navigateurs, surtout dans les versions plus anciennes.\n- **Complexit√© accrue** : Utiliser plusieurs unit√©s responsive dans un m√™me projet peut ajouter de la complexit√©, et il faut tester minutieusement pour s'assurer de la coh√©rence sur tous les appareils.\n- **Incertitude sur les mobiles** : Le comportement de certaines unit√©s (notamment `vh` et `vw`) peut √™tre affect√© par des √©l√©ments de l'interface (barre d‚Äôadresse ou navigation), rendant les tailles moins fiables.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "1ff270c7-4a18-4105-9d25-25da9d598351",
        "title": "VitePress",
        "description": "---\nid: b9f8677a-eceb-429a-8172-e5dea5e9833b\n---\n# Rapidement c'est quoi‚ùì\n\nVitePress est un g√©n√©rateur de site statique [[Server Side Generation (SSG)]] bas√© sur [[Vite]] et [[Vue.js]].  Il permet de cr√©er rapidement et facilement des sites web, notamment des documentations.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nVitePress est un g√©n√©rateur de site statique qui tire parti de la vitesse et des performances de [[Vite]], un serveur de d√©veloppement rapide et un outil de construction.  Il utilise [[Vue.js]] pour le rendu des pages, permettant de cr√©er des sites web dynamiques et interactifs malgr√© la nature statique du r√©sultat final.  Contrairement √† des g√©n√©rateurs de sites statiques plus traditionnels, VitePress offre un processus de d√©veloppement plus rapide gr√¢ce √† l'utilisation de Hot Module Replacement (HMR).  Cela signifie que les modifications de code sont instantan√©ment refl√©t√©es dans le navigateur sans n√©cessiter un rechargement complet de la page.  Il est particuli√®rement bien adapt√© √† la cr√©ation de documentations, car il offre des fonctionnalit√©s int√©gr√©es pour la gestion de la navigation, la recherche, et le d√©ploiement.  Le syst√®me de fichiers est utilis√© pour structurer le contenu, ce qui facilite la gestion et la maintenance du site.  La configuration est minimale, rendant VitePress accessible m√™me aux d√©veloppeurs peu exp√©riment√©s avec [[Vue]].  Il fournit √©galement des th√®mes par d√©faut personnalisables.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Rapidit√© de d√©veloppement:** Le HMR de Vite permet un cycle de d√©veloppement extr√™mement rapide.\n* **Facilit√© d'utilisation:** Configuration simple et intuitive, id√©ale pour les d√©butants en [[Vue.js]].\n* **Int√©gration avec [[Vue.js]]:** Permet de tirer parti de la puissance et de la flexibilit√© de [[Vue.js]].\n* **Performance:** Les sites g√©n√©r√©s sont optimis√©s pour la vitesse de chargement.\n* **Bon pour la documentation:**  Fonctionnalit√©s int√©gr√©es facilitant la cr√©ation de documentations.\n* **Syst√®me de theming:** Permet une personnalisation facile de l'apparence du site.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Moins flexible que des solutions plus complexes:**  Peut manquer de flexibilit√© pour des projets tr√®s sp√©cifiques ou complexes.  Les options de personnalisation, bien que pr√©sentes, sont plus limit√©es que des solutions plus g√©n√©ralistes.\n* **√âcosyst√®me moins large que d'autres [[Server Side Generation (SSG)]]:**  La communaut√© et les plugins disponibles sont moins nombreux que pour des SSG plus matures comme [[Astro]], [[Gatsby]] ou [[Hugo]].\n* **D√©pendance √† Vue.js:**  Si vous n'√™tes pas familier avec Vue.js, il faudra apprendre √† l'utiliser.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "73b8a1b5-01f0-4e3f-a721-f5ba47faef97",
        "title": "pg_vector",
        "description": "---\nid: 77c31383-8845-47ff-89f1-44766cf8f9b3\n---\n# Rapidement c'est quoi‚ùì\n\npg_vector est une extension pour le syst√®me de gestion de base de donn√©es [[PostgreSQL]] permettant d'indexer et de rechercher des vecteurs.  Cela facilite la mise en ≈ìuvre de la recherche s√©mantique et des syst√®mes de recommandation au sein d'une [[Base de donn√©e]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\npg_vector est une extension open-source pour [[PostgreSQL]] qui ajoute la capacit√© de stocker et de rechercher efficacement des vecteurs de donn√©es.  Ces vecteurs, g√©n√©ralement cr√©√©s par des mod√®les d'apprentissage automatique (embeddings), repr√©sentent des informations s√©mantiques (texte, images, audio, etc.).  L'extension fournit un type de donn√©es d√©di√© (`vector`), des op√©rateurs et des index sp√©cifiques pour optimiser les requ√™tes de recherche de similarit√©.\n\nLe c≈ìur de pg_vector r√©side dans ses capacit√©s de recherche par similarit√©.  Au lieu de rechercher des correspondances exactes, il permet de trouver les vecteurs les plus proches d'un vecteur donn√©, en utilisant des m√©triques de distance comme la distance euclidienne ou la distance cosinus.  Cette approche est cruciale pour les applications de recherche s√©mantique, o√π l'objectif est de trouver des √©l√©ments similaires en termes de signification, m√™me si les mots cl√©s ne correspondent pas parfaitement.\n\nL'extension g√®re l'indexation des vecteurs, ce qui permet des recherches rapides et efficaces m√™me sur de grands ensembles de donn√©es.  Les index utilis√©s optimisent la recherche en espace vectoriel, r√©duisant le temps de traitement et am√©liorant les performances.  Elle fournit √©galement des fonctions pour calculer les distances entre les vecteurs et pour effectuer des recherches √† l'aide de ces distances.\nCette extension permet de convertir [[PostgreSQL]] en une [[Base de donn√©e vectorielle]], id√©al pour la cr√©ation de [[RAG]] dans les [[Large Language Model (LLM)]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Int√©gration native avec [[PostgreSQL]]:**  Pas besoin d'une solution externe complexe.  Tout est g√©r√© au sein de la base de donn√©es.\n* **Performances:**  L'utilisation d'index optimis√©s permet des recherches rapides et efficaces, m√™me sur de tr√®s grands ensembles de donn√©es vectoris√©es.\n* **[[Open-source]] et communaut√© active:**  Acc√®s au code source, contribution possible et communaut√© pour le support.\n* **Simplicit√© d'utilisation:**  Relativement facile √† installer et √† utiliser, m√™me pour ceux qui ne sont pas experts en bases de donn√©es.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Limit√© √† [[PostgreSQL]]:**  L'extension ne fonctionne qu'avec PostgreSQL.  L'utilisation avec d'autres bases de donn√©es n√©cessite une solution alternative.\n* **D√©pendance aux mod√®les d'apprentissage automatique:**  N√©cessite de g√©n√©rer des vecteurs √† l'aide de mod√®les externes.  L'extension ne fournit pas de fonctionnalit√© de cr√©ation de vecteurs.\n* **Complexit√© potentielle pour des applications tr√®s sp√©cifiques:**  La configuration optimale des index et le choix de la m√©trique de distance peuvent n√©cessiter une expertise technique.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[Base de donn√©e SQL]]"
    },
    {
        "id": "bc62b3e7-b04a-4d75-8ed7-1d1b2693304f",
        "title": "vLLM",
        "description": "---\nid: fb7bce3a-8584-449e-8086-fa44d07ff590\n---\n# Rapidement c'est quoi‚ùì\n\nvLLM est un outil permettant de d√©ployer rapidement et facilement de grands mod√®les de langage ([[Large Language Model (LLM)]]) sous forme d'API web compatible avec l'API d'[[OpenAI]].  Cela permet d'utiliser les SDK OpenAI existants avec des mod√®les LLM personnalis√©s.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nvLLM est une infrastructure [[Open-source]] con√ßue pour servir des mod√®les de langage volumineux (LLMs) via une API [[RESTful]] imitant celle d'OpenAI.  Au lieu de devoir construire une infrastructure complexe de serveurs et de g√©rer la mise √† l'√©chelle, vLLM permet de d√©ployer un LLM existant (entra√Æn√© pr√©alablement) et de le rendre accessible via une interface simple et standardis√©e.  L'avantage cl√© r√©side dans la compatibilit√© avec les SDK OpenAI : les applications existantes qui utilisent l'API OpenAI peuvent fonctionner sans modification majeure avec un LLM d√©ploy√© via vLLM, simplement en changeant l'URL de l'API.  vLLM g√®re la mise en m√©moire du mod√®le, le parall√©lisme des requ√™tes, et optimise les performances pour servir efficacement des requ√™tes d'inf√©rence (g√©n√©rer du texte, r√©pondre √† des questions, etc.).  Il est g√©n√©ralement utilis√© avec des mod√®les quantifi√©s pour r√©duire la taille m√©moire n√©cessaire et am√©liorer les performances.  Il propose diff√©rents modes de service (ex : serveur unique, serveur distribu√©) pour s'adapter aux besoins en ressources et au volume de requ√™tes.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Compatibilit√© OpenAI:**  Permet une transition facile vers des LLM personnalis√©s sans modifier le code client.\n* **Simplicit√© de d√©ploiement:**  Facilite le processus de mise en production d'un LLM, simplifiant l'infrastructure n√©cessaire.\n* **Performances:** Optimis√© pour g√©rer les requ√™tes d'inf√©rence efficacement, m√™me avec des mod√®les volumineux.\n* **Open-source:** Accessible, modifiable et am√©liorable par la communaut√©.\n* **Scalabilit√©:**  Possibilit√© de d√©ploiement sur des serveurs multiples pour une meilleure gestion des charges importantes.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© initiale (potentielle):** Bien que visant la simplicit√©, la configuration et le d√©ploiement initiaux peuvent n√©cessiter une certaine expertise technique, notamment en ce qui concerne la gestion des mod√®les et des ressources.\n* **D√©pendances:** N√©cessite des biblioth√®ques sp√©cifiques et un environnement d'ex√©cution adapt√©.\n* **Ressources:**  Le d√©ploiement de grands mod√®les n√©cessite des ressources mat√©rielles importantes (RAM, GPU).\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n[[Intelligence Artificielle]]\n"
    },
    {
        "id": "69136136-c910-4337-baa8-695b2bdbcf2e",
        "title": "",
        "description": "# Gestion des Exceptions en Java\n\nCette note d√©taille la gestion des exceptions en Java, un m√©canisme crucial pour la robustesse et la fiabilit√© des applications.  Une bonne gestion des exceptions permet d'anticiper et de traiter les erreurs de mani√®re √©l√©gante, emp√™chant ainsi des plantages inattendus.\n\n## 1. Qu'est-ce qu'une exception ?\n\nUne exception est un √©v√©nement qui interrompt le flux normal d'ex√©cution d'un programme.  Elle survient g√©n√©ralement lorsqu'une erreur se produit, comme une tentative d'acc√®s √† un fichier inexistant, une division par z√©ro, ou une erreur r√©seau.  En Java, les exceptions sont des objets qui h√©ritent de la classe `Throwable`.\n\n## 2. Types d'exceptions\n\nJava distingue deux grands types d'exceptions :\n\n* **Exceptions v√©rifi√©es (checked exceptions):**  Le compilateur Java impose la gestion de ces exceptions.  Si une m√©thode peut lever une exception v√©rifi√©e,  elle doit soit la g√©rer avec un bloc `try-catch`, soit la d√©clarer dans sa signature √† l'aide du mot-cl√© `throws`.  Exemples : `IOException`, `SQLException`.\n\n* **Exceptions non v√©rifi√©es (unchecked exceptions):**  Le compilateur ne force pas leur gestion explicite.  Ce sont g√©n√©ralement des erreurs de programmation (ex: `NullPointerException`, `IndexOutOfBoundsException`, `ArithmeticException`). Elles sont souvent le signe d'un bug dans le code.  [Concepts de Base en Java]\n\n## 3. Gestion des exceptions avec `try-catch`\n\nLe m√©canisme principal pour g√©rer les exceptions est le bloc `try-catch`.  Le code susceptible de lever une exception est plac√© dans le bloc `try`.  Si une exception survient, le programme saute au bloc `catch` correspondant au type d'exception.\n\n```java\ntry {\n    // Code susceptible de lever une exception\n    int result = 10 / 0; // Division par z√©ro\n    System.out.println(\"R√©sultat : \" + result);\n} catch (ArithmeticException e) {\n    // Gestion de l'exception ArithmeticException\n    System.err.println(\"Erreur : Division par z√©ro !\");\n    e.printStackTrace(); // Affiche le d√©tails de l'exception dans la console\n}\n```\n\nDans cet exemple, la division par z√©ro l√®ve une `ArithmeticException`. Le bloc `catch` correspondant intercepte l'exception, affiche un message d'erreur, et utilise `e.printStackTrace()` pour afficher la pile d'appels, utile pour le d√©bogage.\n\n\n## 4.  Gestion de plusieurs exceptions\n\nUn bloc `try` peut √™tre suivi de plusieurs blocs `catch` pour g√©rer diff√©rents types d'exceptions. L'ordre des blocs `catch` est important : les exceptions les plus sp√©cifiques doivent √™tre trait√©es avant les exceptions plus g√©n√©rales (car les classes filles sont trait√©es avant leurs classes m√®res).\n\n```java\ntry {\n    // ...\n} catch (IOException e) {\n    // Gestion d'une IOException\n} catch (SQLException e) {\n    // Gestion d'une SQLException\n} catch (Exception e) { // Exception g√©n√©rale, √† utiliser en dernier recours\n    // Gestion d'autres exceptions\n}\n```\n\n\n## 5. Le bloc `finally`\n\nLe bloc `finally` est optionnel et contient du code qui s'ex√©cute toujours, que l'exception soit lev√©e ou non.  Il est souvent utilis√© pour lib√©rer des ressources (fermer des fichiers, des connexions √† une base de donn√©es, etc.).\n\n```java\ntry {\n    // ...\n} catch (Exception e) {\n    // ...\n} finally {\n    // Code qui s'ex√©cute toujours\n    System.out.println(\"Bloc finally ex√©cut√©\");\n}\n```\n\n\n## 6. Propagation des exceptions\n\nSi une m√©thode ne g√®re pas une exception, elle la propage vers la m√©thode appelante.  Cette propagation continue jusqu'√† ce qu'une m√©thode g√®re l'exception ou que le programme termine son ex√©cution.  Ceci est g√©r√© via le mot-cl√© `throws` dans la signature de la m√©thode.\n\n```java\npublic void maMethode() throws IOException {\n    // Code qui peut lever une IOException\n    throw new IOException(\"Erreur d'entr√©e/sortie\");\n}\n```\n\n## 7.  Exceptions personnalis√©es\n\nIl est possible de cr√©er des exceptions personnalis√©es pour g√©rer des situations sp√©cifiques au sein de l'application.  Cela am√©liore la lisibilit√© et la maintenabilit√© du code.  Il suffit de cr√©er une nouvelle classe qui √©tend `Exception` (ou une de ses sous-classes).  [Gestion des Exceptions]\n\n\n## Conclusion\n\nLa ma√Ætrise de la gestion des exceptions est essentielle pour d√©velopper des applications Java robustes et fiables.  Une gestion appropri√©e des exceptions am√©liore la qualit√© du code, facilite le d√©bogage et permet de fournir une exp√©rience utilisateur plus agr√©able en √©vitant les plantages inattendus.\n"
    },
    {
        "id": "e8e30d2b-96ea-40d6-b6f3-405ab87d1a5d",
        "title": "@MapsId",
        "description": "---\nid: d232d5f0-ad62-4cb1-be4b-eb4682ecb271\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\n`@MapsId` est une annotation de Spring Data JPA utilis√©e dans les relations `@OneToOne` pour partager la cl√© primaire entre une entit√© parent et une entit√© enfant.  Cela √©vite la cr√©ation d'une colonne de cl√© √©trang√®re dans la table enfant.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nDans une relation `@OneToOne`,  Spring Data JPA cr√©e g√©n√©ralement une colonne de cl√© √©trang√®re dans la table de l'entit√© enfant pour faire r√©f√©rence √† l'entit√© parent.  Si la relation est optionnelle (l'enfant peut exister sans le parent), cette colonne est souvent nullable.  `@MapsId` permet de contourner ce comportement.  Au lieu d'une cl√© √©trang√®re, l'entit√© enfant partage la m√™me cl√© primaire que l'entit√© parent.  Cela implique que la cl√© primaire de l'entit√© enfant est identique √† celle du parent.  L'annotation `@MapsId` sp√©cifie le nom du champ de la cl√© primaire de l'entit√© parent qui sera mapp√© √† la cl√© primaire de l'entit√© enfant.\n\n**Exemple:**\n\nSupposons que nous ayons une entit√© `Utilisateur` et une entit√© `Profil` avec une relation `@OneToOne`.\n\n```java\n@Entity\npublic class Utilisateur {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    // ... autres attributs ...\n\n    @OneToOne(mappedBy = \"utilisateur\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    private Profil profil;\n    // ...\n}\n\n@Entity\n@Table(name = \"profil\")\npublic class Profil {\n\n    @Id\n    private Long id; // Cl√© primaire partag√©e\n\n    @MapsId\n    @OneToOne\n    @JoinColumn(name = \"id\") //Optionnel, le nom est deja id de base\n    private Utilisateur utilisateur;\n\n\n    // ... autres attributs ...\n}\n```\n\nDans cet exemple, `@MapsId` dans la classe `Profil` indique que le champ `id` de `Profil` utilise la m√™me cl√© primaire que le champ `id` de `Utilisateur`.  La table `profil` n'aura pas de colonne de cl√© √©trang√®re.  La contrainte d'unicit√© de la cl√© primaire g√®re la relation.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Simplicit√©:**  √âvite la complexit√© d'une cl√© √©trang√®re, surtout dans les relations optionnelles.\n* **Performance:** Peut am√©liorer l√©g√®rement les performances des requ√™tes, car cela √©vite les jointures sur la cl√© √©trang√®re.\n* **Clart√© du sch√©ma de donn√©es:** Le sch√©ma relationnel est plus propre et plus facile √† comprendre.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Contraintes:**  Il est crucial que la cl√© primaire de l'entit√© enfant soit du m√™me type que celle du parent.  Une mauvaise configuration peut conduire √† des erreurs.\n* **Moins flexible:**  `@MapsId` est moins flexible que l'utilisation d'une cl√© √©trang√®re classique, particuli√®rement si vous avez besoin de fonctionnalit√©s avanc√©es de gestion de la relation.\n* **Difficult√© de compr√©hension:**  Pour les d√©veloppeurs non exp√©riment√©s avec JPA, cette annotation peut √™tre moins intuitive qu'une relation avec cl√© √©trang√®re.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "bd6d23da-1d38-4bd8-abca-a651a7fe152a",
        "title": "Akka",
        "description": "---\nid: 3b6dc02c-51c8-42be-85d6-9effe457e5ec\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nAkka est un toolkit open-source et multiplateforme pour construire des applications concurrentes, distribu√©es et r√©silientes bas√©es sur le mod√®le acteur.  Il simplifie le d√©veloppement d'applications hautement parall√®les et tol√©rantes aux pannes.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAkka est bas√© sur le mod√®le acteur, un paradigme de programmation concurrent qui traite les acteurs comme des unit√©s ind√©pendantes de calcul.  Chaque acteur poss√®de sa propre bo√Æte aux lettres pour recevoir des messages, son propre √©tat interne et un thread d√©di√© (ou un pool de threads).  La communication entre les acteurs se fait exclusivement par l'envoi de messages asynchrones.  Cela permet d'√©viter les probl√®mes de concurrence classiques tels que les interblocages et les conditions de course.\n\nAkka offre plusieurs fonctionnalit√©s cl√©s :\n\n* **Mod√®le Acteur:**  Le c≈ìur d'Akka.  Il g√®re la cr√©ation, la surveillance et la communication entre les acteurs.\n* **Supervision:** Akka fournit un m√©canisme de supervision hi√©rarchique permettant de g√©rer les erreurs et les pannes des acteurs.  Si un acteur plante, son superviseur peut d√©cider de le red√©marrer, de le surveiller, ou de le terminer.\n* **R√©silience:** Gr√¢ce √† la supervision et √† la nature asynchrone des messages, Akka permet de construire des syst√®mes r√©silients capables de tol√©rer les pannes.\n* **Distribution:** Akka peut distribuer les acteurs sur plusieurs machines, permettant la cr√©ation d'applications distribu√©es.\n* **Persistance:** Akka permet de persister l'√©tat des acteurs pour garantir la coh√©rence des donn√©es en cas de panne.\n* **Streaming:** Akka Streams offre un cadre puissant pour traiter des flux de donn√©es de mani√®re r√©active et concurrente.\n* **HTTP/WebSockets:**  Akka HTTP fournit des outils pour cr√©er des serveurs et des clients HTTP et WebSockets.\n\n**Exemple (Scala):**\n\n```scala\nimport akka.actor.{Actor, ActorSystem, Props}\n\nclass MyActor extends Actor {\n  def receive: Receive = {\n    case \"hello\" => println(\"Hello from actor!\")\n    case _ => println(\"Unknown message\")\n  }\n}\n\nobject MyAkkaApp extends App {\n  val system = ActorSystem(\"mySystem\")\n  val myActor = system.actorOf(Props[MyActor], \"myActor\")\n  myActor ! \"hello\"\n  Thread.sleep(1000)\n  system.terminate()\n}\n```\n\nCet exemple cr√©e un syst√®me d'acteurs, un acteur `MyActor`, et lui envoie un message \"hello\".\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Concurrence facile:**  Le mod√®le acteur simplifie la gestion de la concurrence.\n* **R√©silience:**  Les syst√®mes Akka sont plus r√©silients gr√¢ce √† la supervision.\n* **Scalabilit√©:**  Akka permet de cr√©er des applications distribu√©es et hautement scalables.\n* **Communaut√© active et documentation compl√®te:** Akka b√©n√©ficie d'une large communaut√© et d'une documentation abondante.\n* **Langages support√©s:** Akka est disponible pour Java, Scala, Kotlin et d'autres langages.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:**  Le mod√®le acteur peut avoir une courbe d'apprentissage plus raide que les approches de programmation concurrentes traditionnelles.\n* **D√©bogage:**  Le d√©bogage des applications Akka peut √™tre plus complexe que celui des applications monothread√©es.\n* **Complexit√© pour les applications simples:**  Pour les applications simples, Akka peut √™tre un sur-ing√©nierie.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "75ef67dd-da48-429a-ab54-af38f2851448",
        "title": "Algorithmes de Garbage Collector",
        "description": "---\nid: 11284ca5-0259-472f-bb46-962fa1f2500d\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nLes garbage collectors (GC) sont des algorithmes qui automatisent la gestion de la m√©moire dans les langages de programmation comme Java.  Ils identifient et r√©cup√®rent la m√©moire qui n'est plus utilis√©e par le programme, emp√™chant les fuites de m√©moire et lib√©rant des ressources pour de nouvelles allocations.  Parallel, G1, et ZGC sont trois algorithmes de GC diff√©rents utilis√©s par la JVM (Java Virtual Machine).\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nCes trois algorithmes diff√®rent principalement dans leur strat√©gie de collecte et leur impact sur les performances de l'application :\n\n**1. Parallel Garbage Collector:**\n\n* **Strat√©gie:**  Un GC \"stop-the-world\" qui utilise plusieurs threads pour collecter les objets inaccessibles. Il effectue une collecte des g√©n√©rations (Young, Old) et utilise un copy collector pour la g√©n√©ration Young (objets jeunes). La g√©n√©ration Old (objets √¢g√©s) utilise un mark-sweep-compact collector.  \n* **Fonctionnement:** Pendant la collecte, tous les autres threads de l'application sont interrompus (stop-the-world). La collecte est rapide pour la g√©n√©ration Young mais peut prendre plus de temps pour la g√©n√©ration Old.\n* **Avantages:**  Performant pour les applications avec un taux de cr√©ation d'objets faible √† moyen.  Le parall√©lisme acc√©l√®re la collecte.\n* **Inconv√©nients:**  Longs temps d'arr√™t (\"pause times\") lors de la collecte de la g√©n√©ration Old.  Non adapt√© aux applications exigeantes en faible latence.\n\n**2. G1 Garbage Collector (Garbage-First):**\n\n* **Strat√©gie:** Un GC concurrent et √† faible pause qui divise le heap en r√©gions. Il priorise la collecte des r√©gions avec le plus de garbage. Il utilise une approche √† plusieurs g√©n√©rations.\n* **Fonctionnement:**  Il effectue des collectes partielles et concurrentes, ce qui signifie qu'il travaille en parall√®le avec l'application, minimisant les temps d'arr√™t.  Il vise √† atteindre un objectif de temps de pause donn√©.\n* **Avantages:**  Meilleur compromis entre temps de pause et d√©bit que le Parallel GC.  Adapt√© aux applications avec des heaps de grande taille.\n* **Inconv√©nients:**  Plus complexe √† configurer que le Parallel GC.  Peut consommer plus de ressources CPU que le Parallel GC.\n\n**3. Z Garbage Collector (ZGC):**\n\n* **Strat√©gie:** Un GC concurrent, √† tr√®s faible pause, et √† haute performance. Il utilise des pointeurs color√©s et un m√©canisme de d√©tection de cycles efficace.\n* **Fonctionnement:**  Le ZGC vise √† atteindre des temps de pause inf√©rieurs √† 10ms, m√™me avec des heaps de plusieurs t√©raoctets. Il est extr√™mement efficace et utilise plusieurs threads pour collecter les objets de mani√®re concurrente.\n* **Avantages:**  Tr√®s faibles pauses, adapt√© aux applications n√©cessitant une faible latence (ex: applications en temps r√©el).  Excellent d√©bit m√™me pour des heaps volumineux.\n* **Inconv√©nients:**  Plus r√©cent que les autres GC, donc moins mature.  Peut consommer plus de ressources CPU que G1 ou Parallel GC. N√©cessite une version Java r√©cente.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **Parallel GC:**  Simple, performant pour les applications √† faible latence tol√©rable.\n* **G1 GC:**  Bon compromis entre d√©bit et temps de pause, adapt√© aux grandes applications.\n* **ZGC:**  Temps de pause extr√™mement faibles, id√©al pour des applications √† faible latence.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Parallel GC:**  Longs temps de pause lors de la collecte de la g√©n√©ration Old.\n* **G1 GC:**  Peut √™tre plus complexe √† configurer et √† ma√Ætriser.\n* **ZGC:**  Plus gourmand en ressources, relativement r√©cent et n√©cessite une version Java r√©cente.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "8b72417a-7de5-4399-b169-e1f5066764f7",
        "title": "Apache CouchDB",
        "description": "---\nid: f21c9312-cb75-458c-bc61-69e46d477f40\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nApache CouchDB est une base de donn√©es NoSQL orient√©e document, open source, qui utilise le protocole HTTP pour acc√©der et manipuler les donn√©es.  Elle se distingue par sa simplicit√©, sa facilit√© de r√©plication et son mod√®le de donn√©es flexible.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nCouchDB stocke les donn√©es sous forme de documents JSON.  Chaque document est identifi√© par un unique ID et poss√®de des r√©visions, permettant le suivi des modifications.  L'acc√®s aux donn√©es se fait via des requ√™tes HTTP (GET, POST, PUT, DELETE) sur des URLs sp√©cifiques.  Elle utilise un m√©canisme de r√©plication facile √† mettre en place, permettant la synchronisation de donn√©es entre plusieurs serveurs.  CouchDB utilise le concept de \"vues\" (views) pour cr√©er des index sur les documents, permettant des requ√™tes plus performantes.  Ces vues sont d√©finies en utilisant une syntaxe MapReduce simplifi√©e, ou bien avec des fonctions √©crites en Javascript.\n\nVoici un exemple d'ajout d'un document en utilisant une requ√™te HTTP POST :\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"John Doe\", \"age\": 30}' http://localhost:5984/mydb/\n```\n\nEt un exemple de requ√™te pour r√©cup√©rer un document sp√©cifique :\n\n```bash\ncurl http://localhost:5984/mydb/doc_id\n```\n\nCouchDB offre un m√©canisme de gestion des conflits lors de la r√©plication.  Le mod√®le de donn√©es flexible permet de stocker des donn√©es structur√©es et non structur√©es facilement.  L'architecture est distribu√©e par nature, favorisant la haute disponibilit√© et la tol√©rance aux pannes.\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Simplicit√© et facilit√© d'utilisation:**  L'API HTTP est intuitive et facile √† comprendre.\n* **R√©plication facile:**  La r√©plication est un processus simple et robuste, permettant une haute disponibilit√© et une distribution g√©ographique des donn√©es.\n* **Mod√®le de donn√©es flexible:**  Le format JSON permet de stocker des donn√©es de diff√©rentes structures.\n* **Open source et communaut√© active:**  B√©n√©ficie d'une grande communaut√© et d'un support important.\n* **Architecture distribu√©e:**  Int√©gr√©e par nature pour une meilleure tol√©rance aux pannes et scalabilit√©.\n\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Performance des requ√™tes complexes:**  Peut √™tre moins performante que d'autres bases de donn√©es pour des requ√™tes complexes n√©cessitant des jointures ou des op√©rations avanc√©es.  La performance d√©pend fortement de la conception des vues.\n* **Manque de fonctionnalit√©s ACID strictes:**  Bien que CouchDB offre des m√©canismes pour la coh√©rence des donn√©es, elle ne fournit pas les garanties ACID compl√®tes comme les bases de donn√©es relationnelles.\n* **Mod√®le de donn√©es moins structur√©:**  L'absence de sch√©ma rigide peut compliquer la gestion des donn√©es pour certaines applications.\n* **La courbe d'apprentissage des vues MapReduce peut √™tre raide** pour les d√©veloppeurs qui ne sont pas familiers avec ce paradigme.\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "b73fab9d-4ae1-42cb-acf8-d6b4ca556589",
        "title": "Apache Pulsar",
        "description": "---\nid: 9058cd6d-9b55-44d4-ac8f-efcfa34393bd\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nApache Pulsar est un syst√®me de messagerie distribu√©, hautement scalable et performant, con√ßu pour g√©rer des flux de donn√©es √† grande √©chelle et √† faible latence.  Il est particuli√®rement adapt√© aux applications n√©cessitant une haute disponibilit√© et une grande capacit√© de traitement de messages.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nApache Pulsar est un syst√®me de messagerie √† publication/abonnement (pub/sub) qui utilise une architecture multi-tenant et g√©r√©e par le cloud.  Il se diff√©rencie des syst√®mes de messagerie traditionnels par plusieurs aspects cl√©s :\n\n* **Architecture en couches:** Pulsar utilise une architecture en trois couches :  brokers, clients et le service de stockage. Les brokers g√®rent les connexions clients et la routage des messages. Le stockage peut √™tre effectu√© dans diff√©rents syst√®mes de stockage persistants (comme BookKeeper ou un syst√®me de fichiers distribu√©), offrant flexibilit√© et haute disponibilit√©.\n\n* **BookKeeper:** Pulsar utilise BookKeeper, un syst√®me de stockage distribu√© hautement performant et fiable, pour la persistance des messages. Ceci assure la durabilit√© des messages m√™me en cas de panne de brokers.\n\n* **Gestion des namespaces et des topics:** Pulsar offre une gestion fine des namespaces et des topics, permettant une s√©paration claire entre les diff√©rents locataires et applications.  Cela facilite la gestion des ressources et l'isolation des applications.\n\n* **Routing flexible:** Pulsar supporte diff√©rents modes de routage, dont le routage g√©om√©trique, permettant une distribution efficace des messages entre les consommateurs.\n\n* **Fonctionnalit√©s avanc√©es:** Pulsar offre des fonctionnalit√©s telles que la segmentation des topics, la r√©plication des messages, la gestion des transactions et l'int√©gration avec des outils de monitoring.\n\n**Exemple (concept):** Imaginons une application de streaming vid√©o.  Pulsar peut √™tre utilis√© pour g√©rer le flux de donn√©es vid√©o en temps r√©el. Les producteurs publient les donn√©es vid√©o sur un topic Pulsar, et les consommateurs les re√ßoivent pour les diffuser aux utilisateurs.  La haute scalabilit√© de Pulsar permet de g√©rer un grand nombre d'utilisateurs simultan√©s.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Haute performance et faible latence:** Pulsar est optimis√© pour une faible latence et un d√©bit √©lev√©.\n* **Scalabilit√© horizontale:** Pulsar peut facilement √™tre √©tendu pour g√©rer des charges de travail de plus en plus importantes.\n* **Haute disponibilit√©:** Gr√¢ce √† la r√©plication et √† BookKeeper, Pulsar offre une haute disponibilit√© des messages.\n* **Multi-tenancy:** Pulsar permet une s√©paration claire des ressources entre les diff√©rents locataires.\n* **Gestion avanc√©e des topics:** La segmentation et la r√©plication des topics offre une grande flexibilit√©.\n* **Support de multiples langages:** Pulsar fournit des clients pour divers langages de programmation.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La configuration et la gestion de Pulsar peuvent √™tre plus complexes que celle de syst√®mes de messagerie plus simples.\n* **Courbe d'apprentissage:**  Il faut du temps pour ma√Ætriser toutes les fonctionnalit√©s et les subtilit√©s de Pulsar.\n* **D√©pendance √† BookKeeper:** La performance et la fiabilit√© de Pulsar d√©pendent en grande partie de BookKeeper.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "f2d08ce3-3069-4de6-998b-85703c531cef",
        "title": "Arch Unit",
        "description": "---\nid: ffaf4087-aebd-46bc-9684-f0d5c8c188bb\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nArchUnit est une librairie Java bas√©e sur JUnit permettant de tester l'architecture d'une application.  Elle v√©rifie les relations entre diff√©rents composants (classes, packages, etc.) et s'assure que l'architecture respecte les r√®gles d√©finies.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nArchUnit permet de d√©finir des r√®gles architecturales et de v√©rifier si le code source les respecte.  Ces r√®gles peuvent porter sur diff√©rents aspects de l'architecture, tels que :\n\n* **D√©pendances entre couches :**  V√©rifier qu'une couche pr√©sentation ne d√©pend pas directement de la couche donn√©es, mais uniquement de la couche service.\n* **Cycles de d√©pendances :** D√©tecter les cycles entre les packages ou les classes, signe d'une architecture complexe et difficile √† maintenir.\n* **Utilisation d'annotations :** S'assurer que toutes les classes annot√©es d'une certaine mani√®re respectent une convention de nommage ou une structure sp√©cifique.\n* **Respect de principes de conception :** V√©rifier le respect de principes tels que la s√©paration des pr√©occupations ou l'inversion des d√©pendances.\n\n\nArchUnit utilise une API fluide et expressive pour d√©finir ces r√®gles.  On d√©crit la structure souhait√©e √† l'aide de conditions sur les classes, les packages et leurs relations.  L'ex√©cution des tests v√©rifie ensuite si le code source correspond √† cette description.  La fonctionnalit√© \"freezing arch rules\" est particuli√®rement utile pour int√©grer ArchUnit dans des projets existants (legacy) en permettant d'appliquer les r√®gles uniquement sur le nouveau code.\n\n\n**Exemple (Illustratif):**\n\nSupposons que l'on veuille v√©rifier qu'aucune classe du package `com.example.presentation` ne d√©pend directement du package `com.example.data`.  Avec ArchUnit, on pourrait √©crire une r√®gle similaire √† :\n\n```java\nimport com.tngtech.archunit.core.importer.ImportOption;\nimport com.tngtech.archunit.lang.syntax.ArchRuleDefinition;\nimport org.junit.jupiter.api.Test;\n\nimport static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;\nimport static com.tngtech.archunit.library.dependencies.SlicesRuleDefinition.slices;\n\npublic class ArchitectureTest {\n\n    @Test\n    void presentationLayerShouldNotDependOnDataLayer() {\n        classes()\n                .that().resideInAPackage(\"com.example.presentation\")\n                .should().onlyDependOnClassesThat().resideInAnyPackage(\"..presentation\", \"..service\");\n\n    }\n      @Test\n    void cyclicDependenciesAreForbidden(){\n        slices().matching(\"com.example.(*)..\").should().beFreeOfCycles();\n    }\n\n}\n```\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Automatisation des v√©rifications architecturales :**  ArchUnit permet d'automatiser le respect des r√®gles architecturales, √©vitant ainsi les r√©gressions et am√©liorant la qualit√© du code.\n* **D√©tection pr√©coce des probl√®mes :**  Les tests d'architecture sont ex√©cut√©s lors des tests unitaires ou d'int√©gration, permettant une d√©tection rapide des violations architecturales.\n* **Am√©lioration de la maintenabilit√© :**  En garantissant le respect de r√®gles architecturales, ArchUnit contribue √† une meilleure maintenabilit√© du code.\n* **Documentation de l'architecture :** Les r√®gles d√©finies avec ArchUnit peuvent servir de documentation de l'architecture du projet.\n* **Int√©gration facile avec JUnit :**  L'int√©gration avec JUnit est simple et transparente.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage :**  Il faut un certain temps pour ma√Ætriser l'API d'ArchUnit et d√©finir des r√®gles complexes.\n* **Maintenance des r√®gles :**  La maintenance des r√®gles architecturales peut devenir co√ªteuse √† mesure que le projet √©volue.\n* **Potentiellement intrusif :** L'ajout de r√®gles ArchUnit peut n√©cessiter des modifications dans le code existant.  \n* **Peut ralentir les tests :**  L'ex√©cution des r√®gles ArchUnit peut ajouter du temps aux tests.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\nJUnit, Architecture logicielle,  tests unitaires,  int√©gration continue.\n"
    },
    {
        "id": "6cdb72d6-e752-4997-ae64-c08258bc90bf",
        "title": "Biscuit authentication authorization token",
        "description": "---\nid: 3bf7e0ea-40ce-415e-8c21-bb28171de774\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nUn Biscuit est un jeton d'authentification et d'autorisation d√©centralis√©, cryptographiquement s√©curis√© et v√©rifiable hors ligne.  Il permet de v√©rifier les autorisations d'un utilisateur sans avoir besoin d'une connexion r√©seau constante √† un serveur central.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nUn Biscuit est un petit fichier de donn√©es contenant des affirmations sur l'identit√© et les autorisations d'un utilisateur.  Ces affirmations sont chiffr√©es et v√©rifi√©es √† l'aide de la cryptographie.  Contrairement aux syst√®mes centralis√©s qui reposent sur un serveur pour v√©rifier les jetons, les Biscuits peuvent √™tre v√©rifi√©s localement par l'application cliente.\n\nUn Biscuit est cr√©√© par un serveur autoris√© (\"issuer\").  Ce serveur inclut des affirmations initiales dans le Biscuit.  Par la suite, des parties tierces peuvent ajouter de nouvelles affirmations au Biscuit, mais seulement si elles ont re√ßu l'autorisation de le faire par le serveur initial.  Ces nouvelles affirmations sont ajout√©es sous forme de \"preuves\" qui sont attach√©es au Biscuit et v√©rifi√©es ult√©rieurement.\n\nLa v√©rification se fait gr√¢ce √† une signature cryptographique int√©gr√©e au Biscuit.  L'application cliente poss√®de une copie de la cl√© publique du serveur qui a √©mis le Biscuit.  Elle peut ainsi v√©rifier l'int√©grit√© et l'authenticit√© du Biscuit, ainsi que la validit√© des affirmations qu'il contient.\n\n**Fonctionnement interne (simplifi√©):**\n\n1. **Cr√©ation:** Le serveur g√©n√®re un Biscuit avec des affirmations initiales (par exemple, \"l'utilisateur est authentifi√©\", \"l'utilisateur a le r√¥le d'administrateur\").\n2. **Extension (optionnel):** Une autre entit√© (avec autorisation) peut ajouter de nouvelles affirmations au Biscuit (par exemple, \"l'utilisateur a acc√®s √† la ressource X\").  Cela se fait par la g√©n√©ration d'une preuve qui est attach√©e au Biscuit.\n3. **V√©rification:** L'application cliente v√©rifie le Biscuit en utilisant la cl√© publique du serveur. Cette v√©rification confirme que le Biscuit n'a pas √©t√© alt√©r√© et que toutes les affirmations sont valides.\n\n**Exemple (conceptuel):**\n\nImaginez une application de partage de fichiers.  Un Biscuit pourrait contenir l'affirmation \"utilisateur A a acc√®s au fichier X\".  Ce Biscuit serait v√©rifi√© localement par l'application avant de permettre l'acc√®s au fichier.  L'ajout d'une nouvelle affirmation, comme \"utilisateur B peut lire le fichier X\", pourrait se faire par une entit√© autoris√©e, ajoutant une preuve au Biscuit existant.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **S√©curit√©:** La cryptographie assure l'int√©grit√© et l'authenticit√© du Biscuit, emp√™chant la falsification.\n- **D√©centralisation:** La v√©rification hors ligne r√©duit la d√©pendance √† un serveur central, am√©liorant la r√©silience et la performance.\n- **Privacy:**  Certaines impl√©mentations permettent de limiter les informations expos√©es lors de la v√©rification.\n- **Flexibilit√©:**  L'ajout de preuves permet une gestion fine des autorisations et une adaptation √† diff√©rents contextes.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Complexit√©:** La mise en ≈ìuvre d'un syst√®me de Biscuits peut √™tre complexe, n√©cessitant une bonne compr√©hension de la cryptographie.\n- **Taille des Biscuits:** Les Biscuits peuvent prendre un certain espace de stockage, bien que leur taille reste g√©n√©ralement raisonnable.\n- **Gestion des cl√©s:** La s√©curit√© du syst√®me d√©pend de la gestion s√©curis√©e des cl√©s publiques et priv√©es.\n- **Adoption limit√©e:**  La technologie des Biscuits est relativement nouvelle et son adoption n'est pas encore aussi r√©pandue que d'autres technologies d'authentification.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "21ec1638-0060-4a17-9b23-f21e76551e13",
        "title": "Blocking Queue (Java)",
        "description": "---\nid: be601ded-fbb0-4d7d-82ba-aed2c27ceaa3\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nUne `BlockingQueue` en Java est une interface qui repr√©sente une file d'attente thread-safe.  Elle bloque les op√©rations d'insertion (ajout d'√©l√©ments) si la file est pleine et les op√©rations de suppression (retrait d'√©l√©ments) si elle est vide.  Cela permet une synchronisation efficace entre les threads producteurs et consommateurs.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nUne `BlockingQueue` est une interface dans le package `java.util.concurrent`.  Elle √©tend l'interface `Queue` et ajoute des m√©thodes sp√©cifiques pour g√©rer le blocage des op√©rations d'ajout et de suppression.  Lorsque la file est pleine, l'insertion d'un nouvel √©l√©ment bloquera le thread producteur jusqu'√† ce qu'un √©l√©ment soit retir√©.  Inversement, si la file est vide, la tentative de suppression bloquera le thread consommateur jusqu'√† ce qu'un √©l√©ment soit ajout√©.\n\nPlusieurs impl√©mentations de `BlockingQueue` existent, chacune avec des caract√©ristiques sp√©cifiques :\n\n* **`ArrayBlockingQueue`**:  Impl√©mente une file d'attente born√©e utilisant un tableau.  Sa taille est fixe lors de la cr√©ation.\n* **`LinkedBlockingQueue`**: Impl√©mente une file d'attente born√©e ou non born√©e (par d√©faut non born√©e) utilisant une liste cha√Æn√©e.  Offre une meilleure performance pour les insertions et suppressions fr√©quentes.\n* **`PriorityBlockingQueue`**:  Impl√©mente une file d'attente non born√©e qui ordonne les √©l√©ments selon leur priorit√© (d√©finie par l'impl√©mentation de `Comparable` ou un `Comparator`).\n* **`DelayQueue`**: Une file d'attente non born√©e qui maintient des √©l√©ments qui ne sont accessibles que lorsqu'un d√©lai sp√©cifi√© est √©coul√©.\n* **`SynchronousQueue`**: Une file d'attente particuli√®re o√π chaque insertion doit attendre une suppression correspondante, et vice-versa.  Elle n'a pas de capacit√© interne.\n\n**Exemple avec `ArrayBlockingQueue`:**\n\n```java\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class BlockingQueueExample {\n\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(5); // File d'attente de taille 5\n\n        // Thread producteur\n        Thread producer = new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    queue.put(i); // Bloquera si la queue est pleine\n                    System.out.println(\"Producer added: \" + i);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        // Thread consommateur\n        Thread consumer = new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    int value = queue.take(); // Bloquera si la queue est vide\n                    System.out.println(\"Consumer consumed: \" + value);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        producer.start();\n        consumer.start();\n    }\n}\n```\n\nCet exemple montre comment les threads producteur et consommateur interagissent avec la `BlockingQueue`. Les m√©thodes `put()` et `take()` g√®rent le blocage et la synchronisation automatiquement.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Thread-safety:**  G√®re la concurrence entre les threads de mani√®re s√©curis√©e et efficace, √©liminant le besoin de m√©canismes de synchronisation manuels.\n* **Blocage automatique:**  Simplifie la gestion de la concurrence en bloquant automatiquement les threads producteurs et consommateurs lorsque n√©cessaire.\n* **Flexibilit√©:**  Diff√©rentes impl√©mentations permettent de choisir la structure de donn√©es la plus appropri√©e √† l'application.\n* **Performance:** Les impl√©mentations optimis√©es offrent une bonne performance dans de nombreux cas d'utilisation.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© potentielle:**  Le choix de l'impl√©mentation appropri√©e peut n√©cessiter une compr√©hension des diff√©rentes caract√©ristiques de chaque type de `BlockingQueue`.\n* **Blocage:**  Bien que le blocage soit une fonctionnalit√© importante, il peut causer des probl√®mes si mal g√©r√©, notamment des deadlocks.\n* **Gestion des exceptions:** Il faut g√©rer les `InterruptedException` lors de l'utilisation des m√©thodes de blocage.\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "ac35e30e-23da-4355-8326-80e45caf7521",
        "title": "Compose-go",
        "description": "---\nid: b977a102-d94a-4a34-97a4-4bf34427ab50\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nCompose-go est une biblioth√®que Go qui simplifie l'interaction avec Docker Compose.  Elle permet de programmer la cr√©ation, la mise √† jour et la destruction de services et de r√©seaux d√©finis dans des fichiers `docker-compose.yml`.  Elle offre une interface plus flexible et programmable que l'utilisation directe de la commande `docker-compose`.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nCompose-go fournit des fonctions Go pour interagir avec l'API Docker Compose.  Au lieu d'utiliser des commandes shell, on peut utiliser le code Go pour effectuer des op√©rations sur les fichiers `docker-compose.yml`.  Cela permet d'int√©grer la gestion de Docker Compose dans des scripts et des applications Go, offrant un meilleur contr√¥le et une meilleure automatisation.  La biblioth√®que g√®re la communication avec le daemon Docker, l'analyse des fichiers `docker-compose.yml`, et la gestion des erreurs.\n\nVoici un exemple simple pour d√©marrer un projet Docker Compose avec Compose-go:\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/compose-spec/compose-go/cli\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tproject, err := cli.ProjectFromOptions(ctx, &cli.ProjectOptions{\n\t\tConfigFiles: []string{\"docker-compose.yml\"}, // Chemin vers votre fichier docker-compose.yml\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error loading project: %v\", err)\n\t}\n\n\terr = project.Up(ctx, cli.UpOptions{\n\t\t// Ajoutez des options ici si n√©cessaire\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error starting project: %v\", err)\n\t}\n\n\tfmt.Println(\"Project started successfully!\")\n\n\t// ... autres interactions avec le projet ...\n\n\t// Arr√™ter le projet √† la fin\n\terr = project.Down(ctx, cli.DownOptions{})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error stopping project: %v\", err)\n\t}\n\tfmt.Println(\"Project stopped successfully!\")\n}\n\n```\n\nCe code charge un fichier `docker-compose.yml`, d√©marre les services d√©finis et les arr√™te ensuite.  Compose-go offre des fonctions pour effectuer d'autres op√©rations, comme `project.Create`, `project.Build`, `project.Start`, `project.Stop`, `project.Restart`, etc.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Automatisation:**  Permet d'int√©grer la gestion de Docker Compose dans des pipelines CI/CD et des scripts Go.\n- **Programmation:** Offre un contr√¥le pr√©cis sur les op√©rations Docker Compose.\n- **Flexibilit√©:**  Permet de personnaliser le comportement de Docker Compose en utilisant le code Go.\n- **Testabilit√©:** Facilite l'√©criture de tests unitaires pour les interactions avec Docker Compose.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Courbe d'apprentissage:**  N√©cessite des connaissances en Go et en Docker Compose.\n- **D√©pendances:**  Ajoute une d√©pendance suppl√©mentaire √† votre projet.\n- **Complexit√©:**  Pour des cas d'utilisation complexes, le code Go peut devenir plus long et difficile √† maintenir qu'une simple commande `docker-compose`.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "a87947c1-5cf5-42e3-9e3f-99787a1a2a04",
        "title": "DSFR (Design System France)",
        "description": "---\nid: 885faf14-e488-4285-bd84-cb9ec7f2f730\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nDSFR (Design System France) est une biblioth√®que de composants d'interface utilisateur et un ensemble de guidelines de design pour la cr√©ation d'applications web et mobiles conformes aux standards d'accessibilit√© fran√ßais.  Elle offre des composants pr√™ts √† l'emploi et des styles coh√©rents pour assurer une exp√©rience utilisateur uniforme et accessible.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nDSFR vise √† standardiser la conception et le d√©veloppement d'interfaces num√©riques pour les services publics fran√ßais.  Il fournit une collection de composants r√©utilisables (boutons, formulaires, menus, etc.)  avec des styles pr√©d√©finis, assurant une coh√©rence visuelle et une meilleure exp√©rience utilisateur.  L'objectif principal est de faciliter le d√©veloppement d'applications accessibles, conformes aux exigences du RGAA (R√©f√©rentiel G√©n√©ral d'Accessibilit√© pour les Administrations).  DSFR propose des impl√©mentations pour divers frameworks (React, Angular, Vue.js, etc.), permettant aux d√©veloppeurs d'int√©grer facilement ces composants dans leurs projets.  Ces impl√©mentations souvent appel√©s \"surcouches\" fournissent des composants sp√©cifiques √† chaque framework mais conservent l'apparence visuelle et l'accessibilit√© d√©finies par le DSFR.\n\nL'utilisation de DSFR permet :\n\n* **Coh√©rence visuelle:**  Toutes les applications utilisant DSFR auront une apparence coh√©rente, am√©liorant l'exp√©rience utilisateur et la reconnaissance de la marque.\n* **Accessibilit√©:**  Les composants sont con√ßus pour respecter les exigences du RGAA, garantissant une accessibilit√© optimale pour les personnes handicap√©es.\n* **Efficacit√© de d√©veloppement:**  R√©utilisation des composants pr√©-construits et styl√©s, acc√©l√©rant le processus de d√©veloppement.\n* **Maintenance simplifi√©e:**  Les mises √† jour et corrections de bugs sont appliqu√©es √† l'ensemble des applications utilisant DSFR.\n\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Accessibilit√©:**  Respect des standards RGAA, essentiel pour les services publics.\n* **Coh√©rence:**  Assure une exp√©rience utilisateur uniforme sur l'ensemble des applications gouvernementales.\n* **R√©utilisabilit√©:**  Composants pr√™ts √† l'emploi, acc√©l√©rant le d√©veloppement.\n* **Support multiple frameworks:**  Disponibilit√© de surcouches pour diff√©rents frameworks populaires.\n* **Documentation:**  Documentation g√©n√©ralement compl√®te et bien maintenue (bien que la qualit√© puisse varier selon les versions et les frameworks).\n\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© d'int√©gration:**  L'int√©gration initiale peut parfois √™tre complexe, n√©cessitant une compr√©hension du fonctionnement du DSFR et de sa surcouche pour le framework utilis√©.\n* **D√©pendance:**  L'application est d√©pendante du DSFR et de ses mises √† jour.  Les changements dans le DSFR peuvent n√©cessiter des adaptations dans les applications qui l'utilisent.\n* **Personnalisation limit√©e:**  Bien que la personnalisation soit possible, elle peut √™tre contraignante pour s'assurer que l'accessibilit√© et la coh√©rence restent intactes.  Un √©cart trop important par rapport aux styles standards peut compromettre l'exp√©rience utilisateur et l'accessibilit√©.\n* **Taille du bundle:** L'inclusion de tous les composants DSFR peut augmenter la taille du bundle final de l'application, impactant le temps de chargement.  Une s√©lection judicieuse des composants est donc n√©cessaire.\n\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "27dc5b58-d4a7-4402-99f8-edf4d383f78c",
        "title": "Doppler",
        "description": "---\nid: 03bc89d4-ca8c-4258-a7fe-ae938a70b0cc\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nDoppler est un gestionnaire de secrets (secret manager) en tant que service (SaaS) qui permet de stocker et de g√©rer en toute s√©curit√© les variables d'environnement et autres informations sensibles utilis√©es par les applications.  Il simplifie la gestion des secrets pour les √©quipes de d√©veloppement et d'exploitation.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nDoppler fournit une interface centralis√©e pour stocker et g√©rer les secrets, √©vitant ainsi de les coder en dur dans les applications ou de les stocker dans des fichiers non s√©curis√©s.  Il fonctionne en permettant aux d√©veloppeurs de d√©finir des \"configurations\" qui contiennent des cl√©s et des valeurs, y compris les secrets. Ces configurations sont ensuite accessibles par les applications via une API ou des outils en ligne de commande.  Doppler se charge de chiffrer et de prot√©ger ces secrets, en utilisant des techniques de chiffrement robustes.\n\nLes principales fonctionnalit√©s incluent :\n\n* **Gestion des variables d'environnement:**  Doppler simplifie la gestion des variables d'environnement sensibles, comme des cl√©s API, des mots de passe de base de donn√©es, et des jetons d'authentification.\n* **Contr√¥le d'acc√®s:**  Il permet de g√©rer les autorisations d'acc√®s aux secrets, permettant de limiter l'acc√®s aux personnes autoris√©es.\n* **Int√©gration CI/CD:** Doppler s'int√®gre facilement avec les pipelines CI/CD, permettant d'injecter automatiquement les secrets dans les environnements de d√©ploiement.\n* **Audit trails:**  Il fournit un historique complet des modifications apport√©es aux secrets, facilitant le suivi et la v√©rification.\n* **Chiffrement:** Les donn√©es sont chiffr√©es √† la fois en transit et au repos.\n* **Support de multiples environnements:**  Permet de g√©rer des configurations s√©par√©es pour diff√©rents environnements (d√©veloppement, test, production).\n\n\n**Exemple (concept):**  Imaginons une application qui n√©cessite une cl√© API pour acc√©der √† un service tiers.  Au lieu de coder en dur cette cl√© API dans le code source, le d√©veloppeur peut la stocker dans Doppler et la r√©cup√©rer au moment de l'ex√©cution de l'application.\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **S√©curit√© am√©lior√©e:**  Le chiffrement et le contr√¥le d'acc√®s robustes garantissent la s√©curit√© des secrets.\n* **Simplicit√© d'utilisation:**  L'interface utilisateur est intuitive et facile √† utiliser, m√™me pour les d√©veloppeurs peu exp√©riment√©s.\n* **Int√©gration facile:**  L'int√©gration avec les pipelines CI/CD simplifie le processus de d√©ploiement.\n* **Collaboration facilit√©e:**  Plusieurs membres de l'√©quipe peuvent acc√©der et g√©rer les secrets de mani√®re contr√¥l√©e.\n* **Auditabilit√©:**  L'historique des modifications permet de suivre facilement les changements.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **D√©pendance √† un service tiers:**  Votre application d√©pend du service Doppler, ce qui introduit un point de d√©faillance potentiel.\n* **Co√ªt:**  L'utilisation de Doppler implique des co√ªts, selon le plan d'abonnement choisi.\n* **Complexit√© pour des configurations tr√®s complexes:**  Pour des environnements avec une multitude de configurations interd√©pendantes, la gestion pourrait devenir complexe.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "613183f4-d4b5-41e0-ab01-8635dd8faa42",
        "title": "Eclipse Mosquitto",
        "description": "---\nid: 34fc0c9b-c544-45c5-bd61-a2199ddf11d0\n---\n# Rapidement c'est quoi‚ùì\n\nEclipse Mosquitto est un serveur MQTT l√©ger, open-source et performant, permettant la publication et la souscription √† des messages. Il est r√©put√© pour sa robustesse et sa facilit√© de d√©ploiement.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nEclipse Mosquitto est une impl√©mentation du protocole MQTT (Message Queuing Telemetry Transport), un protocole de communication machine-√†-machine (M2M) l√©ger et bas√© sur le publish/subscribe.  Il sert de courtier (broker) centralis√©, permettant √† diff√©rents dispositifs (capteurs, actionneurs, applications) d'√©changer des messages de mani√®re asynchrone.  Mosquitto est con√ßu pour √™tre performant, scalable et fiable, capable de g√©rer un grand nombre de clients connect√©s simultan√©ment et un volume important de messages.  Il supporte plusieurs fonctionnalit√©s cl√©s, notamment :\n\n* **Authentification et autorisation:**  Mosquitto permet de contr√¥ler l'acc√®s aux ressources via diff√©rents m√©canismes d'authentification (mot de passe, certificats X.509) et d'autorisation (ACL - Access Control Lists).\n* **QoS (Quality of Service):**  Il g√®re diff√©rents niveaux de qualit√© de service pour garantir la livraison des messages (QoS 0, 1 et 2).\n* **R√©tention de messages:**  Les messages peuvent √™tre retenus par le broker, m√™me si aucun client n'est abonn√©, assurant ainsi que les nouveaux abonn√©s re√ßoivent les messages les plus r√©cents.\n* **Will messages:**  Permet de sp√©cifier un message √† publier lorsque le client se d√©connecte inopin√©ment.\n* **WebSockets:**  Mosquitto supporte les connexions via WebSockets, permettant une int√©gration plus facile avec les applications web.\n* **TLS/SSL:**  Le chiffrement TLS/SSL est support√© pour s√©curiser les communications.\n\nMosquitto est disponible sous forme de binaires pr√©compil√©s pour plusieurs syst√®mes d'exploitation ou en code source pour une compilation personnalis√©e. Sa configuration se fait via un fichier de configuration simple et lisible.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et gratuit:**  Mosquitto est sous licence EPL, ce qui permet une utilisation libre et gratuite, m√™me pour des applications commerciales.\n* **L√©ger et performant:**  Il consomme peu de ressources syst√®me et est capable de g√©rer un grand nombre de clients et de messages.\n* **Facile √† installer et configurer:**  L'installation et la configuration sont relativement simples, m√™me pour les utilisateurs novices.\n* **Documentation compl√®te et active communaut√©:**  Mosquitto b√©n√©ficie d'une documentation compl√®te et d'une communaut√© active et r√©active.\n* **Largement adopt√© et test√©:**  Son utilisation r√©pandue en fait un choix fiable et √©prouv√©.\n* **Support multiplateforme:**  Mosquitto est disponible sur de nombreuses plateformes, facilitant le d√©ploiement sur diff√©rents environnements.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Interface utilisateur limit√©e:**  Mosquitto est principalement un serveur en ligne de commande, ne disposant pas d'interface graphique intuitive pour la gestion.  Des outils tiers peuvent √™tre n√©cessaires pour une gestion plus conviviale.\n* **Fonctionnalit√©s avanc√©es potentiellement complexes √† configurer:**  Certaines fonctionnalit√©s avanc√©es (authentification, QoS, ACL) peuvent n√©cessiter une configuration plus complexe.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "5a3bca99-abe2-4aa0-90de-c31092299dd3",
        "title": "Ember.js",
        "description": "---\nid: cfe3dff1-dabd-489c-95cd-b4bc688004e6\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nEmber.js est un framework JavaScript open-source, ambitieux et mature, con√ßu pour construire des applications web ambitieuses,  scalables et maintenables. Il privil√©gie une architecture conventionnelle sur la configuration, offrant une structure claire et pr√©dictible pour le d√©veloppement.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nEmber.js fournit une structure compl√®te pour d√©velopper des applications web c√¥t√© client, s'appuyant sur le mod√®le MVC (Model-View-Controller) et int√©grant des fonctionnalit√©s avanc√©es telles que :\n\n* **Routage:**  Un syst√®me de routage puissant et d√©claratif permettant de g√©rer facilement les URLs et la navigation au sein de l'application.  Il permet de cr√©er des URLs propres et SEO-friendly.\n\n* **Gestion des donn√©es:**  Ember Data est un ORM (Object-Relational Mapper) int√©gr√© qui facilite l'interaction avec des APIs RESTful ou autres sources de donn√©es. Il g√®re la mise en cache, les requ√™tes et les relations entre les donn√©es.\n\n* **Composants:**  Ember utilise un syst√®me de composants r√©utilisables et encapsul√©s, facilitant l'organisation du code et la maintenance.  Ces composants g√®rent leur propre logique,  template et donn√©es.\n\n* **Templates:**  Les templates Ember utilisent Handlebars, un moteur de templating facile √† utiliser et puissant. Il permet d'int√©grer facilement la logique et les donn√©es dans l'interface utilisateur.\n\n* **Convention over Configuration:**  Ember privil√©gie les conventions, r√©duisant le besoin de configuration manuelle et am√©liorant la coh√©rence du code. Cela rend le d√©veloppement plus rapide et plus pr√©visible.\n\n* **Gestion du cycle de vie des composants:**  Ember g√®re automatiquement le cycle de vie des composants (cr√©ation, mise √† jour, destruction), simplifiant la gestion des √©tats et des √©v√©nements.\n\n\n**Exemple de code (Cr√©ation d'un composant simple):**\n\n```javascript\n// app/components/welcome-message.js\nimport Component from '@glimmer/component';\n\nexport default class WelcomeMessageComponent extends Component {\n  message = \"Bienvenue sur mon application Ember!\";\n}\n\n// app/templates/components/welcome-message.hbs\n<p>{{this.message}}</p>\n```\n\nCe code d√©finit un composant simple affichant un message.  Il est ensuite utilis√© dans les templates de l'application.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Productivit√©:**  L'architecture conventionnelle et les outils int√©gr√©s am√©liorent la productivit√© du d√©veloppeur.\n* **Maintenabilit√©:**  Le code est plus organis√© et facile √† maintenir gr√¢ce √† la structure impos√©e par le framework.\n* **Scalabilit√©:**  Ember est con√ßu pour g√©rer des applications complexes et de grande envergure.\n* **Communaut√© active:**  Une communaut√© forte et active fournit un support et des ressources abondantes.\n* **Tests int√©gr√©s:**  Ember encourage les tests unitaires et d'int√©gration, facilitant la qualit√© du code.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:**  Ember poss√®de une courbe d'apprentissage plus raide que certains frameworks plus simples.\n* **Taille du bundle:**  Les applications Ember peuvent g√©n√©rer des bundles JavaScript importants, impactant le temps de chargement initial.  Des techniques d'optimisation sont n√©cessaires.\n* **Moins flexible que React ou Vue.js:**  La forte conventionnalit√©, bien que b√©n√©fique, peut parfois limiter la flexibilit√© pour des cas d'utilisation tr√®s sp√©cifiques.\n* **Difficult√©s pour les petites applications:**  Pour les applications tr√®s petites et simples, Ember peut √™tre un choix surdimensionn√©.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "8b0d746d-bce7-4c53-8aac-337a36c628f8",
        "title": "Exherbo",
        "description": "---\nid: 50d36a14-2216-4608-bf2e-3ec2ef4d7bca\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nExherbo est un outil de gestion de configurations open-source pour les syst√®mes Linux. Il utilise un langage d√©claratif pour d√©crire l'√©tat souhait√© du syst√®me, puis g√®re les modifications n√©cessaires pour atteindre cet √©tat.  Il se diff√©rencie des autres outils par sa simplicit√©, sa robustesse et sa focalisation sur l'id√©mpotence.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nExherbo utilise un fichier de configuration simple, g√©n√©ralement √©crit en YAML, pour d√©finir l'√©tat souhait√© du syst√®me. Ce fichier d√©crit les paquets logiciels √† installer, les services √† activer, les fichiers de configuration √† modifier, etc.  Exherbo compare ensuite l'√©tat actuel du syst√®me avec l'√©tat d√©crit dans le fichier de configuration et applique les modifications n√©cessaires pour les faire correspondre.  Ce processus est *id√©mpotent*, ce qui signifie qu'ex√©cuter la m√™me commande plusieurs fois aura le m√™me effet que de l'ex√©cuter une seule fois.  Il ne fera pas de changements si le syst√®me est d√©j√† dans l'√©tat souhait√©.\n\nExherbo est bas√© sur une approche d√©clarative, ce qui le rend plus facile √† comprendre et √† maintenir que les approches imp√©ratives.  On d√©crit *ce qu'on veut*, et Exherbo s'occupe de *comment le faire*.  Ceci simplifie la gestion de configurations complexes et permet une meilleure reproductibilit√© des environnements.\n\n**Exemple de fichier de configuration (YAML):**\n\n```yaml\npackages:\n  - vim\n  - git\n\nservices:\n  - sshd\n\nfiles:\n  - source: /etc/exherbo/ssh_config.sample\n    destination: /etc/ssh/sshd_config\n```\n\nCe fichier indique qu'Exherbo doit installer les paquets `vim` et `git`, activer le service `sshd`, et copier le fichier `/etc/exherbo/ssh_config.sample` vers `/etc/ssh/sshd_config`.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Id√©mpotence:**  La plus grande force d'Exherbo.  On peut l'ex√©cuter plusieurs fois sans risque de modifications ind√©sirables.\n- **Simplicit√©:** Le langage de configuration est clair et facile √† apprendre.\n- **Robustesse:**  Exherbo est con√ßu pour √™tre fiable et g√©rer les erreurs de mani√®re robuste.\n- **Open-source:**  Librement disponible et auditable.\n- **Focalisation:**  Contrairement √† certains outils plus vastes, Exherbo se concentre sur la gestion de configurations syst√®me, ce qui le rend efficace et sp√©cialis√©.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Communaut√© plus petite:**  Compar√© √† des outils comme Ansible ou Puppet, Exherbo poss√®de une communaut√© plus restreinte, ce qui peut rendre la recherche de solutions √† des probl√®mes sp√©cifiques plus difficile.\n- **Moins de fonctionnalit√©s avanc√©es:**  Exherbo ne propose pas toutes les fonctionnalit√©s avanc√©es que l'on trouve dans des outils plus complets.  Par exemple, il n'int√®gre pas nativement la gestion de configurations √† distance.\n- **Documentation limit√©e (potentiellement):** La documentation pourrait √™tre plus compl√®te pour certains aspects.  (Ceci d√©pend de l'√©tat actuel du projet).\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "cbf62fa1-f5fb-481f-b040-5e0282fe3793",
        "title": "Gestion des artefacts",
        "description": "---\nid: c71d6e3d-3d47-4940-96b9-6a8aaf0e2a53\n---\n# Rapidement c'est quoi‚ùì\n\nLa gestion des artefacts est le processus de stockage, de r√©cup√©ration et de gestion de fichiers produits lors du cycle de vie du d√©veloppement logiciel.  Cela inclut le code source compil√©, les biblioth√®ques, les packages d'installation, etc.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLa gestion des artefacts est une partie cruciale de la gestion de configuration logicielle et de l'int√©gration continue/livraison continue (CI/CD). Elle assure le suivi des versions de tous les composants logiciels, permettant une tra√ßabilit√© compl√®te et facilitant la reconstruction et le d√©ploiement de logiciels √† partir d'artefacts archiv√©s.  Un artefact est n'importe quel produit tangible du processus de d√©veloppement,  comme un fichier JAR, un WAR, un fichier ex√©cutable, un script d'installation, ou m√™me un document de sp√©cification.\n\nUn syst√®me de gestion d'artefacts efficace doit fournir des fonctionnalit√©s telles que :\n\n* **Stockage:**  Un d√©p√¥t centralis√© pour stocker les artefacts, souvent avec versioning (contr√¥le de version).  Des solutions comme les buckets Amazon S3, des r√©f√©rentiels Maven ou npm, ou des solutions d√©di√©es comme JFrog Artifactory ou Nexus sont couramment utilis√©es.\n* **R√©cup√©ration:**  M√©canismes pour r√©cup√©rer facilement les versions sp√©cifiques d'artefacts.\n* **M√©tadonn√©es:**  Stockage d'informations sur les artefacts (date de cr√©ation, version, auteur, d√©pendances, etc.) pour une meilleure organisation et recherche.\n* **Int√©gration:**  Int√©gration transparente avec les outils CI/CD pour automatiser le d√©ploiement et la gestion des versions.\n* **S√©curit√©:** Contr√¥le d'acc√®s et authentification pour garantir l'int√©grit√© et la s√©curit√© des artefacts.\n\n\nL'exemple `maven-s3-wagon` mentionn√© utilise les buckets S3 d'Amazon comme d√©p√¥t pour les artefacts Maven, d√©montrant comment un syst√®me de stockage cloud peut √™tre utilis√© pour la gestion d'artefacts.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Tra√ßabilit√© am√©lior√©e:**  Permet de suivre facilement l'√©volution du logiciel et de retrouver des versions sp√©cifiques.\n* **R√©duction des erreurs:**  Minimise les risques li√©s √† l'utilisation de versions incorrectes ou incompatibles des composants.\n* **Automatisation:**  Int√©gration facile avec les pipelines CI/CD pour automatiser le processus de construction, de test et de d√©ploiement.\n* **Collaboration am√©lior√©e:**  Facilite le partage des artefacts entre les membres de l'√©quipe de d√©veloppement.\n* **Scalabilit√©:**  Les solutions modernes de gestion d'artefacts peuvent facilement s'adapter √† des projets de grande envergure.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:**  La mise en place et la gestion d'un syst√®me de gestion d'artefacts peuvent √™tre complexes, surtout pour les petits projets.\n* **Co√ªt:**  Certaines solutions (comme les services cloud) peuvent engendrer des co√ªts importants en fonction de l'utilisation.\n* **Surcharge:**  Une mauvaise gestion peut conduire √† une accumulation d'artefacts inutiles, rendant le syst√®me difficile √† g√©rer.\n* **D√©pendances:**  Une d√©pendance forte √† un syst√®me de gestion d'artefacts peut cr√©er un point de d√©faillance unique.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "25a68590-b3ad-459f-8628-f0d9b608d2ce",
        "title": "Gotify",
        "description": "---\nid: 1f7e13b1-9b4b-476d-9712-0229556402bd\n---\n# Gotify: Rapidement c'est quoi‚ùì\n\nUn serveur open-source l√©ger et simple pour envoyer et recevoir des notifications.  Il utilise une API RESTful pour une int√©gration facile avec d'autres applications et services.\n\n---\n# Gotify: Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nGotify est un serveur de notification auto-h√©bergeable, con√ßu pour √™tre simple √† utiliser et √† d√©ployer.  Il fonctionne en recevant des messages de notification via son API REST, puis en les redistribuant aux clients connect√©s.  Ces clients peuvent √™tre des applications mobiles (Android, iOS), des applications de bureau (Windows, macOS, Linux), ou m√™me des scripts personnalis√©s.  Gotify supporte plusieurs m√©thodes d'authentification, incluant des cl√©s API et une authentification par mot de passe, pour s√©curiser l'envoi des notifications.  Le serveur lui-m√™me est tr√®s l√©ger, n√©cessitant peu de ressources et pouvant √™tre facilement d√©ploy√© sur un Raspberry Pi ou un serveur cloud.  Il est √©crit en Go, d'o√π son nom, et propose une interface web simple pour la gestion des utilisateurs, des applications et des messages.  Les notifications peuvent √™tre personnalis√©es avec des titres, des messages, et des priorit√©s.  Gotify ne conserve pas d'historique des notifications par d√©faut, mais des solutions existent pour la journalisation externe si n√©cessaire.\n\n---\n# Gotify: Qu'est ce qui est top ? üëç\n\n* **Simplicit√©:**  Installation, configuration et utilisation extr√™mement faciles.\n* **Flexibilit√©:** API REST compl√®te permettant l'int√©gration avec une grande vari√©t√© d'applications et de services.\n* **L√©ger:**  N√©cessite peu de ressources serveur.\n* **Open-source:**  Code source disponible, permettant une analyse et une adaptation du logiciel.\n* **Auto-h√©bergeable:** Contr√¥le total sur vos donn√©es et votre infrastructure.\n* **Multi-plateforme:** Clients disponibles pour de nombreux syst√®mes d'exploitation.\n\n---\n# Gotify: Qu'est ce qui est pas ouf ? üëé\n\n* **Fonctionnalit√©s limit√©es:**  Par rapport √† des solutions plus compl√®tes, Gotify manque de certaines fonctionnalit√©s avanc√©es comme la planification des notifications ou une int√©gration native avec des services sp√©cifiques.\n* **Gestion de l'historique limit√©e:**  Pas de stockage d'historique des notifications int√©gr√© par d√©faut.  N√©cessite une solution externe pour cette fonctionnalit√©.\n* **D√©pendance √† un serveur:**  N√©cessite le maintien d'un serveur actif pour fonctionner.\n\n\n---\n# Gotify: A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "bf22a8e7-bac3-452e-8c34-a26fdb615473",
        "title": "Gulp",
        "description": "---\nid: 17e65120-21b5-485c-99e6-c77162ee080c\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nGulp est un outil open-source bas√© sur Node.js servant √† automatiser des t√¢ches de d√©veloppement web.  Il permet de simplifier et d'acc√©l√©rer des processus r√©p√©titifs comme la minification de code, la compilation de pr√©processeurs CSS (Sass, Less), la concat√©nation de fichiers, et le rafra√Æchissement automatique du navigateur.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nGulp utilise un syst√®me de flux (streams) pour traiter les fichiers.  Un flux est un ensemble de donn√©es qui traverse une s√©rie de transformations.  Au lieu de lire et d'√©crire des fichiers entiers √† chaque √©tape, Gulp travaille sur des flux, ce qui le rend beaucoup plus performant que les outils concurrents qui traitent les fichiers de mani√®re plus lin√©aire.  L'utilisateur d√©finit une s√©rie de t√¢ches (tasks) dans un fichier `gulpfile.js`. Chaque t√¢che utilise des plugins pour ex√©cuter des op√©rations sp√©cifiques sur les fichiers qui la traversent.\n\n**Exemple concret : Minification de fichiers CSS et JS**\n\nPour minifier les fichiers CSS et JS d'un projet, on pourrait √©crire un `gulpfile.js` comme ceci :\n\n```javascript\nconst gulp = require('gulp');\nconst cssmin = require('gulp-cssmin');\nconst uglify = require('gulp-uglify');\n\n// T√¢che pour minifier les fichiers CSS\ngulp.task('minify-css', () => {\n  return gulp.src('src/css/*.css')\n    .pipe(cssmin())\n    .pipe(gulp.dest('dist/css'));\n});\n\n// T√¢che pour minifier les fichiers JS\ngulp.task('minify-js', () => {\n  return gulp.src('src/js/*.js')\n    .pipe(uglify())\n    .pipe(gulp.dest('dist/js'));\n});\n\n// T√¢che par d√©faut qui ex√©cute les deux t√¢ches pr√©c√©dentes\ngulp.task('default', gulp.parallel('minify-css', 'minify-js'));\n```\n\nCe code utilise les plugins `gulp-cssmin` et `gulp-uglify` pour minifier respectivement les fichiers CSS et JS.  La commande `gulp` dans le terminal ex√©cuterait la t√¢che `default`, qui √† son tour ex√©cuterait `minify-css` et `minify-js`.\n\n**Fonctionnement interne:** Gulp utilise Node.js et le module `vinyl-fs` pour g√©rer les fichiers.  Les plugins Gulp sont des modules Node.js qui interagissent avec les flux de donn√©es et effectuent les transformations souhait√©es.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Performance:** L'utilisation des flux rend Gulp tr√®s rapide et efficace, surtout sur de grands projets.\n* **Modularit√©:** Le syst√®me de plugins permet une grande extensibilit√© et la possibilit√© d'utiliser des outils tiers.\n* **Lisibilit√©:** Le code des `gulpfile.js` est g√©n√©ralement plus clair et plus facile √† maintenir que celui d'autres outils similaires.\n* **Declaratif:** La d√©finition des t√¢ches est simple et intuitive.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** Bien que la syntaxe soit simple, la compr√©hension du syst√®me de flux et l'utilisation des plugins peut n√©cessiter un temps d'apprentissage.\n* **D√©pendances:** Gulp repose sur Node.js et n√©cessite l'installation de plusieurs plugins, ce qui peut complexifier la configuration.\n* **Maintenance:** La communaut√© autour de Gulp est moins active qu'avant, certains plugins peuvent devenir obsol√®tes.\n* **Alternatives:** Des outils comme npm scripts, Parcel et Webpack offrent des fonctionnalit√©s similaires, parfois plus int√©gr√©es et compl√®tes.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "bbad9982-49d3-4aef-93d5-075605177c94",
        "title": "JFrog Artifactory",
        "description": "---\nid: b5d82f2c-3c72-483c-8599-9e87e733a492\n---\n# Rapidement c'est quoi‚ùì\n\nJFrog Artifactory est un gestionnaire universel d'artefacts logiciels.  Il stocke, g√®re et distribue tous types de paquets logiciels, des biblioth√®ques Java aux images Docker.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nJFrog Artifactory est un serveur de gestion d'artefacts (repository manager) qui fournit un r√©f√©rentiel centralis√© pour stocker et g√©rer tous les types d'artefacts logiciels utilis√©s dans un cycle de d√©veloppement DevOps.  Il supporte un large √©ventail de formats de paquets, incluant (mais sans s'y limiter) : Maven, Gradle, npm, NuGet, Python (pip), Docker, Helm, Debian, RPM et bien d'autres.\n\nAu-del√† du simple stockage, Artifactory offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Gestion de versions:**  Suivi des diff√©rentes versions des artefacts, permettant un rollback facile.\n* **Contr√¥le d'acc√®s:**  Gestion fine des permissions pour garantir la s√©curit√© et le contr√¥le des acc√®s aux artefacts.\n* **Int√©gration CI/CD:**  Int√©gration transparente avec les outils d'int√©gration continue et de livraison continue (CI/CD) pour automatiser le d√©ploiement.\n* **R√©plication:**  Possibilit√© de r√©pliquer les r√©f√©rentiels pour une haute disponibilit√© et une meilleure performance.\n* **Recherche et analyse:**  Fonctions de recherche avanc√©es et d'analyse des artefacts pour une meilleure visibilit√©.\n* **Promotion de versions:**  Gestion du cycle de vie des artefacts, de la phase de d√©veloppement √† la production, via un syst√®me de promotion entre les diff√©rents r√©f√©rentiels (par exemple, de \"d√©veloppement\" √† \"staging\" puis √† \"production\").\n* **Virtual Repositories:**  Cr√©ation de r√©f√©rentiels virtuels combinant plusieurs r√©f√©rentiels physiques pour une meilleure organisation et simplification de la configuration client.\n* **Support de plusieurs protocoles:**  Acc√®s aux artefacts via divers protocoles comme HTTP, HTTPS, SFTP, etc.\n\n\nArtifactory permet ainsi d'am√©liorer la collaboration entre les √©quipes de d√©veloppement, de simplifier la gestion des d√©pendances et d'acc√©l√©rer le processus de livraison continue.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Support multi-langages et multi-formats:**  Gestion d'un tr√®s grand nombre de types d'artefacts.\n* **Fonctionnalit√©s avanc√©es:**  Gestion des versions, contr√¥le d'acc√®s fin, int√©gration CI/CD robuste, etc.\n* **Haute disponibilit√© et scalabilit√©:**  Possibilit√© de configuration pour la haute disponibilit√© et la gestion de volumes importants d'artefacts.\n* **Interface utilisateur intuitive:**  L'interface utilisateur est g√©n√©ralement consid√©r√©e comme conviviale et facile √† utiliser.\n* **Int√©gration avec d'autres outils JFrog:**  Synergie avec d'autres outils de l'√©cosyst√®me JFrog, comme Xray (analyse de vuln√©rabilit√©s).\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Prix:**  Artifactory peut √™tre co√ªteux, surtout pour les grandes organisations avec de nombreux utilisateurs et de gros volumes d'artefacts.\n* **Complexit√©:**  La configuration et l'administration d'Artifactory peuvent √™tre complexes pour des utilisateurs moins exp√©riment√©s.\n* **Ressources requises:**  N√©cessite des ressources serveur significatives pour g√©rer de gros volumes d'artefacts.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n# JFrog Artifactory\n\n## Rapidement, c'est quoi ? ü§î\n\nJFrog Artifactory est un gestionnaire universel d'artefacts logiciels.  Imaginez un entrep√¥t centralis√© qui stocke et g√®re tous les composants n√©cessaires √† vos applications, des plus petites librairies aux plus grosses images Docker.\n\n## Plus pr√©cis√©ment, c'est quoi / √ßa fait quoi ? üîç\n\nJFrog Artifactory est un serveur de gestion d'artefacts (repository manager). Il centralise le stockage et la gestion de tous les types d'artefacts logiciels utilis√©s dans un cycle de d√©veloppement DevOps.  Il supporte une multitude de formats, parmi lesquels : Maven, Gradle, npm, NuGet, Python (pip), Docker, Helm, Debian, RPM, et bien d'autres.\n\n**Au-del√† du simple stockage, Artifactory offre des fonctionnalit√©s essentielles pour un workflow DevOps efficace :**\n\n* **Gestion de versions:**  Suivi pr√©cis des versions, facilitant les rollbacks (retour √† une version ant√©rieure).  Imaginez pouvoir facilement revenir √† une version stable de votre application en cas de probl√®me.\n* **Contr√¥le d'acc√®s:**  Permissions granulaires pour s√©curiser l'acc√®s aux artefacts.  Seuls les utilisateurs autoris√©s peuvent acc√©der √† certains composants.\n* **Int√©gration CI/CD:**  Int√©gration fluide avec vos outils CI/CD ([Concept supprim√©]) pour automatiser les d√©ploiements.  Cela acc√©l√®re le cycle de d√©veloppement et r√©duit les erreurs manuelles.\n* **R√©plication:**  R√©plication des r√©f√©rentiels pour haute disponibilit√© et performances accrues.  Vos artefacts sont disponibles m√™me en cas de panne d'un serveur.\n* **Recherche et analyse:**  Recherche puissante et analyse des artefacts pour une meilleure visibilit√© sur votre √©cosyst√®me logiciel.\n* **Promotion de versions:**  Gestion du cycle de vie des artefacts, de d√©veloppement √† production, via un syst√®me de promotion entre r√©f√©rentiels (ex: \"dev\" -> \"staging\" -> \"prod\").  Cela permet un contr√¥le rigoureux des d√©ploiements.\n* **Virtual Repositories:**  Cr√©ation de r√©f√©rentiels virtuels combinant plusieurs r√©f√©rentiels physiques pour simplifier la configuration client.  Cela simplifie grandement l'acc√®s aux artefacts pour les d√©veloppeurs.\n* **Support de plusieurs protocoles:**  Acc√®s aux artefacts via HTTP, HTTPS, SFTP, etc.  Flexibilit√© d'int√©gration avec diff√©rents environnements.\n\n\nEn r√©sum√©, Artifactory am√©liore la collaboration, simplifie la gestion des d√©pendances et acc√©l√®re la livraison continue.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Support multi-langages et multi-formats:**  Gestion d'une large vari√©t√© d'artefacts.\n* **Fonctionnalit√©s avanc√©es:**  Gestion de versions, contr√¥le d'acc√®s fin, int√©gration CI/CD robuste.\n* **Haute disponibilit√© et scalabilit√©:**  Adaptable √† des besoins croissants.\n* **Interface utilisateur intuitive:**  Facile √† prendre en main.\n* **Int√©gration avec d'autres outils JFrog:**  Synergie avec Xray (analyse de vuln√©rabilit√©s) par exemple.\n\n\n## Qu'est-ce qui est moins bien ? üëé\n\n* **Prix:**  Peut √™tre co√ªteux pour les grandes organisations.\n* **Complexit√©:**  Configuration avanc√©e pouvant √™tre complexe.\n* **Ressources requises:**  N√©cessite des ressources serveur importantes pour g√©rer de gros volumes.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n* [Gestion des artefacts]\n* [CI/CD] (Int√©gration Continue / Livraison Continue)\n* [Docker] (Pour la gestion des images conteneuris√©es)\n\n\n## Exemple de configuration d'un r√©f√©rentiel Maven dans Artifactory (snippet):\n\n```yaml\nrepositories:\n  - repoKey: libs-release-local\n    repositoryType: local\n    packageType: maven\n    description: Local Maven repository for releases\n```\n"
    },
    {
        "id": "b54a6baf-dffc-4f42-abf8-54d421bfd881",
        "title": "JMeter",
        "description": "---\nid: 0635b1b3-d5fa-4382-8668-72e0ccd88568\n---\n# Rapidement c'est quoi‚ùì\n\nJMeter est un outil open-source de test de performance et de charge pour des applications web et autres.  Il permet de simuler un grand nombre d'utilisateurs simultan√©s pour mesurer la capacit√© de r√©ponse et la stabilit√© d'un syst√®me.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nJMeter est un outil de test de performance √©crit en Java. Il permet de simuler un important volume de requ√™tes sur un serveur, une application web ou un autre syst√®me afin d'en √©valuer les performances et la robustesse sous forte charge.  Il offre la possibilit√© de cr√©er des sc√©narios de test complexes, incluant des √©l√©ments comme :\n\n* **Requ√™tes HTTP/HTTPS:**  Simuler des navigations web, des appels d'API REST, etc.  Il supporte diff√©rents protocoles et m√©thodes HTTP.\n* **Tests de base de donn√©es:** Tester les performances des requ√™tes SQL sur diff√©rentes bases de donn√©es.\n* **Tests FTP:** Tester les performances des transferts de fichiers FTP.\n* **Tests de performances JMS:** Tester les performances de la messagerie JMS.\n* **Tests LDAP:** Tester les performances des services LDAP.\n* **√âl√©ments de configuration:**  Contr√¥ler les aspects du test, comme les temporisations, les boucles, les assertions, etc.\n* **√âcouteurs:**  Collecter et visualiser les r√©sultats des tests, sous forme de tableaux, de graphiques, et de rapports d√©taill√©s (temps de r√©ponse, nombre d'erreurs, temps d'attente, etc.).\n* **Assertions:** V√©rifier si la r√©ponse du serveur correspond aux attentes (codes de statut HTTP, contenu de la r√©ponse, etc.).\n\nJMeter est tr√®s flexible et extensible gr√¢ce √† ses nombreux plugins et son architecture modulaire.  Il permet d'int√©grer des scripts personnalis√©s et d'automatiser des t√¢ches de test complexes. Les r√©sultats des tests permettent d'identifier les goulots d'√©tranglement et d'optimiser les performances de l'application test√©e.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et gratuit:**  Accessible √† tous sans co√ªt de licence.\n* **Large communaut√© et documentation:**  Facile d'obtenir de l'aide et des ressources en cas de besoin.\n* **Flexible et extensible:**  Adaptable √† une grande vari√©t√© de sc√©narios de test gr√¢ce √† ses plugins et fonctionnalit√©s.\n* **Interface graphique intuitive (pour la cr√©ation des tests):**  Relativement facile √† prendre en main, m√™me pour les d√©butants.\n* **Rapports d√©taill√©s:**  Fournit des informations compl√®tes sur les performances du syst√®me test√©.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Consommation de ressources:**  Peut consommer beaucoup de ressources (m√©moire, CPU) lors de la simulation de charges importantes, surtout sur une seule machine.\n* **Courbe d'apprentissage:**  Bien que l'interface soit intuitive pour les tests simples, la cr√©ation de tests complexes et l'interpr√©tation des r√©sultats avanc√©s peuvent n√©cessiter une certaine expertise.\n* **Interface graphique peu performante pour les gros tests:**  L'interface graphique peut devenir lente et r√©active avec de tr√®s grands tests.  L'utilisation de mode non-GUI est alors conseill√©e.\n* **D√©bogage parfois complexe:**  Identifier la source des erreurs dans des sc√©narios de test complexes peut √™tre difficile.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "304b6f37-1909-4af5-a92b-bc4e62895631",
        "title": "Jaeger",
        "description": "---\nid: dba8623c-06a9-4387-a258-3a4acaaca56f\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nJaeger est un syst√®me de tra√ßage distribu√© open-source qui permet de surveiller et de d√©boguer les applications distribu√©es.  Il collecte et visualise les traces des requ√™tes traversant diff√©rents services, permettant ainsi d'identifier les goulots d'√©tranglement et les erreurs.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nJaeger impl√©mente le standard OpenTracing (maintenant OpenTelemetry) pour le tra√ßage distribu√©.  Il est compos√© de plusieurs composants principaux :\n\n* **Agent:** Un agent l√©ger qui s'ex√©cute sur chaque service et collecte les traces. Il envoie ces traces au collecteur.\n* **Collecteur:** Un service qui re√ßoit les traces de plusieurs agents et les traite.  Il peut √™tre configur√© pour stocker les traces dans une base de donn√©es (ex: Cassandra, Elasticsearch).\n* **Query:** Un service qui permet de rechercher et de visualiser les traces via une interface utilisateur web.\n* **Ingest:** Le composant qui re√ßoit les donn√©es brutes du traceur et les envoie au backend de stockage.\n\nLe fonctionnement se r√©sume ainsi:\n\n1. Une application instrumente son code pour injecter des spans (unit√©s de travail) dans le flux de la requ√™te.  Ces spans contiennent des informations contextuelles comme le nom de l'op√©ration, la dur√©e et des tags.\n2. L'agent Jaeger, en local, collecte ces spans et les envoie au collecteur.\n3. Le collecteur traite les donn√©es et les stocke dans une base de donn√©es.\n4. L'interface utilisateur permet de visualiser les traces, de filtrer par service, par tag, etc.  On peut ainsi suivre le parcours d'une requ√™te √† travers l'ensemble de l'infrastructure.\n\n**Exemple (Python avec opentelemetry):**\n\n```python\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.jaeger.thrift import JaegerExporter\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\n\nresource = Resource.get_empty().merge({SERVICE_NAME: \"my_service\"})\ntrace.set_tracer_provider(TracerProvider(resource=resource))\njaeger_exporter = JaegerExporter(agent_host_name='localhost', agent_port=6831)\nspan_processor = BatchSpanProcessor(jaeger_exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\ntracer = trace.get_tracer(__name__)\nwith tracer.start_as_current_span(\"main_function\"):\n    with tracer.start_as_current_span(\"sub_function\"):\n        # ... code ...\n        pass\n    # ... code ...\n    pass\n```\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Open Source et mature:**  Jaeger est un projet stable et largement adopt√©.\n* **Interface utilisateur intuitive:** La visualisation des traces est facile √† comprendre et √† utiliser.\n* **Int√©gration avec plusieurs technologies:**  Jaeger s'int√®gre facilement avec de nombreux langages de programmation et frameworks.\n* **Scalabilit√©:**  Jaeger est con√ßu pour g√©rer un grand nombre de traces.\n* **Support de diff√©rents backends de stockage:**  On peut choisir le stockage qui convient le mieux √† son infrastructure.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© de configuration:**  La configuration peut √™tre complexe, notamment pour des d√©ploiements √† grande √©chelle.\n* **Surco√ªt de performance:**  L'instrumentation et la collecte des traces peuvent avoir un l√©ger impact sur les performances de l'application.  Une instrumentation mal faite peut amplifier ce probl√®me.\n* **N√©cessite un backend de stockage:**  Jaeger ne fonctionne pas sans un backend de stockage pour les traces.  Ceci ajoute une d√©pendance suppl√©mentaire.\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "6234d20e-2789-4aed-a6a5-ee646881890d",
        "title": "Jitpack",
        "description": "---\nid: f7b3616a-498c-4574-a2d9-4d5a46afee0e\n---\n# Rapidement c'est quoi‚ùì\n\nJitPack est un service d'h√©bergement et de distribution d'artefacts Java et Kotlin.  Il permet d'int√©grer facilement des librairies h√©berg√©es sur des d√©p√¥ts Git (GitHub, GitLab, Bitbucket) directement dans vos projets.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nJitPack est un r√©f√©rentiel Maven et Gradle qui automatise la construction et la publication de biblioth√®ques Java et Kotlin √† partir de d√©p√¥ts Git.  Au lieu de publier vos librairies manuellement sur des r√©f√©rentiels comme Maven Central, vous fournissez simplement JitPack avec l'URL de votre d√©p√¥t Git (public ou priv√©, mais les priv√©s n√©cessitent un abonnement payant). JitPack se charge ensuite de :\n\n1. **Cloner votre d√©p√¥t Git:** Il r√©cup√®re le code source de votre projet.\n2. **Construire votre projet:** Il utilise un environnement de build (Maven ou Gradle) d√©fini dans votre projet pour compiler votre code et g√©n√©rer les artefacts (JAR, AAR, etc.).\n3. **Publier les artefacts:** Il met √† disposition les artefacts compil√©s via son propre r√©f√©rentiel, accessible via des coordonn√©es Maven ou Gradle.\n\nCela permet aux d√©veloppeurs d'int√©grer vos librairies directement dans leurs projets via un simple ajout de d√©pendances dans leur fichier `build.gradle` (ou √©quivalent).  JitPack surveille les modifications dans votre d√©p√¥t Git et met √† jour les artefacts automatiquement, facilitant ainsi la gestion des versions et la mise √† jour des librairies.  L'int√©gration est transparente pour le d√©veloppeur qui n'a pas besoin de g√©rer la publication des artefacts.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplicit√© d'utilisation:**  Int√©gration facile et rapide gr√¢ce √† l'ajout d'une simple d√©pendance dans votre fichier de build.\n* **Automatisation:** JitPack automatise le processus de compilation et de publication, r√©duisant ainsi le temps et l'effort n√©cessaire.\n* **Mise √† jour automatique:** Les mises √† jour du d√©p√¥t Git sont automatiquement refl√©t√©es dans le r√©f√©rentiel JitPack.\n* **Int√©gration avec les d√©p√¥ts Git populaires:**  Fonctionne avec GitHub, GitLab et Bitbucket.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Co√ªt pour les d√©p√¥ts priv√©s:** L'utilisation de d√©p√¥ts Git priv√©s n√©cessite un abonnement payant.\n* **D√©pendance √† JitPack:** Votre projet d√©pend d'un service tiers, ce qui introduit un point de d√©faillance potentiel.\n* **Performances:**  La construction et le d√©ploiement peuvent √™tre plus lents que sur un serveur de build d√©di√©.\n* **Contr√¥le limit√©:** Vous avez moins de contr√¥le sur le processus de build que si vous g√©rez vous-m√™me la publication de vos artefacts.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "39981e27-4afb-40f9-a0b7-7ab17fc52da6",
        "title": "K6",
        "description": "---\nid: 31ca0fd2-70a8-43d5-8c3c-250984ee0d52\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nk6 est un outil open-source de test de charge et de performance √©crit en Go.  Il permet de simuler un grand nombre d'utilisateurs simultan√©s interagissant avec une application web ou un service afin d'√©valuer sa capacit√© √† g√©rer la charge et d'identifier les goulots d'√©tranglement.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nk6 permet de d√©finir des sc√©narios de test en utilisant un langage de script simple et puissant bas√© sur JavaScript.  Ces scripts d√©finissent les actions que les utilisateurs virtuels doivent r√©aliser (requ√™tes HTTP, interactions avec l'interface utilisateur, etc.).  k6 ex√©cute ensuite ces scripts en parall√®le, simulant ainsi une charge importante sur le syst√®me test√©.  L'outil collecte diverses m√©triques de performance (temps de r√©ponse, taux d'erreur, utilisation des ressources serveur, etc.) et les pr√©sente sous forme de rapports et de graphiques.\n\nVoici un exemple simple de script k6:\n\n```javascript\nimport http from 'k6/http';\nimport { sleep } from 'k6';\n\nexport let options = {\n  stages: [\n    { duration: '30s', target: 20 }, // Simuler 20 utilisateurs pendant 30 secondes\n    { duration: '1m', target: 20 }, // Maintenir 20 utilisateurs pendant 1 minute\n    { duration: '30s', target: 0 },  // Ramener le nombre d'utilisateurs √† 0 pendant 30 secondes\n  ],\n};\n\nexport default function () {\n  let res = http.get('https://test-api.com/users');\n  sleep(1); // Attendre 1 seconde avant la prochaine requ√™te\n  check(res, { 'status was 200': (r) => r.status === 200 });\n}\n```\n\nCe script simule 20 utilisateurs effectuant une requ√™te GET sur une API pendant une minute et demie.  `check` permet de valider que la r√©ponse a un code de statut 200.  L'option `stages` d√©finit l'√©volution du nombre d'utilisateurs virtuels au cours du test.\n\nk6 offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Int√©gration avec des outils d'observation:**  k6 peut envoyer des m√©triques vers des syst√®mes de monitoring comme Prometheus, Grafana, InfluxDB.\n* **Scripts modulaires et r√©utilisables:**  Les scripts k6 peuvent √™tre organis√©s en modules pour faciliter la maintenance et le partage de code.\n* **Tests de charge bas√©s sur des sc√©narios r√©alistes:**  Il est possible de simuler des comportements d'utilisateurs plus complexes, en incluant des temps d'attente, des distributions al√©atoires, etc.\n* **Support des protocoles HTTP/1.1, HTTP/2, et WebSocket:**  k6 permet de tester une large gamme d'applications.\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Open-source et gratuit:** k6 est librement disponible et utilisable.\n* **Langage de script simple et puissant:**  Le JavaScript utilis√© est relativement facile √† apprendre et permet de cr√©er des tests complexes.\n* **R√©sultats clairs et concis:**  k6 fournit des rapports d√©taill√©s et des visualisations graphiques des r√©sultats.\n* **Int√©gration facile avec l'√©cosyst√®me DevOps:**  k6 s'int√®gre bien avec d'autres outils populaires.\n* **Performance et stabilit√©:**  k6 est performant et robuste.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:** Bien que le langage de script soit simple, une certaine familiarit√© avec JavaScript est n√©cessaire pour cr√©er des tests sophistiqu√©s.\n* **D√©bogage:** Le d√©bogage des scripts peut √™tre parfois complexe.  Des outils sp√©cifiques sont n√©cessaires pour un d√©bogage efficace.\n* **Limitations pour les tests UI complexes:** Bien que possible,  tester des applications avec de nombreuses interactions UI complexes peut √™tre plus difficile qu'avec d'autres outils sp√©cialis√©s dans les tests d'interface utilisateur.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "ff09cb51-6aea-4704-908c-b252fcebb82b",
        "title": "Karate",
        "description": "---\nid: 1c914381-073b-493f-9b0e-f8c82b8f9e98\n---\n# Rapidement c'est quoi‚ùì\n\nKarate DSL est un framework open-source bas√© sur Cucumber (Gherkin) pour l'automatisation des tests, notamment pour les API, mais aussi pour les applications web et les applications desktop.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nKarate est un framework de test d'int√©gration bas√© sur le langage [[Gherkin]], connu pour sa syntaxe simple et lisible (BDD - Behavior Driven Development).  Il permet de d√©crire les sc√©narios de test de mani√®re concise et compr√©hensible par les √©quipes techniques et non-techniques.  Au lieu d'√©crire du code complexe, on d√©crit le comportement attendu de l'application via des mots cl√©s simples.  Karate s'occupe ensuite de l'ex√©cution et de la validation.\n\nKarate offre une grande flexibilit√© et peut √™tre utilis√© pour tester diff√©rents types d'applications :\n\n* **API REST :** C'est son utilisation principale. Il permet d'envoyer des requ√™tes HTTP (GET, POST, PUT, DELETE, etc.), de valider les r√©ponses (codes de statut, corps JSON, etc.) et de g√©rer l'authentification.\n* **Applications Web :**  Karate peut interagir avec des applications web via son int√©gration avec des outils comme Selenium, permettant de simuler des actions utilisateur.\n* **Applications Desktop :**  Bien que moins courant, Karate peut √™tre utilis√© pour tester des applications desktop gr√¢ce √† son API extensible.\n* **Tests de performance de base :**  Karate permet d‚Äôeffectuer des tests de charge l√©gers, notamment gr√¢ce √† ses capacit√©s de parall√©lisation.\n\nKarate utilise un puissant moteur de matching JSON qui simplifie les validations. Il propose √©galement des fonctionnalit√©s avanc√©es telles que la gestion des donn√©es de test, la g√©n√©ration de rapports et l'int√©gration avec des syst√®mes de CI/CD.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Syntaxe simple et lisible (Gherkin) :** Rend les tests faciles √† comprendre et √† maintenir.\n* **Polyvalence :** Permet de tester des API REST, des applications web et m√™me des applications desktop.\n* **Int√©gration facile :** S'int√®gre bien avec de nombreux outils et technologies.\n* **Gestion avanc√©e des donn√©es de test :** Simplifie la gestion des donn√©es d'entr√©e.\n* **Puissant moteur de matching JSON :** Facilite la validation des r√©ponses API.\n* **Reporting clair et concis :** Facilite l'analyse des r√©sultats.\n* **Communaut√© active et documentation assez compl√®te:** Facilite le d√©marrage et l'apprentissage.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Pour les tests UI complexes, il peut √™tre moins performant que des outils d√©di√©s comme Selenium ou Cypress:** Il est plus adapt√© pour la validation de l'API qui sous-tend l'UI plut√¥t que la validation de l'exp√©rience utilisateur elle-m√™me.\n* **Courbe d'apprentissage l√©g√®rement plus raide que des outils plus simples pour les d√©butants complets en test.**  La ma√Ætrise des expressions r√©guli√®res et des manipulations JSON est un atout.\n* **Moins de plugins disponibles qu'avec des frameworks plus √©tablis** pour les tests UI.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "4f9fb72d-9eb3-4874-b3cf-2aea798c1efa",
        "title": "LowDb",
        "description": "---\nid: 1f2a7d57-7f12-4d6a-8ad5-d1eb8ef07f91\n---\n## **Rapidement, c'est quoi ? ‚ùì**\n\nLowDB est une petite base de donn√©es JavaScript l√©g√®re, bas√©e sur un fichier JSON.  Elle est id√©ale pour les applications qui n'ont pas besoin d'une base de donn√©es relationnelle complexe et qui veulent un stockage persistant simple et rapide.\n\n---\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLowDB est une base de donn√©es NoSQL orient√©e document.  Cela signifie qu'elle stocke les donn√©es sous forme de documents JSON, sans le besoin de sch√©mas rigides.  Elle utilise un seul fichier JSON comme stockage persistant, ce qui la rend facile √† d√©ployer et √† utiliser.  LowDB fournit une API simple et intuitive pour effectuer des op√©rations CRUD (Cr√©er, Lire, Mettre √† jour, Supprimer) sur les donn√©es.  Elle est bas√©e sur Lodash, ce qui facilite l'utilisation de ses fonctions de manipulation de donn√©es.  Elle ne n√©cessite aucune configuration de serveur, ni aucune d√©pendance externe autre que Lodash.\n\nVoici un exemple d'utilisation en JavaScript :\n\n```javascript\nconst low = require('lowdb')\nconst FileSync = require('lowdb/adapters/FileSync')\n\nconst adapter = new FileSync('db.json')\nconst db = low(adapter)\n\n// Set some defaults (optional)\ndb.defaults({ users: [], posts: [] })\n  .write()\n\n// Add a user\ndb.get('users').push({ id: 1, name: 'John' }).write()\n\n// Find a user\nconst john = db.get('users').find({ id: 1 }).value()\n\n// Update a user\ndb.get('users').find({ id: 1 }).assign({ age: 30 }).write()\n\n// Remove a user\ndb.get('users').remove({ id: 1 }).write()\n\n// Read all users\nconst users = db.get('users').value()\n\nconsole.log(users)\n```\n\nCet exemple montre comment cr√©er une base de donn√©es, ajouter, rechercher, mettre √† jour et supprimer des utilisateurs.  La m√©thode `.write()` sauvegarde les modifications dans le fichier `db.json`.\n\n---\n\n# Qu'est-ce qui est top ? üëç\n\n* **Simplicit√©:**  Extr√™mement facile √† installer et √† utiliser, avec une API intuitive.\n* **L√©ger:**  Tr√®s petite taille, ne surcharge pas l'application.\n* **Facile √† d√©ployer:**  Ne n√©cessite aucune configuration de serveur.\n* **Persistant:**  Stocke les donn√©es dans un fichier JSON, garantissant la persistance des donn√©es.\n* **Bas√© sur Lodash:**  B√©n√©ficie de la puissance et de la flexibilit√© de Lodash pour la manipulation des donn√©es.\n\n---\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Scalabilit√© limit√©e:**  N'est pas con√ßue pour les applications √† tr√®s grande √©chelle.  La performance peut d√©grader avec des jeux de donn√©es importants.\n* **Transactions non support√©es:**  Ne supporte pas les transactions, ce qui peut √™tre un probl√®me pour les applications n√©cessitant une coh√©rence forte des donn√©es.\n* **Concurrence limit√©e:**  La gestion de la concurrence n'est pas optimis√©e.  L'utilisation simultan√©e par plusieurs processus peut n√©cessiter des m√©canismes de verrouillage externes.\n* **Fonctionnalit√©s limit√©es:**  Ne propose pas autant de fonctionnalit√©s qu'une base de donn√©es relationnelle ou un syst√®me de base de donn√©es NoSQL plus complet.\n\n---\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "2dd2c605-ae74-4ae6-8c67-dfd4a2df88ec",
        "title": "MQTT",
        "description": "---\nid: 7b1fe336-18e3-4bbc-a2d1-4f869db47e43\n---\n# Rapidement c'est quoi‚ùì\n\nMQTT (Message Queuing Telemetry Transport) est un protocole de messagerie l√©ger, publi√©-abonn√©, utilis√© principalement pour l'Internet des objets (IoT).  Il permet aux appareils de publier des messages sur des sujets sp√©cifiques, et aux autres appareils abonn√©s √† ces sujets de recevoir ces messages.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nMQTT est un protocole de communication machine-√†-machine (M2M) bas√© sur le paradigme de publication-abonnement.  Il fonctionne sur le principe de \"sujets\" (topics) auxquels les clients (publishers et subscribers) s'abonnent.  Un √©diteur (publisher) publie un message sur un sujet sp√©cifique.  Tous les abonn√©s (subscribers) √† ce sujet re√ßoivent alors une copie de ce message.  Ceci permet une communication unidirectionnelle efficace, id√©ale pour les applications √† faible bande passante et √† forte latence comme l'IoT.\n\nContrairement √† d'autres protocoles de messagerie plus lourds, MQTT est con√ßu pour √™tre l√©ger et efficace en termes de bande passante et d'√©nergie.  Il utilise un format de message compact et g√®re les connexions intermittentes et les d√©connexions.  Il offre diff√©rents niveaux de qualit√© de service (QoS) pour garantir la fiabilit√© de la livraison des messages :\n\n* **QoS 0 (At most once):** Le message est envoy√© une seule fois, sans garantie de livraison.\n* **QoS 1 (At least once):** Le message est envoy√© au moins une fois, le serveur envoie un accus√© de r√©ception.  Il est possible de recevoir le message plusieurs fois en cas de perte du message d'accus√© de r√©ception.\n* **QoS 2 (Exactly once):** Le message est envoy√© exactement une fois, garantie de livraison et d'unicit√©.  C'est le niveau le plus robuste, mais aussi le plus co√ªteux en ressources.\n\nUn broker MQTT agit comme un interm√©diaire centralis√©, g√©rant les abonnements et la diffusion des messages entre les √©diteurs et les abonn√©s.  Le publisher peut sp√©cifier s'il attend une confirmation de r√©ception (QoS 1 et 2) ou non (QoS 0).\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **L√©ger et efficace:**  Id√©al pour les appareils √† faible puissance et bande passante limit√©e.\n* **Simple √† impl√©menter:**  Protocole relativement simple √† comprendre et √† utiliser.\n* **Publication-abonnement efficace:**  Permet une communication unidirectionnelle scalable.\n* **Gestion des connexions intermittentes:**  Robuste face aux d√©connexions et aux r√©seaux instables.\n* **Plusieurs niveaux de QoS:**  Offre des options de fiabilit√© pour adapter la communication aux besoins de l'application.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Pas adapt√© √† toutes les applications:**  Moins appropri√© pour les applications n√©cessitant des transactions complexes ou une communication bidirectionnelle tr√®s r√©active.\n* **S√©curit√©:**  N√©cessite une attention particuli√®re √† la s√©curit√©, surtout dans les environnements sensibles.  Des m√©canismes d'authentification et de chiffrement sont importants.\n* **Complexit√© du Broker:** La gestion d'un broker MQTT peut devenir complexe pour un grand nombre d'appareils et de messages.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "2ac4eb26-18a4-4910-80a6-380bdeef9ae0",
        "title": "Macaron",
        "description": "---\nid: 4ca900d5-f49d-4a08-8a97-35a6683ef57f\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nUn macaron est un jeton cryptographique utilis√© pour l'authentification.  Il repr√©sente une alternative aux m√©canismes d'authentification traditionnels, offrant une approche plus s√©curis√©e et flexible.  On peut le voir comme une version plus simple et moins complexe d'un biscuit (d√©velopp√© par Clever Cloud).\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nUn macaron est un jeton num√©rique, g√©n√©ralement encod√© en base64, qui contient des informations chiffr√©es sur l'identit√© d'un utilisateur et ses autorisations.  Contrairement √† un cookie HTTP classique, un macaron n'est pas directement stock√© par le navigateur.  Son utilisation implique g√©n√©ralement un m√©canisme d'√©change entre le client (application, navigateur) et le serveur, souvent via un en-t√™te HTTP.\n\nLe serveur cr√©e le macaron en incluant des donn√©es pertinentes (identifiant utilisateur, timestamp, r√¥les, etc.) et en les chiffrant sym√©triquement avec une cl√© secr√®te connue uniquement du serveur.  Le client re√ßoit et conserve le macaron.  Chaque requ√™te subsequente au serveur inclut le macaron, qui est alors v√©rifi√© et d√©chiffr√© par le serveur pour authentifier l'utilisateur et valider ses autorisations.  Ceci √©vite de devoir transmettre des informations sensibles comme mots de passe √† chaque requ√™te.\n\nL'architecture pr√©cise de l'int√©gration des macarons peut varier, mais le principe central reste la g√©n√©ration, transmission et v√©rification s√©curis√©e du jeton chiffr√©.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **S√©curit√© am√©lior√©e:** Le chiffrement du macaron prot√®ge les informations sensibles de l'utilisateur.  Le caract√®re √©ph√©m√®re du macaron (dur√©e de vie limit√©e) renforce la s√©curit√©.\n* **Simplicit√© (compar√© aux syst√®mes plus complexes):**  Par rapport √† des solutions d'authentification plus sophistiqu√©es, le concept est relativement simple √† mettre en ≈ìuvre.\n* **Flexibilit√©:** Les macarons peuvent √™tre adapt√©s √† divers contextes et protocoles.\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Gestion de la cl√© secr√®te:**  La s√©curit√© du syst√®me d√©pend enti√®rement de la protection de la cl√© secr√®te utilis√©e pour chiffrer/d√©chiffrer les macarons.  Une compromission de cette cl√© compromet la s√©curit√© de tout le syst√®me.\n* **Complexit√© d'impl√©mentation (par rapport aux cookies simples):**  L'impl√©mentation n√©cessite une gestion plus complexe que des cookies HTTP simples.\n* **D√©pendance au serveur:**  La validit√© du macaron d√©pend enti√®rement du serveur.  Des probl√®mes de connectivit√© ou des pannes du serveur peuvent emp√™cher l'acc√®s.\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "31d7445a-110f-47ad-b006-c15034db4caf",
        "title": "Mockoon",
        "description": "---\nid: 6fbdf1a5-224a-40eb-8d39-f3a7b21e6fe8\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nMockoon est une application open-source permettant de cr√©er et de g√©rer facilement des mocks d'API.  Elle permet de simuler des r√©ponses HTTP pour des besoins de test et de d√©veloppement, sans avoir besoin d'un serveur backend fonctionnel.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nMockoon est un outil qui permet de d√©finir des routes API, chacune associ√©e √† une r√©ponse HTTP sp√©cifique.  Ces r√©ponses peuvent √™tre configur√©es pour simuler diff√©rents statuts HTTP (200 OK, 404 Not Found, etc.), des en-t√™tes personnalis√©s, et des corps de r√©ponse au format JSON, XML, ou texte brut.  L'application embarque un serveur qui rend ces mocks accessibles via une URL locale.  Les d√©veloppeurs peuvent ainsi tester leurs applications front-end ou leurs int√©grations sans d√©pendre d'un serveur backend en cours de d√©veloppement ou indisponible.\n\nMockoon offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Gestion des requ√™tes:**  Possibilit√© de d√©finir des requ√™tes sp√©cifiques (m√©thodes HTTP, headers, param√®tres, corps de la requ√™te) pour d√©clencher des r√©ponses diff√©rentes.\n* **Mocks dynamiques:**  Les r√©ponses peuvent √™tre g√©n√©r√©es dynamiquement gr√¢ce √† des fonctionnalit√©s de templating (ex: utilisant des variables).\n* **D√©lai de r√©ponse:**  Simulation de latence r√©seau pour des tests plus r√©alistes.\n* **Import/Export:**  Import et export de configurations au format JSON pour faciliter le partage et la sauvegarde.\n* **Environnements:**  Possibilit√© de g√©rer plusieurs environnements (d√©veloppement, test, production) avec des configurations diff√©rentes.\n\n**Exemple simple (JSON):**\n\nImaginons une route `/users` qui doit retourner une liste d'utilisateurs.  Dans Mockoon, on d√©finirait une route avec la m√©thode `GET`, l'URL `/users`, et un corps de r√©ponse JSON comme suit :\n\n```json\n[\n  {\"id\": 1, \"name\": \"John Doe\"},\n  {\"id\": 2, \"name\": \"Jane Smith\"}\n]\n```\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Facilit√© d'utilisation:**  Interface utilisateur intuitive et facile √† prendre en main.\n* **Open-source:**  Gratuit, et le code source est disponible pour un audit ou des contributions.\n* **Fonctionnalit√©s compl√®tes:**  Offre un ensemble complet de fonctionnalit√©s pour la simulation d'API.\n* **Interface graphique:**  Permet une configuration visuelle et simple des mocks.\n* **Multiplateforme:**  Disponible pour Windows, macOS et Linux.\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Limitations pour les mocks complexes:**  Pour les cas d'utilisation tr√®s complexes n√©cessitant des interactions sophistiqu√©es avec le serveur (authentification avanc√©e, gestion d'√©tat, etc.), Mockoon pourrait s'av√©rer moins adapt√© que des solutions plus sp√©cialis√©es.\n* **D√©pendance √† une application:**  Contrairement √† des solutions bas√©es sur un script ou un fichier de configuration, Mockoon n√©cessite l'ex√©cution de l'application.\n\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "3e904263-df71-47ca-a67f-c0e3adcd11bd",
        "title": "Nexus OSS",
        "description": "---\nid: e34dad01-51d0-4b44-b981-ab5d072436c6\n---\n# Nexus OSS : Rapidement c'est quoi‚ùì\n\nNexus OSS est un gestionnaire d'artefacts open-source.  Il permet de stocker et de g√©rer des paquets logiciels de diff√©rents types (Java, Python, Node.js, Docker, etc.) centralisant ainsi la distribution et la versioning de ces √©l√©ments au sein d'un projet.\n\n---\n# Nexus OSS : Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nNexus OSS est un serveur de gestion d'artefacts qui fournit un r√©f√©rentiel centralis√© pour les d√©pendances de logiciels.  Il prend en charge une large vari√©t√© de formats de paquets, incluant mais sans s'y limiter : Maven, npm, NuGet, Bower, PyPI, Docker, et beaucoup d'autres.  Son r√¥le principal est de faciliter la gestion du cycle de vie des artefacts, de leur cr√©ation √† leur d√©ploiement.\n\nPlus concr√®tement, Nexus OSS permet :\n\n* **Stockage centralis√©:**  Tous les artefacts d'un projet sont stock√©s dans un emplacement unique, facilitant l'acc√®s et la gestion.\n* **Gestion de versions:** Nexus g√®re efficacement les diff√©rentes versions des artefacts, permettant de revenir √† des versions pr√©c√©dentes si n√©cessaire.\n* **Proxy de r√©f√©rentiels:** Il peut agir comme un proxy pour des r√©f√©rentiels externes (comme Maven Central), r√©duisant la charge sur les r√©seaux et am√©liorant les performances.\n* **Cr√©ation de r√©f√©rentiels priv√©s:**  Permet de cr√©er des r√©f√©rentiels priv√©s pour h√©berger des artefacts internes, avant leur √©ventuelle publication publique.\n* **Contr√¥le d'acc√®s:**  Offre des m√©canismes de contr√¥le d'acc√®s pour restreindre l'acc√®s aux artefacts en fonction des r√¥les utilisateurs.\n* **Recherche et navigation:**  Fournit une interface utilisateur intuitive pour rechercher et naviguer parmi les artefacts stock√©s.\n* **Int√©gration CI/CD:**  S'int√®gre facilement aux pipelines CI/CD pour automatiser le processus de d√©ploiement.\n\n\n---\n# Nexus OSS : Qu'est ce qui est top ? üëç\n\n* **Open-source et gratuit:**  Nexus OSS est disponible gratuitement et son code source est accessible.\n* **Large support de formats:**  Il g√®re un tr√®s grand nombre de types d'artefacts.\n* **Interface utilisateur conviviale:**  Navigation et recherche faciles.\n* **Fonctionnalit√©s avanc√©es:**  Gestion des versions, proxy, r√©f√©rentiels priv√©s, contr√¥le d'acc√®s.\n* **Communaut√© active:**  Une communaut√© importante fournit un support et contribue au d√©veloppement.\n\n\n---\n# Nexus OSS : Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:** La configuration initiale peut √™tre complexe pour les utilisateurs d√©butants.\n* **Ressources serveur:**  Peut n√©cessiter des ressources serveur importantes pour g√©rer un grand nombre d'artefacts.\n* **Courbe d'apprentissage:**  N√©cessite une certaine familiarisation avec les concepts de gestion d'artefacts.\n* **D√©pendances Java:** N√©cessite une machine virtuelle Java pour fonctionner.\n\n\n---\n# Nexus OSS : A quoi c'est li√© ? ü™¢\n\n(√† compl√©ter)\n"
    },
    {
        "id": "0e88d3df-da53-4647-8099-8872358acab6",
        "title": "NuxtHub",
        "description": "---\nid: afb4d2a0-248c-4f80-9886-88258531a052\n---\n# Rapidement c'est quoi‚ùì\n\nNuxtHub est une plateforme en ligne qui simplifie la gestion et le d√©ploiement d'applications Nuxt.js sur le cloud Cloudflare.  Elle fournit une interface utilisateur intuitive pour g√©rer les projets, automatisant plusieurs t√¢ches complexes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nNuxtHub est un service de plateforme comme service (PaaS) sp√©cifiquement con√ßu pour les applications web construites avec le framework JavaScript Nuxt.js.  Il offre une interface centralis√©e pour g√©rer tout le cycle de vie d'un projet Nuxt, du d√©veloppement au d√©ploiement.  Les fonctionnalit√©s cl√©s incluent :\n\n* **Gestion de projet:**  Cr√©ation, organisation et suivi de multiples projets Nuxt.js depuis une seule interface.\n* **D√©ploiement automatis√©:**  NuxtHub int√®gre directement le cloud Cloudflare, automatisant le processus de d√©ploiement et rendant la mise en production simple et rapide.  Cela inclut la configuration du serveur, la gestion des certificats SSL et la mise √† jour automatique.\n* **Environnements multiples:**  Possibilit√© de g√©rer diff√©rents environnements (d√©veloppement, staging, production) pour chaque projet.\n* **Collaboration:**  Facilite la collaboration entre d√©veloppeurs gr√¢ce √† un syst√®me de contr√¥le d'acc√®s et de gestion des utilisateurs.\n* **Supervision et monitoring:**  Outils de monitoring permettant de surveiller les performances et la stabilit√© des applications d√©ploy√©es.  (La nature pr√©cise de ces outils d√©pend de l'int√©gration avec Cloudflare.)\n* **Int√©gration CI/CD (potentielle):**  Bien que non explicitement mentionn√©, une plateforme comme NuxtHub est susceptible d'offrir ou de s'int√©grer facilement √† des pipelines CI/CD pour automatiser davantage le processus de d√©veloppement et de d√©ploiement.\n\n\nEn r√©sum√©, NuxtHub vise √† simplifier le workflow des d√©veloppeurs Nuxt.js en centralisant et en automatisant les t√¢ches fastidieuses li√©es √† la gestion et au d√©ploiement d'applications.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplification du d√©ploiement:** Le d√©ploiement sur Cloudflare est grandement simplifi√© gr√¢ce √† l'interface utilisateur intuitive.\n* **Centralisation de la gestion:** Gestion multi-projets facilit√©e.\n* **Automatisation des t√¢ches:**  R√©duction du temps et de l'effort n√©cessaires pour le d√©ploiement et la maintenance.\n* **Int√©gration Cloudflare:** B√©n√©ficie de l'infrastructure robuste et performante de Cloudflare.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **D√©pendance √† Cloudflare:**  Le d√©ploiement est limit√© √† Cloudflare.  Les d√©veloppeurs souhaitant utiliser d'autres fournisseurs de cloud pourraient √™tre limit√©s.\n* **Potentielles limitations des fonctionnalit√©s:** L'√©tendue exacte des fonctionnalit√©s de monitoring et d'int√©gration CI/CD n'est pas toujours clairement d√©finie.  Une √©valuation approfondie est n√©cessaire.\n* **Co√ªt:**  Le mod√®le de tarification peut constituer un inconv√©nient pour certains utilisateurs, n√©cessitant une analyse des co√ªts avant utilisation.\n* **Manque de contr√¥le (potentiel):**  Le niveau de contr√¥le sur l'infrastructure sous-jacente pourrait √™tre inf√©rieur √† une configuration manuelle.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "42b53c23-df81-462b-94cb-78777ddbe672",
        "title": "Objet du testing",
        "description": "---\nid: 2f7853dd-9d03-467b-99ae-804dd65e0865\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nLes objets de test (dummy, stub, mock, fake, spy) sont des outils utilis√©s dans le d√©veloppement logiciel pour simuler le comportement de parties d'un syst√®me lors de tests unitaires ou d'int√©gration.  Ils permettent d'isoler le code test√© et de contr√¥ler son environnement, facilitant ainsi la d√©tection de bugs et la validation du comportement attendu.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nVoici une description plus d√©taill√©e des diff√©rents types d'objets de test :\n\n* **Dummy:** Un objet simple servant √† compl√©ter une liste de param√®tres. Il ne poss√®de g√©n√©ralement aucune impl√©mentation concr√®te et sert principalement √† satisfaire les contraintes de signature d'une fonction ou d'une m√©thode sans avoir d'impact r√©el sur le test.\n\n    * **Exemple:** Un constructeur n√©cessitant trois param√®tres, mais dont un seul est pertinent pour le test.  On utilise un `dummy` pour les deux autres.\n\n* **Stub:** Un objet qui remplace une d√©pendance et renvoie des valeurs pr√©d√©finies.  Il simule un comportement sp√©cifique sans ex√©cuter le code r√©el de la d√©pendance.\n\n    * **Exemple:** Une fonction appelant une base de donn√©es.  Un `stub` simule la r√©ponse de la base de donn√©es sans r√©ellement interagir avec elle.  Cela permet de tester la fonction sans d√©pendre de l'√©tat de la base de donn√©es.\n\n* **Mock:** Un objet plus sophistiqu√© qui v√©rifie non seulement les appels √† des m√©thodes mais aussi leurs arguments.  Il permet de s'assurer que les interactions avec les d√©pendances se produisent comme pr√©vu.  Il est g√©n√©ralement utilis√© pour valider les interactions, pas juste les r√©sultats.\n\n    * **Exemple:** V√©rifier si une m√©thode `envoyerEmail` a √©t√© appel√©e avec les bons param√®tres (adresse email, sujet, corps du message).\n\n* **Fake:** Un objet qui fournit une impl√©mentation simplifi√©e d'une d√©pendance.  Il est souvent plus complet qu'un `stub` car il peut avoir une certaine logique interne, mais cette logique est plus simple et plus rapide que l'impl√©mentation r√©elle.\n\n    * **Exemple:** Utiliser une liste en m√©moire comme `fake` pour une base de donn√©es lors d'un test,  ce qui est plus rapide qu'une v√©ritable connexion √† une base de donn√©es.\n\n\n* **Spy:** Un objet qui enregistre les appels √† une fonction ou une m√©thode sans modifier leur comportement.  Il permet d'observer les appels et de v√©rifier qu'ils ont eu lieu avec les param√®tres attendus, sans influencer le comportement de la fonction espionn√©e.  Il sert souvent de compl√©ment √† un `mock` ou un `stub`.\n\n    * **Exemple:** Utiliser un `spy` pour compter le nombre d'appels √† une m√©thode sp√©cifique.\n\n**Exemple (Python avec `unittest.mock`):**\n\n```python\nimport unittest\nfrom unittest.mock import patch, Mock\n\nclass MyClass:\n    def ma_methode(self, param1, param2):\n        return param1 + param2\n\nclass MyTests(unittest.TestCase):\n    @patch('__main__.MyClass.ma_methode')  # Mock de la m√©thode ma_methode\n    def test_ma_methode(self, mock_ma_methode):\n        mock_ma_methode.return_value = 10  # Stub : retourne une valeur fixe\n        obj = MyClass()\n        resultat = obj.ma_methode(5, 5)  # L'appel r√©el ne se produit pas\n        self.assertEqual(resultat, 10)  # V√©rification du r√©sultat stubb√©\n\n        mock_ma_methode.assert_called_once_with(5, 5) # Mock : v√©rification des arguments\n```\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Isolation:** Permet de tester des unit√©s de code de mani√®re ind√©pendante de leurs d√©pendances.\n* **Fiabilit√©:** R√©duit les erreurs li√©es aux d√©pendances externes (bases de donn√©es, r√©seaux, etc.).\n* **Rapidit√©:** Les tests sont plus rapides car ils n'ont pas √† interagir avec des syst√®mes externes lents.\n* **R√©p√©tabilit√©:**  Les tests sont toujours reproductibles car l'environnement de test est contr√¥l√©.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La mise en place de mocks et stubs peut ajouter de la complexit√© aux tests.\n* **Maintenance:**  Les tests utilisant des mocks et stubs peuvent n√©cessiter une maintenance accrue si l'API des d√©pendances √©volue.\n* **Sur-mocking:** Un exc√®s de mocking peut masquer des probl√®mes d'int√©gration.\n* **Difficult√© de debug:** Des tests trop isol√©s peuvent rendre le debugging plus difficile si le probl√®me vient d'une interaction inattendue entre les diff√©rentes parties du syst√®me.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "e938662b-f332-4f3b-b8fd-b3729a7b352f",
        "title": "Optimisation",
        "description": "---\nid: 3ee82aac-362e-40bd-96ee-8c9734e0d8b9\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nL'optimisation consiste √† am√©liorer les performances d'un syst√®me, dans ce cas pr√©cis, d'une base de donn√©es et de la gestion des logs.  Cela vise √† r√©duire les temps de r√©ponse, √† augmenter le d√©bit et √† am√©liorer l'utilisation des ressources.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nCette note d√©crit deux techniques d'optimisation : l'augmentation de la pool de connexions pour la base de donn√©es et la bufferisation des logs.\n\n**1. Augmentation de la pool de connexions de la base de donn√©es:**\n\nUne pool de connexions est un ensemble de connexions pr√©-√©tablies √† la base de donn√©es.  Au lieu d'√©tablir une nouvelle connexion pour chaque requ√™te, l'application utilise les connexions disponibles dans la pool.  Augmenter la taille de cette pool permet de g√©rer un plus grand nombre de requ√™tes concurrentes, r√©duisant ainsi les temps d'attente et am√©liorant les performances.  Cependant, il est crucial de v√©rifier la configuration du param√®tre `max_connections` (ou un param√®tre √©quivalent) au niveau de la base de donn√©es elle-m√™me.  D√©passer cette limite peut mener √† des erreurs et √† une d√©gradation des performances.\n\n**Exemple (concept, pas de code sp√©cifique √† une base de donn√©es):**\n\nImaginons une application web avec 10 utilisateurs concurrents.  Si la pool de connexions est de taille 5, 5 utilisateurs devront attendre qu'une connexion devienne disponible avant de pouvoir interagir avec la base de donn√©es.  En augmentant la taille de la pool √† 20, plus d'utilisateurs pourront acc√©der simultan√©ment √† la base de donn√©es sans attente.\n\n**2. Bufferisation des logs:**\n\nLa journalisation (logging) peut √™tre une op√©ration co√ªteuse en termes de ressources, surtout avec un volume important de logs.  La bufferisation consiste √† accumuler les logs dans une m√©moire tampon (buffer) avant de les √©crire physiquement sur le disque ou de les envoyer √† un syst√®me de logging distant.  Cela permet de rendre l'√©criture des logs plus asynchrone, √©vitant ainsi de bloquer le thread principal de l'application et de surcharger la sortie standard.  Une fois le buffer plein (ou apr√®s un certain d√©lai), son contenu est √©crit en bloc, ce qui est plus efficace que l'√©criture de chaque log individuellement.\n\n**Exemple (concept):**\n\nAu lieu d'√©crire chaque message de log directement sur le disque, on les accumule dans un buffer de taille 1000 messages.  Une fois le buffer plein, on √©crit les 1000 messages en une seule op√©ration.  Cela r√©duit le nombre d'op√©rations d'√©criture sur le disque, ce qui am√©liore les performances.  Divers frameworks de logging offrent des m√©canismes de bufferisation.\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Augmentation de la pool de connexions:**  Am√©lioration significative des performances pour les applications avec un fort trafic concurrent.\n* **Bufferisation des logs:**  R√©duction de la charge sur le syst√®me et am√©lioration de la r√©activit√© de l'application, en particulier sous forte charge de logging.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Augmentation de la pool de connexions:**  Risque de saturation de la base de donn√©es si la taille de la pool d√©passe la limite `max_connections` d√©finie par le serveur de base de donn√©es.  Cela peut entra√Æner des erreurs et une d√©gradation des performances. N√©cessite une bonne compr√©hension des limites de la base de donn√©es.\n* **Bufferisation des logs:**  Peut introduire une latence dans la journalisation, ce qui peut compliquer le d√©bogage en temps r√©el si un probl√®me survient.  La gestion de la taille du buffer et de la fr√©quence d'√©criture est critique pour trouver le bon √©quilibre entre performance et temps de r√©ponse.  En cas de crash de l'application avant l'√©criture du buffer, les logs seront perdus.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "dda6a9ab-f010-41f6-9158-b779fa0e1bd6",
        "title": "Plugin Oauth2 Proxy Nexus",
        "description": "---\nid: 2fa8fce2-e236-4f36-b969-556a3f001603\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nLe plugin OAuth2Proxy pour Nexus est une extension qui ajoute une couche d'authentification bas√©e sur OAuth 2.0.  Il permet aux utilisateurs de se connecter √† Nexus via un fournisseur d'identit√© (IdP) comme Keycloak, Okta, etc., au lieu d'utiliser les m√©canismes d'authentification int√©gr√©s de Nexus.  Une fois authentifi√©, l'utilisateur re√ßoit un token permettant l'acc√®s aux ressources de Nexus (comme les d√©p√¥ts Maven) sans avoir besoin de fournir de nouveau ses identifiants.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nCe plugin agit comme un proxy inverse devant Nexus.  Au lieu d'acc√©der directement √† Nexus, les requ√™tes passent d'abord par OAuth2Proxy.  OAuth2Proxy intercepte la requ√™te, redirige l'utilisateur vers son IdP pour l'authentification. Une fois l'authentification r√©ussie aupr√®s de l'IdP, OAuth2Proxy v√©rifie le token re√ßu et, s'il est valide, redirige la requ√™te vers Nexus en ajoutant des informations d'authentification au header de la requ√™te (souvent un `Authorization: Bearer <token>`).  Cela permet √† Nexus d'identifier l'utilisateur sans avoir besoin d'une authentification directe.  L'utilisateur peut ainsi acc√©der aux ressources de Nexus uniquement si le token OAuth 2.0 est valide.\n\nLe plugin se configure g√©n√©ralement en d√©finissant l'URL de l'IdP, les identifiants de l'application enregistr√©e dans l'IdP, et les scopes n√©cessaires.  La configuration peut inclure des options avanc√©es comme la gestion des r√¥les et des autorisations.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **S√©curit√© am√©lior√©e:** D√©l√©gue l'authentification √† un syst√®me d'identit√© centralis√© et plus robuste, r√©duisant le risque d'attaques directes sur Nexus.\n* **Centralisation de l'authentification:** Gestion unique des utilisateurs et des mots de passe via l'IdP.\n* **Int√©gration avec diff√©rents IdP:** Compatible avec de nombreux fournisseurs d'identit√© populaires (Keycloak, Okta, Google, etc.).\n* **Acc√®s headless:** Permet aux outils automatis√©s (ex: scripts Maven, CI/CD) d'acc√©der √† Nexus en utilisant le token OAuth 2.0, sans intervention manuelle.\n* **Am√©lioration de l'exp√©rience utilisateur:**  Authentification unique (SSO) possible si l'IdP est d√©j√† utilis√© pour d'autres applications.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:** La configuration initiale peut √™tre complexe, n√©cessitant une bonne compr√©hension d'OAuth 2.0 et de la configuration de l'IdP.\n* **D√©pendance √† un IdP:**  N√©cessite un IdP fonctionnel et correctement configur√©.\n* **Surco√ªt de performance:** L'ajout d'un proxy interm√©diaire peut introduire une l√©g√®re latence.  Cependant, cela est g√©n√©ralement n√©gligeable.\n* **D√©bogage:** Le d√©bogage des probl√®mes d'authentification peut √™tre difficile, n√©cessitant une analyse des logs de l'IdP et d'OAuth2Proxy.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "d3ab7db6-fa95-43cb-acc9-4f7113eadee8",
        "title": "PouchDB",
        "description": "---\nid: 11870a2a-4362-4192-bc6e-f4b4c92ff908\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nPouchDB est une base de donn√©es NoSQL JavaScript open-source qui fonctionne comme une base de donn√©es client-side, imitant l'API de CouchDB.  Elle permet de stocker des donn√©es localement dans le navigateur ou un environnement Node.js, offrant des fonctionnalit√©s de synchronisation avec une base de donn√©es distante (comme CouchDB ou Cloudant).\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nPouchDB est une base de donn√©es JavaScript orient√©e document, ce qui signifie qu'elle stocke les donn√©es sous forme de documents JSON.  Elle impl√©mente une API similaire √† celle de CouchDB, facilitant la migration entre les deux.  Le principal avantage est la capacit√© de fonctionner hors connexion.  Les donn√©es sont stock√©es localement, et une fois la connexion r√©tablie, PouchDB se synchronise avec la base de donn√©es distante en utilisant des m√©canismes de r√©plication bidirectionnelle.  Cela permet aux applications web et mobiles de fonctionner m√™me sans acc√®s √† internet, les modifications √©tant sauvegard√©es localement et synchronis√©es ult√©rieurement.\n\nPouchDB utilise un syst√®me de versionnement des documents pour g√©rer les conflits lors de la synchronisation.  Si des modifications sont effectu√©es √† la fois localement et √† distance sur le m√™me document, PouchDB utilise un algorithme pour r√©soudre les conflits et fusionner les changements.  L'utilisateur peut personnaliser la gestion des conflits.\n\n**Exemple d'utilisation (ajout d'un document):**\n\n```javascript\nconst db = new PouchDB('mydb');\n\ndb.put({\n  _id: 'mydoc',\n  name: 'Example Document'\n}).then(() => {\n  console.log('Document added successfully!');\n}).catch((err) => {\n  console.log('Error adding document:', err);\n});\n```\n\n**Exemple de synchronisation avec une base de donn√©es distante (CouchDB):**\n\n```javascript\nconst remoteCouchDB = 'http://example.com:5984/mydb';\nconst db = new PouchDB('mydb');\n\ndb.sync(remoteCouchDB, {\n  live: true,\n  retry: true\n}).on('change', (info) => {\n    console.log(\"Changes detected, replicating...\");\n}).on('paused', (err) => {\n    console.log('Replication paused.');\n}).on('error', (err) => {\n    console.error('Replication failed.', err);\n});\n\n```\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Fonctionnement hors ligne:**  La principale force de PouchDB est sa capacit√© √† fonctionner sans connexion internet.\n* **Synchronisation facile:**  La r√©plication avec une base de donn√©es distante est simple √† mettre en ≈ìuvre.\n* **API intuitive:** L'API est similaire √† celle de CouchDB, facile √† apprendre et √† utiliser.\n* **Open source et communaut√© active:**  B√©n√©ficie d'une communaut√© active et d'une documentation compl√®te.\n* **L√©ger et performant:**  PouchDB est relativement l√©ger et performant, m√™me sur des appareils mobiles.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Gestion des conflits:** Bien que PouchDB g√®re les conflits,  la r√©solution automatique peut parfois √™tre complexe et n√©cessiter une intervention manuelle.\n* **Limites de taille des donn√©es:**  Pour des applications √† tr√®s grande √©chelle avec des volumes importants de donn√©es, PouchDB peut avoir ses limites.  Il est plus adapt√© aux applications n√©cessitant une persistance locale et une synchronisation r√©guli√®re.\n* **D√©pendance √† JavaScript:**  Son utilisation est intrins√®quement li√©e √† JavaScript et ne peut pas √™tre utilis√©e directement dans d'autres langages.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "a7f557fc-7458-4115-81c0-b3b481a4b64b",
        "title": "R2DBC",
        "description": "---\nid: bfc84f55-fe42-4506-951b-7f9edd1ac060\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nR2DBC (Reactive Relational Database Connectivity) est une sp√©cification pour acc√©der de mani√®re r√©active aux bases de donn√©es relationnelles depuis Java.  Il fournit une API asynchrone et non-bloquante, contrastant avec l'approche synchrone et bloquante de JDBC.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nR2DBC d√©finit une API pour interagir avec les bases de donn√©es relationnelles en utilisant un mod√®le r√©actif.  Au lieu de bloquer le thread d'ex√©cution en attendant la r√©ponse de la base de donn√©es, R2DBC utilise des m√©canismes asynchrones, permettant au thread de continuer √† traiter d'autres t√¢ches pendant que la requ√™te est ex√©cut√©e. Cela am√©liore l'efficacit√© et les performances, surtout dans les applications √† haute concurrence.\n\nContrairement √† JDBC, qui utilise des objets `Statement`, `ResultSet`, etc., R2DBC utilise un mod√®le bas√© sur `Flux` (de la librairie Reactor) pour les requ√™tes et les r√©sultats.  Cela permet de traiter les donn√©es de mani√®re asynchrone et r√©active, en utilisant des op√©rateurs comme `map`, `filter`, `flatMap`, etc.  L'API R2DBC est plus d√©clarative que JDBC, laissant la gestion de la concurrence et de l'asynchronisme au framework.\n\nVoici un exemple simplifi√© d'utilisation de R2DBC avec Spring Data R2DBC (Note:  Ce code est simplifi√© pour illustrer le concept.  Une impl√©mentation r√©elle n√©cessiterait plus de d√©tails):\n\n```kotlin\n@Repository\ninterface UserRepository : ReactiveCrudRepository<User, Long> {\n    // M√©thodes CRUD g√©n√©r√©es automatiquement\n}\n\n//Entit√© User\ndata class User(val id: Long?, val name: String)\n\n//Dans un service\n@Service\nclass UserService(private val userRepository: UserRepository){\n    fun getAllUsers(): Flux<User> = userRepository.findAll()\n}\n```\n\nCet exemple montre comment Spring Data R2DBC simplifie l'interaction avec la base de donn√©es en fournissant une impl√©mentation de `ReactiveCrudRepository`. Les op√©rations CRUD sont effectu√©es de mani√®re r√©active et asynchrone gr√¢ce √† l'utilisation de `Flux`.  Notez qu'il est n√©cessaire de g√©rer soi-m√™me les jointures avec R2DBC, contrairement √† certains ORM qui les g√®rent automatiquement.\n\n# Qu'est-ce qui est top ? üëç\n\n* **Performances:** L'approche asynchrone et non-bloquante am√©liore consid√©rablement les performances, surtout pour les applications √† forte charge.\n* **Scalabilit√©:**  R2DBC est mieux adapt√© √† la gestion de la concurrence et permet une meilleure scalabilit√© que JDBC.\n* **Int√©gration avec Spring:** L'int√©gration avec Spring Data R2DBC simplifie l'utilisation de R2DBC et permet de b√©n√©ficier des fonctionnalit√©s de Spring.\n* **R√©activit√©:** L'utilisation de `Flux` permet un traitement r√©actif des donn√©es.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La programmation r√©active peut √™tre plus complexe que la programmation synchrone traditionnelle.  Comprendre les concepts de `Flux`, `Mono`, et les op√©rateurs r√©actifs est crucial.\n* **Maturation:**  Bien que mature, R2DBC est une technologie plus r√©cente que JDBC, et certaines bases de donn√©es et outils peuvent avoir un support moins complet que pour JDBC.\n* **Gestion des jointures:**  R2DBC ne g√®re pas les jointures automatiquement, demandant une gestion explicite dans le code, ce qui peut complexifier les requ√™tes plus sophistiqu√©es.\n* **Debugging:** Le d√©bogage de code r√©actif peut √™tre plus difficile que le d√©bogage de code synchrone.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\nJDBC, Spring Data R2DBC, Project Reactor, bases de donn√©es relationnelles, programmation r√©active.\n"
    },
    {
        "id": "e0f385b0-ed98-4b3c-a1bf-b859880071c0",
        "title": "RGAA",
        "description": "---\nid: dd5ba0ba-bc56-46d7-8c93-631e4758609a\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nLe RGAA (R√©f√©rentiel G√©n√©ral d'Accessibilit√© pour les Administrations) est un r√©f√©rentiel fran√ßais qui d√©finit les crit√®res d'accessibilit√© num√©rique pour les sites web et applications des administrations publiques. Il s'appuie sur les WCAG (Web Content Accessibility Guidelines) internationales, mais les adapte au contexte fran√ßais et fournit des crit√®res plus pr√©cis et concrets.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLe RGAA vise √† garantir que les services num√©riques publics soient accessibles √† tous, y compris les personnes handicap√©es.  Il d√©finit des crit√®res d'accessibilit√© regroup√©s en quatre principes :\n\n* **Percevable:** L'information et les composants de l'interface utilisateur doivent √™tre pr√©sent√©s aux utilisateurs de mani√®re qu'ils puissent les percevoir.  Cela inclut des aspects comme le contraste des couleurs, les alternatives textuelles aux images, la transcription des contenus audio et vid√©o, etc.\n* **Op√©rable:** L'interface utilisateur doit √™tre op√©rable.  Cela signifie que les utilisateurs doivent pouvoir utiliser l'interface avec une vari√©t√© de dispositifs d'entr√©e, comme une souris, un clavier, un √©cran tactile, etc.  Cela comprend aussi des aspects comme la navigation au clavier, l'√©vitement des pi√®ges √† souris, etc.\n* **Compr√©hensible:** L'information et le fonctionnement de l'interface utilisateur doivent √™tre compr√©hensibles.  Cela implique une r√©daction claire et concise, une navigation intuitive, l'utilisation d'un langage simple, etc.\n* **Robuste:** Le contenu doit √™tre robuste, c'est-√†-dire compatible avec un large √©ventail de technologies d'assistance et d'appareils.\n\nChaque principe est ensuite d√©clin√© en crit√®res plus sp√©cifiques, avec des niveaux de conformit√© (A, AA, AAA).  La version actuelle du RGAA est la version 4.0.  L'√©valuation de la conformit√© au RGAA se fait g√©n√©ralement via des audits, manuels ou automatis√©s, qui permettent d'identifier les points d'am√©lioration pour rendre un site web ou une application plus accessible.\n\n**Exemple concret:** Un crit√®re du RGAA pourrait √™tre \"Le texte doit avoir un contraste suffisant avec l'arri√®re-plan\".  Cela signifie que la diff√©rence de luminosit√© entre le texte et l'arri√®re-plan doit √™tre suffisamment importante pour √™tre per√ßue par les personnes malvoyantes.\n\n# Qu'est-ce qui est top ? üëç\n\n* **Cadre clair et pr√©cis:**  Le RGAA fournit des crit√®res concrets et mesurables pour l'accessibilit√©, ce qui facilite l'√©valuation et l'am√©lioration de l'accessibilit√© des sites web et applications.\n* **Adaptation au contexte fran√ßais:**  Il adapte les WCAG au contexte fran√ßais, ce qui le rend plus pertinent pour les administrations publiques fran√ßaises.\n* **Am√©lioration de l'inclusion:**  Il contribue √† am√©liorer l'inclusion num√©rique et permet √† un plus grand nombre de personnes d'acc√©der aux services en ligne.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:**  Le RGAA est un r√©f√©rentiel complexe avec de nombreux crit√®res et niveaux de conformit√©, ce qui peut rendre sa mise en ≈ìuvre difficile.\n* **Co√ªt:**  L'audit et la mise en conformit√© avec le RGAA peuvent engendrer des co√ªts importants, notamment pour les sites web complexes.\n* **√âvolution constante:**  Les technologies et les besoins des personnes handicap√©es √©voluent, ce qui n√©cessite une mise √† jour r√©guli√®re du RGAA.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n\n(Laisser vide)\n"
    },
    {
        "id": "d460347c-b86a-4170-ad92-1f2f8cf350ab",
        "title": "Resource et RxResource (Angular)",
        "description": "---\nid: 5114a4ec-5c32-4fb5-bfd6-2d475c4cbb42\n---\n# Rapidement c'est quoi‚ùì\n\n`Resource` et `RxResource` (Angular) sont des m√©canismes facilitant la gestion des appels API dans les applications Angular. Ils encapsulent la logique de requ√™te HTTP et fournissent une interface r√©active pour suivre l'√©tat de la requ√™te (chargement, succ√®s, erreur).  `RxResource` utilise RxJS pour une gestion asynchrone plus avanc√©e.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n`Resource` et `RxResource` sont des abstractions con√ßues pour simplifier l'interaction avec des API RESTful dans Angular.  Ils permettent d'√©viter la r√©p√©tition de code pour les appels HTTP courants (GET, POST, PUT, DELETE).  Au lieu d'√©crire manuellement des appels `HttpClient`, vous utilisez une instance `Resource` ou `RxResource` configur√©e avec l'URL de votre API et les m√©thodes HTTP appropri√©es.\n\n**`Resource`:**  Cette approche plus basique utilise les promesses JavaScript pour g√©rer les r√©ponses asynchrones.  Elle fournit des propri√©t√©s pour suivre l'√©tat de la requ√™te (par exemple, `isLoading`, `data`, `error`).  L'acc√®s aux donn√©es se fait via ces propri√©t√©s une fois la promesse r√©solue.\n\n**`RxResource`:**  Cette version plus sophistiqu√©e exploite les observables RxJS.  Elle offre une interface plus r√©active et plus puissante, permettant de g√©rer facilement les flux de donn√©es et les erreurs.  L'√©tat de la requ√™te (chargement, succ√®s, erreur) est √©mis sous forme d'√©v√©nements observables, permettant des mises √† jour dynamiques de l'interface utilisateur et une gestion fine des erreurs.  Ceci est particuli√®rement utile pour les requ√™tes longues ou multiples.\n\nPour les deux, la configuration se fait g√©n√©ralement via la d√©finition d'une classe qui sp√©cifie l'URL de base et les actions (GET, POST, etc.).  Ces actions sont ensuite appel√©es pour d√©clencher les requ√™tes HTTP.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **R√©duction de la Boilerplate:**  R√©duction significative du code n√©cessaire pour g√©rer les appels API.\n* **Gestion centralis√©e des erreurs:**  Facilite la gestion des erreurs r√©seau et des erreurs c√¥t√© serveur.\n* **Am√©lioration de la lisibilit√© du code:**  S√©pare la logique de gestion des requ√™tes HTTP du reste du code applicatif.\n* **`RxResource` et la r√©activit√©:**  Avec `RxResource`, une int√©gration naturelle avec la programmation r√©active d'Angular et RxJS, pour une meilleure gestion des flux de donn√©es asynchrones.\n* **Testabilit√© am√©lior√©e:**  Les classes `Resource` ou `RxResource` sont plus faciles √† tester que des appels `HttpClient` directement int√©gr√©s dans les composants.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension des promesses (pour `Resource`) ou des observables RxJS (pour `RxResource`).\n* **Complexit√© potentielle:**  Pour les applications simples, l'utilisation de `Resource` ou `RxResource` peut ajouter une complexit√© inutile.\n* **D√©pendance:**  Ajoute une d√©pendance suppl√©mentaire au projet.\n* **Maintenance:**  N√©cessite une maintenance √† long terme si l'API √©volue.  Il faut adapter les d√©finitions des `Resource` ou `RxResource`.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "7a750faf-40c3-463b-8bab-e6e1e0be4af2",
        "title": "Rio",
        "description": "---\nid: bd8cfc04-d694-45ba-b346-084595d3ab27\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nRio est une librairie Python permettant de cr√©er des interfaces web directement en Python, sans n√©cessiter de connaissances approfondies en HTML, CSS ou JavaScript.  Elle facilite la cr√©ation d'interfaces utilisateur pour des applications et scripts Python.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nRio utilise un mod√®le d√©claratif pour construire des interfaces utilisateur.  Au lieu d'√©crire du HTML et du CSS, vous d√©crivez la structure et le style de votre page web √† l'aide de fonctions Python. Rio g√®re ensuite la conversion en HTML, CSS et JavaScript n√©cessaires pour afficher la page dans un navigateur.  Cela permet de cr√©er des applications web interactives en exploitant les capacit√©s de Python, notamment pour le traitement de donn√©es et la logique m√©tier.\n\nRio s'appuie sur des composants modulaires et r√©utilisables pour construire des interfaces complexes.  Il permet de g√©rer des √©v√©nements utilisateur (clics, soumissions de formulaires, etc.) directement depuis le code Python.  L'interaction avec le serveur (si n√©cessaire) se fait √©galement via du code Python.\n\n**Exemple (simplifi√©):**\n\n```python\nimport rio\n\napp = rio.App()\n\n@app.route(\"/\")\ndef index():\n  return rio.html.div(\"Hello, world!\")\n\napp.run()\n```\n\nCe code simple cr√©e une page web affichant \"Hello, world!\".  La fonction `index` est d√©cor√©e avec `@app.route(\"/\")` pour indiquer qu'elle g√®re la requ√™te √† la racine du site.  `rio.html.div` cr√©e un √©l√©ment HTML `<div>`.\n\nDes exemples plus complexes pourraient inclure des formulaires, des tableaux, des graphiques, et une interaction plus sophistiqu√©e avec le serveur.\n\n## Qu'est-ce qui est top ? üëç\n\n* **D√©veloppement rapide:**  La programmation en Python permet un d√©veloppement plus rapide et plus efficace que le d√©veloppement web traditionnel avec HTML, CSS et JavaScript.\n* **Int√©gration facile avec les scripts Python:** Rio s'int√®gre facilement aux applications et scripts Python existants.\n* **Mod√®le d√©claratif:** La d√©claration de l'interface utilisateur rend le code plus lisible et plus facile √† maintenir.\n* **Abstraction:** Rio masque la complexit√© sous-jacente du d√©veloppement web, permettant aux d√©veloppeurs Python de se concentrer sur la logique m√©tier.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Communaut√© limit√©e:**  Compar√© √† des frameworks web populaires comme Flask ou Django, Rio a une communaut√© plus petite, ce qui peut impacter le support et la disponibilit√© des ressources.\n* **Performance potentielle:**  L'interpr√©tation Python pourrait engendrer une performance l√©g√®rement inf√©rieure √† celle d'applications web construites avec des technologies compil√©es.  Cependant, pour beaucoup d'applications, cette diff√©rence sera n√©gligeable.\n* **Flexibilit√© limit√©e (potentielle):**  Bien que Rio permette une grande partie des fonctionnalit√©s web, il pourrait manquer certaines fonctionnalit√©s tr√®s sp√©cifiques ou n√©cessiter des solutions de contournement pour des cas d'utilisation avanc√©s.\n* **D√©pendances:** Rio ajoute une d√©pendance suppl√©mentaire √† votre projet.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "7663b49c-a5f3-421b-84ef-262d66c0c6ad",
        "title": "R√©flexion (Java)",
        "description": "---\nid: 16be4a3f-fb5e-4258-b88a-d8f3bd3f5389\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nLa r√©flexion en Java est une fonctionnalit√© puissante qui permet √† un programme de manipuler ses propres structures et comportements √† l'ex√©cution.  Elle permet d'inspecter et de modifier les classes, les m√©thodes, les champs, etc., dynamiquement.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLa r√©flexion en Java s'appuie sur les classes du package `java.lang.reflect`.  Ces classes fournissent des interfaces pour interagir avec les m√©tadonn√©es des classes et des objets √† l'ex√©cution.  On peut, par exemple :\n\n* **Obtenir des informations sur une classe:**  Nom de la classe, ses interfaces impl√©ment√©es, ses constructeurs, ses m√©thodes, ses champs (variables d'instance et statiques).  Cela se fait via la classe `Class`.\n* **Cr√©er des instances de classes dynamiquement:**  Invoquer un constructeur d'une classe dont le nom n'est connu qu'√† l'ex√©cution.\n* **Invoquer des m√©thodes dynamiquement:**  Appeler une m√©thode d'un objet, m√™me si le nom de la m√©thode n'est pas connu √† la compilation.\n* **Acc√©der aux champs dynamiquement:**  Lire ou modifier la valeur d'un champ d'un objet.\n* **Cr√©er des proxies:**  G√©n√©rer dynamiquement des classes qui impl√©mentent des interfaces donn√©es, interceptant les appels de m√©thodes pour ajouter du comportement (AOP).\n\n**Exemple:**\n\n```java\nClass<?> myClass = Class.forName(\"com.example.MyClass\"); // R√©cup√®re la classe MyClass dynamiquement\nMethod myMethod = myClass.getMethod(\"myMethod\", String.class); // R√©cup√®re la m√©thode myMethod\nObject myObject = myClass.getDeclaredConstructor().newInstance(); // Cr√©e une instance de MyClass\nObject result = myMethod.invoke(myObject, \"Hello\"); // Appelle la m√©thode myMethod avec l'argument \"Hello\"\nSystem.out.println(result); // Affiche le r√©sultat de l'appel de m√©thode\n```\n\nCet exemple montre comment r√©cup√©rer une classe, une m√©thode, cr√©er une instance et invoquer la m√©thode dynamiquement.  `Class.forName()` est une m√©thode cl√© pour r√©cup√©rer une r√©f√©rence de classe √† partir d'un nom de classe (String).\n\n## Qu'est-ce qui est top ? üëç\n\n* **Flexibilit√©:** Permet de cr√©er des applications tr√®s dynamiques et configurables, adaptant leur comportement √† l'ex√©cution.\n* **Extension du code:**  Facilite la cr√©ation d'outils de d√©veloppement tels que les frameworks de test, les outils de monitoring ou les debuggers.\n* **Interop√©rabilit√©:**  Permet d'interagir avec des librairies ou des composants dont la structure n'est pas connue √† la compilation.\n* **Frameworks puissants:**  Fondamentale pour des frameworks comme Spring qui utilisent la r√©flexion pour l'injection de d√©pendances et l'AOP.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Performances:**  L'utilisation intensive de la r√©flexion peut impacter les performances, car elle n√©cessite une recherche et une manipulation dynamiques des m√©tadonn√©es.\n* **S√©curit√©:**  Une mauvaise utilisation de la r√©flexion peut exposer √† des failles de s√©curit√©, notamment en permettant l'acc√®s ou la modification non autoris√©e de donn√©es.\n* **Complexit√©:**  Le code utilisant la r√©flexion peut √™tre plus complexe √† lire, √† maintenir et √† d√©boguer que le code traditionnel.\n* **Erreurs √† l'ex√©cution:**  Les erreurs li√©es √† la r√©flexion surviennent souvent √† l'ex√©cution plut√¥t qu'√† la compilation, rendant le debugging plus difficile.\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "a4d130be-3eb5-4ee3-8991-f9ca30af1689",
        "title": "Serialisation-Deserialisation",
        "description": "---\nid: ea084ff5-b622-4420-b2ee-d8a3d6cb1ea5\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nLa s√©rialisation et la d√©s√©rialisation sont des processus qui permettent de convertir un objet en une repr√©sentation lin√©aire (g√©n√©ralement un flux de donn√©es comme un fichier, une cha√Æne de caract√®res ou un flux r√©seau) et inversement. La s√©rialisation transforme l'objet en cette repr√©sentation, tandis que la d√©s√©rialisation reconstitue l'objet √† partir de cette repr√©sentation.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nLa s√©rialisation permet de stocker des objets complexes dans un format persistant ou de les transmettre sur un r√©seau.  Elle implique de convertir l'√©tat d'un objet, incluant ses attributs et √©ventuellement ses relations avec d'autres objets, en une s√©quence de bits.  La d√©s√©rialisation est le processus inverse : √† partir de cette s√©quence de bits, elle reconstitue l'objet dans sa forme originale, avec ses attributs et ses relations.\n\nPlusieurs formats et techniques existent pour la s√©rialisation/d√©s√©rialisation :\n\n* **Formats de donn√©es:** JSON, XML, Protocol Buffers, Avro, etc.  Chaque format a ses avantages et inconv√©nients en termes de lisibilit√©, taille des donn√©es, performance et compatibilit√©.\n* **Techniques de s√©rialisation:**  La s√©rialisation peut √™tre impl√©ment√©e de diff√©rentes mani√®res, notamment via la r√©flexion (Java utilise souvent cette m√©thode avec des biblioth√®ques comme Jackson ou Gson), ou via des techniques de g√©n√©ration de code AOT (Ahead-Of-Time) plus performantes.  La r√©flexion implique d'analyser la structure des classes au runtime, ce qui peut √™tre co√ªteux en termes de performance.  Les approches AOT g√©n√®rent du code sp√©cifique pour chaque classe, optimisant ainsi le processus de s√©rialisation/d√©s√©rialisation.\n\n**Exemple (Java avec Jackson):**\n\n```java\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class User {\n    public String name;\n    public int age;\n\n    public User(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public static void main(String[] args) throws Exception {\n        ObjectMapper mapper = new ObjectMapper();\n        User user = new User(\"John Doe\", 30);\n\n        // S√©rialisation en JSON\n        String jsonString = mapper.writeValueAsString(user);\n        System.out.println(\"JSON: \" + jsonString);\n\n        // D√©s√©rialisation √† partir de JSON\n        User user2 = mapper.readValue(jsonString, User.class);\n        System.out.println(\"Name: \" + user2.name + \", Age: \" + user2.age);\n    }\n}\n```\n\nCet exemple montre comment Jackson s√©rialise un objet `User` en JSON et le d√©s√©rialise ensuite.\n\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Persistance des donn√©es:**  Possibilit√© de sauvegarder l'√©tat d'objets dans un stockage persistant (fichiers, bases de donn√©es).\n* **Communication r√©seau:**  Transmission d'objets complexes sur un r√©seau.\n* **Interop√©rabilit√©:**  Utilisation de formats standardis√©s comme JSON ou XML pour l'√©change de donn√©es entre diff√©rents syst√®mes et langages de programmation.\n* **Approches AOT (pour certaines technologies):**  Performance significativement am√©lior√©e par rapport √† la r√©flexion.\n\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© de l'impl√©mentation:**  La conception d'un syst√®me de s√©rialisation/d√©s√©rialisation robuste et efficace peut √™tre complexe.\n* **S√©curit√©:**  Une s√©rialisation mal con√ßue peut pr√©senter des failles de s√©curit√© (par exemple, des attaques de d√©s√©rialisation).\n* **Performances (r√©flexion):**  L'utilisation de la r√©flexion peut √™tre co√ªteuse en termes de performance, surtout pour des objets complexes ou de grands volumes de donn√©es.\n* **Gestion des versions:**  La compatibilit√© entre diff√©rentes versions des sch√©mas de donn√©es peut √™tre un d√©fi.\n\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "53302f5c-252d-4a66-9511-c7a0262ad123",
        "title": "Spring Batch",
        "description": "---\nid: 2c0ef40f-9587-45c4-bef7-b2db691c9065\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nSpring Batch est un framework l√©ger, puissant et complet de traitement par lots pour Java. Il permet de d√©velopper des applications robustes et performantes pour traiter de grands volumes de donn√©es de mani√®re fiable et efficace. Il s'appuie sur des concepts de base comme la lecture, le traitement et l'√©criture de donn√©es par lots, en utilisant une approche de type pipeline.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring Batch automatise le traitement de grands volumes de donn√©es de fa√ßon fiable et efficace.  Il est con√ßu pour des applications qui requi√®rent des op√©rations r√©p√©titives et volumineuses sur les donn√©es, comme le chargement de donn√©es, la transformation de donn√©es, ou la g√©n√©ration de rapports.  Le framework structurait le processus en **Jobs**, qui sont des t√¢ches globales, divis√©s en **Steps**.  Chaque Step consiste en trois phases principales :\n\n* **Read (Lecture):**  Lit les donn√©es depuis une source (base de donn√©es, fichier plat, etc.).  Plusieurs `ItemReader` impl√©mentent des sources vari√©es, telles que `JdbcCursorItemReader` (pour les requ√™tes SQL), `FlatFileItemReader` (pour les fichiers plats), `RepositoryItemReader` (pour les repositories Spring Data).\n\n* **Process (Traitement):** Transforme les donn√©es lues. Un `ItemProcessor` effectue cette transformation.  On peut utiliser des mappers comme MapStruct pour simplifier cette √©tape.\n\n* **Write (Ecriture):** Enregistre les donn√©es trait√©es dans une destination (base de donn√©es, fichier, etc.).  Divers `ItemWriter` sont disponibles, dont `JdbcBatchItemWriter`, `FlatFileItemWriter`, et `RepositoryItemWriter` (pour les repositories Spring Data).\n\nChaque phase utilise des interfaces pour une grande flexibilit√©.  Spring Batch g√®re √©galement la gestion des erreurs, le commit/rollback des transactions, le restarting des jobs en cas d'erreur, et la surveillance de l'ex√©cution. La gestion du chunk (traitement de donn√©es par blocs) optimise les performances.\n\n**Exemple simplifi√© (sans code complet):**  Imaginons un job qui importe des donn√©es d'un fichier CSV dans une base de donn√©es.\n\n1. **Job:** \"ImporterDonn√©esCSV\"\n2. **Step:** \"ImporterDonn√©es\"\n    * **Read:** `FlatFileItemReader` lit les lignes du fichier CSV.\n    * **Process:** `ItemProcessor` transforme chaque ligne en objet Java.\n    * **Write:** `JdbcBatchItemWriter` ins√®re les objets Java dans la base de donn√©es.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Fiabilit√©:** Gestion robuste des erreurs et reprise sur erreur.\n* **Performance:** Traitement par lots optimis√©, gestion des transactions et du chunking.\n* **Flexibilit√©:** Large gamme de lecteurs, processeurs et √©crivains pour diff√©rentes sources et destinations de donn√©es.\n* **Int√©gration Spring:** S'int√®gre parfaitement avec d'autres composants Spring.\n* **D√©bogage et surveillance:** Facilite le suivi et le d√©bogage des jobs.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** Peut √™tre complexe √† mettre en ≈ìuvre pour des t√¢ches simples. La courbe d'apprentissage est assez raide.\n* **Configuration XML (ancienne version):** Bien que la configuration bas√©e sur annotations soit privil√©gi√©e, la configuration XML peut √™tre complexe √† comprendre.\n* **D√©pendances:** N√©cessite plusieurs d√©pendances Spring.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "67a33c81-2bce-4911-ae4d-3080d557425e",
        "title": "Spring Cloud Open Feign",
        "description": "---\nid: a64c1da0-4ff7-4acc-b305-83aeff5d5079\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nSpring Cloud Open Feign est une librairie Java qui simplifie la cr√©ation de clients HTTP pour consommer des API REST.  Elle s'int√®gre parfaitement √† l'√©cosyst√®me Spring Cloud et permet de d√©clarer des interfaces Java qui sont automatiquement traduites en clients HTTP, √©liminant la n√©cessit√© d'√©crire du code boilerplate pour les appels REST.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring Cloud Open Feign repose sur la librairie Feign, mais l'enrichit avec des fonctionnalit√©s sp√©cifiques √† Spring Cloud, notamment l'int√©gration avec Ribbon pour le load balancing et Hystrix pour la gestion des erreurs et la tol√©rance aux pannes.  Au lieu d'√©crire du code pour chaque appel REST (par exemple, avec RestTemplate), on d√©finit une interface Java annot√©e avec des annotations Feign (comme `@GetMapping`, `@PostMapping`, etc.).  Feign se charge ensuite de cr√©er un proxy qui impl√©mente cette interface et g√®re les appels HTTP sous-jacents.\n\n**Exemple:**\n\nImaginons une API REST qui fournit des informations sur les utilisateurs.  On pourrait d√©finir une interface Feign comme suit :\n\n```java\n@FeignClient(name = \"user-service\")\npublic interface UserService {\n\n    @GetMapping(\"/users/{id}\")\n    User getUser(@PathVariable(\"id\") Long id);\n\n    @PostMapping(\"/users\")\n    User createUser(@RequestBody User user);\n}\n```\n\n`@FeignClient(\"user-service\")` indique que cette interface est un client pour un service nomm√© \"user-service\".  Feign se charge ensuite de trouver ce service (g√©n√©ralement via un registre de services comme Eureka) et de cr√©er un proxy qui impl√©mente `UserService`.  On peut ensuite injecter ce proxy dans d'autres classes et l'utiliser comme n'importe quelle autre classe Java :\n\n```java\n@Autowired\nprivate UserService userService;\n\n// ...\n\nUser user = userService.getUser(1L);\n```\n\nSpring Cloud Open Feign g√®re automatiquement les d√©tails de l'appel HTTP, y compris la construction de l'URL, la gestion des en-t√™tes HTTP, la s√©rialisation/d√©s√©rialisation des donn√©es JSON, et le load balancing si plusieurs instances du \"user-service\" sont disponibles.\n\n# Qu'est-ce qui est top ? üëç\n\n* **Simplicit√© et lisibilit√©:**  Le code est beaucoup plus propre et facile √† lire que lorsqu'on utilise `RestTemplate` directement.\n* **D√©claratif:** On d√©finit les appels REST de mani√®re d√©clarative, ce qui rend le code plus maintenable et moins sujet aux erreurs.\n* **Int√©gration Spring Cloud:** S'int√®gre parfaitement avec d'autres composants Spring Cloud comme Ribbon et Hystrix.\n* **Tests facilit√©s:**  Les interfaces Feign sont facilement testables avec des mocks.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension de base de Feign et des annotations Spring.\n* **D√©bogage:**  Le d√©bogage peut √™tre plus difficile que lorsqu'on utilise `RestTemplate` directement, car la logique HTTP est cach√©e derri√®re le proxy Feign.\n* **Complexit√© pour des cas d'utilisation avanc√©s:** Pour des sc√©narios HTTP complexes (gestion de plusieurs types de r√©ponses,  gestion fine des erreurs HTTP non g√©r√©s par Hystrix, ...), il peut √™tre n√©cessaire de recourir √† des configurations et des intercepteurs plus avanc√©s.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n\n(Laisser vide)\n"
    },
    {
        "id": "06c3248f-0cd0-4455-806d-fbc11f2130ae",
        "title": "Spring Cloud Square",
        "description": "---\nid: fba146b1-f075-4072-9323-b9af98af76bd\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nSpring Cloud Square est une biblioth√®que Java open-source qui simplifie la cr√©ation et la gestion de microservices bas√©s sur Spring Boot.  Elle utilise un registre de services (comme Eureka ou Consul) pour permettre aux services de se d√©couvrir et de communiquer entre eux.  Elle s'appuie sur le pattern \"sidecar\" pour injecter des fonctionnalit√©s suppl√©mentaires sans modifier le code des microservices.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring Cloud Square n'est pas une biblioth√®que existante √† ma connaissance. Le lien fourni pointe vers un article de blog Spring de 2021 qui introduit *Spring Cloud 2021*.  Il n'y a pas de mention de \"Spring Cloud Square\".  L'article discute de nouvelles fonctionnalit√©s et am√©liorations dans Spring Cloud, dont l'am√©lioration de la gestion des microservices.  Il n'y a pas de nouvelle biblioth√®que sp√©cifique nomm√©e \"Spring Cloud Square\".\n\nPour clarifier, Spring Cloud (sans \"Square\") fournit des outils pour construire des applications distribu√©es bas√©es sur des microservices.  Ces outils incluent :\n\n* **D√©couverte de services:**  Permet aux microservices de se trouver les uns les autres via un serveur de registre.\n* **Gestion de la configuration:**  Centralise la gestion des param√®tres de configuration.\n* **Gestion de circuit breakers:**  Prot√®ge les applications contre les pannes de services d√©pendants.\n* **Routage intelligent:**  Distribue le trafic entre les instances d'un service.\n\n\nIl est possible que \"Spring Cloud Square\" soit un nom interne, un projet non-officiel, ou une interpr√©tation erron√©e.  Sans plus d'informations, il est impossible de fournir une description pr√©cise de son fonctionnement.  L'int√©gration avec OkHttp et Retrofit est √©galement impossible √† d√©tailler sans une d√©finition claire de \"Spring Cloud Square\".\n\n## Qu'est-ce qui est top ? üëç\n\n(Impossible √† r√©pondre sans une description claire de \"Spring Cloud Square\")\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n(Impossible √† r√©pondre sans une description claire de \"Spring Cloud Square\")\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Si \"Spring Cloud Square\" existait, il serait probablement li√© √† d'autres projets Spring Cloud comme Spring Boot, Eureka, Consul, Ribbon, Hystrix, etc.)\n"
    },
    {
        "id": "c2ae4899-2bd6-4b4b-ae74-f143bf33dfa6",
        "title": "Spring Cloud Stream",
        "description": "---\nid: f64ebe55-d2d7-479a-b490-91a369e08354\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nSpring Cloud Stream est un framework bas√© sur Spring Boot qui simplifie la cr√©ation d'applications microservices qui communiquent de mani√®re asynchrone via des messages.  Il fournit une abstraction au-dessus de diff√©rentes technologies de messagerie comme Kafka, RabbitMQ, etc., permettant de changer de technologie sans modifier le code applicatif.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nSpring Cloud Stream fournit un mod√®le de programmation bas√© sur des flux de donn√©es (streams) et des liaisons (bindings).  Les applications utilisent des interfaces `@Input` et `@Output` pour d√©finir des points d'entr√©e et de sortie pour les messages.  Spring Cloud Stream g√®re la configuration et la connexion √† la technologie de messagerie sous-jacente.\n\nLe framework s'appuie sur les concepts suivants:\n\n* **Bindings:**  Des liens entre l'application et le broker de messages. Ils d√©finissent comment les messages sont envoy√©s et re√ßus.  On peut les configurer √† l'aide de propri√©t√©s.\n* **Destinations:**  Des files d'attente ou des topics (selon la technologie de messagerie) o√π les messages sont envoy√©s et re√ßus.  Le nom de la destination est configur√© via les propri√©t√©s.\n* **Processors:** Composants qui consomment les messages d'une destination et les envoient vers une autre.\n* **Sources:** Composants qui envoient des messages vers une destination.\n* **Sinks:** Composants qui consomment des messages d'une destination.\n\n**Exemple (Kafka):**\n\n```java\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.annotation.StreamListener;\nimport org.springframework.cloud.stream.messaging.Sink;\nimport org.springframework.messaging.Message;\n\n@EnableBinding(Sink.class) // Utilise l'interface Sink fournie par Spring Cloud Stream\npublic class MessageConsumer {\n\n    @StreamListener(Sink.INPUT) // √âcoute les messages sur la destination \"input\"\n    public void receive(Message<String> message) {\n        String payload = message.getPayload();\n        System.out.println(\"Received message: \" + payload);\n        // Traitement du message...\n    }\n}\n```\n\nCe code d√©finit un consommateur de messages qui √©coute sur la destination `input` (d√©finie par d√©faut par `Sink`).  La configuration de Kafka sera g√©r√©e automatiquement par Spring Cloud Stream via les propri√©t√©s d'application.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Abstraction:**  Simplifie l'interaction avec les brokers de messages. Le changement de technologie est facile gr√¢ce √† la configuration.\n* **Simplicit√©:**  Mod√®le de programmation d√©claratif et facile √† utiliser gr√¢ce aux annotations.\n* **Int√©gration Spring Boot:**  Int√©gration transparente avec l'√©cosyst√®me Spring.\n* **√âvolutivit√©:**  Con√ßu pour des applications distribu√©es et √©volutives.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© (potentielle):** La configuration peut devenir complexe pour des sc√©narios avanc√©s.\n* **D√©pendances:**  N√©cessite des d√©pendances suppl√©mentaires pour les diff√©rentes technologies de messagerie.\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension de base des concepts de messagerie asynchrone.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "14875961-7083-4170-b55a-5fcc5c10d848",
        "title": "Spring_ApplicationEvent",
        "description": "---\nid: 9d4a3b37-f1cd-4e24-a3ea-7c477784e113\n---\n# Spring ApplicationEvent\n\n---\n\n# **Rapidement, c'est quoi ? ‚ùì**\n\nUn `ApplicationEvent` dans Spring est un m√©canisme permettant de publier et de g√©rer des √©v√©nements au sein d'une application.  Il permet de d√©-coupler diff√©rentes parties du code et de r√©agir √† des √©v√©nements sp√©cifiques sans avoir besoin d'une connaissance directe des autres composants.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\n`ApplicationEvent` est une classe abstraite dans Spring qui sert de base pour tous les √©v√©nements de l'application.  Pour cr√©er un √©v√©nement personnalis√©, on h√©rite de cette classe et on fournit les donn√©es n√©cessaires.  Spring fournit un m√©canisme d'√©coute (listeners) bas√© sur le pattern \"Observer\".  Lorsqu'un √©v√©nement est publi√© (`ApplicationEventPublisher.publishEvent()`), tous les listeners enregistr√©s qui s'int√©ressent √† ce type d'√©v√©nement sont notifi√©s et peuvent y r√©agir.\n\nLe fonctionnement repose sur :\n\n* **`ApplicationEvent`:**  Classe abstraite repr√©sentant un √©v√©nement.  Contient un champ `source` qui repr√©sente l'objet qui a d√©clench√© l'√©v√©nement.\n* **`ApplicationEventPublisher`:** Interface permettant de publier des √©v√©nements.  L'impl√©mentation la plus courante est `ApplicationContext`.\n* **`ApplicationListener<T extends ApplicationEvent>`:** Interface pour les listeners.  On impl√©mente la m√©thode `onApplicationEvent(T event)` qui sera appel√©e lorsque l'√©v√©nement est publi√©.  Le param√®tre `T` sp√©cifie le type d'√©v√©nement auquel le listener s'abonne.\n* **`@EventListener` annotation:** An annotation based approach that simplifies the definition of listeners. This approach is preferred over explicitly implementing `ApplicationListener`.\n\n**Exemple concret avec annotation `@EventListener`:**\n\n```java\nimport org.springframework.context.event.EventListener;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class MyEventListener {\n\n    @EventListener\n    public void handleMyEvent(MyCustomEvent event) {\n        System.out.println(\"MyCustomEvent received: \" + event.getMessage());\n    }\n}\n\n// D√©finition d'un √©v√©nement personnalis√©\npublic class MyCustomEvent extends ApplicationEvent {\n    private final String message;\n\n    public MyCustomEvent(Object source, String message) {\n        super(source);\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\n\n//Publication de l'√©v√®nement :\n// ApplicationContext applicationContext;\n// applicationContext.publishEvent(new MyCustomEvent(this, \"Hello from event\"));\n```\n\nCet exemple montre comment cr√©er un listener qui √©coute un √©v√©nement personnalis√© (`MyCustomEvent`).  L'annotation `@EventListener` indique √† Spring qu'il faut l'enregistrer comme listener pour ce type d'√©v√©nement.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **D√©couplage:**  Permet de d√©-coupler les diff√©rents composants de l'application.  Les √©metteurs d'√©v√©nements n'ont pas besoin de conna√Ætre les listeners.\n* **Flexibilit√©:**  Facile √† √©tendre et √† adapter √† de nouveaux types d'√©v√©nements.\n* **Simplicit√©:** L'utilisation de l'annotation `@EventListener` rend la d√©claration des listeners tr√®s concise.\n* **Asynchrone (avec conditions):**  L'utilisation de `@Async` sur la m√©thode de l'√©coute permet un traitement asynchrone.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© potentielle:**  Pour des applications tr√®s complexes avec de nombreux √©v√©nements et listeners, la gestion peut devenir difficile.\n* **D√©bogage:**  Le d√©bogage d'√©v√©nements peut √™tre complexe si les listeners ne sont pas correctement configur√©s.\n* **Ordre de traitement non garanti:** Le traitement des √©v√©nements par les listeners n'est pas garanti dans un ordre pr√©cis, sauf si une strat√©gie particuli√®re est mise en place.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "40cef7bb-7d89-483d-91f3-6beec18bfd04",
        "title": "Streamlit",
        "description": "---\nid: 43c514bb-6740-4553-bb6a-8a2186187deb\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nStreamlit est une librairie Python open-source qui permet de cr√©er rapidement et facilement des applications web interactives pour visualiser et partager des donn√©es.  Elle simplifie le processus de d√©veloppement en r√©duisant le besoin de connaissances approfondies en d√©veloppement web frontal.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nStreamlit fournit un framework permettant de construire des applications web √† partir de code Python.  L'interface utilisateur est g√©n√©r√©e automatiquement √† partir du code Python, qui est ex√©cut√© de mani√®re incr√©mentale.  Chaque modification dans le script Python est instantan√©ment refl√©t√©e dans l'application web, permettant un d√©veloppement it√©ratif rapide.\n\nStreamlit utilise des d√©corateurs pour d√©finir les diff√©rents composants de l'application (ex: `@st.cache_data` pour le cache, `@st.cache_resource` pour les ressources, etc.).  Il offre une large gamme de widgets interactifs (boutons, curseurs, s√©lecteurs, etc.) pour interagir avec les donn√©es et des fonctions pour afficher des donn√©es sous diff√©rentes formes (graphiques, tableaux, cartes, etc.) via des librairies comme Matplotlib, Seaborn, Plotly, etc.\n\nVoici un exemple simple :\n\n```python\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\n\nst.title(\"Mon Application Streamlit\")\n\n# G√©n√©rer des donn√©es al√©atoires\ndata = np.random.randn(20, 3)\ndf = pd.DataFrame(data, columns=['A', 'B', 'C'])\n\n# Afficher le dataframe\nst.dataframe(df)\n\n# Afficher un graphique\nst.line_chart(df)\n\n# Ajouter un curseur\nx = st.slider('S√©lectionner une valeur', 0, 100, 50)\nst.write(f\"La valeur s√©lectionn√©e est : {x}\")\n```\n\nCe code cr√©e une application Streamlit simple avec un titre, un tableau de donn√©es, un graphique lin√©aire et un curseur interactif.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **Rapidit√© de d√©veloppement:** Streamlit permet de cr√©er des applications web fonctionnelles tr√®s rapidement, m√™me sans exp√©rience en d√©veloppement web.\n* **Facilit√© d'utilisation:** La syntaxe est intuitive et simple √† apprendre pour les utilisateurs Python.\n* **Mise √† jour en temps r√©el:** Les modifications de code sont instantan√©ment refl√©t√©es dans l'application web.\n* **Int√©gration avec les librairies de visualisation de donn√©es:** Streamlit s'int√®gre facilement avec des librairies populaires comme Matplotlib, Seaborn, Plotly et Altair.\n* **Partage facile:**  Le d√©ploiement et le partage d'applications sont simplifi√©s gr√¢ce √† Streamlit Cloud.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Moins flexible que les frameworks web complets:** Pour des applications web complexes et personnalis√©es, Streamlit peut avoir des limites par rapport √† des frameworks comme React, Angular ou Vue.js.\n* **Performances potentielles:**  Pour les applications traitant des ensembles de donn√©es tr√®s volumineux, les performances peuvent √™tre un probl√®me. L'utilisation de `@st.cache_data` ou de techniques d'optimisation est alors n√©cessaire.\n* **D√©bogage:** Le d√©bogage peut √™tre plus difficile que dans des frameworks web traditionnels car le code est ex√©cut√© de mani√®re incr√©mentale.\n* **S√©curit√©:** Comme pour toute application web, il faut prendre des pr√©cautions pour s√©curiser l'application, surtout si elle est expos√©e publiquement.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "9c6f2d70-5161-4aff-bcc4-a4e7ff073819",
        "title": "Tanstack",
        "description": "---\nid: 721dcca9-837e-464d-be3d-d7676e23332b\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nTanstack est une collection de biblioth√®ques JavaScript open-source de haute qualit√©, principalement ax√©es sur la cr√©ation d'interfaces utilisateur performantes et robustes.  Elle est connue pour ses performances exceptionnelles, sa facilit√© d'utilisation et son approche ax√©e sur les d√©veloppeurs.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nTanstack n'est pas une seule biblioth√®que, mais plut√¥t un √©cosyst√®me de projets interconnect√©s, dont les plus connus sont :\n\n* **`@tanstack/react-query`:**  Une biblioth√®que pour g√©rer facilement l'√©tat de l'application, notamment la r√©cup√©ration et la mise √† jour des donn√©es provenant d'API. Elle g√®re la mise en cache, la pagination, l'optimisation des requ√™tes, et la gestion des erreurs de mani√®re transparente.  Elle permet de simplifier consid√©rablement le d√©veloppement d'applications qui interagissent avec des sources de donn√©es externes.\n\n* **`@tanstack/react-table`:** Une biblioth√®que pour cr√©er des tableaux de donn√©es interactifs et hautement personnalisables. Elle offre des fonctionnalit√©s avanc√©es de tri, de filtrage, de pagination et d'√©dition, tout en maintenant des performances √©lev√©es, m√™me avec des ensembles de donn√©es volumineux.\n\n* **`@tanstack/virtual`:**  Une solution pour le rendu virtuel de listes et de tableaux, permettant de g√©rer efficacement de tr√®s grands ensembles de donn√©es sans compromettre les performances.  Elle est souvent utilis√©e en conjonction avec `react-table`.\n\n* **`@tanstack/router`:** Un routeur client pour React offrant des performances exceptionnelles et une grande flexibilit√©. Il se caract√©rise par son approche d√©clarative et sa capacit√© √† g√©rer efficacement les transitions et la navigation dans une application complexe.\n\n\nCes biblioth√®ques partagent une philosophie commune de performance, de simplicit√© et d'extensibilit√©. Elles sont con√ßues pour √™tre utilis√©es ensemble, mais peuvent √©galement fonctionner ind√©pendamment.  L'utilisation de TypeScript est omnipr√©sente dans l'√©cosyst√®me Tanstack, ce qui contribue √† la robustesse et √† la maintenabilit√© du code.\n\n\n**Exemple (react-query):**\n\n```javascript\nimport { useQuery } from '@tanstack/react-query';\n\nfunction MyComponent() {\n  const { data, isLoading, error } = useQuery(['todos'], () =>\n    fetch('/api/todos').then((res) => res.json())\n  );\n\n  if (isLoading) return 'Loading...';\n  if (error) return 'Error: ' + error.message;\n\n  return (\n    <ul>\n      {data.map((todo) => (\n        <li key={todo.id}>{todo.text}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Performances exceptionnelles:** Tanstack est r√©put√© pour sa vitesse et son efficacit√©, particuli√®rement pour les applications √† grande √©chelle et celles qui manipulent de grands ensembles de donn√©es.\n* **Facilit√© d'utilisation:** Les API sont g√©n√©ralement intuitives et bien document√©es, ce qui facilite l'apprentissage et l'int√©gration.\n* **Extensibilit√©:** Les biblioth√®ques sont con√ßues pour √™tre facilement personnalis√©es et √©tendues pour r√©pondre aux besoins sp√©cifiques des applications.\n* **Bonne communaut√© et support:**  Une communaut√© active et un support efficace contribuent √† la r√©solution rapide des probl√®mes et √† l'am√©lioration continue des biblioth√®ques.\n* **TypeScript:** L'utilisation intensive de TypeScript am√©liore la qualit√© du code et r√©duit les erreurs.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage (l√©g√®rement plus raide pour certains):** Bien que g√©n√©ralement faciles √† utiliser, certaines fonctionnalit√©s plus avanc√©es de `react-table` ou de `react-query` peuvent n√©cessiter un peu plus d'apprentissage.\n* **√âcosyst√®me sp√©cifique √† React (principalement):** Bien que certaines biblioth√®ques aient des adaptations pour d'autres frameworks, l'√©cosyst√®me Tanstack est principalement centr√© sur React.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "c8e1bc04-e275-4998-8f37-1250113c36a0",
        "title": "Terragrunt",
        "description": "---\nid: 7d944ee8-6e62-4068-a425-0eae01d821c8\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nTerragrunt est un outil open-source qui √©tend Terraform pour g√©rer des infrastructures complexes et r√©p√©titives.  Il simplifie le d√©ploiement et la gestion de plusieurs environnements Terraform en fournissant des fonctionnalit√©s de modularit√©, de r√©utilisation de code et de gestion de configuration plus avanc√©es que Terraform seul.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nTerragrunt n'est pas un remplacement de Terraform, mais un wrapper autour de lui. Il ajoute des fonctionnalit√©s pour :\n\n* **R√©utilisation de code:**  Permet de cr√©er des modules r√©utilisables et de les appliquer √† diff√©rents endroits, √©vitant la duplication de code.  Cela se fait par l'inclusion de modules dans un r√©pertoire centralis√© et leur inclusion dans plusieurs projets.\n* **Gestion de configurations multiples:** Facilite la gestion d'environnements distincts (d√©veloppement, staging, production) en utilisant des configurations distinctes avec des variables appropri√©es pour chaque environnement.\n* **Gestion des d√©pendances:**  Permet de d√©finir et de g√©rer les d√©pendances entre diff√©rents blocs Terraform, assurant que les ressources sont cr√©√©es dans l'ordre correct.\n* **Inclusion de fichiers de configuration externes:**  Permet d'externaliser des parties de la configuration dans des fichiers s√©par√©s, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **Gestion des secrets:**  Int√®gre plus facilement la gestion des secrets en permettant de les importer depuis des sources externes.\n\nTerragrunt utilise des fichiers `.hcl` (HashiCorp Configuration Language) pour d√©finir ses configurations.  Un fichier `terragrunt.hcl` est g√©n√©ralement plac√© √† la racine de chaque projet Terraform. Ce fichier sp√©cifie les param√®tres de configuration de Terragrunt, comme les variables, les modules √† inclure et les options d'ex√©cution.\n\n**Exemple de `terragrunt.hcl`:**\n\n```hcl\nterraform {\n  source = \"github.com/gruntwork-io/terragrunt-example-aws-ecs\"\n}\n\n# Cette ligne inclut une configuration externe\ninclude {\n  path = \"config.hcl\"\n}\n\nlocals {\n  environment = \"dev\"\n}\n```\n\nTerragrunt ex√©cute ensuite Terraform en arri√®re-plan, utilisant les configurations d√©finies dans le fichier `terragrunt.hcl` et les fichiers Terraform standard.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Modularit√© et R√©utilisation du Code:**  Am√©liore consid√©rablement la maintenabilit√© et la coh√©rence des infrastructures Terraform.\n* **Gestion simplifi√©e des environnements multiples:**  Facilite le d√©ploiement dans plusieurs environnements avec des configurations sp√©cifiques √† chaque environnement.\n* **Am√©lioration de la collaboration:**  Permet une meilleure organisation et collaboration pour les √©quipes travaillant sur de grands projets Terraform.\n* **Gestion des d√©pendances:**  Assure l'ex√©cution des ressources dans l'ordre correct, ce qui est crucial pour √©viter les erreurs.\n* **Int√©gration ais√©e avec les pipelines CI/CD:**  Peut √™tre facilement int√©gr√© dans des pipelines CI/CD pour automatiser les d√©ploiements.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  N√©cessite d'apprendre une nouvelle couche d'abstraction au-dessus de Terraform.\n* **Complexit√© additionnelle:**  Pour les projets Terraform simples, l'ajout de Terragrunt peut ajouter une complexit√© inutile.\n* **D√©pendance √† un autre outil:**  Ajoute une d√©pendance √† un autre outil, ce qui peut complexifier le processus de maintenance.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "75b5181a-1176-4e8a-b37e-8e2b57659aaa",
        "title": "TinyDb",
        "description": "---\nid: b7cee06e-93fe-4f42-b117-225f172d8611\n---\n## **Rapidement, c'est quoi ? ‚ùì**\n\nTinyDB est une petite base de donn√©es NoSQL orient√©e document pour Python.  Elle stocke les donn√©es dans un simple fichier JSON, ce qui la rend facile √† utiliser et √† int√©grer dans des projets Python.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nTinyDB est une base de donn√©es embarqu√©e, ce qui signifie qu'elle ne n√©cessite pas de serveur s√©par√©. Elle utilise un fichier JSON pour stocker les donn√©es, ce qui facilite son utilisation et son d√©ploiement.  Elle supporte les op√©rations CRUD (Cr√©er, Lire, Mettre √† jour, Supprimer) sur des documents JSON.  Contrairement aux bases de donn√©es relationnelles, TinyDB ne repose pas sur un sch√©ma fixe ; vous pouvez stocker des documents JSON de structures diff√©rentes dans la m√™me collection.\n\nTinyDB offre des fonctionnalit√©s de requ√™te puissantes via une API intuitive. Vous pouvez effectuer des recherches sur des champs sp√©cifiques, utiliser des op√©rateurs de comparaison (>, <, >=, <=, ==, !=), et combiner plusieurs crit√®res de recherche.\n\n**Exemple:**\n\n```python\nfrom tinydb import TinyDB, Query\n\n# Cr√©er une instance de TinyDB (cr√©e le fichier si inexistant)\ndb = TinyDB('mydb.json')\n\n# Cr√©er une table (collection)\ntable = db.table('users')\n\n# Ins√©rer des donn√©es\ntable.insert({'name': 'Alice', 'age': 30})\ntable.insert({'name': 'Bob', 'age': 25})\n\n# Requ√™te: trouver un utilisateur avec l'age > 25\nUser = Query()\nresult = table.search(User.age > 25)\nprint(result)\n\n# Mettre √† jour un document\ntable.update({'age': 31}, User.name == 'Alice')\n\n# Supprimer un document\ntable.remove(User.name == 'Bob')\n\n# Fermer la connection\ndb.close()\n```\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Simplicit√©:**  Extr√™mement facile √† utiliser et √† apprendre, id√©ale pour les petits projets ou les prototypes.\n* **Lightweight:**  N'a pas besoin d'un serveur, ce qui la rend portable et facile √† d√©ployer.\n* **Int√©gration facile avec Python:** S'int√®gre parfaitement dans les applications Python.\n* **Stockage persistant:**  Les donn√©es sont persist√©es dans un fichier JSON, facile √† sauvegarder et √† restaurer.\n* **API intuitive:** Les requ√™tes sont faciles √† √©crire et √† comprendre.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Performance:**  Peut devenir lente avec de tr√®s grandes quantit√©s de donn√©es car elle est bas√©e sur un fichier JSON.  Non adapt√©e aux applications haute performance ou √† forte charge.\n* **Fonctionnalit√©s limit√©es:**  Ne propose pas toutes les fonctionnalit√©s d'une base de donn√©es NoSQL compl√®te (par exemple, indexation complexe, transactions atomiques robustes).\n* **Scalabilit√©:**  Difficult√© √† g√©rer la croissance importante des donn√©es et des utilisateurs.  Non adapt√©e aux applications distribu√©es.\n* **S√©curit√©:**  La s√©curit√© d√©pend de la s√©curit√© du syst√®me de fichiers.  Pas de m√©canismes de s√©curit√© int√©gr√©s sophistiqu√©s.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "448d0047-a90c-4db7-b45a-835e4bad9237",
        "title": "Uv",
        "description": "---\nid: c1b3650e-bf9c-41f9-9ec6-bde23e8c5732\n---\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nUv est un outil en ligne de commande qui g√®re les d√©pendances des projets Python.  Contrairement √† pip, qui est √©crit en Python, Uv est impl√©ment√© en Rust, ce qui lui conf√®re une vitesse d'ex√©cution et une robustesse accrues. Il utilise un syst√®me de r√©solution de d√©pendances pour identifier et installer les packages n√©cessaires, en tenant compte des versions et des conflits possibles.  Il g√®re √©galement la cr√©ation d'environnements virtuels isol√©s pour chaque projet, permettant ainsi une meilleure gestion des d√©pendances sp√©cifiques √† chaque projet.  L'utilisation d'Uv se fait g√©n√©ralement via des fichiers de configuration (comme `pyproject.toml`), qui sp√©cifient les d√©pendances du projet.  Uv lit ces fichiers, t√©l√©charge les paquets depuis des r√©f√©rentiels (comme PyPI), et les installe dans l'environnement virtuel appropri√©.\n\n\n**Exemple d'utilisation (hypoth√©tique):**\n\nSupposons un `pyproject.toml` contenant :\n\n```toml\n[tool.uv.dependencies]\nrequests = \"2.28.2\"\nnumpy = \">=1.24.0\"\n```\n\nLa commande `uv install` analyserait ce fichier, t√©l√©chargerait `requests` version 2.28.2 et une version compatible de `numpy` (au moins 1.24.0), et les installerait dans l'environnement virtuel actif.\n\n\n---\n\n# Qu'est-ce qui est top ? üëç\n\n* **Rapidit√©:** √âtant √©crit en Rust, Uv est potentiellement beaucoup plus rapide que pip pour l'installation et la r√©solution de d√©pendances.\n* **Fiabilit√©:** Rust offre une meilleure gestion des erreurs et une s√©curit√© m√©moire accrue par rapport √† Python, ce qui peut rendre Uv plus robuste et moins sujet aux plantages.\n* **Gestion des d√©pendances am√©lior√©e:**  Uv pourrait offrir des fonctionnalit√©s de gestion des d√©pendances plus avanc√©es (bien que cela d√©pende de son impl√©mentation).\n* **Int√©gration avec `pyproject.toml`:** L'utilisation de `pyproject.toml` est une pratique courante et permet une meilleure gestion du projet.\n\n\n---\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Maturit√©:**  En tant que nouvel outil, Uv pourrait manquer de fonctionnalit√©s ou de stabilit√© par rapport √† un outil mature comme pip.\n* **Adoption:**  Le manque d'adoption pourrait limiter la communaut√© de soutien et la disponibilit√© des ressources.\n* **Compatibilit√©:** Il pourrait exister des incompatibilit√©s avec certains packages ou outils existants.\n* **D√©pendances:**  Uv lui-m√™me a des d√©pendances, ce qui peut introduire une complexit√© suppl√©mentaire.\n\n\n---\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "e8deee3f-007b-48f4-a9de-78ab0e076b6d",
        "title": "WCAG",
        "description": "---\nid: f10ac51f-8930-4fe5-81f1-99355f3e8d4d\n---\n## **Rapidement, c'est quoi ? ‚ùì**\n\nLes WCAG (Web Content Accessibility Guidelines) sont un ensemble de lignes directrices internationales pour rendre les sites web et le contenu web accessibles √† tous, y compris les personnes handicap√©es.  Elles visent √† assurer que le web soit utilisable par le plus grand nombre possible de personnes, ind√©pendamment de leurs capacit√©s.\n\n---\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLes WCAG d√©finissent des crit√®res de r√©ussite pour l'accessibilit√© web, regroup√©s en quatre principes fondamentaux :\n\n* **Percevable (Perceivable):**  L'information et les composants de l'interface utilisateur doivent √™tre pr√©sent√©s aux utilisateurs de mani√®re qu'ils puissent les percevoir.  Cela inclut des crit√®res sur le texte alternatif pour les images, les l√©gendes pour les vid√©os, le contraste des couleurs, etc.\n\n* **Op√©rable (Operable):** L'interface utilisateur doit √™tre op√©rable.  Cela signifie que les utilisateurs doivent pouvoir utiliser l'interface utilisateur.  Des crit√®res concernent la navigation au clavier, le temps de saisie, les saisies inappropri√©es, etc.\n\n* **Compr√©hensible (Understandable):** L'information et l'utilisation de l'interface utilisateur doivent √™tre compr√©hensibles.  Cela implique des crit√®res sur la lisibilit√©, la pr√©visibilit√© et la coh√©rence du site.\n\n* **Robuste (Robust):** Le contenu doit √™tre robuste, c'est-√†-dire compatible avec une large gamme de technologies d'assistance.\n\nChaque principe est d√©clin√© en plusieurs crit√®res de r√©ussite, class√©s par niveaux de s√©v√©rit√© (A, AA, AAA).  Le niveau AA est g√©n√©ralement consid√©r√© comme le minimum pour une bonne accessibilit√©.\n\n**Exemple concret :** Une image d'un chat sans texte alternatif (\"alt text\") viole le principe de perceptibilit√©. Un utilisateur utilisant un lecteur d'√©cran ne pourra pas comprendre ce que repr√©sente l'image.  L'ajout d'un texte alternatif (\"alt text\" = \"Un chat mignon\") rend l'image accessible.\n\n**Exemple de code (HTML) illustrant un bon contraste:**\n\n```html\n<p style=\"color: white; background-color: #000080;\">Ce texte a un bon contraste.</p>\n```\n\n```html\n<p style=\"color: black; background-color: #FFFFE0;\">Ce texte a un contraste insuffisant</p>\n```\n\nL'utilisation de v√©rificateurs d'accessibilit√© (outils automatis√©s) peut aider √† identifier les probl√®mes d'accessibilit√©. Cependant, ils ne d√©tectent pas tous les probl√®mes, une revue manuelle est essentielle.\n\n\n---\n\n# Qu'est-ce qui est top ? üëç\n\n* **Standard internationalement reconnu:** Les WCAG sont largement accept√©es comme la norme pour l'accessibilit√© web.\n* **Cadre complet:** Elles couvrent un large √©ventail de probl√®mes d'accessibilit√©.\n* **Niveaux de conformit√©:**  Permettent d'adapter le niveau d'accessibilit√© aux ressources disponibles.\n* **Am√©liore l'exp√©rience utilisateur pour tous:**  Un site web accessible est g√©n√©ralement plus facile √† utiliser pour tout le monde, m√™me les utilisateurs sans handicap.\n\n\n---\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La compr√©hension et la mise en ≈ìuvre compl√®te des WCAG peuvent √™tre complexes, n√©cessitant des comp√©tences sp√©cifiques.\n* **Co√ªt:** Rendre un site web pleinement accessible peut n√©cessiter des efforts importants et des co√ªts de d√©veloppement suppl√©mentaires.\n* **Tests manuels n√©cessaires:** Les outils automatis√©s ne suffisent pas √† garantir une accessibilit√© compl√®te. Des tests manuels approfondis sont indispensables.\n* **Evolution constante:** Les WCAG √©voluent r√©guli√®rement, n√©cessitant une mise √† jour continue des connaissances et des pratiques.\n\n\n---\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "6a27445d-5e3c-4435-9e55-9dd9103a5d81",
        "title": "Watch Tower Docker",
        "description": "---\nid: ba859634-f672-4bdf-92fa-d8a6e6ceec08\n---\n# Rapidement c'est quoi‚ùì\n\nWatch Tower est un outil Docker qui automatise les mises √† jour des conteneurs. Il surveille r√©guli√®rement les nouvelles versions d'images sur un registre (Docker Hub par d√©faut, ou un registre priv√©) et met √† jour les conteneurs en cours d'ex√©cution lorsqu'une nouvelle version est disponible.  Id√©al pour les environnements de test et les homelabs.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nWatch Tower est un conteneur Docker l√©ger qui fonctionne comme un agent de surveillance.  Il est configur√© pour surveiller un ou plusieurs autres conteneurs.  Pour chaque conteneur surveill√©, Watch Tower v√©rifie p√©riodiquement la disponibilit√© de nouvelles images sur un registre Docker sp√©cifi√© (Docker Hub par d√©faut, mais configurable pour des registres priv√©s, n√©cessitant alors des identifiants).  Cette v√©rification se fait en comparant l'ID de l'image courante du conteneur avec la derni√®re version disponible sur le registre.\n\nSi une nouvelle version est d√©tect√©e, Watch Tower t√©l√©charge automatiquement la nouvelle image.  Puis, il arr√™te proprement l'ancien conteneur, d√©marre un nouveau conteneur bas√© sur la nouvelle image, et conserve les donn√©es du conteneur pr√©c√©dent gr√¢ce √† des volumes persistants s'ils sont d√©finis.  Le processus est transparent pour l'utilisateur, qui ne devrait pas remarquer d'interruption de service (√† condition d'avoir configur√© correctement les volumes de donn√©es).  La configuration se fait principalement via des variables d'environnement, ce qui simplifie son d√©ploiement et sa customisation.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Automatisation des mises √† jour:** √âlimine le besoin de mises √† jour manuelles des conteneurs, r√©duisant le risque d'erreur et le travail manuel.\n* **Facilit√© d'utilisation:**  Simple √† configurer et √† d√©ployer gr√¢ce √† son architecture en conteneur et √† sa configuration par variables d'environnement.\n* **Support des registres priv√©s:** Permet de g√©rer les mises √† jour d'images h√©berg√©es sur des registres priv√©s, crucial pour les environnements professionnels ou les configurations plus s√©curis√©es.\n* **Mise √† jour transparente (en th√©orie):**  Les mises √† jour se font avec une interruption minimale, gr√¢ce √† l'arr√™t et le red√©marrage automatis√© du conteneur.\n* **L√©ger et peu gourmand en ressources:**  N'affecte pas significativement les performances du syst√®me h√¥te.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **D√©pendances:** N√©cessite Docker et un acc√®s √† un registre Docker (public ou priv√©).\n* **Complexit√© potentielle pour des configurations avanc√©es:** Bien que simple √† utiliser de base, la gestion de sc√©narios complexes (d√©pendances entre conteneurs, configurations de volumes complexes) peut demander plus d'attention.\n* **Potentiel de probl√®mes en cas de mauvaise configuration des volumes:**  Une mauvaise configuration des volumes de donn√©es peut entra√Æner la perte de donn√©es lors d'une mise √† jour.  Il est crucial de bien d√©finir et de tester la persistance des donn√©es.\n* **Pas de gestion des configurations internes du conteneur:**  Watchtower met √† jour uniquement l'image du conteneur.  Les configurations internes au conteneur doivent √™tre g√©r√©es s√©par√©ment (par exemple, via des fichiers de configuration persistants).\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "5ce536ee-9346-4042-888f-3641480236b6",
        "title": "Wiremock",
        "description": "---\nid: 31caea1a-0cb7-434b-89d8-ba31405f704b\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nWireMock est un outil open-source permettant de cr√©er facilement des mocks d'API.  Il simule des services web pour les tests, renvoyant des r√©ponses pr√©-d√©finies √† des requ√™tes sp√©cifiques.  Cela permet de d√©boucler les tests des applications qui d√©pendent d'autres services sans avoir √† les d√©marrer ou √† les utiliser en production.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nWireMock est un serveur ind√©pendant qui √©coute sur un port donn√©.  On le configure pour r√©pondre √† des requ√™tes HTTP (GET, POST, PUT, DELETE, etc.) avec des r√©ponses sp√©cifi√©es.  Ces r√©ponses peuvent √™tre statiques (un fichier JSON, XML, etc.) ou dynamiques (g√©n√©r√©es √† la vol√©e en fonction de la requ√™te).  La configuration se fait g√©n√©ralement via des fichiers JSON ou YAML, d√©finissant des mappings entre des requ√™tes et des r√©ponses.\n\nVoici un exemple de configuration YAML simple :\n\n```yaml\n---\nrequest:\n  method: GET\n  url: /users\nresponse:\n  status: 200\n  body:\n    - id: 1\n      name: John Doe\n    - id: 2\n      name: Jane Doe\n```\n\nCe mapping indique √† WireMock de r√©pondre √† une requ√™te GET sur `/users` avec un code de statut 200 et un corps JSON contenant une liste de deux utilisateurs.\n\nWireMock offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Gestion des retards:** Simuler des temps de r√©ponse lents.\n* **Validation des requ√™tes:** V√©rifier que les requ√™tes envoy√©es par l'application sont conformes aux attentes.\n* **Stubbing:** Fournir des r√©ponses pr√©d√©finies pour des requ√™tes sp√©cifiques.\n* **Mocking:** Simuler le comportement d'un service distant.\n* **Int√©gration avec des frameworks de test:**  WireMock s'int√®gre facilement avec de nombreux frameworks de test (JUnit, pytest, etc.).\n\n## Qu'est-ce qui est top ? üëç\n\n* **Facile √† utiliser:** La configuration est simple et intuitive, m√™me pour des cas d'utilisation complexes.\n* **Flexible:**  Permet de simuler un large √©ventail de sc√©narios de tests.\n* **Open-source:**  Gratuit et la communaut√© contribue √† son am√©lioration constante.\n* **Large choix de langages et d'int√©grations:**  Disponible pour diff√©rents langages et frameworks.\n* **Gestion des d√©pendances:** D√©couple les tests de l'infrastructure et des services externes.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© pour les cas tr√®s complexes:**  Pour des simulations extr√™mement sophistiqu√©es, la configuration peut devenir complexe.\n* **Courbe d'apprentissage l√©g√®re:** Bien que simple √† utiliser de base, la ma√Ætrise de toutes ses fonctionnalit√©s peut demander un certain temps.\n* **Maintenance des mocks:**  Le maintien des mocks √† jour avec l'√©volution de l'API peut demander de l'effort.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "27e9c2f4-bd91-4a4d-be4e-f01ce1f058f8",
        "title": "io_uring",
        "description": "---\nid: 68a5471b-4061-46f5-b990-d0851a73aaf7\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nio_uring est une interface syst√®me Linux permettant d'effectuer des op√©rations d'E/S (entr√©e/sortie) de mani√®re asynchrone et tr√®s performante.  Elle am√©liore consid√©rablement l'efficacit√© du traitement des requ√™tes d'E/S par rapport aux m√©thodes traditionnelles comme les appels syst√®me `read()` et `write()`.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nio_uring est une interface bas√©e sur des anneaux (rings) pour la communication entre l'espace utilisateur et le noyau.  Au lieu d'effectuer des appels syst√®me individuels pour chaque op√©ration d'E/S,  l'application soumet un ensemble de requ√™tes en bloc √† un anneau de soumission (submission queue). Le noyau traite ces requ√™tes et renvoie les r√©sultats dans un anneau de compl√©tion (completion queue). Cette approche r√©duit consid√©rablement le contexte switching et la surcharge li√©e aux appels syst√®me.\n\nio_uring supporte un large √©ventail d'op√©rations, notamment :\n\n* **Op√©rations de fichiers:** `read`, `write`, `open`, `close`, `fsync`, `fdatasync`, etc.\n* **Op√©rations de sockets:** `accept`, `connect`, `recv`, `send`, etc.\n* **Op√©rations de gestion de fichiers:** `stat`, `ftruncate`, `rename`, etc.\n* **Op√©rations de timers:**  Permet de g√©rer des timers de mani√®re asynchrone.\n* **Op√©rations de signalisation:**  Permet de g√©rer les signaux de mani√®re asynchrone.\n\n\n**Fonctionnement interne (simplifi√©):**\n\n1. **Soumission des requ√™tes:** L'application remplit une structure de donn√©es repr√©sentant les requ√™tes d'E/S et les place dans l'anneau de soumission.\n2. **Traitement par le noyau:** Le noyau r√©cup√®re les requ√™tes de l'anneau de soumission et les traite concurremment.\n3. **Compl√©tion des requ√™tes:**  Une fois les requ√™tes trait√©es, le noyau place les r√©sultats (codes de retour, donn√©es, etc.) dans l'anneau de compl√©tion.\n4. **R√©cup√©ration des r√©sultats:** L'application lit l'anneau de compl√©tion pour r√©cup√©rer les r√©sultats des op√©rations d'E/S.\n\n**Exemple (concept simplifi√© en C):**\n\n```c\n// ... (Initialisation io_uring) ...\n\nstruct io_uring_sqe *sqe = io_uring_get_sqe(&ring);\nio_uring_prep_read(sqe, fd, buffer, size, offset);\nio_uring_submit(&ring); // Envoie les requ√™tes au noyau\n\n// ... (Attente de la compl√©tion des requ√™tes via io_uring_wait_cqe) ...\n\n// ... (R√©cup√©ration des r√©sultats depuis l'anneau de compl√©tion) ...\n```\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Performances exceptionnelles:** io_uring offre des performances bien sup√©rieures √† celles des appels syst√®mes traditionnels, notamment pour les applications √† forte intensit√© d'E/S.\n* **Faible latence:** La r√©duction du contexte switching et la gestion asynchrone permettent de r√©duire la latence des op√©rations d'E/S.\n* **Scalabilit√©:** io_uring est con√ßu pour √™tre scalable et capable de g√©rer un grand nombre de requ√™tes simultan√©es.\n* **Flexibilit√©:**  Supporte une grande vari√©t√© d'op√©rations d'E/S.\n* **Efficacit√© √©nerg√©tique:** La r√©duction des appels syst√®me diminue la consommation d'√©nergie.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√©:**  L'impl√©mentation d'applications utilisant io_uring est plus complexe que l'utilisation d'appels syst√®me classiques.  N√©cessite une bonne compr√©hension de la programmation asynchrone.\n* **Sp√©cifique √† Linux:** io_uring est une fonctionnalit√© sp√©cifique au noyau Linux, et n'est donc pas portable vers d'autres syst√®mes d'exploitation.\n* **D√©bogage:** Le d√©bogage des applications utilisant io_uring peut √™tre plus difficile que celui des applications utilisant des appels syst√®me synchrones.\n* **Support limit√© dans certaines biblioth√®ques:**  Certaines biblioth√®ques ne supportent pas encore nativement io_uring, n√©cessitant une impl√©mentation manuelle.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "7c30816c-6780-447e-972e-751ecdd9187d",
        "title": "n8n",
        "description": "---\nid: 97286cb2-9836-4dd2-b5f6-0885a22ca5c7\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nn8n est une plateforme d'automatisation open-source, bas√©e sur le workflow, permettant de connecter diff√©rents services et applications entre eux sans √©crire de code.  Elle fonctionne via une interface visuelle intuitive o√π l'on peut cr√©er des flux de travail (workflows) pour automatiser des t√¢ches r√©p√©titives.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nn8n est un outil de \"low-code/no-code\" qui permet de construire des workflows complexes en connectant divers services web gr√¢ce √† des \"nodes\".  Chaque node repr√©sente une action sp√©cifique, comme envoyer un email, t√©l√©charger un fichier, ou interagir avec une base de donn√©es.  Ces nodes sont connect√©es entre elles pour former un flux de travail.  n8n prend en charge un large √©ventail de protocoles et de services via des int√©grations (connecteurs) pr√©d√©finies, et il est extensible gr√¢ce √† la cr√©ation de nodes personnalis√©es.\n\nLe fonctionnement se base sur un syst√®me d'ex√©cution asynchrone.  Les workflows ne sont pas ex√©cut√©s de mani√®re lin√©aire, mais plut√¥t de mani√®re parall√®le et asynchrone.  Chaque node s'ex√©cute de mani√®re ind√©pendante, ce qui permet une grande flexibilit√© et une meilleure gestion des erreurs.\n\n**Exemple concret : Automatisation de la gestion des leads**\n\nImaginez un workflow n8n qui collecte des leads depuis un formulaire sur un site web (node \"HTTP Request\").  Ces donn√©es sont ensuite envoy√©es √† une base de donn√©es (node \"Database\").  Si le lead correspond √† certains crit√®res, un email est envoy√© √† l'√©quipe de vente (node \"Email\").  En cas d'√©chec, une notification est envoy√©e via Slack (node \"Slack\").  Tout cela sans √©crire une seule ligne de code, en reliant simplement des nodes pr√©existantes.\n\n\n**Fonctionnement interne (simplifi√©):**\n\nn8n est une application Node.js qui utilise une base de donn√©es pour stocker les workflows et leurs ex√©cutions.  L'interface utilisateur est une application web qui permet de cr√©er, √©diter et ex√©cuter les workflows.  L'ex√©cution des nodes est g√©r√©e par un moteur d'ex√©cution interne qui utilise des workers pour traiter les t√¢ches en parall√®le.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Open-source et gratuit:**  n8n est open-source, ce qui permet une grande transparence et une communaut√© active pour le support et le d√©veloppement.  Il est gratuit √† utiliser, m√™me pour les d√©ploiements en production.\n* **Flexibilit√© et extensibilit√©:**  Le large choix de nodes et la possibilit√© de cr√©er des nodes personnalis√©es offrent une grande flexibilit√© pour automatiser presque toutes les t√¢ches.\n* **Interface utilisateur intuitive:** L'interface visuelle facilite la cr√©ation et la gestion des workflows, m√™me pour les utilisateurs sans exp√©rience en programmation.\n* **Scalabilit√©:** n8n peut √™tre d√©ploy√© sur diff√©rentes infrastructures, des machines locales aux solutions cloud, pour g√©rer des workflows de toutes tailles.\n* **Grande vari√©t√© d'int√©grations:**  Une vaste biblioth√®que de nodes permet de se connecter √† de nombreux services populaires.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage initiale (l√©g√®re):**  Bien que l'interface soit intuitive, la compr√©hension du fonctionnement des workflows et des nodes peut prendre un peu de temps au d√©but.\n* **D√©bogage complexe (pour workflows avanc√©s):** Le d√©bogage des workflows complexes peut √™tre difficile, surtout pour les utilisateurs non-familiers avec le concept de workflow asynchrone.\n* **Gestion de la s√©curit√©:**  La s√©curit√© d√©pend de la configuration du serveur et des int√©grations utilis√©es. Une mauvaise configuration peut exposer des donn√©es sensibles.\n* **D√©pendance √† la disponibilit√© d'internet:** n8n n√©cessite une connexion internet pour fonctionner correctement, car la plupart des nodes interagissent avec des services externes.\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "c1ff4ce7-6316-4843-bcbe-8ebfc06c2c34",
        "title": "protobuf",
        "description": "---\nid: 8ef8f16f-6955-49c9-858e-e5c803104b27\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nProtocol Buffers (protobuf) est un syst√®me de s√©rialisation de donn√©es open source d√©velopp√© par Google.  Il permet de d√©finir des structures de donn√©es (messages) dans un langage descriptif simple (`.proto`), puis de g√©n√©rer automatiquement du code dans diff√©rents langages (Java, C++, Python, Go, etc.) pour encoder et d√©coder ces structures.  Cela permet une communication efficace et interop√©rable entre diff√©rents syst√®mes.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nProtobuf d√©finit un langage de description d'interface (IDL) pour sp√©cifier les structures de donn√©es.  Un fichier `.proto` d√©crit les messages, contenant des champs de diff√©rents types (entier, cha√Æne de caract√®res, bool√©en, nombres √† virgule flottante, tableaux, structures imbriqu√©es, etc.).  Le compilateur Protobuf (`protoc`) lit ce fichier et g√©n√®re du code source pour le langage cible. Ce code fournit des fonctions pour:\n\n* **S√©rialiser (encoder):** Convertir une structure de donn√©es en un flux d'octets.  Ce flux est compact et efficace en termes d'espace m√©moire.\n* **D√©s√©rialiser (d√©coder):** Convertir un flux d'octets en une structure de donn√©es.\n\n**Exemple de fichier `.proto`:**\n\n```protobuf\nsyntax = \"proto3\";\n\nmessage Person {\n  string name = 1;\n  int32 id = 2;\n  string email = 3;\n}\n```\n\nCe fichier d√©finit un message `Person` avec trois champs : `name`, `id`, et `email`.  Apr√®s compilation, le code g√©n√©r√© fournira des classes ou des structures pour manipuler des objets `Person` et les encoder/d√©coder en octets.\n\n**Avantages de la s√©rialisation:**\n\n* **Efficacit√©:** Protobuf g√©n√®re des formats binaires compacts, plus petits et plus rapides √† traiter que les formats textuels comme le JSON ou le XML.\n* **Interop√©rabilit√©:** Le m√™me fichier `.proto` peut √™tre utilis√© pour g√©n√©rer du code dans diff√©rents langages, facilitant la communication entre des syst√®mes h√©t√©rog√®nes.\n* **√âvolutivit√©:**  Il est possible d'ajouter de nouveaux champs √† un message sans casser la compatibilit√© avec les anciens clients.  Le syst√®me g√®re les champs inconnus.\n* **Performances:** La s√©rialisation et la d√©s√©rialisation sont rapides et optimis√©es.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Efficacit√© et performance:**  Format compact et rapidit√© de s√©rialisation/d√©s√©rialisation.\n* **Interop√©rabilit√© multi-langage:**  Support d'un large √©ventail de langages de programmation.\n* **√âvolutivit√© et compatibilit√© ascendante:**  Ajout facile de nouveaux champs sans rupture de compatibilit√©.\n* **Bonne documentation et communaut√© active:**  Ressources et support disponibles.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** N√©cessite de comprendre le syst√®me de d√©finition de messages et l'utilisation du compilateur `protoc`.\n* **Format binaire non humainement lisible:**  Le format s√©rialis√© est binaire, rendant le d√©bogage plus difficile que pour les formats textuels.\n* **D√©pendance au compilateur:**  N√©cessite l'utilisation du compilateur `protoc` pour g√©n√©rer le code.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "3cba1234-4473-42ca-81cb-131e4e4bca73",
        "title": "Racine",
        "description": ""
    },
    {
        "id": "8b9b4ca8-2a9a-4af3-96cf-7aabd0fc88ea",
        "title": "Concept supprim√©",
        "description": ""
    },
    {
        "id": "a1786998-f5b9-49ba-95c3-fa9c14e40413",
        "title": "AWS Lambda",
        "description": "---\nid: 574373b1-97bf-4179-87b9-88dc8fc613cf\n---\n# Rapidement c'est quoi‚ùì\n\nAWS Lambda est un service [[Function as a Service (FaaS)]] d'[[AWS]].  Il permet d'ex√©cuter du code sans g√©rer d'infrastructure serveur.  Vous fournissez le code, et [[AWS]] s'occupe du reste.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAWS Lambda est un service de calcul sans serveur qui permet aux d√©veloppeurs d'ex√©cuter du code en r√©ponse √† des √©v√©nements sans provisionner ou g√©rer des serveurs.  Vous √©crivez votre code (fonctions) dans plusieurs langages support√©s ([[Node.js]], [[Python]], [[Java]], [[C#]], [[Go]], [[Ruby]], etc.), le d√©ployez sur [[AWS]], et Lambda s'occupe de l'ex√©cution, du scaling automatique et de la facturation uniquement en fonction de l'utilisation effective.  Chaque fonction est d√©clench√©e par un √©v√©nement, tel qu'une modification dans un [[Bucket S3]] , une requ√™te [[API Gateway]], une entr√©e dans une file [[SQS]], ou un √©v√®nement planifi√© avec [[CloudWatch Events]].\n\nLambda g√®re automatiquement le scaling : si plusieurs √©v√©nements se produisent simultan√©ment, Lambda lance plusieurs instances de votre fonction pour g√©rer la charge.  L'inverse est √©galement vrai : si aucune requ√™te n'est effectu√©e, aucune ressource n'est consomm√©e et vous ne payez rien.  La gestion des ressources (m√©moire, temps d'ex√©cution, etc.) est d√©finie lors de la configuration de la fonction.  Lambda propose √©galement des fonctionnalit√©s avanc√©es comme les versions, les alias, les couches (pour partager du code commun entre plusieurs fonctions) et l'int√©gration avec d'autres services [[AWS]].  Le monitoring et le logging sont int√©gr√©s via [[CloudWatch]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Sans serveur (Serverless):** Pas besoin de g√©rer d'infrastructure, ce qui r√©duit consid√©rablement le co√ªt et la complexit√©.\n* **Scaling automatique:** Lambda s'adapte automatiquement √† la demande, garantissant la disponibilit√© et la performance.\n* **Facturation √† l'utilisation:** Vous ne payez que pour le temps d'ex√©cution effectif de votre code.\n* **Int√©gration avec l'√©cosyst√®me [[AWS]]:**  S'int√®gre facilement avec de nombreux autres services [[AWS]], permettant de cr√©er des applications complexes et robustes.\n* **Langages multiples support√©s:** Large choix de langages de programmation pour d√©velopper vos fonctions.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Dur√©e d'ex√©cution limit√©e:**  Les fonctions Lambda ont une dur√©e d'ex√©cution maximale (variable selon la configuration).  Les t√¢ches longues doivent √™tre trait√©es diff√©remment (par exemple, en utilisant des files d'attente et des fonctions plus courtes).\n* **D√©bogage plus complexe:** Le d√©bogage peut √™tre plus difficile que dans une application traditionnelle, n√©cessitant des outils et des techniques sp√©cifiques.\n* **Cold starts:** La premi√®re ex√©cution d'une fonction peut prendre un peu plus de temps (cold start), ce qui peut affecter les performances pour les requ√™tes occasionnelles.\n* **Verrouillage fournisseur:**  Le code est ex√©cut√© sur l'infrastructure AWS, ce qui cr√©e une d√©pendance envers ce fournisseur.\n* **Gestion des √©tats:** La persistance des donn√©es entre les ex√©cutions de fonctions n√©cessite l'utilisation de services externes comme [[DynamoDB]].\n\n---\n# A quoi c'est li√© ? ü™¢\n\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "f9aee61a-9901-45a2-b522-c3dd3d9f0f52",
        "title": "Certification Java 17 - Acc√®s aux Bases de Donn√©es avec JDBC",
        "description": "---\nid: 8b4f3380-cc59-43fe-baca-4e83b06bb405\n---\n## **11.1. Connexion √† une base de donn√©es (`DriverManager`, `DataSource`)**\n\nJDBC (**Java Database Connectivity**) permet √† une application Java de se connecter √† une base de donn√©es.\n\n### **1. Chargement du driver JDBC**\n\nüìå **Depuis Java 6, le chargement est automatique si le driver est dans le classpath.**\n\n```java\nClass.forName(\"org.postgresql.Driver\"); // PostgreSQL\nClass.forName(\"com.mysql.cj.jdbc.Driver\"); // MySQL\n```\n\nüìå **Plus besoin de `Class.forName()` avec JDBC 4.0+.**\n\n---\n\n### **2. Connexion avec `DriverManager`**\n\n```java\nimport java.sql.*;\n\npublic class ConnexionJDBC {\n    public static void main(String[] args) {\n        String url = \"jdbc:mysql://localhost:3306/ma_base\";\n        String user = \"root\";\n        String password = \"password\";\n\n        try (Connection conn = DriverManager.getConnection(url, user, password)) {\n            System.out.println(\"Connexion r√©ussie !\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\nüìå **Utilisation d‚Äôun `try-with-resources` pour fermer automatiquement la connexion.**\n\n---\n\n### **3. Connexion avec `DataSource` (Meilleure Pratique)**\n\nüìå **`DataSource` permet une gestion optimis√©e des connexions.**\n\n```java\nimport javax.sql.DataSource;\nimport com.mysql.cj.jdbc.MysqlDataSource;\n\npublic class ConnexionDataSource {\n    public static void main(String[] args) throws Exception {\n        MysqlDataSource ds = new MysqlDataSource();\n        ds.setURL(\"jdbc:mysql://localhost:3306/ma_base\");\n        ds.setUser(\"root\");\n        ds.setPassword(\"password\");\n\n        try (Connection conn = ds.getConnection()) {\n            System.out.println(\"Connexion r√©ussie !\");\n        }\n    }\n}\n```\n\nüìå **Utilis√© dans les serveurs d‚Äôapplication avec un pool de connexions.**\n\n---\n\n## **11.2. Ex√©cution de requ√™tes (`Statement`, `PreparedStatement`, `CallableStatement`)**\n\n### **1. Requ√™te avec `Statement` (‚ö† Vuln√©rable aux injections SQL)**\n\n```java\ntry (Connection conn = DriverManager.getConnection(url, user, password);\n     Statement stmt = conn.createStatement()) {\n\n    ResultSet rs = stmt.executeQuery(\"SELECT * FROM utilisateurs\");\n\n    while (rs.next()) {\n        System.out.println(rs.getString(\"nom\"));\n    }\n}\n```\n\nüìå **‚ö† √âviter `Statement` pour les requ√™tes contenant des entr√©es utilisateur (risque d‚Äôinjection SQL).**\n\n---\n\n### **2. Requ√™te s√©curis√©e avec `PreparedStatement`**\n\n```java\nString sql = \"SELECT * FROM utilisateurs WHERE email = ?\";\ntry (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n    pstmt.setString(1, \"user@mail.com\");\n    ResultSet rs = pstmt.executeQuery();\n\n    while (rs.next()) {\n        System.out.println(rs.getString(\"nom\"));\n    }\n}\n```\n\nüìå **S√©curise la requ√™te en emp√™chant les injections SQL.**\n\n---\n\n### **3. Insertion avec `PreparedStatement`**\n\n```java\nString sql = \"INSERT INTO utilisateurs (nom, email) VALUES (?, ?)\";\ntry (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n    pstmt.setString(1, \"Alice\");\n    pstmt.setString(2, \"alice@mail.com\");\n    pstmt.executeUpdate(); // Ex√©cute l‚Äôinsertion\n}\n```\n\nüìå **`executeUpdate()` pour `INSERT`, `UPDATE`, `DELETE`.**\n\n---\n\n### **4. Appel d‚Äôune proc√©dure stock√©e avec `CallableStatement`**\n\n```java\nString sql = \"{call ajouter_utilisateur(?, ?)}\";\ntry (CallableStatement cstmt = conn.prepareCall(sql)) {\n    cstmt.setString(1, \"Alice\");\n    cstmt.setString(2, \"alice@mail.com\");\n    cstmt.execute();\n}\n```\n\nüìå **Utilis√© pour ex√©cuter des proc√©dures stock√©es SQL.**\n\n---\n\n## **11.3. Gestion des transactions (`commit`, `rollback`)**\n\nPar d√©faut, **chaque requ√™te est valid√©e (`commit`) automatiquement**.  \nüìå **Pour g√©rer manuellement une transaction, on d√©sactive l‚Äôauto-commit.**\n\n---\n\n### **1. D√©but d‚Äôune transaction (`setAutoCommit(false)`)**\n\n```java\ntry (Connection conn = DriverManager.getConnection(url, user, password)) {\n    conn.setAutoCommit(false); // D√©sactive l‚Äôauto-commit\n\n    try (PreparedStatement pstmt1 = conn.prepareStatement(\"INSERT INTO comptes VALUES (?, ?)\");\n         PreparedStatement pstmt2 = conn.prepareStatement(\"INSERT INTO transactions VALUES (?, ?)\")) {\n\n        pstmt1.setInt(1, 1);\n        pstmt1.setDouble(2, 1000.00);\n        pstmt1.executeUpdate();\n\n        pstmt2.setInt(1, 1);\n        pstmt2.setDouble(2, -500.00);\n        pstmt2.executeUpdate();\n\n        conn.commit(); // Valide la transaction\n    } catch (SQLException e) {\n        conn.rollback(); // Annule toutes les op√©rations\n        e.printStackTrace();\n    }\n}\n```\n\nüìå **Si une erreur survient, `rollback()` annule les modifications.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Connexion JDBC : `DriverManager` (basique), `DataSource` (optimis√©, recommand√©).**  \n‚úÖ **Ex√©cution de requ√™tes :**\n\n- `Statement` (‚ö† √† √©viter pour les entr√©es utilisateur).\n- `PreparedStatement` (s√©curis√© contre les injections SQL).\n- `CallableStatement` (appelle une proc√©dure stock√©e).  \n    ‚úÖ **Gestion des transactions : `commit`, `rollback`, `setAutoCommit(false)`.**\n"
    },
    {
        "id": "8e5aa410-7105-45e7-b5bc-f1300195e660",
        "title": "Analog.js",
        "description": "---\nid: 4775911f-b142-4a2e-8954-bb74d1475de6\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nAnalogJs est un [[m√©ta-framework]] pour [[Angular]] qui ajoute des fonctionnalit√©s comme le routage automatique, le rendu c√¥t√© serveur, et la g√©n√©ration de sites statiques. Il simplifie le d√©veloppement en int√©grant des outils modernes comme [[Vite]] et [[Vitest]].\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAnalogJs √©tend [[Angular]] avec des fonctionnalit√©s pratiques :\n\n- **Routage bas√© sur le syst√®me de fichiers** : Les routes sont automatiquement g√©n√©r√©es √† partir de la structure des fichiers.\n- **Rendu c√¥t√© serveur ([[Server Side Rendering (SSR)]])** et **g√©n√©ration de sites statiques** ([[Server Side Generation (SSG)]]) : Permet d‚Äôam√©liorer le SEO et la vitesse de chargement.\n- **Support Markdown** : Permet d'utiliser des fichiers Markdown comme contenu.\n- **Routes API int√©gr√©es** : Cr√©e facilement des routes API dans la m√™me application.\n- **Structure simplifi√©e des composants** : Un seul fichier par composant, contrairement √† l'approche Angular traditionnelle avec plusieurs fichiers.\n\nAnalogJs utilise Vite pour la compilation rapide et Vitest pour les tests, offrant une exp√©rience moderne et rapide.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplification du routage** : Gr√¢ce au routage bas√© sur le syst√®me de fichiers.\n- **Rendu c√¥t√© serveur et sites statiques** : Am√©liore la performance et le SEO.\n- **Support Markdown** : Id√©al pour cr√©er du contenu rapidement.\n- **Structure de composants simplifi√©e** : Un fichier par composant pour plus de clart√©.\n- **Int√©gration de [[Vite]] et [[Vitest]]** : D√©veloppement rapide et tests efficaces.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance √† [[Angular]]** : N√©cessite [[Angular]], ce qui peut √™tre contraignant.\n- **Moins mature** : Moins de documentation et de communaut√© par rapport √† [[Nuxt.js]] ou [[Next.js]].\n- **Courbe d'apprentissage** : Complexe pour les d√©butants Angular ou SSR.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[JavaScript]] [[Typescript]]"
    },
    {
        "id": "dd0c0816-84ee-4e93-991a-8f8964cb56ec",
        "title": "Anglais - mot et expression",
        "description": "---\nid: 7d823355-dc92-4f2a-ae2c-e655a70688b1\n---\ngibberish: gibberish\nYou are talking gibberish: Tu dis n'importe quoi\ngrasshopper: sauterelle\nkneehigh to a grasshopper: haut comme trois pomme"
    },
    {
        "id": "56e1c640-ad12-4cc9-8546-43e7a58f1e9a",
        "title": "Annotation (java)",
        "description": "---\nid: 3822ed8e-7f6c-4ff8-a60e-b547afc6523d\n---\n# Rapidement c'est quoi‚ùì\n\nLes annotations [[Java]] sont des m√©tadonn√©es qui fournissent des informations suppl√©mentaires sur le code sans affecter son ex√©cution. Elles sont utilis√©es pour annoter des classes, m√©thodes, champs, etc.,  guidant le compilateur, les outils d'ex√©cution ou d'autres processus, comme [[Aspect Oriented Programming.md]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nEn [[Java]], les annotations sont des balises plac√©es avant les √©l√©ments de code (classes, m√©thodes, champs, etc.). Elles sont d√©finies √† l'aide de l'annotation `@interface`.  Elles ne modifient pas le comportement du code en lui-m√™me, mais fournissent des informations contextuelles pour diff√©rents outils et processus.\n\n**Structure d'une annotation:**\n\nUne annotation est d√©finie avec le mot cl√© `@interface` suivi du nom de l'annotation.  Elle peut contenir des √©l√©ments (attributs) avec des valeurs par d√©faut ou non.  Par exemple :\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface MyAnnotation {\n    String value() default \"default value\";\n    int number() default 0;\n}\n```\n\nDans cet exemple :\n\n* `@Retention(RetentionPolicy.RUNTIME)` sp√©cifie que l'annotation sera disponible au runtime (l'ex√©cution du programme).  Il existe d'autres valeurs possibles: `SOURCE` (disponible uniquement √† la compilation) et `CLASS` (disponible √† la compilation et au chargement de la classe). Il faut savoir qu'il y a tr√®s peu d'int√©r√™t d'utiliser autres chose de RUNTIME car c'est la seule valeur qui conserve l'annotation au runtime, et qui permet donc de faire des traitements.\n* `@Target(ElementType.METHOD)` indique que cette annotation ne peut √™tre appliqu√©e qu'aux m√©thodes.  D'autres valeurs possibles pour `ElementType` incluent `TYPE`, `FIELD`, `CONSTRUCTOR`, `PARAMETER`, etc.\n* `String value() default \"default value\";` d√©finit un attribut `value` de type String avec une valeur par d√©faut.\n* `int number() default 0;` d√©finit un attribut `number` de type int avec une valeur par d√©faut.\n\nL'annotation est ensuite utilis√©e dans le code ainsi :\n\n```java\n@MyAnnotation(value = \"hello\", number = 5)\npublic void myMethod() {\n  // ...\n}\n```\n\nLe compilateur, les outils (frameworks, IDEs) ou le code au runtime peuvent alors interpr√©ter ces informations pour effectuer diff√©rentes actions. Par exemple, un framework pourrait utiliser une annotation pour injecter des d√©pendances ou un outil de test pour identifier les m√©thodes √† tester.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **M√©taprogrammation:** Permet d'ajouter des informations au code sans le modifier directement, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **R√©duction de la redondance:**  Evite la duplication de code en centralisant les informations dans les annotations.\n* **Extensibilit√©:** Facilite l'ajout de fonctionnalit√©s sans modifier le code source existant.\n* **Framework-agnostique:**  Les annotations peuvent √™tre utilis√©es par diff√©rents frameworks et outils.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:** Une sur-utilisation des annotations peut rendre le code difficile √† comprendre.\n* **D√©pendances:**  Le code qui utilise les annotations peut d√©pendre de la pr√©sence de certains outils ou frameworks.\n* **Performances:**  Le traitement des annotations au runtime peut avoir un impact sur les performances, bien que g√©n√©ralement n√©gligeable.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "744b0bb3-e2f9-44bd-badb-57383ee57ed2",
        "title": "Ansible Vault",
        "description": "---\nid: ae62d225-067f-4a01-9d22-52fdabf93106\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nAnsible Vault est un outil d'[[Ansible]] qui permet de chiffrer et prot√©ger des donn√©es sensibles dans des fichiers, comme des mots de passe ou des cl√©s API, afin de les utiliser dans des playbooks Ansible sans exposer ces informations en texte clair\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAnsible Vault chiffre des fichiers ou des cha√Ænes de caract√®res, les rendant illisibles sans un mot de passe sp√©cifique. Les principales commandes sont :\n\n- **`ansible-vault create`** : Cr√©e un fichier chiffr√© √† partir de z√©ro.\n- **`ansible-vault encrypt`** : Chiffre un fichier existant.\n- **`ansible-vault decrypt`** : D√©chiffre un fichier pour le rendre lisible.\n- **`ansible-vault edit`** : Permet de modifier un fichier chiffr√© sans le d√©chiffrer manuellement.\n- **`ansible-vault encrypt_string`** : Chiffre une cha√Æne de caract√®res (ex. un mot de passe) pour l'inclure dans un fichier ou un playbook.\n\nIl est aussi possible de g√©rer plusieurs fichiers Vault avec l'option **`-vault-id`**, permettant de sp√©cifier diff√©rents mots de passe pour diff√©rents environnements. L'option **`-ask-vault-pass`** permet de saisir le mot de passe manuellement √† l'ex√©cution.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **S√©curisation des donn√©es sensibles** : Prot√®ge efficacement les informations sensibles en les chiffrant.\n- **Facilit√© d'int√©gration avec [[Ansible]]** : Fonctionne de mani√®re fluide avec les playbooks Ansible.\n- **Prise en charge de plusieurs fichiers Vault** : Permet de g√©rer diff√©rents environnements de mani√®re s√©curis√©e avec **`-vault-id`**.\n- **Chiffrement granulaire** : Possibilit√© de chiffrer uniquement des valeurs sp√©cifiques avec **`encrypt_string`**.\n- **Interface simple** : Utilisation en ligne de commande intuitive pour cr√©er, modifier ou d√©chiffrer des fichiers.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Gestion des mots de passe** : Si le mot de passe Vault est perdu ou compromis, l'acc√®s aux donn√©es chiffr√©es devient impossible.\n- **D√©pendance aux mots de passe** : Chaque fichier chiffr√© n√©cessite un mot de passe pour y acc√©der, ce qui peut devenir contraignant dans des environnements complexes.\n- **Pas de solution native pour le partage s√©curis√©** : Le partage des fichiers Vault entre plusieurs utilisateurs n√©cessite une gestion manuelle des mots de passe, ce qui peut √™tre source d‚Äôerreurs.\n- **Performance** : Bien que les fichiers chiffr√©s soient l√©gers, l'utilisation r√©p√©t√©e de commandes de chiffrement/d√©chiffrement peut affecter les performances dans des environnements de grande √©chelle.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Python]] [[MOC_DevSecOps]]"
    },
    {
        "id": "d5cddd3c-a911-4b5f-9b0a-1ee9e69b5ae6",
        "title": "Apache Apisix",
        "description": "---\nid: 82d7deb1-0645-4023-8a4c-7c1e96d022f5\n---\n# Rapidement c'est quoi‚ùì\n\nApache APISIX est une [[API Gateway]] open-source, l√©g√®re et performante, con√ßue pour les environnements cloud natifs.  Elle permet de g√©rer, router et s√©curiser le trafic vers vos [[Micros services]] et APIs.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache APISIX est une passerelle d'API dynamique et haute performance, √©crite en [[Lua]] et bas√©e sur [[Nginx]].  Elle se distingue par son architecture enti√®rement bas√©e sur le plugin, ce qui permet une extensibilit√© et une personnalisation exceptionnelles.  Au lieu de reconfigurer le serveur √† chaque changement, APISIX utilise une architecture de donn√©es dynamique,  mettant √† jour ses routes et ses configurations en temps r√©el sans n√©cessiter de red√©marrage.\n\nSes fonctionnalit√©s cl√©s incluent :\n\n* **Routage dynamique et gestion des routes:**  APISIX permet de d√©finir des routes pour diriger le trafic vers diff√©rents services backend en fonction de crit√®res comme l'h√¥te, l'URL, les en-t√™tes HTTP, etc.  Ces routes peuvent √™tre modifi√©es dynamiquement sans interruption de service.\n* **Gestion de la s√©curit√©:**  Int√®gre des m√©canismes de s√©curit√© robustes tels que l'authentification, l'autorisation (via des plugins), le WAF (Web Application Firewall) et la protection contre les DDoS.\n* **Gestion du trafic:**  Offre des fonctionnalit√©s de gestion du trafic avanc√©es comme le [[load balancing]], le [[circuit breaker]] et la limitation de d√©bit.\n* **Plugins extensibles:**  Son architecture plug-in permet d'√©tendre ses fonctionnalit√©s √† l'infini.  Des plugins sont disponibles pour la gestion des logs, la surveillance, l'int√©gration avec des services de monitoring, etc.\n* **Gestion des m√©tadonn√©es:**  Permet de stocker et de g√©rer des m√©tadonn√©es associ√©es aux routes et aux services.\n* **Compatibilit√© [[Kubernetes]]:**  APISIX s'int√®gre bien avec Kubernetes et d'autres orchestrateurs de conteneurs.\n\nContrairement aux passerelles API traditionnelles qui n√©cessitent des red√©marrages pour mettre √† jour la configuration, APISIX offre une gestion dynamique, permettant des mises √† jour en temps r√©el et une haute disponibilit√©.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Haute performance et faible latence:**  APISIX est connu pour sa performance exceptionnelle.\n* **Extensibilit√© gr√¢ce √† l'architecture plug-in:**  Permet d'ajouter facilement de nouvelles fonctionnalit√©s.\n* **Gestion dynamique de la configuration:**  Pas de temps d'arr√™t lors des mises √† jour.\n* **Open-source et communaut√© active:**  B√©n√©ficie d'un support communautaire important.\n* **Int√©gration avec [[Kubernetes]] et d'autres outils cloud natifs.**\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage potentiellement raide:**  La ma√Ætrise compl√®te de l'utilisation des plugins peut demander un certain temps.\n* **D√©pendance √† [[Lua]]:**  N√©cessite une certaine familiarit√© avec le langage Lua pour d√©velopper des plugins personnalis√©s.\n* **La documentation peut parfois manquer de clart√© pour certains aspects avanc√©s.**\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "eb8de89e-4a18-43d3-8bd0-33475992f124",
        "title": "Apache Karaf (OSGi)",
        "description": "---\nid: ef4589e3-be7d-49b4-bb8f-550ea8a049d0\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùìblabla\n\nKaraf est un conteneur d'application l√©ger bas√© sur [[Open Service Gateway initiative (OSGi)]], permettant de d√©ployer, g√©rer et configurer des applications [[Open Service Gateway initiative (OSGi)]] de mani√®re simplifi√©e, avec des fonctionnalit√©s avanc√©es comme la gestion dynamique des configurations, le d√©ploiement √† chaud et l'int√©gration avec divers outils.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache Karaf est un conteneur d'application permettant de g√©rer des applications [[Open Service Gateway initiative (OSGi)]]. Il offre plusieurs fonctionnalit√©s suppl√©mentaires par rapport aux autres impl√©mentations [[Open Service Gateway initiative (OSGi)]], telles que :\n\n- **Console Interactive** : Une interface en ligne de commande pour g√©rer les bundles, services et configurations.\n- **Karaf Features** : Permet l'installation de groupes de bundles et configurations d'un coup.\n- **Support Maven** : D√©ploiement direct de bundles depuis un d√©p√¥t Maven.\n- **Blueprints ([[Apache Aries]])** : Configuration d√©clarative des services [[Open Service Gateway initiative (OSGi)]] via des fichiers XML.\n- **Gestion Dynamique des Configurations** : Permet de modifier les configurations en direct sans red√©marrer l'application.\n- **Hot Deployment** : D√©ploiement et mise √† jour des bundles sans red√©marrage du serveur.\n- **Int√©gration avec des frameworks** : Int√©gration facile avec des outils comme [[Apache Camel]], [[ActiveMQ]] et [[CXF]] pour les services d'int√©gration, la messagerie et les services web.\n- **Gestion de Clusters** : Avec [[Karaf Cellar]], permet de g√©rer et synchroniser des clusters [[Open Service Gateway initiative (OSGi)]].\n- **S√©curisation des configurations** : [[Karaf Vault]] prot√®ge les informations sensibles dans les fichiers de configuration.\n- **[[JMX]] et Monitoring** : Surveillance des services via l'int√©gration avec [[JMX]] et [[Jolokia]].\n- **Commandes Personnalis√©es** : Cr√©ation de commandes personnalis√©es pour automatiser les t√¢ches courantes.\n- **Support [[Java EE]] et [[Micros services]]** : Permet de d√©ployer des applications [[Java EE]] et de supporter des architectures [[Micros services]] gr√¢ce √† son mod√®le modulaire.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Console interactive** : Facilit√© de gestion des applications via une interface simple.\n- **Hot Deployment** : Mise √† jour des applications sans perturber le service, id√©al pour des environnements de production.\n- **Int√©gration avec des outils tiers** : Connexions pr√™tes √† l'emploi avec des technologies comme [[Apache Camel]],[[ ActiveMQ]], et [[CXF]].\n- **Gestion dynamique des configurations** : Modifications √† la vol√©e sans red√©marrage n√©cessaire, simplifiant l'administration.\n- **Blueprints** : Approche d√©clarative facilitant la gestion des services [[Open Service Gateway initiative (OSGi)]], similaire √† [[Spring Framework]].\n- **Support de [[Java EE]] et des [[Micros services]]** : Permet de d√©ployer des applications de grande √©chelle de mani√®re modulaire.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© pour les d√©butants** : L'usage d'[[Open Service Gateway initiative (OSGi)]] et de Karaf peut √™tre d√©routant pour les nouveaux utilisateurs.\n- **Configuration initiale** : La configuration des features et des bundles peut √™tre complexe et n√©cessite une bonne ma√Ætrise de l'environnement.\n- **Performance** : L'usage intensif de bundles et de services peut parfois entra√Æner une surcharge dans des applications tr√®s petites ou simples.\n- **D√©pendance au mod√®le OSGi** : Certains d√©veloppeurs pr√©f√©reront des alternatives plus simples √† OSGi pour des applications ne n√©cessitant pas un mod√®le aussi modulaire.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Java]]"
    },
    {
        "id": "75728b98-3ac9-4c30-b578-92cf0f33c975",
        "title": "Apache Lucene",
        "description": "---\nid: 73e4d839-b181-4a74-b4d5-439c03d44a43\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nApache Lucene est un framework [[Java]] destin√© √† l'indexation et √† la recherche de texte, permettant de g√©rer efficacement de grandes quantit√©s de donn√©es pour cr√©er des moteurs de recherche performants.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache Lucene fournit des outils pour indexer des documents et effectuer des recherches rapides sur des grandes bases de donn√©es textuelles. Il permet de cr√©er des moteurs de recherche en offrant des fonctionnalit√©s comme :\n\n- **Indexation** : Cr√©ation d'index invers√©s pour une recherche rapide.\n- **Recherche textuelle** : Recherche bas√©e sur des mots-cl√©s, phrases, ou expressions r√©guli√®res.\n- **Performance** : Optimisation des recherches avec des structures de donn√©es adapt√©es. Des outils comme **[[Elasticsearch]]** et **[[Apache Solr]]** utilisent Lucene pour faciliter l'int√©gration et l'utilisation dans des environnements de production √† grande √©chelle.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Haute performance** : Tr√®s rapide pour la recherche et l'indexation sur de grandes quantit√©s de donn√©es.\n- **Flexibilit√©** : Offre des options avanc√©es pour affiner les recherches (poids, synonymes, requ√™tes bool√©ennes).\n- **√âcosyst√®me riche** : Utilis√© par des outils comme [[Elasticsearch]] et [[Solr]], ce qui le rend encore plus accessible pour des cas d‚Äôusage complexes.\n- **Support de plusieurs formats** : Peut indexer des fichiers texte, XML, JSON, etc.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© d'int√©gration** : Peut √™tre difficile √† configurer et √† int√©grer directement dans des projets sans outils suppl√©mentaires.\n- **Consommation m√©moire** : L'indexation et la recherche sur de tr√®s grandes bases de donn√©es peuvent n√©cessiter des ressources importantes.\n- **Pas de GUI natif** : Ne propose pas d'interface graphique de gestion, n√©cessitant souvent des outils externes comme Solr ou Elasticsearch pour faciliter l'utilisation.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Java]]"
    },
    {
        "id": "555847cc-90e9-4281-9f5f-ca65cb84ef39",
        "title": "ArgoCD",
        "description": "---\nid: fc23560f-daa5-461d-8a6b-7215c2cf2657\n---\n# Rapidement c'est quoi‚ùì\n\nArgo CD est un outil de gestion de configuration [[GitOps]] pour [[Kubernetes]].  Il synchronise l'√©tat d√©clar√© de votre infrastructure dans un d√©p√¥t [[Git]] avec l'√©tat r√©el de votre cluster [[Kubernetes]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nArgo CD est un syst√®me de d√©ploiement et de gestion continue bas√© sur le principe [[GitOps]].  Il fonctionne en surveillant un d√©p√¥t [[Git]] sp√©cifi√© pour les modifications apport√©es √† des manifestes [[Kubernetes]] .  Lorsqu'une modification est d√©tect√©e, Argo CD compare l'√©tat souhait√© (d√©fini dans le d√©p√¥t Git) √† l'√©tat actuel du cluster [[Kubernetes]].  Il effectue ensuite les actions n√©cessaires pour synchroniser ces deux √©tats, en appliquant les modifications, cr√©ant, mettant √† jour ou supprimant les ressources [[Kubernetes]].  Cela permet un d√©ploiement automatis√©, fiable et tra√ßable des applications sur [[Kubernetes]].\n\nArgo CD utilise un \"Declarative Configuration\" : l'√©tat souhait√© du cluster est enti√®rement d√©fini dans des fichiers de configuration versionn√©s dans un d√©p√¥t [[Git]] (g√©n√©ralement avec un syst√®me de branchement [[Git]] pour g√©rer les d√©ploiements et les rollbacks).  Cela facilite le suivi des changements, la collaboration et l'auditabilit√©.  La visualisation de l'√©tat du d√©ploiement, ainsi que l'historique des modifications et des √©ventuels √©checs, est un aspect central de la plateforme.\n\nIl ne se limite pas aux manifestes [[Kubernetes]] ; il peut g√©rer d'autres ressources en utilisant des m√©canismes d'extensions (comme les applications [[Helm]]).  L'automatisation est pouss√©e, avec la possibilit√© de configurer des notifications et des alertes lors des √©v√©nements importants.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* [[**GitOps]]:**  Adopte une approche [[GitOps]], offrant tous les avantages de la gestion de version, de la collaboration et de l'auditabilit√©.\n* **Automatisation:**  Automatise compl√®tement le processus de d√©ploiement et de gestion des applications [[Kubernetes]].\n* **Observabilit√©:**  Fournit une interface utilisateur pour surveiller l'√©tat des d√©ploiements et l'historique des changements.\n* **Fiabilit√©:**  Minimise les risques d'erreurs manuelles et assure la coh√©rence entre l'√©tat souhait√© et l'√©tat r√©el.\n* **Rollbacks faciles:**  Permet de revenir facilement √† des versions pr√©c√©dentes gr√¢ce √† l'historique [[Git]].\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© initiale:**  La configuration et l'int√©gration initiale peuvent √™tre complexes pour les utilisateurs non familiers avec [[Kubernetes]] et [[GitOps]].\n* **D√©pendance √† Git:**  Une d√©pendance totale √† un syst√®me de gestion de versions [[Git]] est n√©cessaire.\n* **Gestion des secrets:**  La gestion des secrets n√©cessite une configuration suppl√©mentaire et une int√©gration avec des solutions de gestion des secrets.\n* **Surveillance accrue n√©cessaire:**  M√™me avec l'automatisation, la surveillance du syst√®me reste cruciale pour identifier et r√©soudre les probl√®mes.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "0e691bd0-f951-4184-b231-57171dea0300",
        "title": "Aspect Oriented Programming (AOP)",
        "description": "---\nid: 648c597b-2bb8-47b8-8dbb-1ea43bf23d4c\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nL'Aspect Oriented Programming (AOP) est une technique de programmation qui permet de s√©parer les pr√©occupations transversales (cross-cutting concerns) du code principal.  Elle vise √† am√©liorer la modularit√© et la maintenabilit√© du code en regroupant des fonctionnalit√©s qui affectent plusieurs parties du programme, mais qui ne sont pas directement li√©es √† la logique m√©tier principale.  Imaginez des aspects comme la journalisation, la s√©curit√© ou la gestion des transactions, qui traversent plusieurs modules.  AOP permet de les g√©rer s√©par√©ment.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAOP introduit le concept d'**aspects**, qui sont des modules contenant du code qui s'ex√©cute √† des points sp√©cifiques du programme, appel√©s **points de jonction** (join points). Ces points de jonction sont g√©n√©ralement des √©v√©nements tels que l'appel d'une m√©thode, la cr√©ation d'un objet ou l'ex√©cution d'une exception.\n\nUn aspect est d√©fini par un ensemble de points de jonction et d'**avis** (advices). Un avis est un bloc de code qui s'ex√©cute avant, apr√®s ou autour d'un point de jonction.  On peut ainsi ajouter des fonctionnalit√©s sans modifier le code principal.\n\n**Exemple concret ([[Java]] avec [[Spring AOP]]):**\n\nImaginons une m√©thode `processOrder()` qui g√®re le traitement d'une commande.  On veut ajouter une journalisation avant et apr√®s son ex√©cution.  Avec AOP, on peut cr√©er un aspect sans modifier `processOrder()` :\n\n```java\n@Aspect\npublic class LoggingAspect {\n\n    @Before(\"execution(* com.example.OrderService.processOrder(..))\")\n    public void beforeProcessOrder(JoinPoint joinPoint) {\n        System.out.println(\"Avant traitement de la commande: \" + joinPoint.getSignature());\n    }\n\n    @After(\"execution(* com.example.OrderService.processOrder(..))\")\n    public void afterProcessOrder(JoinPoint joinPoint) {\n        System.out.println(\"Apr√®s traitement de la commande: \" + joinPoint.getSignature());\n    }\n}\n```\n\nCe code utilise Spring AOP.  `@Aspect` indique qu'il s'agit d'un aspect.  `@Before` et `@After` d√©finissent les avis qui s'ex√©cutent avant et apr√®s l'ex√©cution de `processOrder()`.  `execution(* com.example.OrderService.processOrder(..))` est un pointcut (expression qui d√©finit les points de jonction).\n\nL'impl√©mentation d'AOP varie selon les langages et les frameworks.  Certains langages ont des fonctionnalit√©s int√©gr√©es, tandis que d'autres utilisent des frameworks sp√©cifiques ([[Spring AOP]] en [[Java]], AspectJ, etc.).  Le m√©canisme sous-jacent implique souvent la modification du code bytecode (transformation du code compil√©) pour injecter le code des aspects aux points de jonction.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Modularit√© et maintenabilit√©:** S√©pare les pr√©occupations transversales du code principal, facilitant la maintenance et la compr√©hension du code.\n- **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rents modules.\n- **R√©duction de la duplication de code:** √âvite la redondance de code pour des fonctionnalit√©s transversales.\n- **Am√©lioration de la lisibilit√©:** Le code principal reste focalis√© sur la logique m√©tier.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Complexit√©:**  AOP peut introduire une complexit√© suppl√©mentaire, surtout pour des projets de petite taille.  La compr√©hension du m√©canisme et des points de jonction peut n√©cessiter une courbe d'apprentissage.\n- **D√©bogage:** Le d√©bogage peut √™tre plus difficile car le code est dispers√© entre les aspects et le code principal.\n- **Performances:**  L'ajout d'aspects peut avoir un impact l√©ger sur les performances, bien que souvent n√©gligeable.\n- **Difficult√© de test:** Tester les aspects isol√©ment peut √™tre complexe.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n\n"
    },
    {
        "id": "d7d701db-d6e0-42c9-8931-bdada3b40dda",
        "title": "AspectJ",
        "description": "---\nid: 0a9b351a-7625-4e02-a252-3dff5766d3e2\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nAspectJ est une extension du langage [[Java]] qui permet la [[Aspect Oriented Programming (AOP)]].  Il offre un moyen de modulariser les pr√©occupations transversales (cross-cutting concerns) comme la journalisation, la gestion des transactions, ou la s√©curit√©, en les s√©parant du code principal de l'application.  Cela am√©liore la lisibilit√©, la maintenabilit√© et la r√©utilisabilit√© du code.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAspectJ permet d'ajouter du code (appel√© *aspects*) √† des points sp√©cifiques dans l'ex√©cution d'un programme [[Java]], sans modifier le code source existant.  Ces points sont d√©finis par des *pointcuts*, qui sont des expressions qui s√©lectionnent des joint points (join points).  Un joint point repr√©sente un point d'ex√©cution dans le programme, comme l'appel d'une m√©thode, la cr√©ation d'un objet, ou le lancement d'une exception.\n\nLes aspects sont d√©finis dans des fichiers s√©par√©s et contiennent des *advice*, qui sont des blocs de code ex√©cut√©s avant, apr√®s, ou autour d'un joint point s√©lectionn√© par le pointcut.  AspectJ utilise un processus de compilation s√©par√© pour tisser (weave) les aspects dans le code Java.\n\n**Exemple:** Imaginons que l'on veuille logger chaque appel de m√©thode d'une classe `UserService`.  Avec AspectJ, on pourrait d√©finir un aspect comme suit :\n\n```java\npublic aspect UserServiceLogger {\n    pointcut logMethodCall(): call(* com.example.UserService.*(..));\n\n    before(): logMethodCall() {\n        System.out.println(\"Appel de m√©thode : \" + thisJoinPoint.getSignature());\n    }\n}\n```\n\nCe code d√©finit un pointcut `logMethodCall()` qui s√©lectionne tous les appels de m√©thode de la classe `com.example.UserService`.  L'advice `before()` est ex√©cut√© avant chaque appel de m√©thode s√©lectionn√©, et affiche un message de log dans la console.  `thisJoinPoint` est une variable sp√©ciale qui fournit des informations sur le joint point courant.\n\nAspectJ supporte plusieurs types d'advice : `before`, `after`, `after returning`, `after throwing`, et `around`.  L'advice `around` permet de contr√¥ler enti√®rement l'ex√©cution d'un joint point.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **S√©paration des pr√©occupations:** Am√©liore la modularit√© et la lisibilit√© du code en s√©parant les pr√©occupations transversales du code principal.\n* **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application ou m√™me dans d'autres applications.\n* **Maintenance simplifi√©e:** Les modifications des pr√©occupations transversales n'impliquent pas de modifier le code principal.\n* **Aspect non invasif:**  On peut ajouter des fonctionnalit√©s sans modifier le code source existant.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** La programmation orient√©e aspect peut avoir une courbe d'apprentissage raide, surtout pour les d√©veloppeurs qui ne sont pas familiers avec ce paradigme.\n* **D√©bogage:** Le d√©bogage peut √™tre plus complexe que dans le code [[Java]] standard, car il faut comprendre l'interaction entre les aspects et le code principal.\n* **Performance:** L'ajout d'aspects peut avoir un impact sur les performances, bien que cela soit g√©n√©ralement n√©gligeable.\n* **Complexit√© potentielle:**  Une mauvaise utilisation des aspects peut conduire √† un code plus complexe et difficile √† maintenir.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "314398fc-a56e-435e-b0bd-8438fd066367",
        "title": "Astro Starlight",
        "description": "---\nid: 3076a9fe-0aeb-4998-b3f7-43f4cb759043\n---\n# Rapidement c'est quoi‚ùì\n\nAstro Starlight est un g√©n√©rateur de sites web statiques, sp√©cifiquement con√ßu pour cr√©er des documentations, similaire √† [[VitePress]] ou [[Docusaurus]].  Il utilise [[Astro]], un framework de sites web rapides et performants.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAstro Starlight est un th√®me (ou un ensemble de composants et de configurations) pour le framework [[Astro]]. Il fournit une structure de base et des composants pr√©-construits pour faciliter la cr√©ation de sites de documentation.  Contrairement √† une solution comme [[VitePress]] qui est une application compl√®te, Starlight se base sur la flexibilit√© d'[[Astro]], permettant une plus grande personnalisation tout en conservant une structure claire pour la documentation.  Il g√®re typiquement la navigation, la mise en forme du code, la recherche et d'autres fonctionnalit√©s courantes des sites de documentation.  On √©crit le contenu de la documentation g√©n√©ralement en [[Markdown]], qui est ensuite trait√© par [[Astro]] pour g√©n√©rer le site web statique final.  Cela permet un workflow rapide, une mise √† jour facile et un excellent SEO.  La performance est un point fort gr√¢ce √† l'utilisation d'[[Astro]], qui est connu pour g√©n√©rer des sites l√©gers et rapides √† charger.  L'utilisateur final a la possibilit√© de personnaliser profond√©ment le th√®me en modifiant les fichiers de configuration et les composants int√©gr√©s.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance:**  Gr√¢ce √† [[Astro]], les sites g√©n√©r√©s sont rapides et l√©gers.\n* **Personnalisation:**  Offre une grande flexibilit√© pour adapter le th√®me √† ses propres besoins et design.\n* **Bas√© sur Astro:** B√©n√©ficie de l'√©cosyst√®me et des avantages d'[[Astro]] (performance, simplicit√©).\n* **Int√©gration [[Markdown]]:**  Simple et efficace pour la cr√©ation du contenu.\n* **Structure claire:**  Fournit une base solide et bien organis√©e pour la documentation.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Potentiellement plus complexe √† mettre en place que [[VitePress]]:**  N√©cessite une compr√©hension de base d'[[Astro]].\n* **Moins de fonctionnalit√©s \"out-of-the-box\":** Par rapport √† une solution plus int√©gr√©e comme [[VitePress]], il faut potentiellement plus de configuration pour obtenir des fonctionnalit√©s avanc√©es.\n* **D√©pendance √† [[Astro]]:**  La connaissance d'[[Astro]] est n√©cessaire pour une utilisation et personnalisation efficace.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "5f1e2ec9-364e-4ce4-9afe-b92ff447af3f",
        "title": "Azure Active Directory",
        "description": "---\nid: 90178cba-c2e7-4de7-a92f-4d570dc3b732\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nAzure Active Directory (Azure AD) est le service d'annuaire cloud de Microsoft. Il fournit une identit√© et une [[Identify Access Manager (IAM)]] pour les applications et les ressources cloud, permettant l'authentification et l'autorisation des utilisateurs et des applications.  Il peut √©galement √™tre int√©gr√© avec des annuaires locaux (via Azure AD Connect).\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nAzure AD est un annuaire bas√© sur le cloud qui g√®re les identit√©s d'utilisateurs et d'applications.  Il permet :\n\n* **Authentification unique (SSO):**  Les utilisateurs peuvent acc√©der √† plusieurs applications avec les m√™mes identifiants.\n* **Gestion des acc√®s bas√©e sur les r√¥les [[Role Based Access Control (RBAC)]]:** Contr√¥le fin des permissions pour les utilisateurs et les groupes.\n* **Gestion des identit√©s:** Cr√©ation, modification et suppression de comptes utilisateurs et groupes.\n* **Int√©gration avec des applications SaaS:**  Acc√®s simple aux applications cloud bas√©es sur le cloud.\n* **Int√©gration avec des applications locales:** Via Azure AD Connect, les identit√©s locales peuvent √™tre synchronis√©es avec Azure AD.\n* **Authentification multi-facteur (MFA):**  Am√©liore la s√©curit√© en exigeant plusieurs m√©thodes d'authentification.\n* **Protection contre les menaces:** Surveillance et d√©tection des activit√©s suspectes.\n* **Gestion des appareils:** Contr√¥le et gestion des appareils acc√©dant aux ressources.\n* **Conditionnel Access:**  D√©finit des politiques d'acc√®s bas√©es sur des conditions (emplacement, appareil, etc.).\n\n\n**Exemple d'int√©gration avec une application:** Une application web peut utiliser l'authentification Azure AD pour v√©rifier l'identit√© des utilisateurs avant de leur accorder l'acc√®s.  Cela se fait g√©n√©ralement via les protocoles OAuth 2.0 et OpenID Connect.\n\n**Exemple de configuration (sch√©matique):**  Pour int√©grer une application web avec Azure AD, il faut enregistrer l'application dans Azure AD, obtenir un ID d'application et un secret client, puis configurer l'application pour qu'elle utilise ces informations pour authentifier les utilisateurs via Azure AD.  La configuration pr√©cise d√©pend du type d'application et des biblioth√®ques utilis√©es.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Int√©gration avec l'√©cosyst√®me Microsoft:**  Fonctionne parfaitement avec d'autres services Microsoft cloud.\n* **Fonctionnalit√©s robustes de s√©curit√©:**  Offre des m√©canismes de s√©curit√© avanc√©s.\n* **Scalabilit√© et fiabilit√©:**  Con√ßu pour g√©rer des millions d'utilisateurs et d'applications.\n* **Gestion centralis√©e des identit√©s:**  Simplifie la gestion des utilisateurs et des acc√®s.\n* **Bonne documentation et support:** Microsoft fournit une documentation compl√®te et un support technique.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Co√ªt:** Peut √™tre co√ªteux pour les grandes organisations avec un grand nombre d'utilisateurs.\n* **Complexit√©:**  La configuration et la gestion d'Azure AD peuvent √™tre complexes pour les utilisateurs inexp√©riment√©s.\n* **D√©pendance √† Microsoft:**  Les organisations sont d√©pendantes de Microsoft pour le service.\n* **Probl√®mes de performance possibles:**  Des probl√®mes de performance peuvent survenir en cas de forte demande.\n* **Int√©gration avec des syst√®mes non-Microsoft:**  Peut n√©cessiter des efforts suppl√©mentaires pour int√©grer des syst√®mes non-Microsoft.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]\n\n**Note concernant la proposition initiale de f√©d√©rer avec [[Keycloak]]:**  Bien que possible, f√©d√©rer Azure AD avec Keycloak ajoute une couche de complexit√©.  Cela peut √™tre utile dans certains sc√©narios (par exemple, pour centraliser la gestion des identit√©s pour des applications multiples, ou pour ajouter des fonctionnalit√©s sp√©cifiques offertes par Keycloak), mais il est important de consid√©rer les implications sur la complexit√© de la gestion et la s√©curit√© globale.  Un choix direct d'Azure AD pour l'authentification est souvent plus simple et plus int√©gr√©.\n"
    },
    {
        "id": "78fcdf93-fb9e-4ab7-9121-ad92a35dbae7",
        "title": "Behaviour Driven Developpement (BDD)",
        "description": "---\nid: f580a39e-f8d4-4c10-b007-25b2f99064b9\n---\n# Rapidement c'est quoi‚ùì\n\nLe Behaviour Driven Development (BDD) est une approche de d√©veloppement logiciel qui √©tend le [[Test Driven Developpement (TDD)]] en mettant l'accent sur la collaboration entre les d√©veloppeurs, les testeurs et les clients.  Il se concentre sur le comportement du logiciel du point de vue de l'utilisateur.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe BDD est une technique de d√©veloppement logiciel agile qui utilise des exemples concrets pour d√©finir et v√©rifier le comportement souhait√© du logiciel.  Au lieu de se concentrer uniquement sur des tests unitaires techniques comme le [[Test Driven Developpement (TDD)]], le BDD d√©finit les exigences et les tests √† partir du point de vue de l'utilisateur final ou d'un autre intervenant (par exemple, un analyste m√©tier).  Ces exigences sont exprim√©es sous forme de sc√©narios √©crits dans un langage compr√©hensible par tous (par exemple, Given-When-Then, ([[Gherkin]])), facilitant ainsi la communication et la collaboration entre les parties prenantes.\n\nLe processus BDD implique g√©n√©ralement les √©tapes suivantes :\n\n1. **D√©finir les comportements attendus:**  Les √©quipes identifient les fonctionnalit√©s et les comportements attendus du logiciel √† l'aide d'exemples concrets.  Ces exemples sont souvent √©crits en utilisant le format Given-When-Then (ou un format similaire).  *Given* d√©crit le contexte initial, *When* d√©crit l'action effectu√©e, et *Then* d√©crit le r√©sultat attendu.\n\n2. **Automatiser les tests:**  Les exemples de comportements sont ensuite traduits en tests automatis√©s.  Ces tests v√©rifient que le logiciel se comporte comme attendu.  Des frameworks BDD comme [[Cucumber]], [[SpecFlow]], ou [[Behat]] sont souvent utilis√©s pour faciliter l'automatisation des tests √† partir de la sp√©cification √©crite en langage naturel.\n\n3. **D√©velopper le logiciel:**  Le d√©veloppement du logiciel se fait it√©rativement, en commen√ßant par les fonctionnalit√©s d√©crites par les exemples de comportement.  Les tests automatis√©s servent de guide pour le d√©veloppement et permettent de valider que chaque it√©ration r√©pond aux exigences.\n\nEn essence, le BDD favorise une compr√©hension partag√©e des exigences entre les d√©veloppeurs, les testeurs et les clients, r√©duisant ainsi les malentendus et les erreurs.  Il permet une documentation vivante et ex√©cutable du comportement du logiciel.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Collaboration am√©lior√©e:**  Facilite la communication et la collaboration entre les √©quipes techniques et les clients gr√¢ce √† un langage commun.\n* **Documentation vivante et ex√©cutable:**  Les exemples de comportement servent de documentation claire et concise, qui est automatiquement v√©rifi√©e par les tests.\n* **R√©duction des erreurs:**  La sp√©cification pr√©cise des comportements permet de d√©tecter et de corriger les erreurs plus t√¥t dans le cycle de d√©veloppement.\n* **Tests plus compr√©hensibles:** Les tests sont √©crits dans un langage naturel et facilement compr√©hensibles par tous, pas seulement les d√©veloppeurs.\n* **Am√©lioration de la qualit√© du logiciel:**  Les tests automatis√©s assurent une meilleure qualit√© du logiciel.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  La mise en place de BDD peut n√©cessiter une courbe d'apprentissage pour les √©quipes non familiaris√©es avec cette approche.\n* **Surco√ªt potentiel:**  L'√©criture des exemples de comportement et l'automatisation des tests peuvent prendre du temps et n√©cessiter des ressources suppl√©mentaires, surtout au d√©but.\n* **Maintenance des tests:**  La maintenance des tests automatis√©s peut √™tre chronophage si le logiciel √©volue rapidement.\n* **D√©pendance aux frameworks:**  Le choix et la ma√Ætrise d'un framework BDD sont essentiels pour une impl√©mentation r√©ussie.\n* **Peut √™tre inad√©quat pour certains projets:**  Le BDD n'est pas toujours la meilleure approche pour tous les projets, notamment les projets tr√®s petits ou ceux avec des exigences tr√®s fluctuantes.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "7e46e637-b644-45d4-887e-b929589b9fa3",
        "title": "Bento grid",
        "description": "---\nid: 1734446d-b56f-421d-847e-74616d8b5715\n---\n# Rapidement c'est quoi‚ùì\n\nBento est une m√©thode de conception d'interface utilisateur (UI) bas√©e sur un syst√®me de grille flexible et adaptable, facilitant la cr√©ation de mises en page r√©actives et modulaires.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nBento est une approche de conception UI qui se diff√©rencie des syst√®mes de grille traditionnels en proposant une plus grande flexibilit√© et modularit√©.  Au lieu d'une grille fixe et pr√©-d√©finie, Bento utilise un syst√®me de conteneurs \"bentos\" qui peuvent contenir diff√©rents √©l√©ments UI, et s'adaptent dynamiquement √† la taille de l'√©cran et au contenu.  Chaque bento est un composant ind√©pendant qui peut √™tre r√©utilis√© et combin√© avec d'autres pour cr√©er des mises en page complexes.  Le principe repose sur l'utilisation de plusieurs conteneurs (les bentos) de tailles variables, dispos√©s les uns √† c√¥t√© des autres ou les uns au-dessus des autres, en fonction des besoins.  Cela permet de cr√©er des layouts facilement adaptables aux diff√©rents appareils (tablettes, smartphones, ordinateurs) sans avoir √† √©crire du code sp√©cifique pour chaque r√©solution.  L'avantage cl√© est la facilit√© de maintenance et d'√©volution du design, car les modifications apport√©es √† un bento impactent uniquement ce dernier, sans n√©cessiter de r√©ajustement global de la mise en page.  La flexibilit√© permet aussi de r√©pondre √† des changements de contenu sans perturber l'ensemble de l'interface.  Il est souvent impl√©ment√© via des frameworks [[CSS]], permettant un contr√¥le pr√©cis du [[Responsive en CSS]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Flexibilit√© et modularit√©:**  Facilement adaptable aux diff√©rents √©crans et contenus.  Les modifications sont localis√©es.\n* **R√©utilisabilit√© des composants:**  Les bentos peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application, r√©duisant la redondance de code et am√©liorant la coh√©rence visuelle.\n* **Maintenance simplifi√©e:**  Les changements sont moins susceptibles d'avoir des effets inattendus sur le reste de l'interface.\n* **Responsive design facilit√©:** L'adaptation aux diff√©rentes tailles d'√©cran est int√©gr√©e au c≈ìur du syst√®me.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:** La mise en place peut √™tre plus complexe que des syst√®mes de grille plus simples, n√©cessitant une bonne compr√©hension des concepts.\n* **Courbe d'apprentissage:**  N√©cessite de ma√Ætriser les concepts de base de la conception UI et des syst√®mes de grille avant de pouvoir l'utiliser efficacement.\n* **Manque de standardisation:**  Bento n'est pas un standard officiel, la mise en ≈ìuvre peut varier selon les frameworks et les d√©veloppeurs.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "ca2e037c-2ea7-453f-8814-c90ca0fb317d",
        "title": "Bonne pratiques Astuces Infos SQL",
        "description": "---\nid: 9598b636-e6c7-433c-9c84-8d2be81bae62\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_Dev]][[MOC_DevSecOps]]\n\n**Plusieurs bonnes pratiques √† mettre en place sur des [[Base de donn√©e SQL]] :** \n\n- Mettre des [[Index]] sur les [[Primary Key]] et les [[Foreign Key]] & sur les colonnes les plus utilis√©s (en terme de comparaison m√©moire on devrait atteindre une part 40% [[Index]] / 60% data)\n- Eviter au max l'utilisation de fonction dans les requ√™tes car elles emp√™chent l'utilisation des index.\n- Regarder les index les moins utilis√©s = Ils ralentissent l‚Äô√©criture\n- En fonction du m√©tier, il peut √™tre pertinent de cr√©er des vues ou des partitions pour optimiser les requ√™tes redondante"
    },
    {
        "id": "44c07912-e569-4ffd-afe8-ba9f66a366bb",
        "title": "Bonne pratiques Astuces Infos code",
        "description": "---\nid: 25d1a09d-2ccd-4cd5-a763-aa65e2c63372\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_Dev]]\n\n# [[Java]] - Comparaison BigDecimal.\n**Si je veux faire des comparaisons avec des `BigDecimal`.**\n\nOn va pr√©f√©rer cette comparaison : \n\n```java\nsipa2ElementFournisseur.getTauxTva().stripTrailingZeros().equals(fournisseurJSON.getTauxTva())\n```\n\n√† celle-ci : \n\n```java\nObjects.equals(sipa2ElementFournisseur.getMontantTtc(), fournisseurJSON.getMontantTtc());\nsipa2ElementFournisseur.getMontantTtc().equals(fournisseurJSON.getMontantTtc()));\n```\n\nParce qu‚Äôon peut avoir des probl√®mes d‚Äôarrondis (si j‚Äôai 0 et 0.0 le `Objects.equals()` renvoie faux).\n\nA noter que `stripTrailingZeros()` renvoi la notation scientifique de la valeur en string. Donc avec la pr√©cision sur les chiffres apr√®s la virgules.\n\n# [[Java]] - Activer les asserts\nPour pouvoir activer les asserts en java, il faut passer en argument de la JVM **-ea** (Enable Assert)\n\n# Appel en [[Base de donn√©e]]\n\nFaire tr√®s attention aux requ√™tes qu‚Äôon va faire en base.\n\nOn va pr√©f√©rer r√©cup√©rer toutes les infos dont on a besoin une fois, pour ensuite les passer en param√®tre de nos m√©thodes.\n\nDans des structures imbriqu√©es on peut se retrouver √† aller chercher 6 fois la m√™me chose.\n\n# Comparaison de valeur\nToujours mettre en premier dans une comparaison la valeur dont on est s√ªr !\n```java\n# Mauvais exemple\nexception.getEnumCode().equals(ExceptionTechniqueEnum.CONCEPT_NOT_FOUND.getCode())\n\n# Bon Exemple\nExceptionTechniqueEnum.CONCEPT_NOT_FOUND.getCode().equals(exception.getEnumCode())\n```\nCar dans ce cas exception.getEnumCode() peut √™tre null, ou produire null. "
    },
    {
        "id": "afd4c958-e250-4085-aa53-067aafec3f01",
        "title": "Bonne pratiques Astuces Infos ops",
        "description": "---\nid: ddeca416-e229-43bd-9ff3-cf790d5c7db6\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_DevSecOps]]\n# Installation [[WSL]] sans acc√®s au Microsoft Store\n> Si par exemple, il est bloqu√© par l‚Äôordinateur de la soci√©t√©.\n> \n\n```java\nwsl --update\n// Recherche de mises √† jour en cours... Veuillez patienter\n// Erreur : 0x8024500c\n\nwsl --update --web-download\n```"
    },
    {
        "id": "c8431349-aa03-4939-8097-d26735b0555d",
        "title": "Capture Data Change (CDC)",
        "description": "---\nid: 88fa46d4-2deb-41b1-9694-46a255156d83\n---\n# Rapidement c'est quoi‚ùì\n\nCapture Data Change (CDC) est une technique permettant de d√©tecter et de capturer les modifications de donn√©es dans une [[Base de donn√©e]].  Elle est souvent utilis√©e pour la r√©plication de donn√©es et la synchronisation entre [[Base de donn√©e]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCapture Data Change (CDC) est un m√©canisme qui identifie et enregistre les modifications apport√©es aux donn√©es d'une [[Base de donn√©e]].  Au lieu de copier l'int√©gralit√© de la base de donn√©es √† chaque synchronisation, le CDC ne capture que les changements (insertions, mises √† jour, suppressions) survenus depuis la derni√®re synchronisation.  Ceci am√©liore consid√©rablement l'efficacit√© et la performance, notamment pour les bases de donn√©es volumineuses.\n\nPlusieurs m√©thodes existent pour impl√©menter le CDC :\n\n* **Triggers:** Des d√©clencheurs (triggers) sont d√©finis sur les tables pour enregistrer chaque modification dans une table de journalisation (log table).  Cette m√©thode est relativement simple √† impl√©menter mais peut impacter les performances si mal configur√©e.\n\n* **Log Mining:**  L'extraction d'informations directement depuis les logs de la base de donn√©es.  Cette approche est g√©n√©ralement plus performante que les triggers mais plus complexe √† mettre en ≈ìuvre et d√©pend fortement du syst√®me de gestion de base de donn√©es (SGBD).\n\n* **Change Data Capture tools:** Des outils sp√©cialis√©s (ex: [[Debezium]], [[Maxwell]]) offrent des fonctionnalit√©s avanc√©es de CDC, g√©rant la complexit√© de l'extraction et de la transformation des donn√©es.  Ils permettent souvent une int√©gration plus simple avec diff√©rents SGBD et technologies.\n\nLes donn√©es captur√©es par le CDC sont g√©n√©ralement stock√©es dans une table de journalisation ou transmises √† un syst√®me de traitement en temps r√©el (streaming) pour diverses applications, comme la r√©plication vers une base de donn√©es secondaire, l'int√©gration avec des [[Date Warehouse]], la fourniture de donn√©es en temps r√©el pour les applications, etc.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance am√©lior√©e:** Seules les modifications sont trait√©es, ce qui rend le processus de synchronisation beaucoup plus rapide et moins gourmand en ressources.\n* **Efficacit√© accrue:** R√©duction du volume de donn√©es transf√©r√©es et trait√©es.\n* **Scalabilit√©:**  Adaptable √† des bases de donn√©es de grandes tailles.\n* **Faible latence:**  Permet de fournir des donn√©es presque en temps r√©el.\n* **Flexibilit√©:**  Compatible avec diverses technologies et syst√®mes de bases de donn√©es.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© d'impl√©mentation:**  La mise en ≈ìuvre peut √™tre complexe, en particulier pour les solutions bas√©es sur le *log mining* ou n√©cessitant une int√©gration personnalis√©e.\n* **Gestion des erreurs:**  Il est crucial de mettre en place une gestion robuste des erreurs pour garantir l'int√©grit√© des donn√©es.\n* **Co√ªt:** Les outils CDC commerciaux peuvent engendrer des co√ªts suppl√©mentaires.\n* **Maintenance:**  N√©cessite une maintenance r√©guli√®re pour garantir la fiabilit√© et la performance du syst√®me.\n* **D√©pendance au SGBD:**  La m√©thode d'impl√©mentation d√©pend fortement du SGBD utilis√©.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "f9bb1ea6-0be5-467a-86e9-1317b9f9e255",
        "title": "Certification Java 17",
        "description": "---\nid: cdc0b331-bbe5-4556-ad81-10811ff4073c\n---\nSource de la formation : https://r331.github.io/OCP-Oracle-Certified-Professional-Java-SE-21-1Z0-839-Open-Study-Guide/\n### 1. **[[Certification Java 17 - Concepts de Base en Java]]**\n\n- Types primitifs et classes enveloppes (Wrapper)\n- Op√©rations arithm√©tiques et bool√©ennes (promotion de type, casting)\n- Pr√©c√©dence des op√©rateurs\n- Utilisation de `var` pour l‚Äôinf√©rence de type\n\n### 2. **[[Certification Java 17 - Programmation Orient√©e Objet (OOP)]]**\n\n- D√©claration et instanciation d‚Äôobjets\n- Cycle de vie des objets (cr√©ation, r√©f√©rences, garbage collection)\n- Encapsulation, immutabilit√©\n- H√©ritage, classes abstraites et classes scell√©es (`sealed`)\n- Polymorphisme, type objet vs type r√©f√©rence\n- Op√©rateur `instanceof` et pattern matching\n- Interfaces : m√©thodes `default`, `static`, priv√©es\n- Enums avec champs, m√©thodes et constructeurs\n\n### 3. **[[Certification Java 17 - Packages et Modules]]**\n\n- Organisation des classes en packages\n- Java Platform Module System (JPMS) : d√©finition de modules, d√©pendances, services\n\n### 4. **[[Certification Java 17 - Gestion des types Date, Temps, Texte et Num√©rique]]**\n\n- API `Date-Time` : `LocalDate`, `LocalTime`, `LocalDateTime`, `ZonedDateTime`\n- `Period`, `Duration`, `Instant` pour la gestion des intervalles de temps\n- Classes `String`, `StringBuilder`, `Text Blocks`\n- API Math et `BigDecimal`\n\n### 5. **[[Certification Java 17 - Contr√¥le du Flux d'Ex√©cution]]**\n\n- Structures de contr√¥le (`if/else`, `switch`, `while`, `for`, `do-while`)\n- Expressions `switch` et pattern matching\n- Instructions `break`, `continue`\n\n### 6. **[[Certification Java 17 - Gestion des Exceptions]]**\n\n- Utilisation de `try/catch/finally`\n- `try-with-resources`\n- Multi-catch (`catch` de plusieurs exceptions en une seule clause)\n- Exceptions personnalis√©es (`extends Exception` ou `extends RuntimeException`)\n\n### 7. **[[Certification Java 17 - Collections et Tableaux]]**\n\n- Tableaux (`int[]`, `String[]`)\n- Collections (`List`, `Set`, `Map`, `Deque`)\n- API `SequencedCollection`, `SequencedSet`, `SequencedMap` (Java 21)\n- Manipulations : ajout, suppression, tri\n\n### 8. **[[Certification Java 17 - Streams et Expressions Lambda]]**\n\n- Utilisation des `Stream<T>` et `IntStream`, `DoubleStream`\n- `filter()`, `map()`, `reduce()`, `collect()`\n- D√©composition, concat√©nation, partitionnement\n- Streams s√©quentiels et parall√®les\n\n### 9. **[[Certification Java 17 - Programmation Concurrente]]**\n\n- Threads (`Runnable`, `Callable`)\n- `ExecutorService`, `ForkJoinPool`\n- Threads virtuels (`Virtual Threads`, `Thread.ofVirtual()`)\n- Verrous (`synchronized`, `Lock`, `ReadWriteLock`)\n- Collections concurrentes et streams parall√®les\n\n### 10. **[[Certification Java 17 - Sorties et Fichiers]]**\n\n- Flux (`InputStream`, `OutputStream`, `Reader`, `Writer`)\n- S√©rialisation/d√©s√©rialisation d‚Äôobjets (`Serializable`)\n- API `java.nio.file` pour la manipulation des fichiers et r√©pertoires\n\n### 11. **[[Certification Java 17 - Acc√®s aux Bases de Donn√©es avec JDBC]]**\n\n- Connexion √† une base de donn√©es (`DriverManager`, `DataSource`)\n- Ex√©cution de requ√™tes (`Statement`, `PreparedStatement`, `CallableStatement`)\n- Gestion des transactions (`commit`, `rollback`)\n\n### 12. **[[Certification Java 17 - D√©ploiement et Modules Java]]**\n\n- Compilation et cr√©ation de JARs (`modulaires` et `non-modulaires`)\n- Images d‚Äôex√©cution (`jlink`)\n- Migration avec modules anonymes et automatiques\n\n### 13. **[[Certification Java 17 - Internationalisation et Localisation]]**\n\n- Locales (`Locale`)\n- `ResourceBundle` pour la gestion des ressources multilingues\n- Formatage des dates, nombres et devises (`NumberFormat`, `DateTimeFormatter`)\n\n[[Java]]"
    },
    {
        "id": "e5648766-c198-4852-8a19-a50320131cca",
        "title": "ChromaDB",
        "description": "---\nid: 501b3586-143e-448a-bae9-4ff77f3a5793\n---\n# Rapidement c'est quoi‚ùì\n\nChromaDB est une [[Base de donn√©e]] vectorielle open-source permettant de stocker et de rechercher des vecteurs de plongement (embeddings).  Elle est con√ßue pour √™tre facile √† utiliser et √† int√©grer dans des applications de recherche s√©mantique.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nChromaDB est une base de donn√©es qui stocke et recherche des donn√©es non structur√©es en utilisant des embeddings.  Un embedding est une repr√©sentation vectorielle d'un morceau de texte, d'une image, ou d'un autre type de donn√©es.  Au lieu de chercher des donn√©es par mots cl√©s exacts, ChromaDB permet de rechercher des donn√©es similaires en fonction de la similarit√© vectorielle des embeddings.  Cela permet de r√©aliser des recherches s√©mantiques, c'est-√†-dire de trouver des √©l√©ments dont le sens est proche de la requ√™te, m√™me si les mots utilis√©s sont diff√©rents.\n\nChromaDB utilise une architecture client-serveur. Le client envoie des requ√™tes √† un serveur qui contient la base de donn√©es.  Il supporte plusieurs types de stockage persistant, permettant ainsi une grande flexibilit√©.  Il offre des fonctionnalit√©s comme l'ajout, la mise √† jour et la suppression de donn√©es, ainsi que des m√©thodes de recherche bas√©es sur la similarit√© cosinus ou d'autres m√©triques.  L'API est simple et intuitive, facilitant son int√©gration dans divers projets.  ChromaDB est particuli√®rement bien adapt√© aux applications de recherche s√©mantique, de recommandation, et de clustering.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et facile √† utiliser:**  Le code source est disponible publiquement, facilitant l'audit et la contribution.  Son API est simple √† prendre en main.\n* **Flexibilit√©:** Supporte plusieurs types de stockage persistant (en m√©moire, disque, etc.).\n* **Performance:**  Optimis√© pour la recherche de similarit√© vectorielle √† grande √©chelle.\n* **Recherche s√©mantique:** Permet de trouver des donn√©es similaires en fonction du sens, et non seulement des mots cl√©s.\n* **Int√©gration facile:** API simple et bien document√©e pour une int√©gration ais√©e dans diff√©rents projets.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Maturit√© relative:**  Compar√© √† des bases de donn√©es vectorielles plus √©tablies, ChromaDB est relativement jeune et pourrait pr√©senter des imperfections.\n* **Scalabilit√©:** Bien que performant, sa scalabilit√© √† tr√®s grande √©chelle pourrait n√©cessiter une configuration et une optimisation avanc√©es.\n* **D√©pendances:**  N√©cessite des biblioth√®ques sp√©cifiques pour fonctionner, ce qui peut ajouter de la complexit√© √† l'installation et √† la configuration.\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "643b7d68-8af3-4764-8cab-279e51c9bb42",
        "title": "Client Side Rendering (CSR)",
        "description": "---\nid: f0414542-a158-439d-9e1b-0113e950e207\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe **Client Side Rendering (CSR)** est une m√©thode de rendu des pages [[Web]] o√π le navigateur charge une page [[HTML]] basique et ex√©cute ensuite du [[JavaScript]] pour g√©n√©rer dynamiquement le contenu de la page.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe CSR repose sur le principe que le code [[JavaScript]] du c√¥t√© client (navigateur) est responsable de la construction de la page. Lorsqu'un utilisateur acc√®de √† une page, le navigateur charge un fichier [[HTML]] minimal, puis t√©l√©charge et ex√©cute du [[JavaScript]] pour r√©cup√©rer et afficher les donn√©es, souvent via des appels API. Cela permet un rendu dynamique et interactif sans avoir besoin d'un serveur pour g√©n√©rer la page √† chaque requ√™te.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Rapidit√© de compilation** : Seulement un transfert de fichiers est n√©cessaire, ce qui rend le processus de chargement initial rapide.\n- **Adapt√© au contenu dynamique** : Id√©al pour des sites interactifs o√π le contenu change souvent, comme des applications web ou des plateformes sociales.\n- **Exp√©rience utilisateur fluide** : Une fois la page rendue, l'interaction avec la page est rapide et r√©active.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **[[SEO]] limit√©** : Le contenu n'est pas visible pour les moteurs de recherche avant l'ex√©cution du [[JavaScript]], rendant l'indexation difficile pour le r√©f√©rencement.\n- **Temps de chargement initial** : Le navigateur doit ex√©cuter tout le [[JavaScript]] avant d'afficher la page, ce qui peut entra√Æner des d√©lais d'affichage significatifs, notamment sur des appareils peu puissants.\n- **D√©pendance au [[JavaScript]]** : Les utilisateurs avec des configurations de navigateur non optimis√©es ou des d√©sactivations de [[JavaScript]] ne verront pas correctement la page.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "450fc502-04e9-4dd5-bb5d-41d5be4cf560",
        "title": "Certification Java 17 - Collections et Tableaux",
        "description": "---\nid: 205a0c04-b33c-475b-9a7f-cc1720da1bdb\n---\n## **7.1. Tableaux (`int[]`, `String[]`)**\n\n### **D√©claration et initialisation**\n\n```java\nint[] nombres = {1, 2, 3, 4, 5}; // D√©claration et affectation\nString[] noms = new String[3]; // Tableau de taille fixe (valeurs nulles)\n```\n\n### **Acc√®s aux √©l√©ments**\n\n```java\nSystem.out.println(nombres[0]); // Affiche 1\nnoms[0] = \"Alice\";\n```\n\n### **Boucle `for` pour parcourir un tableau**\n\n```java\nfor (int i = 0; i < nombres.length; i++) {\n    System.out.println(nombres[i]);\n}\n```\n\n### **Boucle `for-each` (simplifi√©e)**\n\n```java\nfor (int nombre : nombres) {\n    System.out.println(nombre);\n}\n```\n\n### **Tri avec `Arrays.sort()`**\n\n```java\nimport java.util.Arrays;\n\nArrays.sort(nombres); // Trie le tableau en ordre croissant\nSystem.out.println(Arrays.toString(nombres));\n```\n\nüìå **Un tableau a une taille fixe et ne peut pas √™tre redimensionn√©.**\n\n---\n\n## **7.2. Collections (`List`, `Set`, `Map`, `Deque`)**\n\nüìå **Les collections sont dynamiques**, contrairement aux tableaux.\n\n|**Interface**|**Impl√©mentations courantes**|**Caract√©ristiques**|\n|---|---|---|\n|`List`|`ArrayList`, `LinkedList`|Ordonn√©e, doublons autoris√©s|\n|`Set`|`HashSet`, `LinkedHashSet`, `TreeSet`|Uniques, non ordonn√©es (`HashSet`), tri√©es (`TreeSet`)|\n|`Map`|`HashMap`, `LinkedHashMap`, `TreeMap`|Cl√©/valeur, unique par cl√©|\n|`Deque`|`ArrayDeque`, `LinkedList`|Double-ended queue (FIFO/LIFO)|\n\n---\n\n### **`List` : Tableau dynamique (ArrayList, LinkedList)**\n\n```java\nimport java.util.*;\n\nList<String> liste = new ArrayList<>();\nliste.add(\"Java\");\nliste.add(\"Python\");\nliste.add(\"C++\");\n\nSystem.out.println(liste.get(1)); // Python\nliste.remove(\"C++\"); // Supprime C++\n```\n\nüìå **`ArrayList` est optimis√© pour l‚Äôacc√®s rapide, `LinkedList` pour l‚Äôinsertion/suppression.**\n\n---\n\n### **`Set` : Ensemble d‚Äô√©l√©ments uniques**\n\n```java\nSet<String> set = new HashSet<>();\nset.add(\"Java\");\nset.add(\"Python\");\nset.add(\"Java\"); // Ignor√© (pas de doublons)\nSystem.out.println(set);\n```\n\nüìå **`HashSet` (d√©sordonn√©), `TreeSet` (tri√©), `LinkedHashSet` (ordre d‚Äôinsertion).**\n\n---\n\n### **`Map` : Association cl√©/valeur**\n\n```java\nMap<String, Integer> map = new HashMap<>();\nmap.put(\"Alice\", 25);\nmap.put(\"Bob\", 30);\nSystem.out.println(map.get(\"Alice\")); // 25\n```\n\nüìå **`TreeMap` trie par cl√©, `LinkedHashMap` conserve l‚Äôordre d‚Äôinsertion.**\n\n---\n\n### **`Deque` : File d‚Äôattente double**\n\n```java\nDeque<String> deque = new ArrayDeque<>();\ndeque.addFirst(\"Premier\");\ndeque.addLast(\"Dernier\");\n\nSystem.out.println(deque.pollFirst()); // \"Premier\"\nSystem.out.println(deque.pollLast());  // \"Dernier\"\n```\n\nüìå **`Deque` peut √™tre utilis√© comme une pile (`Stack`) ou une file (`Queue`).**\n\n---\n\n## **7.3. API `SequencedCollection`, `SequencedSet`, `SequencedMap` (Java 21)**\n\nüìå **Ajout√© en Java 21 pour g√©rer l‚Äôordre des √©l√©ments de fa√ßon plus coh√©rente.**\n\n### **`SequencedCollection` : Collection ordonn√©e**\n\n```java\nSequencedCollection<String> list = new LinkedList<>();\nlist.addFirst(\"D√©but\");\nlist.addLast(\"Fin\");\n\nSystem.out.println(list.getFirst()); // D√©but\nSystem.out.println(list.getLast());  // Fin\n```\n\nüìå **Am√©liore `List`, `Deque` et `SortedSet` en offrant des m√©thodes `getFirst()`, `getLast()` et `reversed()`.**\n\n---\n\n### **`SequencedSet` : Ensemble ordonn√©**\n\n```java\nSequencedSet<String> set = new LinkedHashSet<>();\nset.add(\"Java\");\nset.add(\"Python\");\nSystem.out.println(set.getFirst()); // Java\nSystem.out.println(set.getLast());  // Python\n```\n\nüìå **Permet de r√©cup√©rer le premier et le dernier √©l√©ment d‚Äôun `Set`.**\n\n---\n\n### **`SequencedMap` : `Map` ordonn√©e**\n\n```java\nSequencedMap<String, Integer> map = new LinkedHashMap<>();\nmap.put(\"Alice\", 25);\nmap.put(\"Bob\", 30);\nSystem.out.println(map.firstEntry()); // Alice=25\nSystem.out.println(map.lastEntry());  // Bob=30\n```\n\nüìå **Ajoute `firstEntry()`, `lastEntry()` et `reversed()`.**\n\n---\n\n## **7.4. Manipulations des collections (ajout, suppression, tri)**\n\n### **Ajout et suppression**\n\n```java\nList<String> list = new ArrayList<>(List.of(\"Java\", \"Python\", \"C++\"));\nlist.add(\"JavaScript\"); // Ajout\nlist.remove(\"Python\");  // Suppression\nSystem.out.println(list);\n```\n\n### **Tri d‚Äôune `List` avec `Collections.sort()`**\n\n```java\nList<Integer> nombres = Arrays.asList(3, 1, 4, 1, 5);\nCollections.sort(nombres); // Tri croissant\nSystem.out.println(nombres);\n```\n\n### **Tri d‚Äôune `List` avec un comparateur personnalis√©**\n\n```java\nList<String> mots = Arrays.asList(\"Banane\", \"Pomme\", \"Orange\");\nmots.sort(Comparator.reverseOrder()); // Tri d√©croissant\nSystem.out.println(mots);\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Tableaux (`int[]`, `String[]`)** : Taille fixe, rapide mais rigide.  \n‚úÖ **`List`, `Set`, `Map`, `Deque`** : Collections dynamiques et flexibles.  \n‚úÖ **`SequencedCollection` (Java 21)** : Meilleure gestion de l‚Äôordre des √©l√©ments.  \n‚úÖ **Manipulations : ajout, suppression, tri avec `Collections.sort()`.**\n\n---"
    },
    {
        "id": "a1ac1cfe-c0dc-436c-83ca-f17362f54d14",
        "title": "Common Vulnerabilities and Exposures (CVE)",
        "description": "---\nid: 2411dd03-b943-417a-93c1-64d9ff895771\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **CVE (Common Vulnerabilities and Exposures)** sont des identifiants uniques attribu√©s aux vuln√©rabilit√©s de s√©curit√© dans les logiciels et syst√®mes, permettant de les r√©f√©rencer de mani√®re standardis√©e pour faciliter leur gestion et leur correction.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn CVE est un identifiant unique attribu√© √† une vuln√©rabilit√© ou exposition de s√©curit√©. Chaque CVE contient :\n\n- **Un identifiant unique** : Exemple : **CVE-2021-34527**.\n- **Une description de la vuln√©rabilit√©** : Explication du probl√®me de s√©curit√©.\n- **Des r√©f√©rences externes** : Liens vers des d√©tails, solutions ou correctifs pour la vuln√©rabilit√©.\n\nLes CVE sont utilis√©s par les chercheurs en s√©curit√©, les entreprises, et les administrateurs syst√®mes pour suivre et r√©soudre rapidement les failles de s√©curit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Standardisation** : Offre un syst√®me commun pour identifier et discuter des vuln√©rabilit√©s, facilitant la collaboration entre les professionnels de la s√©curit√©.\n- **Accessibilit√©** : Des bases de donn√©es publiques permettent de rechercher rapidement des informations sur les vuln√©rabilit√©s.\n- **Gestion des risques** : Permet une gestion rapide des risques et l'application de correctifs cibl√©s.\n- **Suivi des mises √† jour** : Aide √† suivre l'√©volution des vuln√©rabilit√©s et des correctifs disponibles.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Manque de d√©tails techniques** : Les CVE ne contiennent souvent pas suffisamment d'informations techniques pour comprendre en profondeur la vuln√©rabilit√© sans recherches suppl√©mentaires.\n- **D√©lais de mise √† jour** : Parfois, les vuln√©rabilit√©s peuvent √™tre r√©f√©renc√©es apr√®s une p√©riode de retard, laissant du temps aux attaquants pour les exploiter avant qu'un patch ne soit disponible.\n- **Pas de solutions int√©gr√©es** : Le CVE fournit une identification, mais il appartient aux entreprises de mettre en place des mesures pour corriger les vuln√©rabilit√©s.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "099be107-e1d0-4ad3-93d9-53376662611b",
        "title": "Certification Java 17 - Concepts de Base en Java",
        "description": "---\nid: f00b7523-614f-46cb-81f9-3a5e4acdd35b\n---\n## **1.1. Types primitifs et classes enveloppes (Wrapper)**\n\n### **Types primitifs en Java**\n\nJava propose **8 types primitifs** pour stocker des valeurs en m√©moire de mani√®re efficace. Ces types sont stock√©s directement en **m√©moire stack**, ce qui les rend plus rapides et moins gourmands en m√©moire que les objets.\n\n|Type|Bits|Valeur min|Valeur max|Valeur par d√©faut|\n|---|---|---|---|---|\n|`boolean`|8|`false`|`true`|`false`|\n|`byte`|8|-128|127|`0`|\n|`short`|16|-32 768|32 767|`0`|\n|`int`|32|-2^31|2^31 - 1|`0`|\n|`long`|64|-2^63|2^63 - 1|`0L`|\n|`float`|32|-|-|`0.0f`|\n|`double`|64|-|-|`0.0d`|\n|`char`|16|0 (`\\u0000`)|65 535|`\\u0000`|\n\n**Exemples d‚Äôutilisation des types primitifs :**\n\n```java\nboolean isActive = true;\nint age = 25;\ndouble price = 19.99;\nchar grade = 'A';\n```\n\n### **Classes Enveloppes (Wrappers)**\n\nJava offre des **classes enveloppes (Wrapper Classes)** pour permettre aux types primitifs d‚Äô√™tre trait√©s comme des objets. Cela est utile notamment pour travailler avec des collections (`List`, `Set`, `Map`), qui ne peuvent contenir que des objets.\n\n|Primitif|Classe Wrapper|\n|---|---|\n|`boolean`|`Boolean`|\n|`byte`|`Byte`|\n|`short`|`Short`|\n|`int`|`Integer`|\n|`long`|`Long`|\n|`float`|`Float`|\n|`double`|`Double`|\n|`char`|`Character`|\n\n**Exemple : Auto-boxing et Unboxing**\n\n```java\nInteger obj = 10;  // Auto-boxing (int -> Integer)\nint num = obj;     // Unboxing (Integer -> int)\n```\n\n- **Auto-boxing** : Conversion automatique d‚Äôun type primitif en objet wrapper.\n- **Unboxing** : Conversion automatique d‚Äôun objet wrapper en type primitif.\n\n---\n\n## **1.2. Op√©rations arithm√©tiques et bool√©ennes**\n\n### **Promotion de type (Type Promotion)**\n\nLorsqu‚Äôune op√©ration est r√©alis√©e entre diff√©rents types, **Java effectue une promotion automatique** :\n\n1. **Si un des op√©randes est `double`**, le r√©sultat est `double`.\n2. **Si un des op√©randes est `float`**, le r√©sultat est `float`.\n3. **Si un des op√©randes est `long`**, le r√©sultat est `long`.\n4. **Sinon, le r√©sultat est `int`** (m√™me si les op√©randes sont `byte` ou `short`).\n\n**Exemples :**\n\n```java\nint a = 10;\ndouble b = 2.5;\ndouble result = a + b;  // a est promu en double => 10.0 + 2.5 = 12.5\n\nbyte x = 5;\nshort y = 10;\nint z = x + y;  // x et y sont promus en int => 5 + 10 = 15\n```\n\n### **Casting explicite**\n\nLorsque la promotion automatique ne convient pas, on utilise **le casting explicite** pour convertir manuellement un type.\n\n```java\ndouble d = 9.7;\nint i = (int) d;  // 9 (la partie d√©cimale est tronqu√©e)\n\nlong bigValue = 100000L;\nint smallValue = (int) bigValue;  // Attention : peut causer une perte de donn√©es si la valeur d√©passe la capacit√© d‚Äôun int\n```\n\n### **Op√©rateurs arithm√©tiques**\n\n|Op√©rateur|Description|Exemple|\n|---|---|---|\n|`+`|Addition|`5 + 3 // 8`|\n|`-`|Soustraction|`9 - 2 // 7`|\n|`*`|Multiplication|`4 * 6 // 24`|\n|`/`|Division enti√®re|`10 / 3 // 3`|\n|`%`|Modulo (reste)|`10 % 3 // 1`|\n\n**Attention : Division entre entiers**\n\n```java\nint result = 5 / 2;  // 2 (car division enti√®re)\ndouble correctResult = 5 / 2.0;  // 2.5\n```\n\n### **Op√©rateurs bool√©ens**\n\n| Op√©rateur | Description       | Exemple                  |\n| --------- | ----------------- | ------------------------ |\n| ==        | √âgalit√©           | `a == b`                 |\n| `!=`      | Diff√©rent         | `a != b`                 |\n| `>`       | Sup√©rieur         | `a > b`                  |\n| `<`       | Inf√©rieur         | `a < b`                  |\n| `>=`      | Sup√©rieur ou √©gal | `a >= b`                 |\n| `<=`      | Inf√©rieur ou √©gal | `a <= b`                 |\n| `&&`      | ET logique        | `true && false // false` |\n| `         |                   | `                        |\n| `!`       | NON logique       | `!true // false`         |\n\n---\n\n## **1.3. Pr√©c√©dence des op√©rateurs**\n\nJava √©value les expressions en fonction de la priorit√© des op√©rateurs.  \n**Ordre de priorit√© (du plus √©lev√© au plus faible) :**\n\n1. `++`, `--` (postfix√©s)\n2. `++`, `--`, `!`, `~` (pr√©fix√©s)\n3. `*`, `/`, `%`\n4. `+`, `-`\n5. `<<`, `>>`, `>>>`\n6. `<`, `<=`, `>`, `>=`\n7. \"==\", \"!=\"\n8. `&`\n9. `^`\n10. `|`\n11. `&&`\n12. `||`\n13. `? :` (ternaire)\n14. `=`, `+=`, `-=`, `*=`, `/=`, etc.\n\n**Exemples :**\n\n```java\nint result = 5 + 2 * 3;  // 5 + (2 * 3) = 11\nboolean test = true || false && false; // true || (false && false) = true\n```\n\n**Bonnes pratiques :**\n\n- **Toujours utiliser des parenth√®ses** pour √©viter les ambigu√Øt√©s.\n\n```java\nint result = (5 + 2) * 3;  // 21\n```\n\n---\n\n## **1.4. Inf√©rence de Type avec `var`**\n\nIntroduit en Java 10, `var` permet √† Java de **d√©duire le type d'une variable lors de l'initialisation**.\n\n```java\nvar x = 10;  // int\nvar text = \"Java\";  // String\nvar list = List.of(1, 2, 3);  // List<Integer>\n```\n\n**Limitations de `var` :**\n\n- **Doit √™tre initialis√© imm√©diatement** (`var x;` ne compile pas).\n- **Uniquement utilisable en local** (pas pour les champs de classe ni les param√®tres de m√©thode).\n- **Ne peut pas √™tre utilis√© avec `null` sans type explicite**.\n\n```java\nvar value = null; // ERREUR, type ind√©fini\n```\n\n**Cas d‚Äôutilisation typique :**\n\n```java\nfor (var entry : map.entrySet()) {\n    System.out.println(entry.getKey() + \" -> \" + entry.getValue());\n}\n```\n\n---\n\n### **R√©sum√©**\n\n‚úÖ **Types primitifs vs Wrappers** (Auto-boxing, Unboxing)  \n‚úÖ **Promotion de type & casting explicite**  \n‚úÖ **Op√©rations arithm√©tiques et bool√©ennes**  \n‚úÖ **Pr√©c√©dence des op√©rateurs**  \n‚úÖ **Inf√©rence de type avec `var`**\n\n---\n[[Java]] [[Certification Java 17]]"
    },
    {
        "id": "d27e1fa6-a6f5-4430-ae47-04f0792380f4",
        "title": "Certification Java 17 - Contr√¥le du Flux d'Ex√©cution",
        "description": "---\nid: 6e8b33a4-8d4c-4291-b3eb-f221452b3430\n---\n## **5.1. Structures de contr√¥le (`if/else`, `switch`, `while`, `for`, `do-while`)**\n\n### **`if/else` : Condition simple**\n\n```java\nint age = 20;\nif (age >= 18) {\n    System.out.println(\"Majeur\");\n} else {\n    System.out.println(\"Mineur\");\n}\n```\n\nüìå **Les blocs `{}` sont obligatoires si plusieurs instructions sont pr√©sentes.**\n\n### **Op√©rateur ternaire (`? :`)**\n\n```java\nString statut = (age >= 18) ? \"Majeur\" : \"Mineur\";\nSystem.out.println(statut);\n```\n\n---\n\n### **`switch` : Remplace plusieurs `if/else`**\n\n```java\nint jour = 3;\nswitch (jour) {\n    case 1 -> System.out.println(\"Lundi\");\n    case 2 -> System.out.println(\"Mardi\");\n    case 3 -> System.out.println(\"Mercredi\");\n    default -> System.out.println(\"Jour inconnu\");\n}\n```\n\nüìå **Depuis Java 12**, `switch` retourne une **valeur** directement :\n\n```java\nString jourNom = switch (jour) {\n    case 1 -> \"Lundi\";\n    case 2 -> \"Mardi\";\n    case 3 -> \"Mercredi\";\n    default -> \"Jour inconnu\";\n};\nSystem.out.println(jourNom);\n```\n\n---\n\n### **`while` : Ex√©cution tant que la condition est vraie**\n\n```java\nint i = 0;\nwhile (i < 3) {\n    System.out.println(i);\n    i++;\n}\n```\n\nüìå **Utile quand on ne sait pas √† l'avance combien d'it√©rations seront n√©cessaires.**\n\n---\n\n### **`do-while` : Ex√©cute **au moins une fois** avant de tester la condition**\n\n```java\nint i = 0;\ndo {\n    System.out.println(i);\n    i++;\n} while (i < 3);\n```\n\n---\n\n### **`for` : Boucle avec un compteur**\n\n```java\nfor (int i = 0; i < 3; i++) {\n    System.out.println(i);\n}\n```\n\n### **`for-each` : Parcourir une collection**\n\n```java\nList<String> fruits = List.of(\"Pomme\", \"Banane\", \"Orange\");\nfor (String fruit : fruits) {\n    System.out.println(fruit);\n}\n```\n\nüìå **Plus lisible que `for (int i = 0; i < list.size(); i++)`**\n\n---\n\n## **5.2. Expressions `switch` et Pattern Matching**\n\nDepuis **Java 16+, `switch` permet du Pattern Matching**, √©vitant les conversions manuelles.\n\n### **Pattern Matching (`instanceof`)**\n\n**Avant Java 16**\n\n```java\nObject obj = \"Bonjour\";\nif (obj instanceof String) {\n    String s = (String) obj;  // Cast manuel obligatoire\n    System.out.println(s.length());\n}\n```\n\nüìå **Avec Java 16+, pas besoin de cast explicite :**\n\n```java\nif (obj instanceof String s) {\n    System.out.println(s.length()); // Automatique !\n}\n```\n\n---\n\n### **Pattern Matching avec `switch`** _(Java 17)_\n\nüìå **Permet d'√©viter des `if/else` imbriqu√©s**\n\n```java\nObject obj = 42;\n\nString resultat = switch (obj) {\n    case Integer i -> \"C'est un entier : \" + i;\n    case String s -> \"C'est une cha√Æne : \" + s;\n    default -> \"Type inconnu\";\n};\nSystem.out.println(resultat);\n```\n\nüìå **Ajout de conditions (`when`)**\n\n```java\nObject obj = 50;\nswitch (obj) {\n    case Integer i when i > 10 -> System.out.println(\"Nombre sup√©rieur √† 10\");\n    case Integer i -> System.out.println(\"Nombre inf√©rieur ou √©gal √† 10\");\n    default -> System.out.println(\"Autre type\");\n}\n```\n\n---\n\n## **5.3. Instructions `break` et `continue`**\n\n### **`break` : Sortie imm√©diate d'une boucle**\n\n```java\nfor (int i = 0; i < 5; i++) {\n    if (i == 3) break;  // Arr√™te la boucle d√®s que i == 3\n    System.out.println(i);\n}\n```\n\n**Sortie :**\n\n```\n0\n1\n2\n```\n\n### **`continue` : Passe directement √† l‚Äôit√©ration suivante**\n\n```java\nfor (int i = 0; i < 5; i++) {\n    if (i == 3) continue;  // Ignore l'affichage du 3\n    System.out.println(i);\n}\n```\n\n**Sortie :**\n\n```\n0\n1\n2\n4\n```\n\nüìå **Utilisation dans `while`**\n\n```java\nint i = 0;\nwhile (i < 5) {\n    i++;\n    if (i % 2 == 0) continue; // Ignore les nombres pairs\n    System.out.println(i);\n}\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Structures de contr√¥le :** `if/else`, `switch`, `while`, `for`, `do-while`  \n‚úÖ **`switch` moderne avec pattern matching** (Java 17)  \n‚úÖ **Pattern Matching (`instanceof` avec variables)**  \n‚úÖ **`break` pour arr√™ter une boucle**  \n‚úÖ **`continue` pour passer √† l‚Äôit√©ration suivante**\n\n---\n"
    },
    {
        "id": "1d5c0267-8703-4ef6-9e3d-2c9bc2f4fba4",
        "title": "Cucumber",
        "description": "---\nid: 03afbb9c-cf5e-4cd9-8c81-db00cb35b56b\n---\n# Rapidement c'est quoi‚ùì\n\nCucumber est un outil de test d'automatisation bas√© sur le langage [[Gherkin]]. Il permet aux non-d√©veloppeurs (ex: testeurs, analystes fonctionnels) de d√©crire des sc√©narios de test de mani√®re claire et concise, facilitant la collaboration entre les √©quipes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCucumber utilise le langage [[Gherkin]], un langage simple et lisible par tous, bas√© sur des mots cl√©s comme \"Given\", \"When\", et \"Then\".  Ces mots cl√©s structurent les sc√©narios de test en d√©crivant l'√©tat initial (Given), l'action effectu√©e (When), et le r√©sultat attendu (Then).  Un exemple simple:\n\n```gherkin\nFeature: Withdrawing cash\n  Scenario: Successful withdrawal within balance\n    Given Alice has $234.56 in their account\n    When Alice tries to withdraw $200.00\n    Then the withdrawal is successful\n\n  Scenario: Declined withdrawal in excess of balance\n    Given Hamza has $198.76 in their account\n    When Hamza tries to withdraw $200.00\n    Then the withdrawal is declined\n```\n\nLes d√©veloppeurs impl√©mentent ensuite le code qui correspond √† chaque √©tape (\"Given\", \"When\", \"Then\").  Cette s√©paration des pr√©occupations (s√©paration entre la sp√©cification du test et son impl√©mentation) am√©liore la collaboration, la lisibilit√© et la maintenabilit√© des tests.  Cucumber peut √™tre int√©gr√© √† de nombreux frameworks de test (comme [[Selenium]], [[Cypress]] via `cypress-cucumber-preprocessor`), permettant ainsi d'automatiser l'ex√©cution des sc√©narios.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Collaboration am√©lior√©e:**  Permet une communication plus claire entre les √©quipes techniques et non-techniques. Les tests sont √©crits dans un langage compr√©hensible par tous.\n* **Maintenance facilit√©e:**  La s√©paration des sp√©cifications et de l'impl√©mentation rend les tests plus faciles √† maintenir et √† mettre √† jour.\n* **Tests plus lisibles:** Le format [[Gherkin]] rend les tests plus clairs et plus faciles √† comprendre, m√™me pour les personnes non impliqu√©es dans leur d√©veloppement.\n* **Documentation vivante:** Les sc√©narios [[Gherkin]] servent √©galement de documentation ex√©cutable du syst√®me.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  La mise en place et l'utilisation efficace de Cucumber peuvent n√©cessiter un certain temps d'apprentissage, notamment pour d√©finir des conventions claires et coh√©rentes.\n* **N√©cessite une bonne collaboration:**  Le succ√®s de Cucumber d√©pend fortement de la collaboration entre les √©quipes et d'une bonne compr√©hension des conventions utilis√©es.  Des d√©finitions ambig√ºes des \"Given\", \"When\" et \"Then\" peuvent rendre les tests difficiles √† maintenir.\n* **Peut √™tre verbeux:** Pour des tests complexes, la description [[Gherkin]] peut devenir assez longue et d√©taill√©e.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "7ec4ed2f-43a1-4eb2-a1aa-108cb2b03985",
        "title": "Cypress",
        "description": "---\nid: 80fa04db-9979-4f13-ae6a-087b96aa069b\n---\n# Rapidement c'est quoi‚ùì\n\nCypress est un framework de test [[JavaScript]] populaire pour les applications web. Il permet de r√©aliser des [[Test End2End (E2E)]] et des [[Test unitaire (TU)]] de composants.  Il se distingue par sa facilit√© d'utilisation et son approche int√©gr√©e.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCypress est un outil complet pour le test d'applications web.  Il offre une approche bas√©e sur le [[Document Object Model (DOM)]], ex√©cutant les tests directement dans le navigateur.  Cela permet une interaction plus naturelle et intuitive avec l'application test√©e, contrairement √† des solutions qui interagissent de mani√®re distante.\n\nCypress propose deux types de tests principaux :\n\n* **[[Test End2End (E2E)]]:**  Ces tests simulent le comportement d'un utilisateur r√©el, interagissant avec l'interface utilisateur de bout en bout.  Ils v√©rifient le flux complet d'une action, de l'interaction de l'utilisateur √† la r√©ponse du serveur.\n\n* **[[Test de Composant]]:**  Ces tests permettent de tester des composants individuels de l'interface utilisateur isol√©ment, sans d√©pendance √† l'application compl√®te. Ceci permet des tests unitaires plus rapides et cibl√©s.\n\nL'ex√©cution des tests se fait directement dans le navigateur, offrant un d√©bogage facile et une meilleure visibilit√© sur le d√©roulement des tests.  Cypress propose une API intuitive et chainable, facilitant la cr√©ation et la maintenance des tests.  Les fonctions principales incluent la s√©lection d'√©l√©ments (ex: `cy.get()`, `cy.contains()`), l'interaction avec les √©l√©ments (ex: `cy.click()`, `cy.type()`), et les assertions (ex: `cy.should()`).  Des fonctionnalit√©s avanc√©es comme l'interception des requ√™tes r√©seau (`cy.intercept()`), l'ex√©cution de t√¢ches personnalis√©es (`cy.task()`), et la g√©n√©ration de rapports avec captures d'√©cran sont √©galement disponibles.  La prise en charge de la couverture de code est possible via des plugins tiers.\n\nLa configuration est relativement simple, n√©cessitant un fichier `cypress.config.js` (ou `cypress.config.ts`) pour sp√©cifier les param√®tres de configuration, tels que l'URL de l'application et le navigateur √† utiliser.  La gestion des donn√©es de test peut √™tre r√©alis√©e via des dumps de base de donn√©es ou d'autres techniques.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Facilit√© d'utilisation et d'apprentissage:** L'API intuitive et la documentation claire rendent Cypress accessible aux d√©butants.\n* **D√©bogage simplifi√©:** L'ex√©cution dans le navigateur permet un d√©bogage facile et visuel.\n* **Tests rapides et fiables:**  L'ex√©cution directe dans le navigateur assure des tests rapides et stables.\n* **API chainable:** La possibilit√© d'encha√Æner les commandes facilite la cr√©ation de tests lisibles et maintenables.\n* **Fonctionnalit√©s compl√®tes:** Cypress offre un ensemble complet de fonctionnalit√©s, incluant la g√©n√©ration de rapports, les captures d'√©cran, et l'interception des requ√™tes r√©seau.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Support limit√© de Safari:** Le support de [[Safari]] est moins complet que pour d'autres navigateurs.\n* **Gestion limit√©e des onglets multiples:** La gestion des tests sur plusieurs onglets est limit√©e.\n* **Pas de support natif pour les tests mobiles:** Bien qu'il soit possible d'utiliser des solutions alternatives, il n'y a pas de support natif pour les tests sur des appareils mobiles.\n* **Prise en charge limit√©e des applications non-web:**  Son utilisation principale se concentre sur le web; l'adaptation √† d'autres types d'applications (ex: [[Electron]]) peut n√©cessiter des solutions sp√©cifiques.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]\n"
    },
    {
        "id": "9d6e109e-a4f3-49f9-a5b4-83691dd4497a",
        "title": "Debezium",
        "description": "---\nid: 1f2f593a-0a66-4f5d-860c-1677d5949620\n---\n# Rapidement c'est quoi‚ùì\n\nDebezium est un outil open-source qui capture et diffuse en temps r√©el les modifications de donn√©es ([[Capture Data Change (CDC)]]) dans les [[Base de donn√©e]].  Il permet de traiter ces changements de mani√®re fiable et efficace.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nDebezium est un middleware de [[Capture Data Change (CDC)]] qui s'int√®gre √† diff√©rentes [[Base de donn√©e]] ([[MySQL]], [[PostgreSQL]], [[MongoDB]], [[Oracle]], etc.) pour capturer les modifications de donn√©es (insertions, mises √† jour, suppressions) de mani√®re transparente.  Il utilise des m√©canismes sp√©cifiques √† chaque syst√®me de gestion de bases de donn√©es (SGBD) pour surveiller les logs de transactions (binlogs, WAL, oplogs, etc.) et extraire les √©v√©nements de changement.  Ces √©v√©nements sont ensuite format√©s en JSON et diffus√©s via diff√©rents connecteurs ([[Apache Kafka]], etc.).  La diffusion des donn√©es est effectu√©e de mani√®re incr√©mentale, envoyant uniquement les modifications, ce qui rend le processus efficient et √©vite la duplication massive de donn√©es.  \n\nDebezium offre des fonctionnalit√©s avanc√©es comme :\n\n* **Filtrage des donn√©es:**  Possibilit√© de filtrer les donn√©es captur√©es en fonction de tables, de colonnes ou de crit√®res sp√©cifiques.\n* **Transformation des donn√©es:**  Les donn√©es peuvent √™tre transform√©es avant d'√™tre diffus√©es, par exemple pour normaliser les formats ou enrichir les √©v√©nements avec des informations contextuelles.\n* **Gestion des erreurs et de la reprise:**  Debezium int√®gre des m√©canismes pour g√©rer les erreurs et assurer la reprise sur panne.\n* **Haute disponibilit√©:**  La conception du syst√®me permet une haute disponibilit√© gr√¢ce √† l'utilisation de technologies distribu√©es.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et communautaire:**  B√©n√©ficie d'un grand support communautaire et d'une maintenance active.\n* **Support de multiples SGBD:**  Permet de capturer les modifications de donn√©es dans une vari√©t√© de bases de donn√©es.\n* **Performances et scalabilit√©:**  Con√ßu pour g√©rer de grands volumes de donn√©es et s'adapter √† des besoins croissants.\n* **Flexibilit√©:**  Offre des options de configuration et de personnalisation √©tendues.\n* **Int√©gration avec [[Apache Kafka]]:**  S'int√®gre facilement avec [[Apache Kafka]] pour une diffusion robuste et distribu√©e des donn√©es.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:**  La configuration initiale peut √™tre complexe, surtout pour des environnements h√©t√©rog√®nes.\n* **Courbe d'apprentissage:**  N√©cessite une certaine expertise en mati√®re de [[Base de donn√©e]], de [[Data Streaming]] et de [[Capture Data Change (CDC)]].\n* **D√©pendances:**  D√©pend de diff√©rentes technologies ([[Apache Kafka]], par exemple), ajoutant une couche de complexit√© √† la mise en place.\n* **Gestion des sch√©mas:**  La gestion des √©volutions de sch√©mas de donn√©es peut n√©cessiter une attention particuli√®re.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "103bec1a-cef0-45fb-8eb1-c13ed1074984",
        "title": "Docker Swarm",
        "description": "---\nid: 3c134b45-51a4-4e25-9876-82facf350999\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Docker Swarm** est un outil d'orchestration de containers int√©gr√© √† [[Docker]]. Il permet de g√©rer un cluster de machines pour d√©ployer et orchestrer des applications conteneuris√©es de mani√®re simple et scalable.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nDocker Swarm permet de cr√©er un cluster de machines (n≈ìuds) et de d√©ployer des containers sur ces n≈ìuds. Il utilise un algorithme de consensus appel√© **[[Raft]]** pour √©lire un leader et g√©rer l'√©tat du cluster. Swarm facilite la gestion des services distribu√©s, la mise √† l'√©chelle automatique et la tol√©rance aux pannes. La configuration est simplifi√©e et ressemble √† un **[[Docker Compose]]** am√©lior√©.\n\n- **N≈ìuds** : Au moins 3 (id√©alement 5) n≈ìuds sont n√©cessaires pour garantir la r√©silience du cluster.\n- **Int√©gration avec Docker** : Swarm est inclus avec Docker, donc aucune installation suppl√©mentaire n'est n√©cessaire.\n- **Interface graphique** : Des outils comme **[[Portainer]]** peuvent √™tre utilis√©s pour g√©rer visuellement le cluster Docker Swarm.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Facilit√© d'int√©gration** : D√©j√† inclus avec [[Docker]], pas besoin d'installation suppl√©mentaire.\n- **Simplicit√© de configuration** : La configuration des services se fait via un fichier similaire √† Docker Compose.\n- **Haute disponibilit√©** : Gr√¢ce √† [[Raft]], le leader du cluster est √©lu et le consensus est maintenu, ce qui garantit la r√©silience.\n- **Mise √† l'√©chelle automatique** : Permet d'ajuster automatiquement le nombre de r√©plicas des services selon la charge.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Moins de fonctionnalit√©s avanc√©es** : Par rapport √† [[Kubernetes]], Swarm propose moins de fonctionnalit√©s avanc√©es pour la gestion complexe des clusters.\n- **Scalabilit√© limit√©e** : Bien que Swarm soit bien adapt√© pour des petits √† moyens clusters, il n'est pas aussi performant que [[Kubernetes]] pour des environnements de tr√®s grande √©chelle.\n- **Communaut√© plus petite** : La communaut√© et les ressources sont plus limit√©es compar√©es √† des solutions comme [[Kubernetes]].\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "23f53224-8522-45d1-b851-4fff726a77a5",
        "title": "Certification Java 17 - D√©ploiement et Modules Java",
        "description": "---\nid: e04928bd-dd1d-411a-a12e-6760db620a4c\n---\n## **12.1. Compilation et cr√©ation de JARs (modulaires et non-modulaires)**\n\nJava permet de compiler et de regrouper les classes dans des fichiers **JAR** (`Java Archive`). Avec **Java 9+, le syst√®me de modules (`JPMS`)** permet de mieux organiser les d√©pendances.\n\n---\n\n### **1. Compilation et ex√©cution d‚Äôun projet classique (non modulaire)**\n\nüìå **Un projet classique n‚Äôutilise pas `module-info.java`**\n\n**Compilation** :\n\n```sh\njavac -d out src/com/exemple/Main.java\n```\n\n**Cr√©ation du JAR :**\n\n```sh\njar --create --file monApp.jar -C out .\n```\n\n**Ex√©cution :**\n\n```sh\njava -jar monApp.jar\n```\n\n---\n\n### **2. Compilation et ex√©cution d‚Äôun projet modulaire**\n\nüìå **Un projet modulaire utilise `module-info.java`.**\n\nüìÇ **Structure :**\n\n```\n/mon-projet\n  /src\n    /com.exemple.main\n      module-info.java\n      Main.java\n```\n\nüìÑ **`module-info.java`**\n\n```java\nmodule com.exemple.main {\n    requires com.exemple.util;\n}\n```\n\n**Compilation** :\n\n```sh\njavac -d out --module-source-path src $(find src -name \"*.java\")\n```\n\n**Cr√©ation du JAR modulaire :**\n\n```sh\njar --create --file mods/com.exemple.main.jar --module-version=1.0 -C out/com.exemple.main .\n```\n\n**Ex√©cution du module :**\n\n```sh\njava --module-path mods -m com.exemple.main/com.exemple.Main\n```\n\nüìå **Avantages des JARs modulaires :**\n\n- Encapsulation des modules.\n- R√©duction des conflits de d√©pendances.\n\n---\n\n## **12.2. Cr√©ation d‚Äôimages d‚Äôex√©cution avec `jlink`**\n\nüìå **Depuis Java 9, `jlink` permet de cr√©er une image d‚Äôex√©cution sans installer une JDK compl√®te.**\n\n### **1. G√©n√©ration d‚Äôune image compacte**\n\n```sh\njlink --module-path $JAVA_HOME/jmods:mods \\\n      --add-modules com.exemple.main \\\n      --output monApp-image\n```\n\nüìå **Cela cr√©e un dossier `monApp-image` contenant une JRE minimale avec uniquement les modules n√©cessaires.**\n\n**Ex√©cution de l‚Äôapplication sans JDK install√© :**\n\n```sh\nmonApp-image/bin/java -m com.exemple.main/com.exemple.Main\n```\n\nüìå **Avantages de `jlink` :**\n\n- R√©duction de la taille de l‚Äôapplication.\n- Pas besoin d‚Äôune installation Java sur l‚Äôenvironnement cible.\n\n---\n\n## **12.3. Migration avec modules anonymes et automatiques**\n\nüìå **Lors de la migration d‚Äôun projet Java classique vers un projet modulaire, il existe trois types de modules :**\n\n|**Type de module**|**D√©finition**|\n|---|---|\n|**Module Explicite**|D√©fini avec `module-info.java`|\n|**Module Automatique**|Un JAR classique dans `module-path` devient un module|\n|**Module Anonyme**|Un JAR non modulaire plac√© dans `classpath`|\n\n---\n\n### **1. Modules automatiques**\n\nüìå **Un JAR non modulaire devient un module s‚Äôil est plac√© dans `--module-path`.**\n\nExemple :\n\n```sh\njava --module-path lib --add-modules nom.du.module -m com.exemple.main/com.exemple.Main\n```\n\nüìå **Son nom est d√©riv√© du fichier JAR (`lib/monJAR.jar` devient `monJAR`).**\n\n---\n\n### **2. Modules anonymes**\n\nüìå **Si un JAR est laiss√© dans le `classpath`, il fonctionne comme un module anonyme.**\n\nExemple :\n\n```sh\njava -classpath lib/monJAR.jar com.exemple.Main\n```\n\nüìå **Mais il ne peut pas √™tre r√©f√©renc√© par un module explicite.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **JARs : Compilation et cr√©ation de JARs modulaires et non-modulaires.**  \n‚úÖ **`jlink` : Cr√©ation d‚Äôune image d‚Äôex√©cution sans JDK complet.**  \n‚úÖ **Migration vers Java 9+ : Modules anonymes et automatiques pour compatibilit√©.**\n"
    },
    {
        "id": "0720059e-55bb-4a4b-bb8d-75fd23d0c0df",
        "title": "Elastic Search",
        "description": "---\nid: 694568ef-b128-4cdb-bc87-67ae174314f9\n---\n# Rapidement c'est quoi‚ùì\n\nElasticsearch est un moteur de recherche et une [[Base de donn√©e NoSQL]] distribu√©e, open source, permettant des recherches complexes et rapides sur de grands volumes de donn√©es.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nElasticsearch est un syst√®me de recherche et d'analyse de donn√©es bas√© sur le moteur de recherche [[Apache Lucene]]. Il utilise une architecture distribu√©e, permettant de r√©partir les donn√©es sur plusieurs serveurs pour am√©liorer les performances et la scalabilit√©.  Il indexe les donn√©es (les transforme en un format optimis√© pour la recherche) et les stocke dans une structure invers√©e, permettant des recherches rapides m√™me sur des ensembles de donn√©es tr√®s volumineux.  Contrairement aux bases de donn√©es relationnelles, Elasticsearch n'utilise pas de sch√©mas fixes, offrant une grande flexibilit√©.  Il supporte de nombreux types de donn√©es (texte, num√©rique, g√©ographique, etc.) et permet de r√©aliser des requ√™tes complexes avec des filtres, des agr√©gations, et des fonctionnalit√©s de scoring pour classer les r√©sultats.  Il est souvent utilis√© pour la recherche en temps r√©el, l'analyse de logs, la surveillance, et bien d'autres applications n√©cessitant des recherches performantes sur des donn√©es non-structur√©es ou semi-structur√©es.  Son API RESTful facilite son int√©gration avec d'autres applications.  La gestion de clusters permet une haute disponibilit√© et une tol√©rance aux pannes.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance de recherche:**  Extr√™mement rapide, m√™me sur des index gigantesques.\n* **Scalabilit√©:** Facilement extensible pour g√©rer des volumes de donn√©es croissants.\n* **Flexibilit√©:**  Supporte diff√©rents types de donn√©es et permet des requ√™tes complexes.\n* **Open source:** Communaut√© active et large choix d'outils et de plugins.\n* **API RESTful simple et intuitive:**  Facilite l'int√©gration avec d'autres syst√®mes.\n* **Haute disponibilit√©:**  Architecture distribu√©e permettant une tol√©rance aux pannes.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:**  La configuration et la gestion d'un cluster Elasticsearch peuvent √™tre complexes pour les d√©butants.\n* **Consommation de ressources:**  N√©cessite des ressources mat√©rielles importantes pour g√©rer de grands volumes de donn√©es.\n* **Gestion des transactions:**  Pas aussi robuste que les bases de donn√©es relationnelles pour les transactions ACID.\n* **D√©pendance aux plugins:** Certaines fonctionnalit√©s avanc√©es n√©cessitent l'installation de plugins.\n* **Courbe d'apprentissage:** Peut n√©cessiter un temps d'apprentissage cons√©quent pour ma√Ætriser toutes ses fonctionnalit√©s.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "d7d2e235-de41-4429-8cc3-2048f7ea0f17",
        "title": "Feature Flag",
        "description": "---\nid: 5c3b2bc6-21b3-493c-8658-e5078738ffc5\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **feature flags** sont des m√©canismes permettant d'activer ou de d√©sactiver des fonctionnalit√©s dans une application sans avoir √† red√©ployer le code. Elles permettent de contr√¥ler l'acc√®s √† certaines parties du logiciel en temps r√©el.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn **feature flag** (ou _switch_) est un contr√¥le qui permet de g√©rer dynamiquement l'activation d'une fonctionnalit√© dans une application. Cela permet de :\n\n- **D√©sactiver rapidement** une fonctionnalit√© en cas de bugs ou de probl√®me de performance.\n- **Restreindre l'acc√®s** √† certaines fonctionnalit√©s en fonction de crit√®res (utilisateur, r√©gion, version, etc.).\n- **Tester des fonctionnalit√©s** (A/B testing) et exp√©rimenter des √©volutions avant de les d√©ployer √† tous les utilisateurs.\n\nLes **feature flags** doivent √™tre utilis√©s temporairement. Une fois qu'une fonctionnalit√© est stable et valid√©e, le flag devient inutile et doit √™tre retir√©.\n\nLes **paradigmes** de gestion des flags sont les suivants :\n\n- **√âvaluation c√¥t√© serveur** : Le serveur v√©rifie le statut du flag √† chaque appel.\n- **√âvaluation c√¥t√© client** : Le flag est mis √† jour dans le navigateur et peut imm√©diatement changer l'√©tat de la page.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Flexibilit√©** : Permet d'activer ou d√©sactiver des fonctionnalit√©s sans red√©ployer, facilitant les corrections rapides.\n- **Contr√¥le en temps r√©el** : Offre un contr√¥le granulaire sur la disponibilit√© des fonctionnalit√©s.\n- **Am√©lioration de la gestion des risques** : Id√©al pour tester des nouvelles fonctionnalit√©s sans impacter tous les utilisateurs.\n- **Exp√©rimentation** : Pratique pour effectuer des tests A/B et valider des changements avant leur d√©ploiement complet.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© de gestion** : Si trop de flags sont laiss√©s en place, cela peut rendre le code plus complexe √† maintenir.\n- **Risques de d√©pendances** : L'activation ou la d√©sactivation des flags peut introduire des comportements inattendus si mal g√©r√©s.\n- **Dettes techniques** : Les flags doivent √™tre supprim√©s d√®s qu'ils ne sont plus n√©cessaires, sinon ils peuvent s'accumuler et encombrer le code.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "dae92eec-24b8-41c0-9323-03f55e0f261f",
        "title": "Feign",
        "description": "---\nid: e2c9e1f7-64bc-479b-b312-977feb4a83ec\n---\n# Rapidement c'est quoi‚ùì\n\nFeign est une biblioth√®que [[Java]] qui simplifie la cr√©ation d'interfaces clientes pour communiquer avec des services web [[RESTful]].  Elle permet de d√©finir des interfaces Java qui sont ensuite traduites en appels [[HTTP]] par Feign.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nFeign est une biblioth√®que client [[HTTP]] d√©clarative pour [[Java]].  Au lieu d'√©crire du code HTTP verbeux (gestion des connexions, envoi des requ√™tes, parsing des r√©ponses...), vous d√©clarez une interface Java annot√©e avec des annotations sp√©cifiques (comme `@RequestMapping` de Spring MVC) pour d√©finir les endpoints des services web. Feign se charge ensuite de g√©n√©rer le code n√©cessaire pour effectuer les appels HTTP et de g√©rer les d√©tails de bas niveau.  L'interface d√©crit simplement la m√©thode HTTP (GET, POST, etc.), l'URL, les param√®tres d'entr√©e et la structure des donn√©es de sortie.\n\nFeign s'int√®gre particuli√®rement bien avec [[Spring Boot]], offrant un starter qui simplifie encore plus son int√©gration et sa configuration.  Il est souvent utilis√© dans les [[Micros services]] pour communiquer entre eux, facilitant la gestion des appels inter-services et am√©liorant la maintenabilit√© du code.  Il supporte diff√©rents codecs (pour la s√©rialisation/d√©s√©rialisation des donn√©es) comme [[Jackson]] et [[Gson]].  L'int√©gration avec des m√©canismes de gestion des erreurs et de retries est √©galement possible.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **D√©claratif et concis:**  Le code est plus lisible et plus facile √† maintenir gr√¢ce √† l'approche d√©clarative.  On se concentre sur la logique m√©tier plut√¥t que sur les d√©tails [[HTTP]].\n* **Int√©gration [[Spring Boot]]:**  Le starter [[Spring Boot]] simplifie consid√©rablement la configuration et l'int√©gration avec l'√©cosyst√®me Spring.\n* **Support de plusieurs codecs:**  La flexibilit√© de choisir son codec ([[Jackson]], [[Gson]], etc.) permet de s'adapter √† diff√©rents besoins de s√©rialisation/d√©s√©rialisation.\n* **Am√©lioration de la maintenabilit√©:**  Le code est plus propre et plus facile √† comprendre, ce qui facilite la maintenance et les modifications futures.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage initiale:**  Bien que d√©claratif, il faut comprendre les annotations et les m√©canismes de Feign pour l'utiliser efficacement.\n* **D√©bogage:**  Le d√©bogage peut √™tre plus complexe car les appels HTTP sont g√©r√©s en interne par Feign.  Un bon logging est essentiel.\n* **Complexit√© potentielle pour des sc√©narios avanc√©s:**  Pour des sc√©narios complexes de gestion des erreurs, d'authentification ou de proxies, une configuration plus avanc√©e peut √™tre n√©cessaire.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "811981f6-bf27-4a66-b238-b039f2f14b3e",
        "title": "Firecracker",
        "description": "---\nid: 77d3c304-e73a-4cb4-b3b3-3a683e1ce849\n---\n# Rapidement c'est quoi‚ùì\n\nFirecracker est une technologie de [[Virtualisation]] l√©g√®re, permettant de lancer des micro-machines virtuelles (micro [[VM]]) isol√©es. [[AWS]] l'utilise notamment pour son service Lambda.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nFirecracker est un hyperviseur open source d√©velopp√© par Amazon Web Services ([[AWS]]).  Son objectif principal est de fournir un environnement d'ex√©cution s√©curis√© et performant pour les fonctions sans serveur.  Au lieu d'utiliser des conteneurs ou des processus partag√©s, Firecracker cr√©e une microVM pour chaque fonction. Cela signifie que chaque fonction s'ex√©cute dans son propre espace d'adressage isol√©, avec son propre noyau l√©ger.  Ce niveau d'isolation am√©liore la s√©curit√© en emp√™chant une fonction compromise d'affecter les autres.  Les microVM Firecracker sont con√ßues pour d√©marrer tr√®s rapidement (millisecondes) et utiliser des ressources minimales, ce qui est crucial pour les architectures [[Function as a Service (FaaS)]] o√π de nombreuses fonctions peuvent √™tre ex√©cut√©es simultan√©ment.  Son architecture repose sur un hyperviseur bas√© sur [[Kernel-based Virtual Machine (KVM)]],  mais avec une surface d'attaque significativement r√©duite gr√¢ce √† un design minimaliste et une gestion fine des ressources.  Cela assure une meilleure performance et une plus grande fiabilit√© compar√© √† des solutions de virtualisation plus lourdes.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **S√©curit√© accrue:** L'isolation au niveau de la [[microVM]] offre une s√©curit√© significativement am√©lior√©e par rapport aux conteneurs, limitant l'impact d'une compromission.\n* **D√©marrage rapide:** Les [[microVM]] Firecracker d√©marrent tr√®s rapidement, optimisant l'efficacit√© des architectures [[Function as a Service (FaaS)]].\n* **Ressources l√©g√®res:** Elles utilisent peu de ressources syst√®me, permettant un meilleur rapport co√ªt-performance.\n* **Open source:** La nature open source permet l'auditabilit√© du code et la contribution de la communaut√©.\n* **Int√©gration avec les outils existants:**  Firecracker peut s'int√©grer facilement avec des syst√®mes existants pour la gestion et le provisionnement des machines virtuelles.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La gestion de nombreuses [[microVM]] peut complexifier l'infrastructure par rapport √† des solutions bas√©es sur des conteneurs.\n* **Surco√ªt potentiel:**  Bien que l√©ger, le surco√ªt de la virtualisation reste pr√©sent compar√© √† l'ex√©cution directe de fonctions dans un environnement non virtualis√©.  Toutefois, ce surco√ªt est souvent compens√© par les gains en s√©curit√© et isolation.\n* **N√©cessite un hyperviseur compatible:** Le fonctionnement repose sur un hyperviseur compatible, comme [[Kernel-based Virtual Machine (KVM)]].\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "336c3829-0dde-46ae-ad99-313b5adff93d",
        "title": "Flintlock",
        "description": "---\nid: 84fd28c0-e6a9-44a2-adec-e0a23bf37653\n---\n# Rapidement c'est quoi‚ùì\n\nFlintlock est un gestionnaire de paquets pour [[Firecracker]].  Il simplifie le d√©ploiement et la gestion de microservices bas√©s sur [[Firecracker]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nFlintlock est un outil en ligne de commande qui permet de g√©rer le cycle de vie complet des [[microVM]] bas√©es sur [[Firecracker]].  Il automatise des t√¢ches telles que la cr√©ation, le d√©marrage, l'arr√™t et la suppression de [[microVM]], ainsi que la gestion des images de d√©marrage et des ressources associ√©es.  Flintlock g√®re la configuration des [[microVM]], y compris l'allocation de ressources CPU, m√©moire et stockage. Il permet √©galement de g√©rer le r√©seautage des [[microVM]], en les connectant √† des r√©seaux virtuels ou physiques.  L'objectif principal de Flintlock est de simplifier le processus de d√©ploiement et de gestion d'applications conteneuris√©es ou sans serveur, ex√©cut√©es dans des environnements isol√©s et s√©curis√©s gr√¢ce √† [[Firecracker]]. Il agit comme une couche d'abstraction, cachant la complexit√© de la gestion directe de Firecracker.  Flintlock utilise des fichiers de configuration (g√©n√©ralement au format YAML) pour d√©finir les param√®tres des [[microVM]].  Ces configurations d√©crivent les ressources allou√©es, les images √† utiliser, les r√©seaux et autres aspects du d√©ploiement.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Automatisation:**  Flintlock automatise les t√¢ches r√©p√©titives, simplifiant consid√©rablement la gestion des [[microVM]].\n* **Simplification:**  Il masque la complexit√© de [[Firecracker]], le rendant plus accessible aux d√©veloppeurs.\n* **Gestion de cycle de vie complet:**  Il g√®re la cr√©ation, le d√©marrage, l'arr√™t et la suppression des [[microVM]].\n* **Gestion des ressources:**  Il permet un contr√¥le pr√©cis de l'allocation des ressources (CPU, m√©moire, stockage).\n* **Int√©gration facile (potentielle):**  Son interface en ligne de commande facilite l'int√©gration dans des pipelines [[CI/CD]].\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Maturit√©:**  En tant que projet relativement r√©cent, Flintlock pourrait pr√©senter des bugs ou des fonctionnalit√©s manquantes.\n* **Documentation:** La documentation pourrait √™tre plus compl√®te et d√©taill√©e pour certains aspects.\n* **D√©pendance √† Firecracker:** Flintlock est intrins√®quement li√© √† [[Firecracker]], limitant son usage aux environnements utilisant ce hyperviseur.\n* **Communaut√©:** La communaut√© autour de Flintlock pourrait √™tre moins active que pour des projets plus √©tablis.\n\n\n---\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "ea91c790-320f-495e-9b38-8c6c3795e063",
        "title": "Function as a Service (FaaS)",
        "description": "---\nid: 549b4aed-718c-4342-8b40-b3a1f957ef81\n---\n# Rapidement c'est quoi‚ùì\n\nFonction as a Service (FaaS) : Ex√©cution de code sans gestion d'infrastructures.  Vous envoyez du code, il s'ex√©cute, puis les ressources sont lib√©r√©es.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe Function as a Service (FaaS) est un mod√®le de cloud computing o√π le fournisseur de cloud g√®re l'infrastructure et vous fournissez uniquement le code de votre fonction.  Cette fonction est un petit morceau de code, g√©n√©ralement sans √©tat (stateless), qui s'ex√©cute en r√©ponse √† un √©v√©nement sp√©cifique.  Cet √©v√©nement peut √™tre une requ√™te [[HTTP]], un message dans une file d'attente, un changement de donn√©es dans une base de donn√©es, etc.\n\nUne fois l'√©v√©nement d√©clencheur trait√©, la fonction s'ex√©cute, effectue son traitement (par exemple, le traitement d'une image, l'envoi d'un email, la mise √† jour d'une base de donn√©es), puis se termine.  Le fournisseur de cloud g√®re automatiquement le scaling (mise √† l'√©chelle) : il peut ex√©cuter plusieurs instances de votre fonction simultan√©ment pour g√©rer les pics de demande, et r√©duire le nombre d'instances lorsque la demande diminue.  Vous ne payez que pour la dur√©e d'ex√©cution de votre fonction, ce qui permet une tarification tr√®s avantageuse pour les charges de travail sporadiques ou impr√©visibles.\n\nLes plateformes FaaS populaires incluent [[AWS Lambda]], [[Google Cloud Functions]], [[Azure Functions]], etc.  Elles offrent des fonctionnalit√©s suppl√©mentaires comme le monitoring, le logging, et l'int√©gration avec d'autres services cloud.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Tarification √©conomique:** Payez uniquement pour le temps d'ex√©cution, id√©al pour les applications √©v√©nementielles et les [[Micros services]].\n* **Scalabilit√© automatique:** Le fournisseur de cloud g√®re la mise √† l'√©chelle, vous n'avez pas √† vous soucier des ressources.\n* **Simplicit√© de d√©ploiement:** D√©ployez facilement votre code sans g√©rer d'infrastructures.\n* **Maintenance r√©duite:** Le fournisseur de cloud g√®re la maintenance et les mises √† jour.\n* **Int√©gration facile:** S'int√®gre souvent avec d'autres services cloud.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Cold starts:** Le premier appel √† une fonction peut prendre plus de temps car elle doit √™tre initialis√©e.\n* **Limitations de ressources:** Les fonctions ont des limitations de ressources (m√©moire, temps d'ex√©cution).\n* **D√©bogage plus complexe:** Le d√©bogage peut √™tre plus complexe que dans une application traditionnelle.\n* **Mod√®le √©v√©nementiel:**  Ne convient pas √† toutes les applications, notamment celles n√©cessitant des connexions persistantes ou un √©tat stable.\n* **Verrouillage fournisseur:** Migration potentiellement difficile entre diff√©rents fournisseurs de FaaS.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "eaaa031f-71c3-45df-9287-a65bff77495b",
        "title": "Certification Java 17 - Gestion des Exceptions",
        "description": "---\nid: 92360517-fdbe-479f-bdfb-06c5d02db86f\n---\n## **6.1. Utilisation de `try/catch/finally`**\n\nEn Java, une **exception** est une erreur qui interrompt le programme. Elle peut √™tre **g√©r√©e** avec `try/catch/finally`.\n\n### **Structure d‚Äôun bloc `try/catch/finally`**\n\n```java\ntry {\n    int result = 10 / 0;  // Provoque une ArithmeticException\n    System.out.println(result);\n} catch (ArithmeticException e) {\n    System.out.println(\"Erreur : division par z√©ro !\");\n} finally {\n    System.out.println(\"Ce bloc s‚Äôex√©cute toujours !\");\n}\n```\n\nüìå **Le `finally` est toujours ex√©cut√©**, m√™me en cas d‚Äôexception. Il sert g√©n√©ralement √† **fermer des ressources** (fichiers, connexions).\n\n---\n\n## **6.2. `try-with-resources` : Gestion automatique des ressources**\n\nIntroduit en **Java 7**, ce bloc permet de fermer automatiquement les ressources impl√©mentant **`AutoCloseable`**.\n\n### **Exemple avec `try-with-resources`**\n\n```java\nimport java.io.*;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"fichier.txt\"))) {\n            System.out.println(br.readLine()); // Lit la premi√®re ligne\n        } catch (IOException e) {\n            System.out.println(\"Erreur d'E/S : \" + e.getMessage());\n        }\n    }\n}\n```\n\nüìå **Pas besoin de fermer `BufferedReader` manuellement**, il est automatiquement ferm√© √† la fin du bloc.\n\n---\n\n## **6.3. Multi-catch : Attraper plusieurs exceptions**\n\nDepuis **Java 7**, on peut attraper plusieurs exceptions dans un seul `catch`, avec `|`.\n\n```java\ntry {\n    int[] tab = {1, 2, 3};\n    System.out.println(tab[5]);  // Provoque une ArrayIndexOutOfBoundsException\n} catch (ArithmeticException | ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Erreur : \" + e.getClass().getSimpleName());\n}\n```\n\nüìå **Avantages :**\n\n- Simplifie le code en regroupant des exceptions similaires.\n- √âvite les blocs `catch` redondants.\n\nüìå **Restrictions :**\n\n- Les exceptions ne doivent **pas avoir de relation d‚Äôh√©ritage** (ex: `IOException` et `FileNotFoundException` sont invalides ensemble, car `FileNotFoundException` h√©rite de `IOException`).\n\n---\n\n## **6.4. Exceptions personnalis√©es (`extends Exception` ou `extends RuntimeException`)**\n\n### **1. Exceptions contr√¥l√©es (`extends Exception`)**\n\nüîπ **Obligation** de les g√©rer avec `try/catch` ou `throws`.  \nüîπ Utilis√©es pour les erreurs pr√©visibles (ex : erreurs m√©tier).\n\n```java\nclass MonException extends Exception {\n    public MonException(String message) {\n        super(message);\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        try {\n            verifier(15);\n        } catch (MonException e) {\n            System.out.println(\"Erreur captur√©e : \" + e.getMessage());\n        }\n    }\n\n    static void verifier(int valeur) throws MonException {\n        if (valeur < 18) {\n            throw new MonException(\"√Çge insuffisant !\");\n        }\n    }\n}\n```\n\nüìå **`throws` indique qu‚Äôune m√©thode peut lever une exception.**\n\n---\n\n### **2. Exceptions non contr√¥l√©es (`extends RuntimeException`)**\n\nüîπ **Pas besoin** de `try/catch`, elles interrompent le programme.  \nüîπ Utilis√©es pour des erreurs de programmation (ex : `NullPointerException`).\n\n```java\nclass MonRuntimeException extends RuntimeException {\n    public MonRuntimeException(String message) {\n        super(message);\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        calculer(0);\n    }\n\n    static void calculer(int valeur) {\n        if (valeur == 0) {\n            throw new MonRuntimeException(\"Division par z√©ro interdite !\");\n        }\n    }\n}\n```\n\nüìå **Diff√©rence avec `Exception`** : pas d'obligation de gestion avec `try/catch`.\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **`try/catch/finally`** : G√®re les erreurs, `finally` s'ex√©cute toujours.  \n‚úÖ **`try-with-resources`** : Ferme automatiquement les ressources (`AutoCloseable`).  \n‚úÖ **Multi-catch (`catch` multiple)** : Regroupe plusieurs exceptions en une seule clause.  \n‚úÖ **Exceptions personnalis√©es** :\n\n- `extends Exception` (**contr√¥l√©es**) ‚Üí Doit √™tre g√©r√©e (`throws` ou `try/catch`).\n- `extends RuntimeException` (**non contr√¥l√©es**) ‚Üí Pas d‚Äôobligation de gestion.\n\n---"
    },
    {
        "id": "f750c1bb-d1a8-4f7f-b3d5-2dc4dfab5455",
        "title": "Certification Java 17 - Gestion des types Date, Temps, Texte et Num√©rique",
        "description": "---\nid: 8ed7f80e-caff-443e-8f21-ac0ffb429bec\n---\n## **4.1. API Date-Time : `LocalDate`, `LocalTime`, `LocalDateTime`, `ZonedDateTime`**\n\nDepuis **Java 8**, la gestion des dates et heures se fait via l‚Äô**API `java.time`**, qui remplace `java.util.Date` et `java.util.Calendar`.\n\n|**Classe**|**Description**|\n|---|---|\n|`LocalDate`|Date sans heure ni fuseau horaire|\n|`LocalTime`|Heure sans date ni fuseau horaire|\n|`LocalDateTime`|Date et heure sans fuseau horaire|\n|`ZonedDateTime`|Date, heure et fuseau horaire|\n\n### **Exemples : Cr√©ation et manipulation**\n\n```java\nimport java.time.*;\n\npublic class DateTimeDemo {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.now();  // Date actuelle\n        LocalTime time = LocalTime.now();  // Heure actuelle\n        LocalDateTime dateTime = LocalDateTime.now();  // Date et heure actuelle\n        ZonedDateTime zonedDateTime = ZonedDateTime.now();  // Avec fuseau horaire\n\n        System.out.println(date);         // 2025-03-05\n        System.out.println(time);         // 14:30:45.123\n        System.out.println(dateTime);     // 2025-03-05T14:30:45.123\n        System.out.println(zonedDateTime);// 2025-03-05T14:30:45.123+01:00[Europe/Paris]\n    }\n}\n```\n\n### **Manipulation des dates et heures**\n\nLes objets `java.time` sont **immuables**, donc chaque modification retourne une nouvelle instance.\n\n```java\nLocalDate date = LocalDate.of(2025, 3, 5);\nLocalDate newDate = date.plusDays(10).minusMonths(1);  // 2025-02-15\nLocalTime newTime = LocalTime.of(10, 30).plusHours(2); // 12:30\n```\n\n### **Formatage des dates**\n\n```java\nimport java.time.format.DateTimeFormatter;\n\nLocalDate date = LocalDate.now();\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\nSystem.out.println(date.format(formatter)); // 05/03/2025\n```\n\n---\n\n## **4.2. `Period`, `Duration`, `Instant` pour les intervalles de temps**\n\n|**Classe**|**Utilisation**|\n|---|---|\n|`Period`|Repr√©sente une diff√©rence en **jours, mois ou ann√©es**|\n|`Duration`|Repr√©sente une diff√©rence en **heures, minutes, secondes**|\n|`Instant`|Un point pr√©cis dans le temps (timestamp)|\n\n### **Exemples : `Period`**\n\n```java\nPeriod period = Period.of(1, 2, 3); // 1 an, 2 mois, 3 jours\nLocalDate date = LocalDate.now().plus(period);\nSystem.out.println(date);\n```\n\n### **Exemples : `Duration`**\n\n```java\nDuration duration = Duration.ofHours(5);\nLocalTime time = LocalTime.now().plus(duration);\nSystem.out.println(time);\n```\n\n### **Exemples : `Instant` (Timestamp)**\n\n```java\nInstant instant = Instant.now();\nSystem.out.println(instant); // 2025-03-05T13:15:30.123Z\n```\n\n---\n\n## **4.3. Manipulation de texte : `String`, `StringBuilder`, Text Blocks**\n\n### **`String` : immutable**\n\nüìå **Chaque modification cr√©e un nouvel objet.**\n\n```java\nString s = \"Java\";\ns = s.concat(\" 21\"); // Nouvelle instance\nSystem.out.println(s); // Java 21\n```\n\n### **`StringBuilder` : mutable et performant**\n\nüìå **Utilis√© pour √©viter la cr√©ation excessive d‚Äôobjets.**\n\n```java\nStringBuilder sb = new StringBuilder(\"Java\");\nsb.append(\" 21\");\nSystem.out.println(sb); // Java 21\n```\n\n|**Classe**|**Immutable ?**|**Thread-safe ?**|**Performance**|\n|---|---|---|---|\n|`String`|‚úÖ Oui|‚úÖ Oui|üö´ Lent (cr√©ation d‚Äôobjets)|\n|`StringBuilder`|üö´ Non|üö´ Non|‚úÖ Rapide|\n|`StringBuffer`|üö´ Non|‚úÖ Oui|‚úÖ Rapide (mais synchronis√©)|\n\n### **Principales m√©thodes**\n\n```java\nString s = \"  Java 21  \";\nSystem.out.println(s.trim()); // Supprime espaces : \"Java 21\"\nSystem.out.println(s.toUpperCase()); // \"JAVA 21\"\nSystem.out.println(s.replace(\" \", \"-\")); // \"-Java-21-\"\n```\n\n### **Text Blocks (`\"\"\"`) - Java 13**\n\nPermet d‚Äô√©crire du texte multilignes plus lisible.\n\n```java\nString json = \"\"\"\n    {\n        \"name\": \"Java\",\n        \"version\": 21\n    }\n    \"\"\";\nSystem.out.println(json);\n```\n\n---\n\n## **4.4. API Math et `BigDecimal`**\n\n### **üìå Math API : Calculs avanc√©s**\n\n```java\nSystem.out.println(Math.abs(-10));    // 10\nSystem.out.println(Math.pow(2, 3));   // 8.0\nSystem.out.println(Math.sqrt(16));    // 4.0\nSystem.out.println(Math.random());    // [0.0, 1.0[\n```\n\n### **üìå `BigDecimal` : pr√©cision pour les calculs financiers**\n\nüìå **`double` peut entra√Æner des erreurs d‚Äôarrondi !**\n\n```java\ndouble a = 0.1;\ndouble b = 0.2;\nSystem.out.println(a + b); // 0.30000000000000004 (erreur)\n\nBigDecimal x = new BigDecimal(\"0.1\");\nBigDecimal y = new BigDecimal(\"0.2\");\nSystem.out.println(x.add(y)); // 0.3 (pr√©cis)\n```\n\n|**Type**|**Pr√©cision**|**M√©moire**|**Utilisation**|\n|---|---|---|---|\n|`float`|32 bits|Faible|Calculs approximatifs|\n|`double`|64 bits|Moyenne|Calculs scientifiques|\n|`BigDecimal`|Illimit√©e|Plus lourd|Calculs pr√©cis (monnaie)|\n\n### **Op√©rations avec `BigDecimal`**\n\n```java\nBigDecimal valeur = new BigDecimal(\"10.50\");\nBigDecimal taxe = new BigDecimal(\"1.20\");\nBigDecimal total = valeur.multiply(taxe);\n\nSystem.out.println(total); // 12.60\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **API Date-Time (`LocalDate`, `LocalTime`, etc.)**  \n‚úÖ **Gestion des intervalles avec `Period`, `Duration`, `Instant`**  \n‚úÖ **Manipulation de texte avec `String`, `StringBuilder`, `Text Blocks`**  \n‚úÖ **Math avanc√© (`Math.pow`, `Math.random`) et calculs pr√©cis avec `BigDecimal`**\n\n---\n"
    },
    {
        "id": "c074a5cf-bcf9-464c-90cd-87b69b5095f6",
        "title": "Git Hook",
        "description": "---\nid: 65c4da6e-82ad-454b-b55b-ff45a6462d19\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **[[Git]] Hooks** sont des scripts ex√©cutables permettant d‚Äôautomatiser certaines actions pendant le cycle de vie d'un d√©p√¥t [[Git]], comme avant ou apr√®s un commit, push, ou merge.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLes **Git Hooks** sont des scripts qui s'ex√©cutent √† des moments sp√©cifiques dans le flux de travail de Git. Ils permettent d'ajouter des comportements personnalis√©s et d‚Äôautomatiser des t√¢ches comme des v√©rifications, des validations ou des notifications. Ces hooks sont configur√©s directement dans le r√©pertoire `.git/hooks` du projet. Chaque hook est associ√© √† un √©v√©nement pr√©cis :\n\n1. **`pre-commit`** : Avant qu'un commit soit effectu√©. Utilis√© pour des v√©rifications comme les tests unitaires ou le formatage du code.\n2. **`commit-msg`** : Apr√®s un commit mais avant la validation du message. Permet de valider ou modifier le message de commit.\n3. **`post-commit`** : Apr√®s un commit. Souvent utilis√© pour envoyer des notifications ou effectuer des suivis.\n4. **`pre-push`** : Avant un push vers un d√©p√¥t distant. Permet de v√©rifier la qualit√© du code avant de le partager.\n5. **`post-merge`** : Apr√®s un merge. Souvent utilis√© pour r√©organiser l‚Äôespace de travail ou nettoyer l'environnement.\n6. **`pre-receive` et `update`** : Sur le serveur distant, valident les changements avant qu'ils ne soient re√ßus.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Automatisation** : Facilite l'automatisation de processus tels que les tests, le formatage de code, ou l'envoi de notifications.\n- **Validation** : Permet de valider ou modifier des actions avant qu‚Äôelles ne soient ex√©cut√©es (commit, push).\n- **Personnalisation** : Offre une grande flexibilit√© pour personnaliser le flux de travail de chaque √©quipe ou projet.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Performance** : Trop de hooks ou des v√©rifications lourdes peuvent ralentir le workflow, notamment lors des commits fr√©quents.\n- **Complexit√©** : La gestion de hooks dans un projet peut ajouter de la complexit√©, surtout si chaque d√©veloppeur a une configuration diff√©rente.\n- **D√©pendance locale** : Les hooks sont locaux au d√©p√¥t, ce qui peut poser probl√®me si l'√©quipe utilise des configurations diff√©rentes.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "329a8a5d-8878-414f-996c-fb91884b6abd",
        "title": "Git leaks",
        "description": "---\nid: d24393e4-da90-46f9-98e7-8f2025603958\n---\n# Rapidement c'est quoi‚ùì\n\nGit Leaks est un outil permettant de d√©tecter les fuites d'informations sensibles (mots de passe, cl√©s API, etc.) dans un d√©p√¥t [[Git]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nGit Leaks est un outil de s√©curit√© qui analyse le contenu d'un d√©p√¥t [[Git]] √† la recherche de patterns correspondant √† des informations sensibles.  Il fonctionne en scannant l'historique du d√©p√¥t, incluant les commits pass√©s et les fichiers supprim√©s.  L'objectif est d'identifier et de signaler la pr√©sence accidentelle de donn√©es confidentielles qui auraient pu √™tre commises par erreur.  Ces informations sensibles peuvent inclure :\n\n* **Mots de passe:**  En clair ou hach√©s (m√™me si hach√©s, certains algorithmes faibles peuvent √™tre d√©tect√©s).\n* **Cl√©s API:**  Pour divers services cloud, bases de donn√©es, etc.\n* **Jetons d'authentification:**  Utilis√©s pour l'acc√®s √† des applications ou services.\n* **Num√©ros de cartes de cr√©dit:**  Respectant les formats standards.\n* **Informations personnelles sensibles:**  Num√©ros de s√©curit√© sociale, adresses, etc. (d√©pend des r√©glages et des patterns utilis√©s).\n\nGit Leaks peut √™tre int√©gr√© comme un [[Git Hook]] (ex√©cut√© avant chaque commit) ou dans un [[pipeline CI/CD]] (ex: [[GitLab CI]], [[GitHub Actions]], [[Jenkins]]), permettant une d√©tection proactive des fuites avant qu'elles ne soient publiques.  L'int√©gration permet une automatisation de la s√©curit√© et une meilleure pr√©vention des incidents.  Il existe diff√©rentes impl√©mentations et configurations possibles, modifiant la sensibilit√© de la d√©tection (faible, moyen, fort).\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **D√©tection proactive:** Identifie les fuites avant leur publication publique.\n* **Int√©gration facile:**  Peut √™tre int√©gr√© facilement dans les workflows existants via des hooks ou des [[pipelines CI/CD]].\n* **Automatisation:**  R√©duit le risque d'erreur humaine et acc√©l√®re le processus de s√©curit√©.\n* **Couverture large:**  Peut d√©tecter diff√©rents types d'informations sensibles.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Faux positifs possibles:**  Peut g√©n√©rer des faux positifs en fonction de la configuration et de la complexit√© du code.  Un ajustement fin des r√©glages est souvent n√©cessaire.\n* **D√©pendance aux patterns:**  La d√©tection repose sur des patterns pr√©d√©finis, ce qui signifie qu'il peut manquer des types d'informations sensibles non couverts par ces patterns.\n* **Ne remplace pas une revue de code compl√®te:**  Doit √™tre consid√©r√© comme un outil compl√©mentaire √† une bonne pratique de revue de code.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "e4cdf907-2f2b-4a47-ab7b-735192fb7394",
        "title": "Grafana",
        "description": "---\nid: 73f08fc3-729a-40a2-8abd-96cbe6ca9970\n---\n# Rapidement c'est quoi‚ùì\n\nGrafana est un outil open-source de visualisation et d'analyse de donn√©es. Il permet de cr√©er des dashboards interactifs et personnalisables √† partir de nombreuses sources de donn√©es diff√©rentes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nGrafana est une plateforme d'analyse de donn√©es qui permet de visualiser et d'interroger des donn√©es provenant de diverses sources, telles que des [[Base de donn√©e]] ([[PostgreSQL]], [[MySQL]], [[MongoDB]], etc.), des m√©triques syst√®me ([[Prometheus]], [[Graphite]]), des logs ([[Elasticsearch]], [[Loki]]), des clouds ([[AWS]], [[Azure]], [[GCP]]) et bien d'autres.  Il offre une interface utilisateur intuitive pour cr√©er des dashboards personnalis√©s avec des graphiques, des tableaux, des cartes et autres visualisations.  Ces dashboards peuvent √™tre partag√©s et collaboratifs.  Grafana poss√®de un syst√®me de plugins extensif permettant d'ajouter des fonctionnalit√©s et de supporter de nouvelles sources de donn√©es.  L'utilisateur peut effectuer des requ√™tes directement sur les donn√©es, d√©finir des alertes bas√©es sur des seuils et int√©grer des fonctionnalit√©s d'exploration de donn√©es.  Au-del√† de la visualisation, Grafana permet une analyse temporelle des donn√©es, indispensable pour le monitoring et l'investigation d'incidents.  Il offre √©galement des fonctionnalit√©s d'annotation pour enrichir les donn√©es avec des informations contextuelles.  Enfin, Grafana est disponible en version open-source et en version entreprise avec des fonctionnalit√©s additionnelles.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Interface utilisateur intuitive et conviviale:** La cr√©ation et la personnalisation de dashboards est relativement facile, m√™me pour les utilisateurs non-experts.\n* **Support d'un large √©ventail de sources de donn√©es:** Grafana s'int√®gre avec de nombreux outils et technologies, ce qui en fait une solution polyvalente.\n* **Fonctionnalit√©s avanc√©es d'analyse et d'exploration:**  Au-del√† de la simple visualisation, Grafana permet une analyse approfondie des donn√©es.\n* **Communaut√© active et support important:** La communaut√© open-source est vaste et active, assurant un bon support et une disponibilit√© de ressources.\n* **Extensible gr√¢ce aux plugins:**  L'ajout de nouvelles fonctionnalit√©s et sources de donn√©es se fait facilement via les plugins.\n* **Open-source (avec une version entreprise):**  Offre un bon √©quilibre entre gratuit√© et fonctionnalit√©s avanc√©es.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© pour des configurations avanc√©es:**  La personnalisation pouss√©e et la gestion de sources de donn√©es complexes peuvent devenir difficiles.\n* **Performances potentiellement limit√©es pour des volumes de donn√©es tr√®s importants:**  Les performances peuvent √™tre affect√©es par la taille et la complexit√© des dashboards et des requ√™tes.\n* **Courbe d'apprentissage pour ma√Ætriser toutes les fonctionnalit√©s:** Bien que l'interface soit intuitive, ma√Ætriser toutes les fonctionnalit√©s avanc√©es demande du temps et de l'apprentissage.\n* **D√©pendance aux plugins pour certaines sources de donn√©es:** L'int√©gration avec certaines sources de donn√©es peut n√©cessiter l'installation et la configuration de plugins sp√©cifiques.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "447992ea-077d-4520-a2ce-324d10237189",
        "title": "Harbor",
        "description": "---\nid: 98410515-bfb3-4709-982f-a9c8134b68d5\n---\n# Rapidement c'est quoi‚ùì\n\nHarbor est un registre de conteneurs [[Open-source]], s√©curis√© et de niveau entreprise,  qui √©tend les fonctionnalit√©s de base de [[Registry Docker]].  Il ajoute des fonctionnalit√©s de gestion d'acc√®s, de scan de vuln√©rabilit√©s et de gestion de cycle de vie des images.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nHarbor est une solution de registre de conteneurs qui s'appuie sur le registre Docker standard mais y ajoute des fonctionnalit√©s cruciales pour les d√©ploiements en production.  Il permet de stocker, g√©rer et s√©curiser les images de conteneurs.  Plus pr√©cis√©ment, il offre :\n\n* **Gestion d'acc√®s robuste:**  Contr√¥le d'acc√®s bas√© sur les r√¥les ([[Role Based Access Control (RBAC]]) pour une gestion fine des permissions sur les images, permettant de d√©finir des politiques d'acc√®s granulaires pour les diff√©rents utilisateurs et √©quipes.  L'int√©gration avec des syst√®mes d'authentification existants ([[LDAP]], [[Active Directory]]) est possible.\n\n* **Scan de vuln√©rabilit√©s:** Int√©gration avec des outils de scan de vuln√©rabilit√©s (comme [[Clair]]) pour analyser les images √† la recherche de failles de s√©curit√© connues avant leur d√©ploiement.  Cela permet de d√©tecter et de corriger les vuln√©rabilit√©s potentielles d√®s la phase de d√©veloppement.\n\n* **Gestion du cycle de vie des images:**  Harbor offre des fonctionnalit√©s pour g√©rer le cycle de vie complet des images, de leur cr√©ation √† leur suppression.  Ceci inclut la gestion des versions, la promotion d'images entre diff√©rents environnements (d√©veloppement, test, production), et la gestion des politiques de r√©tention.\n\n* **R√©plication:**  Possibilit√© de r√©pliquer les images de conteneurs vers d'autres registres Harbor, permettant la cr√©ation de registres miroirs pour la haute disponibilit√© et la r√©duction de la latence.\n\n* **Audit:**  Suivi complet des actions effectu√©es sur le registre, fournissant un historique auditable pour des raisons de conformit√© et de s√©curit√©.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **S√©curit√© renforc√©e:**  Le contr√¥le d'acc√®s fin et la fonctionnalit√© de scan de vuln√©rabilit√©s contribuent grandement √† la s√©curit√© des images de conteneurs.\n* **Gestion compl√®te du cycle de vie:**  Simplifie les op√©rations et am√©liore l'efficacit√© en centralisant la gestion des images.\n* **Open source et extensible:**  Permet une grande flexibilit√© et permet des int√©grations personnalis√©es.\n* **Haute disponibilit√© et r√©plication:**  Assure la fiabilit√© et la disponibilit√© du registre.\n* **Interface utilisateur intuitive:**  Facilite la gestion et le suivi des images.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:**  La configuration initiale peut √™tre complexe pour les utilisateurs novices.\n* **Ressources n√©cessaires:**  N√©cessite des ressources serveur pour fonctionner, ce qui peut √™tre un inconv√©nient pour les petites infrastructures.\n* **D√©pendances:**  D√©pend de plusieurs composants et outils, ce qui peut compliquer la maintenance et le d√©pannage.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "15291a12-30f8-4a45-9154-edc382fca715",
        "title": "Htmx",
        "description": "---\nid: 5d0f7309-8e45-4091-b0fe-c2d1f341b3a5\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nHTMX est une biblioth√®que qui permet d'√©viter d'√©crire du [[JavaScript]] pour g√©rer les interactions sur une page web, en utilisant uniquement des attributs HTML pour g√©rer des requ√™tes [[HTTP]] dynamiques.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nHTMX simplifie l'interactivit√© web en permettant de d√©finir des comportements de requ√™tes [[HTTP]] directement via des attributs `hx-` sur les balises HTML. Il permet de :\n\n- Effectuer des requ√™tes HTTP sans JavaScript (ex : `hx-get`, `hx-post`).\n- Traiter et manipuler les r√©ponses avant et apr√®s leur insertion dans le [[DOM]].\n- G√©rer des actions comme le rafra√Æchissement de parties sp√©cifiques d'une page sans recharger la page enti√®re.\n\nCela fonctionne sur n'importe quel serveur g√©n√©rant du HTML, comme ceux en [[Go]], [[Rust]], ou [[JTE]].\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplicit√©** : Remplace une grande partie de [[JavaScript]] pour des interactions simples avec des formulaires et des requ√™tes.\n- **Adapt√© aux petits projets** : Id√©al pour les applications [[backend]] simples sans n√©cessiter de frameworks [[JavaScript]] lourds.\n- **Moins de [[JavaScript]] √† maintenir** : La logique d'interaction est d√©finie dans le [[HTML]], ce qui simplifie la gestion du code.\n- **Compatibilit√© avec n'importe quel backend** : Fonctionne avec n'importe quel serveur g√©n√©rant du [[HTML]].\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Limit√© pour des interactions complexes** : D√®s qu'il y a des traitements complexes ou des manipulations de donn√©es avant l'envoi, HTMX devient difficile √† utiliser.\n- **D√©pendance au HTML** : N√©cessite que les endpoints retournent du HTML, ce qui peut ne pas √™tre adapt√© pour des applications plus modernes qui n√©cessitent du [[JSON]].\n- **Moins flexible que le [[JavaScript]] natif** : Certaines interactions complexes peuvent √™tre plus facilement r√©alis√©es avec JavaScript plut√¥t qu'avec HTMX.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "b40bc9b4-b756-4136-9af1-c2a7fff4d923",
        "title": "Http 103 Early Hints",
        "description": "---\nid: 5bae96ff-d0fa-4198-b12f-edab95488e95\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n[[HTTP]] 103 \"Early Hints\" est un code de statut HTTP qui permet d'indiquer au client, avant la r√©ponse finale du serveur, quelles ressources pr√©charger pour am√©liorer la vitesse de rendu de la page web.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe code HTTP 103 est envoy√© par le serveur avant la r√©ponse finale √† une requ√™te [[HTTP]]. Il informe le client des ressources √† pr√©charger (comme des fichiers [[CSS]], [[JavaScript]] ou des images). Cela permet au navigateur de commencer √† charger ces ressources pendant que le serveur g√©n√®re la r√©ponse principale, r√©duisant ainsi le temps n√©cessaire pour afficher la page.\n\nLe processus fonctionne ainsi :\n\n1. Le client envoie une requ√™te au serveur.\n2. Le serveur r√©pond avec un code 103 et une liste de ressources √† pr√©charger.\n3. Le client commence √† charger ces ressources imm√©diatement.\n4. Le serveur termine le traitement et envoie la page finale, qui peut √™tre affich√©e plus rapidement puisque les ressources ont d√©j√† √©t√© pr√©charg√©es.\n\nCe m√©canisme am√©liore le temps de chargement des pages, en particulier pour les sites avec beaucoup de ressources externes.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Am√©lioration du temps de chargement** : R√©duit de mani√®re significative le temps n√©cessaire pour afficher la page (environ 30% de gain).\n- **Simplicit√© de mise en ≈ìuvre** : Facile √† configurer avec des serveurs comme [[Caddy]] et [[Apache]], en particulier avec HTTP/2.\n- **Exp√©rience utilisateur am√©lior√©e** : Le contenu de la page se charge plus rapidement gr√¢ce au pr√©chargement des ressources.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Support limit√©** : Ne fonctionne pas avec [[HTTP/1]] et n'est pas support√© par [[Nginx]].\n- **Gestion des ressources** : La gestion des ressources √† pr√©charger peut √™tre d√©licate, il faut bien s'assurer qu'elles sont n√©cessaires et g√©r√©es correctement.\n- **D√©pendance au serveur et au client** : N√©cessite un serveur compatible et un client capable de g√©rer le code 103, ce qui limite son adoption imm√©diate.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "64dc974d-6ff7-4106-b3ef-ca7485f6ddec",
        "title": "Husky",
        "description": "---\nid: fe07726f-b2ce-4806-bbe0-a77bc3cd9da7\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nHusky est un outil permettant d'ajouter et de g√©rer des [[Git Hook]] (scripts ex√©cut√©s √† des moments cl√©s du cycle de vie d'un d√©p√¥t [[Git]], comme avant un commit) pour automatiser des t√¢ches comme des tests ou des v√©rifications de code.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nHusky simplifie l'int√©gration des [[Git Hook]] dans un projet [[JavaScript]]. En l'installant dans un projet, il cr√©e un r√©pertoire `.husky` qui contient les scripts des hooks (comme `pre-commit`, `pre-push`). Ces hooks permettent d'automatiser des processus, tels que :\n\n- Lancer des tests avant de valider un commit (`pre-commit`).\n- V√©rifier le format du code (`commit-msg`).\n- Bloquer un push si certaines conditions ne sont pas remplies (`pre-push`).\n\nHusky s'installe via npm et est facile √† configurer avec des commandes simples. Il permet aussi de d√©sactiver des hooks temporairement en ajoutant des arguments ou des variables d'environnement.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Automatisation facile** : Int√©gration simple des hooks Git dans les projets.\n- **Gestion des erreurs** : Permet d‚Äôemp√™cher des commits ou des pushs si des conditions ne sont pas remplies (tests √©chou√©s, mauvaise convention de commit, etc.).\n- **Souplesse** : Facile √† activer ou d√©sactiver via des variables d‚Äôenvironnement ou des arguments Git.\n- **Large compatibilit√©** : Fonctionne avec la plupart des projets [[Git]], quel que soit le framework ou l'outil utilis√©.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance au projet** : N√©cessite un environnement [[Node.js]] et l'installation via [[npm]] pour fonctionner.\n- **Peut ralentir le d√©veloppement** : Les hooks mal configur√©s ou trop nombreux peuvent freiner le d√©veloppement, surtout avec des v√©rifications de tests lourdes.\n- **Gestion des d√©sactivations** : Bien que possible, la d√©sactivation des hooks peut ne pas √™tre triviale dans certains contextes (par exemple dans [[CI/CD]]).\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "a28276a6-3156-4612-a0cf-64eb71fe9552",
        "title": "ImportMap (JS)",
        "description": "---\nid: 302b5d4b-497b-48db-b249-9fa80b82c068\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nUn ImportMap en [[JavaScript]] est un objet [[JSON]] qui permet de simplifier et g√©rer les imports dans une application en cr√©ant des alias pour les modules. Cela facilite la gestion des d√©pendances en permettant de d√©finir des chemins d'acc√®s personnalis√©s pour les imports.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn ImportMap est utilis√© pour d√©finir des correspondances entre les cl√©s d'import (les noms des modules) et leurs chemins r√©els (URLs ou fichiers locaux). Cela permet de contr√¥ler o√π un module est charg√©, simplifiant ainsi la gestion des d√©pendances dans un projet.\n\nExemple : au lieu d'importer directement un fichier via un long chemin, vous pouvez d√©finir un alias comme \"my-component\" dans l'ImportMap et l'utiliser ensuite dans les imports de vos modules.\n\n- **D√©ploiement [[Micros Frontends]]** : Changez dynamiquement les versions de vos composants sans modifier le code, en mettant √† jour uniquement l'ImportMap.\n- **Revue de code** : Permet de rediriger facilement les imports vers des versions sp√©cifiques pour tester des modifications en direct sans toucher au code source.\n\n```html\n<script type=\"importmap\">\n\t{\n\t\t\"imports\" : {\n\t\t\t\"my-component\": \"http://localhost:8080/src/my-component.js\"\n\t\t}\n\t}\n</script>\n\n<script type=\"module\">\n\timport { MyComponent } from \"my-component\"; // L'alias d√©fini dans l'ImportMap\n</script>\n```\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplification des imports** : Les alias permettent d'√©viter des chemins d'import longs et complexes.\n- **Flexibilit√©** : Possibilit√© de modifier les sources des modules sans toucher au code, utile pour le d√©ploiement de micro frontends et le rollback.\n- **Am√©lioration de la revue de code** : Permet de tester et valider rapidement des modifications dans des environnements sans modifier le code source.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Compatibilit√© limit√©e** : L'usage des ImportMaps est encore relativement nouveau et n'est pas pris en charge par tous les navigateurs (n√©cessite des fonctionnalit√©s modernes du navigateur).\n- **Gestion des versions** : Lors de l'utilisation avec des syst√®mes complexes, le suivi et la mise √† jour des versions des modules peuvent devenir difficiles si l'ImportMap n'est pas bien g√©r√©.\n- **Pas de support pour les outils de bundling** : L'ImportMap fonctionne c√¥t√© client mais ne remplace pas les outils de bundling comme [[Webpack]] pour une gestion avanc√©e des modules.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "56274708-5613-4cbd-9d09-78bd95f972b7",
        "title": "Incremental Static Regeneration (ISR)",
        "description": "---\nid: 29cf6b6a-38cb-4f64-9238-309f5dfb2bed\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nIncremental Static Regeneration (ISR) est une am√©lioration du processus de g√©n√©ration statique des pages ([[Server Side Generation (SSG)]]), permettant de mettre √† jour les pages statiques d√©j√† g√©n√©r√©es sans n√©cessiter une reconstruction compl√®te du site. ISR permet de r√©g√©n√©rer des pages statiques de mani√®re incr√©mentielle √† chaque requ√™te, tout en pr√©servant les performances.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nISR permet de g√©n√©rer des pages statiques de mani√®re classique, mais avec la possibilit√© de r√©g√©n√©rer et mettre √† jour ces pages √† la demande (en fonction du temps ou de l'action de l'utilisateur) sans recompiler l'ensemble du site. Cela permet une mise √† jour progressive du contenu sans impact sur la performance globale.\n\nLe processus fonctionne ainsi :\n\n1. Lorsqu'une page est demand√©e, elle est servie statiquement si elle a d√©j√† √©t√© g√©n√©r√©e.\n2. Si la page doit √™tre mise √† jour, le serveur la r√©g√©n√®re en arri√®re-plan tout en servant l'ancienne version.\n3. Une fois la r√©g√©n√©ration termin√©e, la nouvelle version est disponible pour les requ√™tes suivantes.\n\nCela est utile dans les cas o√π les pages doivent √™tre r√©guli√®rement mises √† jour mais sans sacrifier les avantages du contenu statique.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Performance rapide** : Le contenu statique est servi tr√®s rapidement sans travail c√¥t√© serveur.\n- **SEO optimis√©** : Le contenu est index√© par les moteurs de recherche comme du contenu statique, ce qui est id√©al pour le r√©f√©rencement.\n- **Mise √† jour incr√©mentielle** : Permet de mettre √† jour des pages sp√©cifiques sans recompilation compl√®te du site.\n- **Scalabilit√©** : Id√©al pour des sites avec beaucoup de pages ou du contenu qui change r√©guli√®rement.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Temps de compilation** : Le processus de g√©n√©ration initiale des pages peut √™tre long, surtout pour les grands sites.\n- **Non adapt√© au contenu dynamique** : Pas efficace pour les pages qui changent fr√©quemment ou qui n√©cessitent une interaction en temps r√©el.\n- **Complexit√© de gestion des mises √† jour** : Suivre quelles pages doivent √™tre r√©g√©n√©r√©es et quand peut devenir difficile √† g√©rer √† grande √©chelle.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "bedba0c6-f509-4e04-b2f4-feb4b460971d",
        "title": "Interface fonctionnelle",
        "description": "---\nid: 1dc25831-3209-4d96-aa65-41a3b48815c0\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nUne interface fonctionnelle en [[Java]] est une interface qui ne poss√®de qu'une seule m√©thode abstraite.  Elle sert principalement √† cr√©er des expressions lambda et des r√©f√©rences √† des m√©thodes.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nEn [[Java]], une interface est un type qui d√©finit un contrat pour les classes qui l'impl√©mentent.  Une interface fonctionnelle simplifie ce contrat en exigeant la d√©finition d'une seule m√©thode.  Cela permet d'utiliser des expressions lambda (une forme concise d'√©crire des objets impl√©mentant une interface fonctionnelle) et des r√©f√©rences de m√©thodes (une mani√®re compacte de passer une m√©thode existante comme argument).  L'annotation `@FunctionalInterface` est utilis√©e pour indiquer qu'une interface est con√ßue comme une interface fonctionnelle.  Si une interface annot√©e avec `@FunctionalInterface` d√©finit plus d'une m√©thode abstraite, une erreur de compilation se produira.  Cependant, elle peut contenir des m√©thodes de d√©faut (avec une impl√©mentation par d√©faut), des m√©thodes statiques, et des m√©thodes priv√©es.\n\n**Exemple:**\n\n```java\n@FunctionalInterface\ninterface Print {\n    void execute(String label);\n}\n\nclass UseCase {\n    Print print;\n\n    void printAll(List<String> labels) {\n        labels.forEach(label -> print.execute(label)); // Utilisation d'une expression lambda\n    }\n\n    public static void main(String[] args) {\n        UseCase useCase = new UseCase();\n        useCase.print = label -> System.out.println(\"Label: \" + label); // affectation d'une lambda expression √† print\n\n        List<String> labels = List.of(\"Label 1\", \"Label 2\", \"Label 3\");\n        useCase.printAll(labels);\n    }\n}\n```\n\nDans cet exemple, `Print` est une interface fonctionnelle avec une seule m√©thode abstraite `execute`.  La m√©thode `printAll` utilise une expression lambda `label -> System.out.println(\"Label: \" + label)` pour fournir une impl√©mentation de `Print` directement dans l'appel de `forEach`.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Concision du code:** Les expressions lambda rendent le code plus concis et plus lisible que les classes anonymes traditionnelles.\n* **Fonctionnalit√© expressive:**  Permet d'exprimer des concepts fonctionnels (comme le passage de fonctions comme arguments) de mani√®re √©l√©gante et naturelle en [[Java]].\n* **Am√©lioration de la lisibilit√©:** Le code utilisant les interfaces fonctionnelles est g√©n√©ralement plus facile √† lire et √† comprendre.\n* **Interop√©rabilit√©:**  Facilite l'utilisation de biblioth√®ques fonctionnelles et de concepts fonctionnels dans les applications [[Java]].\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle pour les d√©butants:**  La compr√©hension des concepts fonctionnels peut prendre du temps pour les programmeurs habitu√©s √† la programmation imp√©rative.\n* **D√©bogage:** Le d√©bogage des expressions lambda peut √™tre l√©g√®rement plus complexe qu'avec des m√©thodes classiques.  Le nom de la m√©thode √©tant implicite, l‚Äôidentification de la source d‚Äôun bug peut prendre plus de temps.\n* **Surutilisation potentielle:** Une surutilisation des interfaces fonctionnelles peut rendre le code moins lisible si les expressions lambda deviennent trop complexes ou si l'intention du code n'est pas claire.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "be6a1edb-d8a6-44c7-a730-c2b2b95faaa2",
        "title": "Certification Java 17 - Internationalisation et Localisation",
        "description": "---\nid: 2726c3d7-2090-4f23-99f6-b0b1ea5a3ff1\n---\nL‚Äô**internationalisation (i18n)** et la **localisation (l10n)** permettent d‚Äôadapter une application Java √† diff√©rentes langues et r√©gions.\n\n## **13.1. `Locale` : D√©finition de la langue et du pays**\n\n### **1. Cr√©ation d‚Äôun `Locale`**\n\n```java\nimport java.util.Locale;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        Locale fr = new Locale(\"fr\", \"FR\"); // Fran√ßais (France)\n        Locale us = new Locale(\"en\", \"US\"); // Anglais (√âtats-Unis)\n\n        System.out.println(fr.getDisplayLanguage()); // Fran√ßais\n        System.out.println(us.getDisplayCountry());  // United States\n    }\n}\n```\n\nüìå **`Locale(language, country)` : d√©finit une langue et un pays.**\n\n---\n\n### **2. `Locale.getDefault()` : D√©tecter la langue du syst√®me**\n\n```java\nLocale localeParDefaut = Locale.getDefault();\nSystem.out.println(localeParDefaut); // Ex : fr_FR ou en_US\n```\n\nüìå **On peut aussi changer la locale par d√©faut :**\n\n```java\nLocale.setDefault(new Locale(\"es\", \"ES\")); // Espagnol (Espagne)\n```\n\n---\n\n## **13.2. `ResourceBundle` : Chargement de textes multilingues**\n\nüìå **Les fichiers de ressources (`.properties`) permettent de stocker les traductions.**\n\n### **1. Cr√©ation des fichiers `messages.properties`**\n\nüìÇ **Structure du projet :**\n\n```\n/src\n  /messages_fr.properties\n  /messages_en.properties\n```\n\nüìÑ **messages_fr.properties**\n\n```\nsalutation=Bonjour !\n```\n\nüìÑ **messages_en.properties**\n\n```\nsalutation=Hello!\n```\n\n### **2. Chargement des ressources avec `ResourceBundle`**\n\n```java\nimport java.util.*;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        Locale locale = new Locale(\"fr\", \"FR\"); // Changez en \"en\", \"US\" pour tester\n        ResourceBundle bundle = ResourceBundle.getBundle(\"messages\", locale);\n\n        System.out.println(bundle.getString(\"salutation\")); // Affiche \"Bonjour !\" ou \"Hello!\"\n    }\n}\n```\n\nüìå **Le fichier correspondant √† la `Locale` est automatiquement s√©lectionn√©.**\n\n---\n\n## **13.3. Formatage des Dates, Nombres et Devises**\n\n### **1. `NumberFormat` : Formatage des nombres et devises**\n\n```java\nimport java.text.NumberFormat;\nimport java.util.Locale;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        double montant = 1234.56;\n\n        NumberFormat formatFr = NumberFormat.getCurrencyInstance(Locale.FRANCE);\n        NumberFormat formatUs = NumberFormat.getCurrencyInstance(Locale.US);\n\n        System.out.println(formatFr.format(montant)); // 1 234,56 ‚Ç¨\n        System.out.println(formatUs.format(montant)); // $1,234.56\n    }\n}\n```\n\nüìå **`getCurrencyInstance(Locale)` formate selon la devise locale.**\n\n---\n\n### **2. `DateTimeFormatter` : Formatage des dates**\n\n```java\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.now();\n\n        DateTimeFormatter formatterFr = DateTimeFormatter.ofPattern(\"EEEE dd MMMM yyyy\", Locale.FRANCE);\n        DateTimeFormatter formatterUs = DateTimeFormatter.ofPattern(\"EEEE, MMMM dd, yyyy\", Locale.US);\n\n        System.out.println(date.format(formatterFr)); // Ex : mercredi 06 mars 2025\n        System.out.println(date.format(formatterUs)); // Ex : Wednesday, March 06, 2025\n    }\n}\n```\n\nüìå **`ofPattern(\"EEEE dd MMMM yyyy\", Locale)` formate la date selon la langue.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **`Locale` : D√©finit la langue et le pays (`Locale(\"fr\", \"FR\")`).**  \n‚úÖ **`ResourceBundle` : Charge des fichiers `.properties` pour les traductions.**  \n‚úÖ **`NumberFormat` : Formate les nombres et devises selon la locale.**  \n‚úÖ **`DateTimeFormatter` : Affiche les dates dans le format localis√©.**"
    },
    {
        "id": "a6594301-4ed1-451d-b843-a3e8c5e95706",
        "title": "Jpa Specification",
        "description": "---\nid: ec614572-79e3-4b20-bd55-75d790f3a468\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **JPA Specifications** permettent de cr√©er des requ√™tes dynamiques en utilisant l'API **[[Criteria]]** de [[Spring Data ]]. Elles sont utiles pour filtrer ou rechercher des entit√©s en fonction de crit√®res variables et complexes sans avoir √† √©crire des requ√™tes [[SQL]] statiques.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLes JPA Specifications sont des interfaces permettant de d√©finir des crit√®res de recherche dynamiques avec **[[Spring Data JPA]]**. Elles utilisent l'API **[[Criteria]]** pour cr√©er des requ√™tes complexes, notamment des filtres dynamiques bas√©s sur des conditions `WHERE`. Les crit√®res sont repr√©sent√©s par des **Predicates**, qui combinent des conditions logiques et des expressions de filtrage.\n\nUne Specification est construite √† partir d'un `Predicate`, qui est une condition logique sur les donn√©es, comme un test d'√©galit√©, de comparaison ou une recherche de texte. Vous pouvez combiner plusieurs Specifications avec des m√©thodes comme `and()`, `or()`, et `not()` pour cr√©er des requ√™tes complexes.\n\nExemple de Specification :\n\n```java\npublic static Specification<User> firstNameLike(String firstName) {\n    return (root, criteriaQuery, criteriaBuilder) -> criteriaBuilder.like(root.get(\"firstName\"), \"%\" + firstName + \"%\");\n}\n```\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Flexibilit√©** : Cr√©er des requ√™tes dynamiques et personnalis√©es en fonction des besoins de l'utilisateur.\n- **R√©utilisabilit√©** : Les Specifications peuvent √™tre combin√©es et r√©utilis√©es dans diff√©rentes parties du projet.\n- **Lisibilit√©** : Permet de garder un code propre et lisible en √©vitant des requ√™tes [[SQL]] complexes int√©gr√©es directement dans le code.\n- **Int√©gration avec [[Spring Data JPA]]** : Facile √† utiliser avec des repositories Spring en √©tendant `JpaSpecificationExecutor`.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© des requ√™tes** : Lorsque les crit√®res deviennent trop complexes, la lecture et la compr√©hension des Specifications peuvent devenir difficiles.\n- **Performance** : Les requ√™tes g√©n√©r√©es peuvent √™tre lentes pour des bases de donn√©es volumineuses, n√©cessitant une surveillance attentive de la performance.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Base de donn√©e SQL]]"
    },
    {
        "id": "08fad616-b3cf-4f10-88ee-af456f64777e",
        "title": "Kibana",
        "description": "---\nid: d9182905-f3b8-4196-9a7a-a168a04da247\n---\n# Rapidement c'est quoi‚ùì\n\nKibana est une plateforme d'analyse et de visualisation de donn√©es open-source, principalement utilis√©e pour explorer et interagir avec des donn√©es index√©es par [[Elasticsearch]].  Elle permet de cr√©er des tableaux de bord, des graphiques et des visualisations interactives.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nKibana est une application web qui se connecte √† un cluster [[Elasticsearch]].  Elle utilise les donn√©es index√©es dans [[Elasticsearch]] pour g√©n√©rer des visualisations personnalis√©es.  Elle offre un large √©ventail de fonctionnalit√©s, notamment :\n\n* **Visualisation de donn√©es:** Cr√©ation de diff√©rents types de graphiques (barres, lignes, camemberts, cartes, etc.), de tableaux et d'autres repr√©sentations visuelles des donn√©es.  Ces visualisations peuvent √™tre interactives, permettant aux utilisateurs de filtrer, d'explorer et d'analyser les donn√©es de mani√®re dynamique.\n* **Exploration de donn√©es:**  Kibana permet une exploration ad-hoc des donn√©es via une interface intuitive de recherche et de filtrage.  L'utilisateur peut poser des questions aux donn√©es et obtenir des r√©ponses instantan√©ment gr√¢ce √† des requ√™tes [[Elasticsearch]].\n* **Cr√©ation de tableaux de bord:**  Agr√©gation de plusieurs visualisations en un seul tableau de bord personnalisable, offrant une vue d'ensemble des donn√©es importantes.  Ces tableaux de bord peuvent √™tre partag√©s avec d'autres utilisateurs.\n* **Monitoring:**  Surveillance des performances d'[[Elasticsearch]] et des applications qui s'y connectent.\n* **Alerting:**  Mise en place de notifications bas√©es sur des conditions sp√©cifiques d√©finies sur les donn√©es.\n* **Machine Learning:**  Int√©gration avec les capacit√©s de machine learning d'[[Elasticsearch]] pour la d√©tection d'anomalies et la pr√©diction.\n* **Gestion des utilisateurs et des r√¥les:**  Contr√¥le d'acc√®s aux donn√©es et aux fonctionnalit√©s de Kibana.\n\nKibana est con√ßu pour √™tre flexible et extensible, permettant aux utilisateurs de cr√©er des visualisations personnalis√©es et d'int√©grer des donn√©es provenant de diff√©rentes sources.  Son interface utilisateur est intuitive et conviviale, facilitant l'analyse de donn√©es m√™me pour des utilisateurs sans expertise technique approfondie.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Interface utilisateur intuitive et conviviale:**  Facile √† apprendre et √† utiliser, m√™me pour les utilisateurs moins exp√©riment√©s.\n* **Large vari√©t√© de visualisations:**  Offre un large choix de graphiques et de tableaux pour repr√©senter les donn√©es de mani√®re efficace.\n* **Flexibilit√© et extensibilit√©:**  Permet de cr√©er des visualisations personnalis√©es et de s'int√©grer √† d'autres syst√®mes.\n* **[[Open-source]]:**  Gratuit et accessible √† tous.\n* **Int√©gration avec [[Elasticsearch]]:**  Synergie parfaite avec [[Elasticsearch]] pour une exploration et une visualisation des donn√©es optimis√©es.\n* **Fonctionnalit√©s avanc√©es:**  Offre des fonctionnalit√©s puissantes comme l'alerte, le monitoring et le machine learning.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Performances pour de tr√®s gros volumes de donn√©es:**  Peut devenir lent avec des ensembles de donn√©es extr√™mement volumineux.  Une optimisation de l'indexation et de la requ√™te Elasticsearch est alors n√©cessaire.\n* **Courbe d'apprentissage pour les fonctionnalit√©s avanc√©es:**  Certaines fonctionnalit√©s plus techniques (comme le scripting ou les requ√™tes complexes) peuvent n√©cessiter une expertise plus pouss√©e.\n* **D√©pendance √† [[Elasticsearch]]:**  N√©cessite un cluster [[Elasticsearch]] fonctionnel pour fonctionner.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "5ffac79c-2a16-420e-a848-17e8e04395ba",
        "title": "Logstash",
        "description": "---\nid: 6dd4b62f-dfea-48d8-bc6d-31eb62dd914d\n---\n# Rapidement c'est quoi‚ùì\n\nLogstash est un outil open source de traitement de donn√©es en temps r√©el. Il collecte, traite et exp√©die des donn√©es provenant de diverses sources.  On parle d'[[ETL]] (Extraction, Transformation, Loading).\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLogstash est une application √©crite en [[Ruby]], con√ßue pour collecter des donn√©es de multiples sources (logs, bases de donn√©es, applications, etc.), les transformer selon des r√®gles d√©finies par l'utilisateur (filtrage, enrichissement, agr√©gation, etc.) et les envoyer vers des destinations vari√©es (bases de donn√©es, syst√®mes de stockage cloud, syst√®mes de visualisation de donn√©es, etc.).  Il fonctionne comme un pipeline modulaire, o√π chaque √©tape est d√©finie par un plugin.  Ces plugins permettent une grande flexibilit√© et une int√©gration avec un vaste √©cosyst√®me d'outils.  \n\nLe processus se d√©compose en trois phases :\n\n* **Extraction (Input):**  Logstash r√©cup√®re les donn√©es depuis les sources d√©finies.  Les plugins d'entr√©e sont nombreux et permettent de se connecter √† des sources vari√©es (filesystems, r√©seaux, bases de donn√©es, APIs, etc.).\n\n* **Transformation (Filter):**  Logstash manipule les donn√©es.  Les plugins de filtres permettent de r√©aliser des op√©rations telles que le parsing de logs, la modification de champs, l'ajout de nouveaux champs bas√©s sur des calculs, la suppression de donn√©es sensibles, etc.  Ces transformations sont d√©finies via des configurations en langage [[JSON]].\n\n* **Chargement (Output):**  Logstash envoie les donn√©es transform√©es vers les destinations sp√©cifi√©es.  Les plugins de sortie permettent d'envoyer les donn√©es vers [[Elasticsearch]], des [[Base de donn√©e]], des filesystems, des messageries ([[Apache Kafka]], [[RabbitMQ]]), etc.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Flexibilit√© et extensibilit√©:** Gr√¢ce √† son architecture modulaire bas√©e sur les plugins, Logstash s'adapte facilement √† de nombreux cas d'utilisation et s'int√®gre √† une large vari√©t√© d'outils.\n* **Open source:**  Gratuit et accessible √† tous, avec une large communaut√© contribuant √† son d√©veloppement et √† son support.\n* **Traitement en temps r√©el:**  Permet de traiter les donn√©es au fur et √† mesure de leur arriv√©e, ce qui est crucial pour certaines applications.\n* **Configuration d√©clarative:**  La configuration se fait via des fichiers JSON, facilitant la gestion et le partage des configurations.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La configuration peut devenir complexe pour des pipelines sophistiqu√©s, n√©cessitant une bonne compr√©hension de son fonctionnement et des plugins utilis√©s.\n* **Performances:**  Pour des volumes de donn√©es tr√®s importants, les performances de Logstash peuvent √™tre un point de blocage, n√©cessitant l'optimisation de la configuration et potentiellement l'utilisation de solutions plus performantes.\n* **D√©pendance √† Ruby:**  Bien que performant, [[Ruby]] peut √™tre un frein pour certains d√©veloppeurs.\n* **Maintenance et mises √† jour:**  Comme tout logiciel, Logstash n√©cessite une maintenance r√©guli√®re et la prise en compte des mises √† jour de s√©curit√©.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "e7d73c5a-a571-452f-af78-02a88e191259",
        "title": "Micrometer",
        "description": "---\nid: cab051d2-e62d-413b-acab-5c1c7aefa9de\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Micrometer** est une biblioth√®que [[Java]] qui permet de collecter et exporter des m√©triques de performance d'applications vers diff√©rents syst√®mes de monitoring tels que [[Prometheus]], [[Graphite]], [[Datadog]], et [[InfluxDB]]. Elle est souvent utilis√©e avec [[Spring Boot]].\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nMicrometer fournit une API unifi√©e pour int√©grer des m√©triques dans vos applications [[Java]]. Elle supporte plusieurs types de m√©triques, telles que les compteurs, jauges, histogrammes et timers. Ces m√©triques peuvent √™tre envoy√©es vers des syst√®mes de monitoring via des `exporters`.\n\n**Types de m√©triques :**\n\n- **Compteurs** : Compte des √©v√©nements (ex : nombre de requ√™tes HTTP).\n- **Jauges** : Mesure un √©tat variable (ex : taille d‚Äôun cache).\n- **Histogrammes** : Collecte des donn√©es statistiques (ex : latence des requ√™tes).\n- **Timers** : Mesure la dur√©e d‚Äôun √©v√©nement (ex : temps de r√©ponse d‚Äôune requ√™te HTTP).\n\n**Tags** : Vous pouvez ajouter des √©tiquettes (tags) aux m√©triques pour les diff√©rencier par exemple par type de requ√™tes ou r√©gion g√©ographique.\n\nAvec [[Spring Boot]], Micrometer s'int√®gre facilement via le module **[[Spring Boot Actuator]]**, et expose les m√©triques via des endpoints comme `/actuator/prometheus`.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Int√©gration facile avec [[Spring Boot]]** : Micrometer fonctionne bien avec [[Spring Boot]], surtout avec [[Spring Boot Actuator]].\n- **Support multiple pour les syst√®mes de monitoring** : Vous pouvez exporter les m√©triques vers de nombreux backends comme [[Prometheus]], [[Datadog]], [[Graphite]], etc.\n- **Flexibilit√© avec les tags** : Les tags permettent de filtrer et analyser les m√©triques selon plusieurs crit√®res (ex : type de requ√™tes, zones g√©ographiques).\n- **Types de m√©triques vari√©s** : Compteurs, jauges, histogrammes et timers couvrent tous les besoins courants de collecte de m√©triques.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© avec des configurations avanc√©es** : Pour des cas complexes de m√©triques personnalis√©es ou des syst√®mes de monitoring moins communs, la configuration peut devenir d√©licate.\n- **D√©pendance √† des backends externes** : La collecte et l'exportation des m√©triques n√©cessitent une configuration des syst√®mes de monitoring externes.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "fefe5553-dc94-4de2-9dd2-0288dca655c3",
        "title": "Mobile First",
        "description": "---\nid: d7eada46-6aee-42e1-8e29-8aaf4ff9526f\n---\n# Rapidement c'est quoi‚ùì\n\nUne m√©thode de conception web consistant √† prioriser l'exp√©rience utilisateur sur les petits √©crans (mobiles) avant de l'adapter aux plus grands (tablettes, ordinateurs).\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe principe \"mobile-first\" est une approche de d√©veloppement web qui place l'exp√©rience utilisateur mobile au c≈ìur du processus de conception.  Au lieu de concevoir d'abord pour les ordinateurs de bureau et ensuite de r√©duire l'interface pour les mobiles (approche \"desktop-first\"), le mobile-first commence par cr√©er une version optimis√©e pour les petits √©crans.  Cette version inclut uniquement les √©l√©ments essentiels et les fonctionnalit√©s cl√©s.  Ensuite, on ajoute progressivement des fonctionnalit√©s et du contenu pour les √©crans plus grands (tablettes et ordinateurs), en utilisant des requ√™tes [[CSS]] media pour adapter l'affichage.  L'objectif est de garantir que le site web fonctionne correctement et offre une bonne exp√©rience utilisateur, m√™me sur des appareils avec des ressources limit√©es (bande passante, puissance de calcul). Cela implique de prioriser la vitesse de chargement, la lisibilit√© et la simplicit√© de navigation sur mobile.  L'adaptation pour les √©crans plus grands se fait ensuite par ajout de contenu, d'√©l√©ments visuels, et d'une meilleure organisation de l'information, plut√¥t que par une simple mise √† l'√©chelle.  Cette approche am√©liore l'accessibilit√© et l'exp√©rience utilisateur sur tous les appareils.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Exp√©rience utilisateur optimis√©e sur mobile:**  Priorise l'exp√©rience sur les appareils les plus utilis√©s aujourd'hui.\n* **Vitesse de chargement plus rapide:**  Version all√©g√©e initialement con√ßue pour les appareils avec une bande passante limit√©e.\n* **Meilleure accessibilit√©:**  Conception plus simple et plus intuitive, facilitant la navigation pour tous les utilisateurs.\n* **Maintenance simplifi√©e:**  Un code plus propre et plus organis√©, facilitant les mises √† jour et les corrections de bogues.\n* **Adaptabilit√© et flexibilit√©:**  La conception r√©pond naturellement aux diff√©rentes tailles d'√©cran.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Potentiellement plus de travail initial:** Bien que simplifiant la maintenance √† long terme, la conception initiale peut n√©cessiter une r√©flexion plus approfondie pour adapter le contenu aux diff√©rents niveaux d'affichage.\n* **N√©cessite une bonne ma√Ætrise du [[CSS]]:** L'utilisation efficace des requ√™tes media est indispensable pour une bonne adaptation.\n* **Peut √™tre moins intuitif pour les d√©veloppeurs habitu√©s √† la m√©thode \"desktop-first\".**  Un changement de paradigme est n√©cessaire.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "27b397ff-ecad-4089-bd0d-8b2ff8680213",
        "title": "Mol√©cule",
        "description": "---\nid: bf25037e-5dd1-4369-a7aa-d581e9371615\n---\n# Rapidement c'est quoi‚ùì\n\nMol√©cule est un outil [[Python]] qui utilise [[Ansible]] et [[Testinfra]] pour tester l'infrastructure en provisionnant des environnements avec [[Docker]].  Il permet de r√©aliser des [[Test d'int√©gration]] plus rapidement qu'avec des [[VM]].\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nMol√©cule est un framework de [[Test d'infrastructure]] bas√© sur [[Python]]. Il permet de d√©finir, provisionner et tester des environnements d'infrastructure de mani√®re automatis√©e. Il s'appuie sur [[Ansible]] pour la configuration et le d√©ploiement de l'infrastructure, et sur [[Testinfra]] pour la validation et la v√©rification de l'√©tat de l'infrastructure apr√®s d√©ploiement.  L'utilisation de [[Docker]] permet de cr√©er et de d√©truire rapidement des environnements de test, acc√©l√©rant ainsi le cycle de d√©veloppement et de test.  Le principe est de d√©finir la configuration de l'infrastructure souhait√© dans un fichier de configuration (g√©n√©ralement YAML), puis Mol√©cule se charge de la cr√©ation de l'environnement [[Docker]], du d√©ploiement via [[Ansible]] et enfin de l'ex√©cution des tests [[Testinfra]] pour v√©rifier que l'infrastructure d√©ploy√©e correspond √† la configuration attendue.  Ce processus permet de tester l'infrastructure de mani√®re reproductible et fiable.\n\nCet outil rend possible le [[Test Driven Developpement (TDD)]] sur de l'[[Infra as Code (IaC]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Rapidit√©:** L'utilisation de [[Docker]] permet un provisionnement et un nettoyage rapides des environnements de test, comparativement √† l'utilisation de machines virtuelles.\n* **Reproductibilit√©:** Les tests sont ex√©cut√©s dans un environnement contr√¥l√© et reproductible, garantissant la coh√©rence des r√©sultats.\n* **Int√©gration avec [[Ansible]] et [[Testinfra]]:** Mol√©cule tire parti de la puissance d'[[Ansible]] pour le d√©ploiement et de [[Testinfra]] pour la v√©rification de l'√©tat de l'infrastructure, cr√©ant une synergie efficace.\n* **Automatisation:** L'ensemble du processus de test est automatis√©, r√©duisant le temps et l'effort manuel n√©cessaires.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Diff√©rences entre conteneurs et machines virtuelles:** Les conteneurs [[Docker]] ne reproduisent pas parfaitement l'environnement d'une machine virtuelle.  Certaines particularit√©s de fonctionnement peuvent entra√Æner des diff√©rences de comportement et des √©checs de test, n√©cessitant une adaptation des tests et des configurations.\n* **Mocking des services externes:**  Le mocking de services externes peut √™tre complexe et n√©cessiter des solutions sp√©cifiques, selon la d√©pendance du syst√®me test√©.\n* **Courbe d'apprentissage:**  La ma√Ætrise d'[[Ansible]] et de [[Testinfra]] est n√©cessaire pour utiliser efficacement Mol√©cule.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]][[MOC_Testing]]"
    },
    {
        "id": "ca07ae2e-28ac-4040-b12c-3318f0c63df4",
        "title": "Nitro",
        "description": "---\nid: 87c37a5c-546e-4b54-a1f1-db9d7e9b3d00\n---\n# Rapidement c'est quoi‚ùì\n\nNitro est le moteur [[HTTP]] de [[Nuxt.js]] 3, permettant un rendu [[Server Side Rendering (SSR)]] performant et la [[Server Side Generation (SSG)]] de sites web.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nNitro est le runtime de [[Nuxt.js]] 3, un framework [[Vue.js]].  Il remplace le pr√©c√©dent syst√®me bas√© sur [[koa.js]] et offre des am√©liorations significatives en termes de performance et de flexibilit√©.  Son c≈ìur de m√©tier est la gestion des requ√™tes [[HTTP]], permettant √† Nuxt de servir des pages web dynamiques ou pr√©-rendues.  Il g√®re :\n\n* **[[Server Side Rendering (SSR)]]:**  Le code [[Vue.js]] est ex√©cut√© sur le serveur, et le [[HTML]] r√©sultant est envoy√© au navigateur.  Cela permet un meilleur r√©f√©rencement [[SEO]] et une exp√©rience utilisateur plus rapide dans certains cas.\n* **[[Server Side Generation (SSG)]]:**  Nitro permet de g√©n√©rer des pages HTML statiques au moment du build, optimisant le temps de chargement et la performance.  Id√©al pour des sites web √† contenu statique ou peu variable.\n* **API routes:**  Permet de cr√©er facilement des API [[RESTful]].\n* **Int√©gration avec des services [[Function as a Service (FaaS)]]:**  Nitro peut d√©ployer vos applications sur des plateformes serverless comme [[AWS Lambda]], [[Netlify Functions]], etc.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance:** Nitro est significativement plus rapide que le moteur [[HTTP]] de Nuxt 2.\n* **Flexibilit√©:**  Il offre une grande vari√©t√© d'options de d√©ploiement et de configuration.\n* **Int√©gration Serverless:** Simplifie le d√©ploiement sur des plateformes cloud sans serveur.\n* **Maintenance et Am√©lioration:** √âtant le moteur de la nouvelle version de Nuxt, il b√©n√©ficie d'une maintenance active et d'am√©liorations r√©guli√®res.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  Pour les d√©veloppeurs habitu√©s √† Nuxt 2, l'adaptation √† Nitro peut n√©cessiter un certain temps d'apprentissage.\n* **Complexit√©:**  La configuration de Nitro peut √™tre complexe pour des applications tr√®s vastes et complexes.\n* **D√©pendances:**  La bonne performance de Nitro d√©pend fortement de la configuration et des optimisations mises en place.  Une mauvaise configuration peut d√©grader les performances.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]][[MOC_DevSecOps]]"
    },
    {
        "id": "c0d70da5-2d60-4fd4-8d80-22d7bbc471db",
        "title": "Open Feature",
        "description": "---\nid: ac13e1c4-96e2-4632-b280-c159bdad84c8\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nOpenFeature est un framework qui permet de g√©rer de mani√®re centralis√©e l‚Äôutilisation de [[Feature Flag]] dans une application. Il offre une abstraction qui permet de d√©finir des r√®gles pour activer ou d√©sactiver des fonctionnalit√©s en fonction de crit√®res d√©finis.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOpenFeature permet d‚Äôint√©grer des [[Feature Flag]] dans des applications pour activer ou d√©sactiver certaines fonctionnalit√©s √† la vol√©e. Cela permet de tester des nouvelles fonctionnalit√©s sans modifier le code ou d√©ployer une nouvelle version.\n\n- Il supporte l'utilisation de _providers_, tels que [[Flagd]], pour g√©rer les √©tats des [[Feature Flag]].\n- Chaque [[Feature Flag]] peut avoir plusieurs variantes (par exemple, activer une fonctionnalit√© √† 20% des utilisateurs).\n- Avec un provider comme [[Flagd]], la configuration des [[Feature Flag]] peut √™tre d√©finie dans un fichier [[JSON]].\n- L'int√©gration avec des frameworks comme [[Spring Boot]] permet de conditionner des comportements selon l‚Äô√©tat d‚Äôun [[Feature Flag]] dans le code, offrant ainsi un contr√¥le granulaire sur les fonctionnalit√©s activ√©es.\n\nUn exemple d‚Äôutilisation est de configurer un flag pour activer un message de bienvenue uniquement pour certains utilisateurs.\n\n# Qu'est ce qui est top ? üëç\n\n- **Abstraction simple** : OpenFeature fournit une abstraction standard pour g√©rer les [[Feature Flag]], ce qui permet de les int√©grer facilement dans diff√©rentes applications sans d√©pendre d‚Äôune impl√©mentation sp√©cifique.\n- **Flexibilit√©** : Il permet de tester des fonctionnalit√©s en production sans risque, en activant des flags pour une fraction des utilisateurs.\n- **Int√©gration fluide avec [[Spring Boot]]** : OpenFeature peut √™tre facilement int√©gr√© avec des frameworks populaires comme [[Spring Boot]] pour g√©rer dynamiquement l‚Äôactivation des fonctionnalit√©s via des flags.\n- **Support des providers multiples** : OpenFeature peut se connecter √† diff√©rents _providers_ comme [[Flagd]], offrant ainsi un large √©ventail d‚Äôoptions pour g√©rer les [[Feature Flag]].\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **N√©cessit√© d'un provider** : Pour une utilisation compl√®te, il est n√©cessaire de configurer un provider externe (comme [[Flagd]]), ce qui peut √™tre un surco√ªt de gestion pour de petites applications.\n- **Configuration suppl√©mentaire** : La configuration des [[Feature Flag]] et de leur provider n√©cessite une gestion suppl√©mentaire, notamment au niveau de l‚Äôenvironnement (ex. fichiers JSON et lancement de services).\n- **Complexit√© pour les petites applications** : Pour des projets simples, l‚Äôint√©gration d‚ÄôOpenFeature avec un provider externe peut ajouter une complexit√© inutile par rapport √† une gestion manuelle des [[Feature Flag]].\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "b32b473f-a83e-4228-b69a-812ac8669528",
        "title": "Open Service Gateway initiative (OSGi)",
        "description": "---\nid: 0fa947ed-276d-411b-9b71-cc251c56f62d\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**OSGi (Open Service Gateway Initiative)** est un framework [[Java]] qui permet de cr√©er des applications modulaires, o√π des composants appel√©s **bundles** peuvent √™tre install√©s, mis √† jour ou supprim√©s dynamiquement sans red√©marrer l'application.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOSGi facilite la cr√©ation d'applications modulaires en permettant aux composants de s'ajouter, se mettre √† jour ou se retirer √† la vol√©e. Les applications sont constitu√©es de **bundles** (fichiers JAR) qui exposent des **services**. Ces services peuvent √™tre consomm√©s par d'autres bundles de mani√®re dynamique gr√¢ce √† un syst√®me de gestion des d√©pendances et de la d√©couverte de services.\n\n**Principaux concepts :**\n\n- **Bundle** : Un module autonome contenant des services, souvent sous forme de JAR.\n- **Service** : Fonctionnalit√© offerte par un bundle, accessible √† d'autres bundles.\n- **Framework OSGi** : G√®re l'installation, la mise √† jour, la suppression et la r√©solution des d√©pendances des bundles.\n\nLes bundles peuvent interagir dynamiquement via des **r√©f√©rences de services**, permettant une communication fluide sans d√©pendances statiques.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Modularit√©** : Permet de structurer des applications complexes en modules autonomes.\n- **Dynamisme** : Ajout, mise √† jour ou retrait de modules sans interruption du service global.\n- **Flexibilit√©** : La communication entre les bundles via des services est dynamique et d√©coupl√©e.\n- **Gestion des d√©pendances** : OSGi r√©sout automatiquement les d√©pendances entre les modules.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√©** : La configuration et gestion de l'OSGi peut devenir complexe, surtout dans les applications tr√®s grandes ou avec de multiples d√©pendances.\n- **Performance** : L'overhead de gestion dynamique des bundles peut affecter les performances dans des syst√®mes tr√®s sollicit√©s.\n- **√âcosyst√®me limit√©** : Moins d'adoption dans l'√©cosyst√®me [[Java]] moderne compar√© √† d'autres solutions comme les conteneurs ou les [[Micros services]].\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "2bc77698-0a7d-453d-9044-0f6a151c7a02",
        "title": "OpenAPI",
        "description": "---\nid: d256da53-27ac-4a9e-a46c-98cea1cd5d5c\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nOpenAPI est une sp√©cification standardis√©e qui permet de d√©crire les interfaces d'API de mani√®re structur√©e, g√©n√©ralement en format YAML ou JSON. Elle permet de documenter, interagir et g√©n√©rer du code pour une API de fa√ßon automatis√©e.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOpenAPI est une sp√©cification qui standardise la description des API REST. Elle permet de d√©finir de mani√®re pr√©cise les routes, les param√®tres d'entr√©e, les types de r√©ponse, et d'autres aspects d'une API, tout en facilitant l'automatisation du d√©veloppement et de la documentation.\n\n- **Swagger vs OpenAPI** : Swagger √©tait le nom original de la sp√©cification avant son acquisition par SmartBear, qui a transf√©r√© la gestion de la sp√©cification √† l'OpenAPI Initiative. Swagger est d√©sormais utilis√© pour les outils li√©s √† cette sp√©cification.\n- **Documentation API** : La sp√©cification d√©crit les endpoints d'une API, leur m√©thode (GET, POST, etc.), les param√®tres attendus et les r√©ponses, avec des exemples et des codes de statut.\n- **G√©n√©ration de code** : En utilisant la sp√©cification OpenAPI, des outils peuvent g√©n√©rer automatiquement des clients API, des serveurs, ou des SDKs dans diff√©rents langages.\n- **Exemple** : Un fichier YAML peut d√©crire un endpoint API comme `/users`, les param√®tres qu'il accepte, et la structure de la r√©ponse (par exemple, une liste d'utilisateurs au format JSON).\n\n# Qu'est ce qui est top ? üëç\n\n- **Standardisation** : OpenAPI offre un format standard qui est largement adopt√©, ce qui simplifie l‚Äôinterop√©rabilit√© entre syst√®mes.\n- **G√©n√©ration automatique** : Outils comme Swagger peuvent g√©n√©rer automatiquement des clients et serveurs √† partir de la sp√©cification, r√©duisant le besoin de coder manuellement.\n- **Documentation interactive** : Gr√¢ce √† des outils comme Swagger UI, la documentation devient interactive, permettant aux d√©veloppeurs de tester directement les API via une interface web.\n- **Support √©tendu** : OpenAPI est bien support√© par de nombreux outils et langages, ce qui permet de l‚Äôint√©grer facilement dans des projets existants.\n- **Validation et autocompl√©tion** : Les outils peuvent valider les requ√™tes envoy√©es √† l‚ÄôAPI et offrir de l‚Äôautocompl√©tion dans les IDE pour simplifier le d√©veloppement.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© pour les petites API** : Pour de simples API, l'utilisation d'OpenAPI peut sembler un peu trop lourde, avec la n√©cessit√© de maintenir un fichier de sp√©cification.\n- **Peu adapt√© aux APIs non-REST** : Bien que l'OpenAPI soit con√ßu pour les API REST, il n‚Äôest pas aussi adapt√© pour d'autres architectures d‚ÄôAPI, comme GraphQL.\n- **N√©cessite un bon maintien de la sp√©cification** : Pour que la sp√©cification OpenAPI soit r√©ellement utile, elle doit √™tre mise √† jour √† chaque modification de l'API, ce qui demande une discipline de maintenance continue.\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "6ed60fdf-ad49-47cb-9abd-f529c1b03e76",
        "title": "OpenFaas",
        "description": "---\nid: 6e46487a-240e-46da-8086-578df2c86d75\n---\n# Rapidement c'est quoi‚ùì\n\nOpenFaaS est une plateforme serverless open source permettant de d√©ployer et g√©rer des fonctions sans serveur ([[Function as a Service (FaaS)]]). Elle est con√ßue pour la production et int√®gre des outils de monitoring.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOpenFaaS est une plateforme de fonctions-as-a-service ([[Function as a Service (FaaS)]]) open source qui simplifie le d√©ploiement et la gestion de [[Micros services]] encapsul√©s sous forme de fonctions.  Elle utilise des conteneurs [[Docker]] pour encapsuler chaque fonction, ce qui permet une isolation et une portabilit√© √©lev√©es. OpenFaaS fournit une interface utilisateur et une API pour g√©rer le cycle de vie complet des fonctions : d√©ploiement, mise √† jour, scaling et monitoring.  Elle supporte plusieurs langages de programmation ([[Go]], [[Node.js]], [[Python]], etc.) sous la forme de template et offre une int√©gration avec des outils d'orchestration de conteneurs comme [[Kubernetes]].  Le monitoring int√©gr√© permet de surveiller les performances et l'√©tat de sant√© des fonctions d√©ploy√©es, fournissant des m√©triques cruciales pour la gestion et le d√©bogage.  La plateforme est con√ßue pour la production,  garantissant une haute disponibilit√© et une scalabilit√©.  Le \"lourd\" mentionn√© initialement se r√©f√®re probablement √† la complexit√© de la plateforme par rapport √† des solutions plus l√©g√®res, mais cette complexit√© est compens√©e par ses fonctionnalit√©s avanc√©es et sa robustesse pour les environnements de production.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open Source et communautaire:**  B√©n√©ficie d'une communaut√© active et d'un code source librement accessible, favorisant la transparence et la collaboration.\n* **Production-ready:**  Con√ßu pour des environnements de production exigeants, avec une forte attention port√©e √† la stabilit√© et √† la scalabilit√©.\n* **Int√©gration avec [[Kubernetes]]:**  Permet un d√©ploiement facile et une gestion efficace des fonctions dans des clusters Kubernetes.\n* **Monitoring int√©gr√©:**  Fournit des outils de monitoring complets pour surveiller les performances et l'√©tat de sant√© des fonctions.\n* **Support de multiples langages:**  Permet d'utiliser le langage de programmation le plus adapt√© √† chaque fonction.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La configuration et la gestion d'OpenFaaS peuvent √™tre plus complexes que des solutions FaaS plus simplifi√©es.  La courbe d'apprentissage est plus raide.\n* **Ressources:**  N√©cessite des ressources plus importantes que les solutions plus l√©g√®res, surtout pour les environnements √† forte charge.\n* **Monitoring int√©gr√©** : Il peut ne pas √™tre √©vident de brancher OpenFaaS √† son propre syst√®me de monitoring\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]][[MOC_DevSecOps]]\n\n"
    },
    {
        "id": "e09a057d-c675-4911-9715-4d9703cdac1c",
        "title": "Certification Java 17 - Packages et Modules",
        "description": "---\nid: cb5d98b8-992b-410a-94cd-54c70b45c82a\n---\n## **3.1. Organisation des classes en packages**\n\nEn Java, un **package** est un regroupement logique de classes permettant d‚Äôorganiser le code et d'√©viter les conflits de noms.\n\n### **D√©claration d‚Äôun package**\n\nChaque classe Java peut appartenir √† un package d√©fini en haut du fichier source :\n\n```java\npackage com.exemple.util;\n\npublic class Outil {\n    public static void afficherMessage() {\n        System.out.println(\"Message d'un outil\");\n    }\n}\n```\n\nüìå **Le package doit correspondre √† l‚Äôarborescence des fichiers :**  \nüìÇ `com/exemple/util/Outil.java`\n\n### **Utilisation d‚Äôun package (`import`)**\n\nDans une autre classe, on importe la classe `Outil` :\n\n```java\nimport com.exemple.util.Outil;\n\npublic class Main {\n    public static void main(String[] args) {\n        Outil.afficherMessage();\n    }\n}\n```\n\nüìå **Sans `import`**, on doit utiliser le nom complet :\n\n```java\ncom.exemple.util.Outil.afficherMessage();\n```\n\n### **Types d‚Äôacc√®s dans un package**\n\n|Modificateur|M√™me classe|M√™me package|H√©ritage|Autres classes|\n|---|---|---|---|---|\n|`public`|‚úÖ|‚úÖ|‚úÖ|‚úÖ|\n|_(default)_|‚úÖ|‚úÖ|‚ùå|‚ùå|\n|`protected`|‚úÖ|‚úÖ|‚úÖ|‚ùå|\n|`private`|‚úÖ|‚ùå|‚ùå|‚ùå|\n\nüìå **Les classes d‚Äôun m√™me package ont acc√®s aux membres `default` et `protected`.**\n\n---\n\n## **3.2. Java Platform Module System (JPMS)** _(Depuis Java 9)_\n\nJPMS permet d‚Äôorganiser le code en **modules** pour am√©liorer la maintenance et la s√©curit√©.\n\n### **Qu‚Äôest-ce qu‚Äôun module ?**\n\nUn module est un **groupe de packages** d√©clar√©s dans un fichier sp√©cial `module-info.java`.\n\nüìÇ **Structure d‚Äôun projet modulaire :**\n\n```\n/mon-projet\n  /src\n    /com.exemple.util\n      Outil.java\n    /com.exemple.app\n      Main.java\n    module-info.java\n```\n\n---\n\n## **3.3. D√©finition d‚Äôun module**\n\nChaque module a un fichier `module-info.java` d√©finissant ses **d√©pendances** et les packages qu‚Äôil expose.\n\n### **Cr√©er un module `com.exemple.util`**\n\nüìÑ `module-info.java`\n\n```java\nmodule com.exemple.util {\n    exports com.exemple.util;  // Exporte le package pour qu‚Äôil soit utilisable ailleurs\n}\n```\n\nüìÑ `Outil.java`\n\n```java\npackage com.exemple.util;\n\npublic class Outil {\n    public static void afficherMessage() {\n        System.out.println(\"Message du module util\");\n    }\n}\n```\n\n### **Utiliser un module dans un autre (`com.exemple.app`)**\n\nüìÑ `module-info.java`\n\n```java\nmodule com.exemple.app {\n    requires com.exemple.util;  // D√©pendance au module util\n}\n```\n\nüìÑ `Main.java`\n\n```java\npackage com.exemple.app;\n\nimport com.exemple.util.Outil;\n\npublic class Main {\n    public static void main(String[] args) {\n        Outil.afficherMessage();\n    }\n}\n```\n\nüìå **Sans `exports` dans `com.exemple.util`, `Outil` ne serait pas accessible !**\n\n---\n\n## **3.4. D√©pendances entre modules**\n\nUn module peut d√©pendre d‚Äôun autre gr√¢ce √† `requires`.\n\n```java\nmodule com.exemple.app {\n    requires com.exemple.util;  // D√©pend de ce module\n}\n```\n\n### **Types de `requires`**\n\n|Directive|Description|\n|---|---|\n|`requires`|D√©pendance obligatoire|\n|`requires transitive`|Propag√© aux modules d√©pendants|\n|`requires static`|D√©pendance uniquement √† la compilation|\n\nüìå **Exemple de `requires transitive`**  \nSi `com.exemple.ui` d√©pend de `com.exemple.util`, on peut propager la d√©pendance :\n\n```java\nmodule com.exemple.ui {\n    requires transitive com.exemple.util;\n}\n```\n\nMaintenant, tout module **utilisant `com.exemple.ui` aura aussi acc√®s √† `com.exemple.util`**.\n\n---\n\n## **3.5. Services dans JPMS**\n\nLe JPMS introduit un syst√®me de **services** pour **d√©finir et charger dynamiquement des impl√©mentations**.\n\n### **D√©finition d‚Äôun service**\n\nüìÑ `Service.java`\n\n```java\npackage com.exemple.service;\n\npublic interface Service {\n    void executer();\n}\n```\n\n### **Impl√©mentation du service**\n\nüìÑ `ServiceImpl.java`\n\n```java\npackage com.exemple.impl;\n\nimport com.exemple.service.Service;\n\npublic class ServiceImpl implements Service {\n    public void executer() {\n        System.out.println(\"Service ex√©cut√© !\");\n    }\n}\n```\n\n### **Module d√©finissant le service (`provides`)**\n\nüìÑ `module-info.java` dans `com.exemple.impl`\n\n```java\nmodule com.exemple.impl {\n    requires com.exemple.service;\n    provides com.exemple.service.Service with com.exemple.impl.ServiceImpl;\n}\n```\n\n### **Utilisation du service (`uses`)**\n\nüìÑ `module-info.java` dans `com.exemple.app`\n\n```java\nmodule com.exemple.app {\n    requires com.exemple.service;\n    uses com.exemple.service.Service;\n}\n```\n\nüìÑ `Main.java`\n\n```java\npackage com.exemple.app;\n\nimport com.exemple.service.Service;\nimport java.util.ServiceLoader;\n\npublic class Main {\n    public static void main(String[] args) {\n        ServiceLoader<Service> loader = ServiceLoader.load(Service.class);\n        for (Service service : loader) {\n            service.executer();  // Ex√©cute automatiquement les impl√©mentations\n        }\n    }\n}\n```\n\nüìå **Les services permettent d'ajouter dynamiquement des impl√©mentations sans modifier le code existant.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Packages** : Organisation en namespaces (`package` et `import`).  \n‚úÖ **Modules** : Groupes de packages, isol√©s avec `module-info.java`.  \n‚úÖ **D√©pendances** : `requires`, `requires transitive`.  \n‚úÖ **Services** : `provides` et `uses` pour une architecture modulaire et flexible.\n\n---\n"
    },
    {
        "id": "a64ba342-46d1-4714-b28f-193017033846",
        "title": "Pipe Angular",
        "description": "---\nid: 750c7ad4-f7ec-4a65-ae5e-a2b0f34af3be\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nUn **pipe** en [[Angular]] est un outil permettant de transformer les valeurs dans un template. Il s'agit d'une classe qui impl√©mente l'interface `PipeTransform`, utilis√©e pour effectuer des transformations sur des donn√©es avant de les afficher, tout en √©tant optimis√©e pour les performances.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn **pipe** est une fonction qui prend une valeur en entr√©e, effectue une transformation et retourne une nouvelle valeur. Elle est utilis√©e dans les templates Angular pour formater ou modifier les donn√©es de mani√®re d√©clarative.\n\n### Fonctionnement :\n\n- Les **pipes** sont impl√©ment√©s en cr√©ant une classe qui impl√©mente l'interface `PipeTransform`, et en red√©finissant la m√©thode `transform`.\n- Lorsqu'un pipe est utilis√© dans un template, il prend la donn√©e √† transformer comme argument et applique la transformation d√©finie dans la m√©thode `transform`.\n- Par d√©faut, les pipes sont **[[M√©thode pure]]**, ce qui signifie qu'ils ne modifient pas directement la valeur pass√©e, mais retournent une nouvelle instance. Cela aide [[Angular]] √† optimiser les rendus en √©vitant des calculs redondants.\n\n### Exemple de pipe :\n\n1. **Cr√©ation** : Via la CLI [[Angular]] :\n    \n    ```\n    ng g p nom_du_pipe\n    ```\n    \n2. **Utilisation** dans le template :\n    \n    ```\n    {{ maVariable | nom_du_pipe }}\n    ```\n    \n3. **Passage de plusieurs arguments** :\n    \n    ```\n    transform(val: string | undefined, valSiVide: string): string {\n        return val ? val : valSiVide;\n    }\n    \n    {{ maVariable | nom_du_pipe : '-' }}\n    ```\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Optimisation des performances** : Les pipes sont des [[M√©thode pure]] par d√©faut, ce qui √©vite des recalculs inutiles lors des re-renders.\n- **Simplicit√©** : Les transformations dans les templates sont faciles √† mettre en place, sans avoir besoin de logique complexe dans les composants.\n- **R√©utilisabilit√©** : Les pipes peuvent √™tre r√©utilis√©s dans plusieurs templates, ce qui rend le code plus propre et modulaire.\n- **Personnalisation** : Possibilit√© de cr√©er des pipes personnalis√©s pour des transformations sp√©cifiques.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Ex√©cution fr√©quente** : Bien que les pipes purs soient optimis√©s, si des m√©thodes lourdes sont ex√©cut√©es √† l‚Äôint√©rieur d'un pipe non pur, elles risquent de diminuer les performances.\n- **Complexit√© pour les pipes impurs** : Si un pipe a des effets secondaires ou des calculs qui doivent se produire m√™me sans changement de valeur, il peut devenir difficile √† g√©rer et √† optimiser.\n- **Difficult√© avec les types complexes** : Les pipes qui manipulent des objets complexes ou des tableaux peuvent parfois entra√Æner des comportements inattendus, en raison des v√©rifications de changement de r√©f√©rence.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "426b06ca-5a74-48db-95ca-e19b5d566a06",
        "title": "Pitest",
        "description": "---\nid: 3f5a054c-06a1-4812-9802-1e1df6fe8452\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**PiTest** est une biblioth√®que de [[Test de mutation]] pour [[Java]]. Elle permet de tester la robustesse des tests unitaires en introduisant des mutations (modifications) dans le code source et en v√©rifiant si les tests les d√©tectent.\nOn surnomme cette librarie PIT.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nPiTest g√©n√®re des mutants dans le code source, c'est-√†-dire des modifications al√©atoires ou dirig√©es, et ex√©cute les tests unitaires pour voir si ces changements sont d√©tect√©s. Cela permet de mesurer l'efficacit√© des tests existants. Par exemple, un test qui ne d√©tecte pas une mutation est consid√©r√© comme insuffisant.\n\n**Fonctionnement :**\n\n- L‚Äôoutil prend un projet [[Java]] et applique des mutations sur les classes de l‚Äôapplication.\n- Il ex√©cute les tests unitaires pour chaque mutation, et g√©n√®re des rapports d√©taillant les mutations d√©tect√©es ou non par les tests.\n- Configurable via [[Maven]] ou [[Gradle]], PiTest peut √™tre ajust√© pour cibler des classes ou des tests sp√©cifiques.\n\n**Installation :**\n\n- Ajout d‚Äôun plugin dans le fichier `pom.xml` ou `build.gradle`.\n\n**Ex√©cution :**\n\n- Lancer la commande `mvn test-compile org.pitest:pitest-maven:mutationCoverage` pour commencer l'analyse.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Facilit√© d'int√©gration** : Ajout simple via [[Maven]] ou [[Gradle]].\n- **Rapports d√©taill√©s** : Produit des rapports de couverture des mutations qui aident √† √©valuer la qualit√© des tests.\n- **Param√©trable** : Permet de cibler des classes et tests sp√©cifiques pour une analyse plus fine.\n- **Am√©lioration continue** : Aide √† am√©liorer la qualit√© du code en s‚Äôassurant que les tests couvrent bien tous les cas de mutation.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Performance** : L'ex√©cution peut √™tre longue, surtout avec de grandes bases de code ou de nombreux tests.\n- **Complexit√© croissante** : Une fois les mutations et les tests multipli√©s, l‚Äôanalyse peut devenir difficile √† interpr√©ter et √† g√©rer.\n- **Faux positifs** : Certains mutants peuvent ne pas √™tre pertinents pour tous les projets, ce qui n√©cessite des ajustements fins pour √©viter des faux n√©gatifs.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "45af2e5c-f8f4-4925-8f42-792e76f6d8f8",
        "title": "Certification Java 17 - Programmation Concurrente",
        "description": "---\nid: 84743d0a-b01c-4a99-9742-863cc98bedf2\n---\n## **9.1. Threads (`Runnable`, `Callable`)**\n\nUn **thread** permet d‚Äôex√©cuter une t√¢che en parall√®le d‚Äôautres instructions.  \nJava propose deux interfaces principales :\n\n- `Runnable` (pas de retour de valeur)\n- `Callable<V>` (retourne une valeur et peut lever une exception)\n\n---\n\n### **1. Cr√©ation d‚Äôun `Thread` avec `Runnable`**\n\n```java\nclass Tache implements Runnable {\n    public void run() {\n        System.out.println(\"Thread ex√©cut√© !\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread(new Tache());\n        t.start();  // D√©marre le thread\n    }\n}\n```\n\nüìå **Ne pas appeler `run()` directement, utiliser `start()`.**\n\n---\n\n### **2. Cr√©ation d‚Äôun `Thread` avec `Callable` (retour de valeur)**\n\n```java\nimport java.util.concurrent.*;\n\npublic class Exemple {\n    public static void main(String[] args) throws Exception {\n        Callable<Integer> tache = () -> 42;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        Future<Integer> futur = executor.submit(tache);\n\n        System.out.println(futur.get()); // 42\n        executor.shutdown();\n    }\n}\n```\n\nüìå **`Callable<V>` retourne une valeur via `Future<V>`.**\n\n---\n\n## **9.2. `ExecutorService`, `ForkJoinPool`**\n\n### **1. `ExecutorService` : Gestion des threads**\n\n```java\nExecutorService executor = Executors.newFixedThreadPool(3);\nexecutor.submit(() -> System.out.println(\"Thread lanc√©\"));\nexecutor.shutdown();\n```\n\nüìå **Avantages :**\n\n- G√®re automatiquement les threads.\n- Optimise l‚Äôutilisation des ressources.\n\n|**Type d‚ÄôExecutor**|**Description**|\n|---|---|\n|`newFixedThreadPool(n)`|Pool de `n` threads fixes|\n|`newCachedThreadPool()`|Cr√©e des threads √† la demande|\n|`newSingleThreadExecutor()`|1 seul thread (ex√©cution s√©quentielle)|\n\n---\n\n### **2. `ForkJoinPool` : Ex√©cution de t√¢ches r√©cursives**\n\nUtilis√© pour **diviser une t√¢che complexe** en sous-t√¢ches ex√©cut√©es en parall√®le.\n\n```java\nimport java.util.concurrent.*;\n\nclass TacheRecursive extends RecursiveTask<Integer> {\n    int n;\n    TacheRecursive(int n) { this.n = n; }\n\n    protected Integer compute() {\n        if (n <= 1) return n;\n        TacheRecursive t1 = new TacheRecursive(n - 1);\n        TacheRecursive t2 = new TacheRecursive(n - 2);\n        t1.fork();\n        return t2.compute() + t1.join();\n    }\n}\n\npublic class Exemple {\n    public static void main(String[] args) {\n        ForkJoinPool pool = new ForkJoinPool();\n        int result = pool.invoke(new TacheRecursive(10));\n        System.out.println(result);\n    }\n}\n```\n\nüìå **Optimis√© pour les calculs r√©cursifs lourds (`divide & conquer`).**\n\n---\n\n## **9.3. Threads Virtuels (`Virtual Threads`, `Thread.ofVirtual()`)**\n\nIntroduits en **Java 21**, les **Virtual Threads** permettent d‚Äôex√©cuter **des millions de t√¢ches concurrentes** avec peu de threads physiques.\n\n```java\nThread.startVirtualThread(() -> {\n    System.out.println(\"Thread virtuel lanc√© !\");\n});\n```\n\nüìå **Avantages :**\n\n- Tr√®s l√©ger (pas li√© √† un thread syst√®me).\n- Optimis√© pour des t√¢ches bloquantes (I/O, bases de donn√©es).\n\n---\n\n### **Cr√©ation d‚Äôun `Virtual Thread` avec un `Executor`**\n\n```java\nExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\nexecutor.submit(() -> System.out.println(\"T√¢che ex√©cut√©e\"));\nexecutor.shutdown();\n```\n\nüìå **Chaque t√¢che a son propre thread virtuel sans surcharger le CPU.**\n\n---\n\n## **9.4. Verrous (`synchronized`, `Lock`, `ReadWriteLock`)**\n\n### **1. `synchronized` : Verrouillage automatique**\n\n```java\nclass Compteur {\n    private int valeur = 0;\n\n    public synchronized void incrementer() {\n        valeur++;\n    }\n}\n```\n\nüìå **Seul un thread peut ex√©cuter `incrementer()` √† la fois.**\n\n---\n\n### **2. `Lock` : Gestion manuelle des verrous**\n\n```java\nimport java.util.concurrent.locks.*;\n\nclass Ressource {\n    private final Lock lock = new ReentrantLock();\n\n    public void acces() {\n        lock.lock();\n        try {\n            System.out.println(\"Acc√®s s√©curis√©\");\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n```\n\nüìå **`ReentrantLock` offre plus de contr√¥le que `synchronized`.**\n\n---\n\n### **3. `ReadWriteLock` : Optimisation des acc√®s concurrents**\n\n- Plusieurs lectures simultan√©es.\n- √âcriture exclusive.\n\n```java\nimport java.util.concurrent.locks.*;\n\nclass Cache {\n    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n    private int valeur = 0;\n\n    public int lire() {\n        lock.readLock().lock();\n        try { return valeur; }\n        finally { lock.readLock().unlock(); }\n    }\n\n    public void ecrire(int nouvelleValeur) {\n        lock.writeLock().lock();\n        try { valeur = nouvelleValeur; }\n        finally { lock.writeLock().unlock(); }\n    }\n}\n```\n\nüìå **Optimise les lectures fr√©quentes avec peu d‚Äô√©critures.**\n\n---\n\n## **9.5. Collections Concurrentes et Streams Parall√®les**\n\n### **1. Collections Concurrentes**\n\n|**Classe**|**Description**|\n|---|---|\n|`ConcurrentHashMap`|`HashMap` thread-safe|\n|`CopyOnWriteArrayList`|`ArrayList` modifiable sans verrou|\n|`BlockingQueue`|File d‚Äôattente bloquante|\n\n**Exemple avec `ConcurrentHashMap` :**\n\n```java\nimport java.util.concurrent.*;\n\nMap<String, Integer> map = new ConcurrentHashMap<>();\nmap.put(\"A\", 1);\nSystem.out.println(map.get(\"A\"));\n```\n\n---\n\n### **2. `Stream` Parall√®le (`parallelStream()`)**\n\nTransforme un `Stream` en version parall√®le.\n\n```java\nList<Integer> nombres = List.of(1, 2, 3, 4, 5);\nint somme = nombres.parallelStream()\n    .mapToInt(Integer::intValue)\n    .sum();\nSystem.out.println(somme);\n```\n\nüìå **Am√©liore les performances pour les grandes collections.**\n\n‚ö† **Attention :**\n\n- Un `Stream` parall√®le ne garantit pas l‚Äôordre des r√©sultats.\n- Peut √™tre moins performant pour des petites collections.\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Threads (`Runnable`, `Callable`)** : Ex√©cuter des t√¢ches en parall√®le.  \n‚úÖ **`ExecutorService`, `ForkJoinPool`** : Gestion optimis√©e des threads.  \n‚úÖ **Threads Virtuels (`VirtualThread`)** : Tr√®s l√©gers, optimis√©s pour I/O.  \n‚úÖ **Verrous (`synchronized`, `Lock`, `ReadWriteLock`)** : Gestion des acc√®s concurrents.  \n‚úÖ **Collections Concurrentes et Streams Parall√®les** : `ConcurrentHashMap`, `parallelStream()`."
    },
    {
        "id": "fae7c92e-e8a3-454a-b8d9-7c971756468c",
        "title": "Certification Java 17 - Programmation Orient√©e Objet (OOP)",
        "description": "---\nid: df0b5c7d-a921-49b3-8778-71e5ae745df5\n---\n## **2.1. D√©claration et instanciation d‚Äôobjets**\n\nEn Java, tout repose sur les **objets** et les **classes**.\n\n### **D√©finition d‚Äôune classe et cr√©ation d‚Äôobjets**\n\n```java\nclass Voiture {\n    String marque;\n    \n    Voiture(String marque) {\n        this.marque = marque;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Voiture v1 = new Voiture(\"Toyota\");  // Instanciation d‚Äôun objet\n        System.out.println(v1.marque); // Toyota\n    }\n}\n```\n\nüìå **`new` alloue de la m√©moire et retourne une r√©f√©rence √† l'objet.**\n\n### **Diff√©rences entre `new` et `newInstance()`**\n\n- `new` est utilis√© directement.\n- `Class.forName(\"NomDeClasse\").newInstance();` permet une instanciation dynamique.\n\n---\n\n## **2.2. Cycle de vie des objets**\n\nLe **cycle de vie** d‚Äôun objet comprend :\n\n1. **Cr√©ation** (`new`)\n2. **Utilisation** (modifications, appels de m√©thodes)\n3. **Perte de r√©f√©rence** (`null` ou sortie du scope)\n4. **Garbage Collection** (ramasse-miettes)\n\n**Exemple de perte de r√©f√©rence :**\n\n```java\nVoiture v1 = new Voiture(\"Renault\");\nv1 = null; // L'objet devient √©ligible au Garbage Collector\n```\n\n### **Garbage Collector (GC)**\n\nLe **GC** lib√®re la m√©moire des objets **inaccessibles**.\n\n- `System.gc();` demande un ramassage (sans garantie).\n- `finalize()` (d√©pr√©ci√©) √©tait invoqu√© avant suppression d‚Äôun objet.\n\n---\n\n## **2.3. Encapsulation et immutabilit√©**\n\n### **Encapsulation (getter/setter)**\n\nPrincipe : **cacher les champs** et y acc√©der via **des m√©thodes publiques**.\n\n```java\nclass CompteBancaire {\n    private double solde;\n\n    public double getSolde() { return solde; }\n    public void deposer(double montant) { solde += montant; }\n}\n```\n\n‚úÖ **S√©curise les donn√©es**  \n‚úÖ **Permet des r√®gles m√©tier (ex: solde min.)**\n\n### **Immutabilit√©**\n\nUn objet **immuable** ne peut pas √™tre modifi√© apr√®s cr√©ation.  \n**Bonne pratique :** D√©clarer les champs `private final` et ne fournir aucun setter.\n\n```java\nclass Client {\n    private final String nom;\n\n    Client(String nom) { this.nom = nom; }\n    public String getNom() { return nom; }\n}\n```\n\n---\n\n## **2.4. H√©ritage, classes abstraites et classes scell√©es (sealed)**\n\n### **H√©ritage (`extends`)**\n\nPermet de r√©utiliser le code d'une classe m√®re.\n\n```java\nclass Animal {\n    String type = \"Mammif√®re\";\n}\n\nclass Chien extends Animal {\n    String race = \"Labrador\";\n}\n```\n\nüìå **Un objet `Chien` poss√®de aussi `type`.**\n\n### **Classes Abstraites (`abstract`)**\n\nImpossible √† instancier, sert de mod√®le.\n\n```java\nabstract class Animal {\n    abstract void faireDuBruit();  // M√©thode abstraite\n}\nclass Chien extends Animal {\n    void faireDuBruit() { System.out.println(\"Woof!\"); }\n}\n```\n\n### **Classes Sealed (`sealed`)** _(Java 17)_\n\nRestreint l‚Äôh√©ritage √† des classes pr√©cises.\n\n```java\nsealed class Animal permits Chien, Chat {}\nfinal class Chien extends Animal {}  // Pas d‚Äôh√©ritage possible\nnon-sealed class Chat extends Animal {}  // H√©ritage permis\n```\n\n---\n\n## **2.5. Polymorphisme, type objet vs type r√©f√©rence**\n\n**Polymorphisme** : une m√©thode peut se comporter diff√©remment selon l‚Äôobjet.\n\n```java\nclass Animal {\n    void faireDuBruit() { System.out.println(\"Bruit d‚Äôanimal\"); }\n}\nclass Chien extends Animal {\n    void faireDuBruit() { System.out.println(\"Woof!\"); }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Animal a = new Chien();  // Type r√©f√©rence : Animal, type objet : Chien\n        a.faireDuBruit();  // Woof! (m√©thode de Chien)\n    }\n}\n```\n\nüìå **Le type objet d√©termine la m√©thode ex√©cut√©e.**\n\n---\n\n## **2.6. Op√©rateur `instanceof` et Pattern Matching**\n\n### **Op√©rateur `instanceof`** _(avant Java 16)_\n\n```java\nif (obj instanceof Chien) {\n    Chien c = (Chien) obj;\n    c.aboyer();\n}\n```\n\n### **Pattern Matching (`instanceof`)** _(Java 16+)_\n\n```java\nif (obj instanceof Chien c) {\n    c.aboyer();  // Plus besoin de caster !\n}\n```\n\n---\n\n## **2.7. Interfaces : m√©thodes `default`, `static`, priv√©es**\n\nUne **interface** d√©finit un **contrat** que les classes doivent respecter.\n\n```java\ninterface Animal {\n    void faireDuBruit();\n}\nclass Chien implements Animal {\n    public void faireDuBruit() { System.out.println(\"Woof!\"); }\n}\n```\n\n### **M√©thodes `default`**\n\nPermet d‚Äôajouter une m√©thode sans casser les impl√©mentations existantes.\n\n```java\ninterface Animal {\n    default void dormir() { System.out.println(\"Je dors\"); }\n}\n```\n\n### **M√©thodes `static`**\n\nUne m√©thode statique appartient √† l'interface et ne peut pas √™tre red√©finie.\n\n```java\ninterface Utilitaire {\n    static void afficherMessage() { System.out.println(\"Message statique\"); }\n}\n```\n\n### **M√©thodes priv√©es** _(Java 9+)_\n\nPermet d'√©viter la duplication de code dans une interface.\n\n```java\ninterface Animal {\n    default void action() {\n        preparer();\n        System.out.println(\"Faire une action\");\n    }\n    private void preparer() {\n        System.out.println(\"Pr√©paration...\");\n    }\n}\n```\n\n---\n\n## **2.8. Enums avec champs, m√©thodes et constructeurs**\n\nUn **enum** repr√©sente un ensemble **fixe** de valeurs.\n\n```java\nenum Jour {\n    LUNDI, MARDI, MERCREDI;\n}\n```\n\n### **Enum avec champs et m√©thodes**\n\n```java\nenum Statut {\n    EN_COURS(1), TERMINE(2);\n\n    private final int code;\n    \n    Statut(int code) { this.code = code; }\n    public int getCode() { return code; }\n}\n```\n\nüìå **Les `enum` peuvent avoir des m√©thodes et des constructeurs priv√©s.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Encapsulation** avec `private` et `getter/setter`  \n‚úÖ **Immutabilit√©** : `final` et pas de setter  \n‚úÖ **H√©ritage** : `extends` pour sp√©cialiser une classe  \n‚úÖ **Classes abstraites** : mod√®le de base √† impl√©menter  \n‚úÖ **Classes `sealed`** : restreint l'h√©ritage (Java 17)  \n‚úÖ **Polymorphisme** : le type objet dicte le comportement  \n‚úÖ **`instanceof` avec Pattern Matching** : simplifie les cast  \n‚úÖ **Interfaces avec m√©thodes `default`, `static`, priv√©es`** ‚úÖ **`enum` avec m√©thodes et champs priv√©s**\n\n---\n\n[[Java]] [[Certification Java 17]]"
    },
    {
        "id": "37d4edee-5398-4339-b662-b16aff7c6389",
        "title": "Prometheus",
        "description": "---\nid: ec08a5df-a7b8-4dd1-bbca-5109de9470bd\n---\n# Rapidement c'est quoi‚ùì\n\nPrometheus est un syst√®me de [[Monitoring]] et d'alerte [[Open-source]] qui stocke les donn√©es sous forme de s√©ries temporelles.  Il r√©cup√®re des m√©triques et les affiche via un tableau de bord.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nPrometheus est un syst√®me de surveillance et d'alerte open source bas√© sur une architecture de pull (contrairement √† une architecture de push).  Il fonctionne en interrogeant r√©guli√®rement (par d√©faut toutes les 15 secondes) des targets (applications, serveurs, etc.) exposant des m√©triques via une interface [[HTTP]] (g√©n√©ralement le port 9100).  Ces m√©triques sont des s√©ries temporelles, c'est-√†-dire des donn√©es associ√©es √† un timestamp.  Chaque m√©trique est identifi√©e par un nom et un ensemble d'√©tiquettes (labels) qui permettent de filtrer et agr√©ger les donn√©es.\n\nPrometheus stocke ces donn√©es dans une [[Base de donn√©e]] interne et les expose via une interface utilisateur web.  Il permet de cr√©er des alertes bas√©es sur des r√®gles d√©finies sur les m√©triques (ex:  si la latence d√©passe 500ms, envoyer une alerte).  L'outil offre des fonctionnalit√©s de visualisation des donn√©es et de cr√©ation de dashboards pour suivre l'√©tat de son infrastructure.  Il peut √™tre √©tendu via des exporters (pour collecter des m√©triques de diff√©rents syst√®mes) et des librairies clientes pour exposer des m√©triques personnalis√©es.  Contrairement √† certains syst√®mes de monitoring qui utilisent une architecture de push (o√π les targets envoient les m√©triques √† un serveur central), Prometheus utilise une architecture de pull, ce qui simplifie la configuration et am√©liore la fiabilit√©.  Cependant, cela n√©cessite que les targets soient toujours accessibles √† Prometheus.  Son stockage interne est bas√© sur un mod√®le de donn√©es temps-s√©rie optimis√© pour les requ√™tes de donn√©es et la performance des requ√™tes.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open source et gratuit:**  Large communaut√©, documentation abondante et contributions constantes.\n* **Architecture robuste et scalable:**  Capable de g√©rer un grand nombre de m√©triques et de targets.\n* **Flexibilit√© et extensibilit√©:**  Large choix d'exporters et de librairies clientes.\n* **Syst√®me d'alertes puissant:**  Cr√©ation facile de r√®gles d'alerte complexes.\n* **Interface utilisateur intuitive:**  Visualisation et exploration des donn√©es simples et efficaces.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Architecture de pull:**  N√©cessite que les targets soient toujours disponibles et accessibles.  Les targets inaccessibles ne sont pas monitor√©es.\n* **Stockage interne limit√©:**  Pour de tr√®s grands volumes de donn√©es, une solution de stockage externe est n√©cessaire (comme [[Thanos]], par exemple).\n* **Courbe d'apprentissage:**  La configuration et l'utilisation peuvent n√©cessiter une certaine expertise pour tirer pleinement parti de ses fonctionnalit√©s avanc√©es.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "ba0218cf-bb84-4722-9d0a-517f4c6f82be",
        "title": "Raison d‚Äôune bonne architecture d‚Äôun SI",
        "description": "---\nid: ce97e1da-3b18-44bc-a286-a42fc3195261\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nUne bonne architecture d'un Syst√®me d'Information (SI) est une structure flexible, √©volutive et adapt√©e aux besoins actuels et futurs de l'organisation. Elle doit √™tre con√ßue pour faciliter le changement sans sacrifier la stabilit√©.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUne bonne architecture d‚Äôun SI permet de r√©pondre efficacement aux besoins imm√©diats tout en restant ouverte aux √©volutions futures. Elle doit √™tre :\n\n- **Adapt√©e au besoin** : Chaque architecture doit √™tre align√©e avec les objectifs m√©tiers et les contraintes techniques sp√©cifiques √† l'organisation.\n- **Flexible** : Elle doit permettre des changements rapides sans compromettre la performance ou la stabilit√© du syst√®me.\n- **Minimiser les anticipations excessives** : Une architecture trop rigide, construite autour de changements futurs incertains, peut devenir obsol√®te rapidement. Il est souvent plus facile de modifier une architecture au fil de l‚Äôeau plut√¥t que de tenter de tout pr√©voir.\n- **Architecture continue** : Elle √©volue de mani√®re incr√©mentale, en r√©pondant aux besoins imm√©diats et en int√©grant progressivement les changements sans s‚Äôimposer des mod√®les rigides.\n\nL'id√©e est d'√©viter le \"gros DAT\" ([[Document d'Architecture Technique]]) fig√© qui restreint l'innovation et de favoriser une approche agile et √©volutive, o√π l'architecture peut se r√©ajuster au fur et √† mesure des besoins.\n\n# Qu'est ce qui est top ? üëç\n\n- **Flexibilit√©** : Permet de s'adapter rapidement aux √©volutions du march√© et aux besoins changeants des utilisateurs.\n- **√âvolutivit√©** : L'architecture est construite pour int√©grer facilement de nouveaux composants ou de nouvelles fonctionnalit√©s.\n- **R√©activit√©** : Une architecture continue facilite la gestion des impr√©vus sans perturber l‚Äôensemble du syst√®me.\n- **Optimisation des co√ªts** : En adaptant les ressources en fonction des besoins r√©els et non des projections, l‚Äôarchitecture √©vite le gaspillage.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© √† court terme** : Lors de la mise en place d‚Äôune architecture flexible, il peut √™tre difficile de g√©rer une transition en douceur avec les syst√®mes existants.\n- **Risque d'it√©ration non ma√Ætris√©e** : Une trop grande flexibilit√© peut mener √† des ajustements constants et √† une incoh√©rence entre les diff√©rentes parties du syst√®me.\n- **Gestion de la dette technique** : Sans une vision claire, l'architecture continue peut accumuler de la dette technique au fil des ajustements successifs.\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "3f37d305-6168-491b-8487-7d9c7316354c",
        "title": "Redis Sentinel",
        "description": "---\nid: 7c33ceca-69d3-469a-9986-edcee3a042f4\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nRedis Sentinel est un outil de haute disponibilit√© pour [[Redis]], permettant de surveiller un serveur Redis principal (master) et ses r√©pliques (slaves), et de promouvoir automatiquement un slave en master en cas de d√©faillance du master actuel.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nRedis Sentinel est con√ßu pour assurer la disponibilit√© et la r√©silience des instances Redis. Il surveille le serveur [[Redis]] master et ses r√©pliques (slaves) pour d√©tecter toute panne. En cas de d√©faillance du master, Sentinel s√©lectionne un slave (celui ayant la derni√®re mise √† jour) pour le promouvoir en master et ainsi maintenir la disponibilit√© du service Redis.\n\n- **Architecture** : Un master [[Redis]] avec plusieurs r√©pliques (slaves) synchronis√©es.\n- **R√¥le des Sentinels** : Surveiller l'√©tat du master et des slaves, d√©tecter les pannes, et effectuer un basculement automatique (failover) en cas de d√©faillance.\n- **Crit√®res de promotion** : Le slave avec la derni√®re mise √† jour devient le nouveau master.\n- **Limitation** : Redis Sentinel ne constitue pas un cluster Redis distribu√© complet, car il ne g√®re pas la r√©partition des donn√©es entre plusieurs instances. Il se concentre uniquement sur la haute disponibilit√©.\n\n# Qu'est ce qui est top ? üëç\n\n- **Haute disponibilit√©** : En cas de panne du master, un slave est automatiquement promu pour minimiser les interruptions de service.\n- **Surveillance continue** : Sentinel surveille en permanence l'√©tat des instances [[Redis]], garantissant une d√©tection rapide des probl√®mes.\n- **Failover automatique** : Pas besoin d'intervention manuelle pour promouvoir un nouveau master, ce qui r√©duit le risque d'erreur et am√©liore la r√©activit√©.\n- **Simplicit√©** : Configuration relativement simple pour g√©rer la [[Haute disponibilit√©]] avec Redis.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Pas un cluster Redis complet** : Redis Sentinel ne g√®re pas la distribution des donn√©es ou le partitionnement, contrairement √† un cluster Redis distribu√©.\n- **D√©pendance au r√©seau** : Si Sentinel et les instances Redis sont mal configur√©s ou s'il y a des probl√®mes r√©seau, le failover peut √©chouer.\n- **S√©lection du nouveau master** : Le processus de promotion d'un slave peut parfois √™tre lent si les instances Redis ne sont pas bien synchronis√©es.\n- **Limit√© √† la [Haute disponibilit√©]]** : Redis Sentinel ne prend pas en charge d'autres fonctionnalit√©s avanc√©es comme la gestion automatique des partitions ou des volumes de donn√©es.\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "6b6bd7b1-3d82-4f65-be46-aa30c20f278f",
        "title": "Redis",
        "description": "---\nid: c3202556-f6cf-4e20-b7e8-09270e6ab143\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Redis** est une [[Base de donn√©e NoSQL]] , utilis√©e comme cache et store de structures de donn√©es telles que des cha√Ænes de caract√®res, des listes, des ensembles, etc. Elle est populaire pour sa rapidit√© et sa simplicit√© d‚Äôutilisation, particuli√®rement pour la gestion de donn√©es temporaires.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nRedis offre des fonctionnalit√©s diverses comme le caching, la gestion de sessions et le stockage temporaire de donn√©es, gr√¢ce √† sa capacit√© √† stocker des donn√©es en m√©moire et √† les manipuler tr√®s rapidement.\n\nAvec [[Java]], Redis peut √™tre int√©gr√© via plusieurs m√©canismes :\n\n1. **Redis Template** :  \n    Permet d'interagir avec Redis √† un niveau bas, proche de la ligne de commande. Il est flexible mais n√©cessite plus de gestion manuelle des op√©rations Redis.\n    \n2. **[[Spring Data Redis]]** :  \n    Permet d'utiliser Redis avec l'API de [[Spring Data]], offrant une interface plus haut niveau pour interagir avec Redis comme avec une base de donn√©es traditionnelle (similaire √† Spring [[Data JPA]]). Cependant, pour des objets complexes, cette approche peut mener √† des requ√™tes excessives, impactant ainsi la performance.\n    \n3. **[[Spring Cache]]** :  \n    Permet une gestion de cache plus simple en annotant les m√©thodes avec `@Cacheable`, ce qui permet de stocker et de r√©cup√©rer les r√©sultats des m√©thodes dans Redis sans code suppl√©mentaire complexe.\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **[[Redis Template]]** :\n    - Permet une gestion fine des interactions avec Redis.\n    - Offre plus de flexibilit√© pour des cas d‚Äôusage sp√©cifiques.\n\n- **[[Spring Data Redis]]** :    \n    - Permet une int√©gration transparente avec [[Spring Framework]].\n    - Facile √† utiliser pour les utilisateurs d√©j√† familiers avec Spring Data.\n\n- **[[Spring Cache]]** :\n    - Tr√®s simple √† impl√©menter pour la mise en cache des r√©sultats de m√©thodes.\n    - Automatisation des processus de cache sans complexit√© suppl√©mentaire.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Redis Template** :\n    - N√©cessite de g√©rer soi-m√™me les interactions avec Redis, ce qui peut augmenter la complexit√© du code.\n- **Spring Data Redis** :\n    - Peut entra√Æner des probl√®mes de performance pour des objets complexes en raison du nombre √©lev√© de requ√™tes n√©cessaires pour r√©cup√©rer un objet complet.\n- **Spring Cache** :\n    - Peut √™tre limit√© en termes de contr√¥le pr√©cis sur les strat√©gies de cache et la gestion des donn√©es en m√©moire.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "86b2d35e-3053-4031-ad65-92db698ddade",
        "title": "Renovate_Bot",
        "description": "---\nid: 98f7085c-54d4-4d54-a6ba-7512a4ffaed8\n---\n# Rapidement c'est quoi‚ùì\n\nRenovate Bot est un outil automatis√© qui analyse les d√©pendances de vos projets [[Git]]  et cr√©e des pull/merge requests pour mettre √† jour ces d√©pendances vers leurs derni√®res versions stables ou sp√©cifiques.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nRenovate Bot est un outil d'automatisation de la gestion des d√©pendances logicielles. Il fonctionne en analysant le fichier de configuration de votre projet (ex: `package.json` pour [[Node.js]], `pom.xml` pour [[Maven]] ...) afin d'identifier toutes les d√©pendances utilis√©es.  Il compare ensuite les versions actuelles avec les derni√®res versions disponibles sur les registres de paquets (ex: [[npm]], [[Maven Central]]).  Pour chaque d√©pendance obsol√®te, Renovate Bot cr√©e une pull request s√©par√©e contenant les mises √† jour n√©cessaires.  L'utilisateur peut ensuite examiner et fusionner ces pull requests, automatisant ainsi le processus fastidieux et potentiellement risqu√© de mise √† jour manuelle des d√©pendances.  L'outil est configurable pour d√©finir des r√®gles de mise √† jour (ex:  mise √† jour majeure, mineure, patch, fr√©quence de scan, branches cibles, etc.).  Il prend en charge un large √©ventail de gestionnaires de paquets et de langages de programmation.  Renovate Bot peut √™tre int√©gr√© √† des [[pipelines CI/CD]] comme [[GitHub Action]] ou [[GitLab CI]].  Il permet √©galement la gestion de configurations complexes en utilisant des fichiers de configuration YAML ou JSON.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Automatisation:**  √âlimine le besoin de mises √† jour manuelles chronophages et sujettes aux erreurs.\n* **S√©curit√©:**  Aide √† maintenir les d√©pendances √† jour, r√©duisant les risques de vuln√©rabilit√©s.\n* **Flexibilit√©:**  Configuration personnalis√©e pour contr√¥ler le processus de mise √† jour (fr√©quence, versions cibles, etc.).\n* **Support multi-langage et multi-gestionnaire de paquets:** Couverture large des √©cosyst√®mes de d√©veloppement.\n* **Int√©gration facile:**  Int√©gration avec les plateformes [[Git]] les plus populaires.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:**  La configuration peut √™tre complexe pour des projets avec des d√©pendances nombreuses ou des exigences sp√©cifiques.\n* **D√©pendance √† un service tiers:**  La fonctionnalit√© d√©pend d'une connexion stable √† l'infrastructure de Renovate Bot.\n* **Potentiel de conflits de fusion:**  Les mises √† jour automatiques peuvent parfois cr√©er des conflits avec d'autres modifications, n√©cessitant une intervention manuelle.\n* **Surveillance n√©cessaire:**  Bien que automatis√©, il est toujours n√©cessaire de surveiller les pull requests g√©n√©r√©es pour √©viter les probl√®mes.\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension des gestionnaires de paquets et des principes de gestion des d√©pendances.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "e8412082-486c-4479-8ffb-666b4cc1ff5f",
        "title": "Responsive des images html css",
        "description": "---\nid: 7822de72-7567-4eb4-9a12-3980e4e48032\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe responsive des images [[HTML]]/[[CSS]] permet de charger des images diff√©rentes en fonction de la taille de l'√©cran, de l'orientation ou d'autres crit√®res. Cela permet d'optimiser le temps de chargement et la performance d'un site web.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe balisage `<picture>` et les √©l√©ments `<source>` dans HTML permettent de d√©finir des images sp√©cifiques √† afficher selon des conditions pr√©cises, comme la taille de l'√©cran ou l'orientation du dispositif. Chaque `<source>` peut contenir une condition via l'attribut `media` et d√©finir la source de l'image avec `srcset`. Le navigateur choisira automatiquement l'image la plus adapt√©e.\n\nExemple :\n\n```html\n<picture>\n  <source media=\"(orientation: portrait) and (max-width: 700px)\" srcset=\"https://url_image\" sizes=\"100vw\" />\n  <source media=\"(orientation: portrait)\" srcset=\"https://url_image\" sizes=\"100vw\" />\n</picture>\n```\n\nCela permet de ne charger que l'image n√©cessaire, en fonction de la configuration du p√©riph√©rique, r√©duisant ainsi la consommation de bande passante et am√©liorant la performance du site.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Optimisation des performances** : Le navigateur choisit l'image la plus appropri√©e en fonction des conditions d√©finies, ce qui r√©duit la taille des fichiers t√©l√©charg√©s.\n- **R√©duction du temps de chargement** : En ne chargeant que l'image n√©cessaire selon la taille d'√©cran ou l'orientation, on √©vite de t√©l√©charger des images inutiles.\n- **Flexibilit√©** : Permet d'utiliser plusieurs images avec des tailles et r√©solutions diff√©rentes selon le contexte (ex : mobile vs desktop).\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© accrue** : La gestion des multiples sources d'image peut devenir complexe avec plusieurs conditions √† g√©rer.\n- **Compatibilit√© limit√©e** : Tous les navigateurs ne supportent pas parfaitement la balise `<picture>`, bien que la prise en charge soit d√©sormais largement r√©pandue.\n- **Charge serveur** : Bien qu'il y ait une optimisation c√¥t√© client, le serveur doit g√©rer plusieurs versions d'images, augmentant la gestion c√¥t√© backend.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Responsive en CSS]]"
    },
    {
        "id": "9591fb64-906a-4a68-9998-f99e437f7581",
        "title": "Responsive en CSS",
        "description": "---\nid: 4797285a-dc72-4c05-a1d0-75bf11fb9382\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe responsive design en [[CSS]] permet d'adapter l'apparence d'une page web √† diff√©rentes tailles d'√©crans et r√©solutions, en utilisant des unit√©s flexibles et des techniques comme les media queries pour offrir une exp√©rience optimale sur mobile, tablette et desktop.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe responsive design en [[CSS]] repose sur plusieurs concepts permettant d'adapter le contenu d'une page web en fonction des caract√©ristiques de l'√©cran (taille, orientation, r√©solution) :\n\n- **Unit√©s dynamiques** : Des unit√©s comme `vw` (viewport width), `vh` (viewport height), et `vmin` (la plus petite valeur entre `vh` et `vw`) permettent de cr√©er des √©l√©ments qui s'ajustent √† la taille de l'√©cran de mani√®re fluide.\n- **Media Queries** : Ces r√®gles permettent de sp√©cifier diff√©rents styles CSS en fonction de crit√®res comme la taille de l'√©cran, l'orientation ou la r√©solution.\n- **Element `<picture>`** : Utilis√© pour charger des images diff√©rentes selon les conditions d√©finies (par exemple, orientation ou taille d'√©cran). Cela optimise le temps de chargement et am√©liore la performance, en ne chargeant que l'image la plus appropri√©e pour l'affichage.\n\n# Qu'est ce qui est top ? üëç\n\n- **Adaptabilit√©** : Le design r√©actif garantit une exp√©rience utilisateur optimale, quelle que soit la taille de l'√©cran.\n- **Performance** : L‚Äôutilisation du `<picture>` pour les images et des unit√©s dynamiques r√©duit la quantit√© d‚Äôimages ou de ressources inutiles √† charger, am√©liorant ainsi la vitesse de chargement.\n- **Facilit√© d‚Äôimpl√©mentation** : L‚Äôutilisation des media queries permet de faire √©voluer l‚Äôaffichage de mani√®re fluide sans n√©cessiter de red√©veloppement complet pour chaque taille d‚Äô√©cran.\n- **Mobile-first** : Cette approche assure que le site est toujours fonctionnel sur les appareils mobiles, qui sont souvent les plus contraints en termes de taille d'√©cran et de performance.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© accrue** : G√©rer de multiples tailles d‚Äô√©cran et orientations peut compliquer le processus de d√©veloppement et de maintenance.\n- **D√©bogage difficile** : Tester sur tous les types d'√©crans et simulateurs peut √™tre long et fastidieux, surtout lorsque les styles ne sont pas coh√©rents entre diff√©rents appareils.\n- **Temps de chargement** : Bien que l'utilisation du `<picture>` soit performante, si mal configur√©e, cela peut entra√Æner des d√©lais de chargement en fonction de la taille des images et du nombre de sources utilis√©es.\n\n# A quoi c'est li√© ? ü™¢\n[[Mobile First]]"
    },
    {
        "id": "42c711ee-117b-417a-8c6e-9b684a10120c",
        "title": "R√©activit√©",
        "description": "---\nid: 4094d186-18e0-4673-a238-ad66d828c305\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLa **programmation r√©active** est une approche qui permet aux programmes de r√©agir de mani√®re asynchrone et dynamique aux changements d'√©tat dans leur environnement. Cela permet d'am√©liorer la r√©activit√© des applications, en particulier dans des contextes interactifs et temps r√©el.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLa programmation r√©active se base sur l'id√©e que les applications doivent √™tre capables de r√©agir √† des changements en temps r√©el, comme les √©v√©nements utilisateur ou les mises √† jour de donn√©es. Diff√©rentes biblioth√®ques et frameworks utilisent cette approche pour g√©rer l'√©tat et les interactions de mani√®re plus fluide et r√©active.\n\n### Types de r√©activit√© :\n\n1. **Value-based** (ex : [[Angular]], [[React]]) :  \n    Les anciennes valeurs sont compar√©es aux nouvelles, et si elles diff√®rent, l'application met √† jour l'√©tat. Ce mod√®le est simple √† impl√©menter mais peut √™tre inefficace pour les grandes applications car il n√©cessite une comparaison exhaustive des valeurs √† chaque changement.\n    \n2. **Observable-based** (ex : [[Svelte]], [[RxJS]]) :  \n    L'application s'abonne √† des **Observables** (flux de donn√©es) et r√©agit aux changements de mani√®re asynchrone. Cela permet d‚Äôoptimiser la performance, mais rend le code plus complexe et sujet √† des probl√®mes comme les fuites de m√©moire si l'abonnement n'est pas correctement g√©r√©.\n    \n3. **Signal-based** (ex : [[Vue]],[[ Solid]], et [[Angular]]) :  \n    Les variables sont stock√©es avec des r√©f√©rences uniques et chaque acc√®s passe par une gestion centralis√©e des r√©f√©rences. Ce mod√®le est performant et synchrone, mais il peut √™tre plus contraignant en termes de structure du code. [[Angular]], par exemple, exp√©rimente cette approche mais rencontre des difficult√©s dans son adoption.\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Observable-based** :\n    - Tr√®s performant pour les applications complexes et r√©actives.\n    - Permet de g√©rer des flux de donn√©es en temps r√©el avec une gestion fine des mises √† jour.\n\n- **Signal-based** :\n    - Offre une r√©activit√© plus synchrone, ce qui r√©duit les risques d'incoh√©rences de donn√©es.\n    - Optimisation de la gestion des acc√®s √† des variables partag√©es.\n\n- **Value-based** :\n    - Facile √† comprendre et √† mettre en place, id√©al pour des applications plus simples.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Observable-based** :\n    - Peut devenir difficile √† g√©rer, surtout avec les abonnements et d√©sabonnements, ce qui peut conduire √† des fuites m√©moire si mal g√©r√©.\n    - Asynchrone, ce qui complique la gestion du flux d'ex√©cution et du d√©bogage.\n\n- **Signal-based** :    \n    - Le mod√®le strict peut rendre le code moins flexible et plus difficile √† maintenir.\n    - Angular a des difficult√©s √† impl√©menter cette approche de mani√®re fluide et standardis√©e.\n\n- **Value-based** :    \n    - Moins performant √† grande √©chelle, n√©cessite de comparer chaque changement, ce qui peut ralentir les applications avec de nombreux √©l√©ments √† surveiller.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "8a8d58b5-9071-4444-8711-dd893676ac39",
        "title": "R√¥les dans l‚Äôarchitecture d‚Äôun SI",
        "description": "---\nid: b5e075e4-d8ca-4274-997f-ec7a18462829\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes r√¥les dans l‚Äôarchitecture d‚Äôun Syst√®me d'Information (SI) d√©finissent les responsabilit√©s et la gestion des pratiques techniques, allant de la d√©finition des grandes lignes architecturales √† l'impl√©mentation technique dans les applications.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **Architecte d'entreprise** : D√©finit les directives et normes architecturales √† l'√©chelle globale du SI. Il s'assure de l'harmonisation des pratiques et de la coh√©rence entre les diff√©rents syst√®mes.\n    \n- **Architecte solution** : Applique les directives de l'architecte d'entreprise au niveau des applications sp√©cifiques. Il s‚Äôassure que chaque solution r√©ponde aux normes architecturales globales tout en r√©pondant aux besoins des projets.\n    \n- **Architecte technique / Lead dev** : G√®re les choix techniques et les d√©cisions micro-niveau au sein des projets. Il assure la coh√©rence technique des solutions et prend des d√©cisions d√©taill√©es pour r√©soudre des probl√®mes sp√©cifiques dans le code.\n    \n- **Equipe de d√©veloppement** : Suit les directives d‚Äôarchitecture et contribue aux discussions techniques. Les d√©veloppeurs mettent en ≈ìuvre les choix d√©cid√©s par les architectes dans le cadre des projets.\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Clart√© des r√¥les** : Chaque acteur a une vision claire de ses responsabilit√©s, ce qui permet une gestion structur√©e du SI.\n- **Harmonisation des pratiques** : Les d√©cisions sont prises √† diff√©rents niveaux, ce qui permet de respecter des standards tout en √©tant agile dans les projets.\n- **Collaboration entre les r√¥les** : Les architectes travaillent en √©troite collaboration avec l‚Äô√©quipe de d√©veloppement, assurant la mise en ≈ìuvre des directives avec une bonne prise en compte des r√©alit√©s du terrain.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© hi√©rarchique** : Avec plusieurs niveaux d'architecture, la communication peut devenir plus complexe et les d√©cisions peuvent √™tre retard√©es.\n- **Risque de d√©connexion entre les niveaux** : Si les architectes d‚Äôentreprise ne sont pas bien align√©s avec les architectes solution, ou si les d√©veloppeurs ne comprennent pas les directives, cela peut cr√©er des incoh√©rences dans l'impl√©mentation.\n- **Charge de gestion** : Les architectes, notamment d'entreprise et solution, peuvent √™tre submerg√©s par des t√¢ches de coordination et de contr√¥le, ce qui peut ralentir les processus.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "c6cf519c-fd09-44ee-a12a-bbef14ae767c",
        "title": "Server Side Generation (SSG)",
        "description": "---\nid: cb7dd7c1-468d-46c0-8bc8-7bc4fc778f04\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLa **Server Side Generation (SSG)** consiste √† g√©n√©rer des pages web statiques au moment de la compilation du projet, avant m√™me le lancement du serveur. Les pages sont rendues sous forme de fichiers [[HTML]] pr√™ts √† √™tre servis.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe processus de SSG consiste √† pr√©-g√©n√©rer toutes les pages d'un site pendant le processus de build, ce qui permet de les servir directement sous forme de fichiers statiques au moment de la demande de l'utilisateur. Le serveur ne fait plus que renvoyer ces fichiers [[HTML]] statiques, sans avoir besoin de calculer ou d'interagir avec une base de donn√©es √† chaque requ√™te.\n\n- **G√©n√©ration statique** : Les pages sont rendues √† la compilation du projet, ce qui acc√©l√®re le temps de r√©ponse du serveur.\n- **Pas d'interaction serveur** : Une fois les pages g√©n√©r√©es, le serveur sert directement les fichiers [[HTML]], ce qui r√©duit la charge c√¥t√© serveur.\n- **[[SEO]] optimis√©** : Puisque les pages sont d√©j√† pr√™tes, les moteurs de recherche peuvent facilement les indexer.\n\n# Qu'est ce qui est top ? üëç\n\n- **Performance rapide** : Les pages sont statiques, ce qui signifie que le serveur a juste √† envoyer le fichier [[HTML]] sans traitement suppl√©mentaire.\n- **[[SEO]] optimis√©** : Le contenu statique est id√©al pour l‚Äôindexation par les moteurs de recherche, augmentant ainsi la visibilit√© du site.\n- **Simplicit√© du serveur** : Aucune logique c√¥t√© serveur, ce qui simplifie l‚Äôarchitecture du backend.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Temps de compilation long** : Si le site poss√®de de nombreuses pages, la g√©n√©ration statique peut √™tre lente et consommer des ressources.\n- **Pas adapt√© au contenu dynamique** : Pour des sites n√©cessitant une mise √† jour constante de contenu (par exemple des blogs ou des plateformes sociales), le SSG peut devenir peu pratique, car il faut recompiler les pages √† chaque changement.\n- **Gestion des donn√©es** : Le contenu dynamique doit √™tre g√©r√© avant la compilation, ce qui peut limiter l'interactivit√© des pages.\n\n# A quoi c'est li√© ? ü™¢\n[[Server Side Rendering (SSR)]] [[Incremental Static Regeneration (ISR)]] "
    },
    {
        "id": "3a646b78-b3e7-42f5-a4d1-7963e2b48a0e",
        "title": "Server Side Rendering (SSR)",
        "description": "---\nid: 3d88ac3a-ed12-451b-972e-c306b861b37d\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe Server Side Rendering (SSR) est une technique o√π le serveur g√©n√®re et envoie une page [[HTML]] presque compl√®te au navigateur. Contrairement √† du rendu c√¥t√© client, c'est le serveur qui ex√©cute le [[JavaScript]] et construit la page avant de l'envoyer au client.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe SSR permet de pr√©-rendre une page [[HTML]] compl√®te c√¥t√© serveur, incluant les ressources n√©cessaires (images, scripts, etc.), avant de la renvoyer au client. Le [[JavaScript]] c√¥t√© client prend ensuite le relais pour l'[[hydratation]], c'est-√†-dire pour rendre la page interactive. Cette approche am√©liore les performances initiales du chargement, car le navigateur n‚Äôa qu'√† afficher la page g√©n√©r√©e, sans avoir √† attendre que le [[JavaScript]] s'ex√©cute pour cr√©er le contenu.\n\nLe SSR est souvent utilis√© avec des frameworks comme [[Next.js]] pour [[React]], [[Nuxt.js]] pour [[Vue.js]] ou [[Analog.js]] pour [[Angular]]\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Am√©lioration des performances initiales** : Le contenu est d√©j√† pr√©-rendu, ce qui permet un affichage plus rapide.\n- **[[SEO]] optimis√©** : Comme le contenu est disponible d√®s le chargement de la page, les moteurs de recherche peuvent mieux l'indexer.\n- **Exp√©rience utilisateur am√©lior√©e** : Le temps jusqu'√† l'affichage est plus court, surtout pour les utilisateurs ayant des connexions lentes.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© c√¥t√© serveur** : La gestion des sessions, du cache et du rendu dynamique est plus complexe √† impl√©menter.\n- **[[Hydratation]]** : Apr√®s le rendu initial, le [[JavaScript]] c√¥t√© client doit \"prendre le relais\" pour rendre la page interactive, ce qui peut entra√Æner un d√©lai suppl√©mentaire.\n- **Ressources serveur** : Plus de travail est effectu√© sur le serveur pour g√©n√©rer chaque page, ce qui peut augmenter la charge serveur et les co√ªts.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Server Side Generation (SSG)]][[Incremental Static Regeneration (ISR)]]\n"
    },
    {
        "id": "8c1b08b7-54d7-41a2-82f9-2f07277a619e",
        "title": "Signal (Angular)",
        "description": "---\nid: 1b418003-bf67-4b2a-9a0f-955a4f39a7ad\n---\n# Rapidement c'est quoi‚ùì\n\nSignal est un m√©canisme de [[R√©activit√©]] int√©gr√© √† [[Angular]] depuis la version 14, offrant une alternative plus simple et parfois plus performante √† [[RxJS]] pour g√©rer les changements de donn√©es et d√©clencher des mises √† jour d'interface.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAngular Signals fournit une nouvelle approche pour la gestion de la r√©activit√© dans les applications Angular.  Au lieu de s'appuyer sur les Observables de [[RxJS]], il utilise un syst√®me plus l√©ger et plus intuitif bas√© sur des \"signals\". Un signal est une r√©f√©rence √† une valeur qui peut changer au cours du temps.  Lorsqu'une valeur de signal change, Angular d√©tecte automatiquement cette modification et met √† jour le DOM en cons√©quence.  Ceci permet de simplifier le code et d'am√©liorer les performances dans certains cas d'utilisation, notamment pour les mises √† jour simples et fr√©quentes de donn√©es.\n\nLes composants cl√©s sont :\n\n* **`signal()`:**  Fonction qui cr√©e un signal √† partir d'une valeur initiale.  Cette fonction retourne un objet poss√©dant deux propri√©t√©s : `.value` (pour acc√©der √† la valeur actuelle) et `.subscribe()` (pour s'abonner aux changements de valeur, similaire aux observables [[RxJS]] mais plus l√©ger).\n* **`computed()`:** Fonction qui permet de cr√©er des signals d√©riv√©s √† partir d'autres signals.  La valeur d'un signal `computed` est recalcul√©e automatiquement chaque fois qu'un des signals dont il d√©pend est mis √† jour. Ceci est similaire aux op√©rateurs [[RxJS]] comme `map` ou `combineLatest` mais avec une syntaxe plus concise.\n* **`effect()`:** Fonction qui ex√©cute une fonction chaque fois qu'un ou plusieurs signals dont elle d√©pend changent. Ceci permet de r√©agir aux changements de donn√©es et d'effectuer des actions secondaires, comme des appels API ou des navigations.\n\n\nL'utilisation de Signals est souvent plus concise et lisible que [[RxJS]] pour les cas simples de gestion de la r√©activit√©.  Il est cependant important de comprendre que Signals ne remplacent pas compl√®tement [[RxJS]], mais offrent une alternative int√©ressante pour certains types de probl√®mes.  [[RxJS]] reste pertinent pour les cas d'utilisation plus complexes n√©cessitant des op√©rations avanc√©es de transformation et de gestion des flux d'√©v√©nements asynchrones.\n\nLes signaux sont aussi utilis√©s par [[Vue.js]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplicit√© et lisibilit√©:** La syntaxe des Signals est plus concise et plus facile √† comprendre que [[RxJS]], facilitant le d√©veloppement et la maintenance.\n* **Performances:** Dans certains cas, les Signals peuvent offrir de meilleures performances que [[RxJS]], notamment pour les mises √† jour fr√©quentes de donn√©es simples.\n* **Int√©gration native dans Angular:**  L'int√©gration transparente avec le framework Angular simplifie l'utilisation et √©vite les probl√®mes de compatibilit√©.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Moins puissant que [[RxJS]]:** Les Signals ne poss√®dent pas la m√™me richesse fonctionnelle que RxJS.  Pour des sc√©narios complexes de manipulation de flux d'√©v√©nements asynchrones, RxJS reste n√©cessaire.\n* **Relatif manque de maturit√©:**  √âtant une fonctionnalit√© plus r√©cente, la communaut√© et la documentation autour des Signals sont moins √©tendues que pour RxJS.\n* **Courbe d'apprentissage (m√™me si faible) :**  Il faut un temps d'adaptation m√™me si la syntaxe est plus simple.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "928cc68c-9624-4fe4-b1a1-69ee470283f5",
        "title": "Slim Faas",
        "description": "---\nid: 8b302316-614f-4cea-af00-28858b4f0603\n---\n# Rapidement c'est quoi‚ùì\n\nSlim Faas est une plateforme [[Function as a Service (FaaS)]] l√©g√®re, alternative √† [[OpenFaaS]], d√©velopp√©e et utilis√©e en interne par AXA.  Elle se concentre sur la simplicit√© et l'efficacit√©.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nSlim Faas est une impl√©mentation simplifi√©e et optimis√©e de la plateforme serverless [[OpenFaaS]].  Contrairement √† [[OpenFaaS]] qui offre une large gamme de fonctionnalit√©s et de complexit√©, Slim Faas se concentre sur l'essentiel: le d√©ploiement et l'ex√©cution de fonctions sans serveur.  Elle est con√ßue pour √™tre l√©g√®re, facile √† d√©ployer et √† maintenir, et particuli√®rement adapt√©e aux environnements o√π les ressources sont limit√©es ou o√π une configuration minimale est souhaitable.  Son architecture simplifi√©e r√©duit la surface d'attaque et la complexit√© de gestion.  Elle repose g√©n√©ralement sur des technologies conteneuris√©es (comme [[Docker]]) et un [[Orchestrateur de conteneur]] (comme [[Nomad]] ou [[Kubernetes]], bien que son architecture permette une plus grande flexibilit√©).  L'objectif principal est de fournir une solution serverless performante et facile √† utiliser, sans les surcharges li√©es aux fonctionnalit√©s plus avanc√©es d'[[OpenFaaS]].  AXA l'utilise en interne, ce qui sugg√®re une adoption pour des cas d'usage sp√©cifiques n√©cessitant une solution plus l√©g√®re et plus contr√¥l√©e.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **L√©g√®ret√© et simplicit√©:**  Sa conception minimaliste facilite le d√©ploiement, la maintenance et la gestion.\n* **Efficacit√©:**  Optimis√©e pour les ressources limit√©es, elle consomme moins de ressources que les solutions plus compl√®tes.\n* **S√©curit√©:**  La surface d'attaque r√©duite am√©liore la s√©curit√© globale.\n* **Contr√¥le:**  AXA ayant d√©velopp√© la solution, le contr√¥le et l'adaptation √† ses besoins sp√©cifiques sont facilit√©s.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Manque de fonctionnalit√©s:**  Son approche minimaliste signifie l'absence de certaines fonctionnalit√©s avanc√©es pr√©sentes dans [[OpenFaaS]] (monitoring sophistiqu√©, gestion d'√©v√©nements complexes, etc.).\n* **Documentation limit√©e:**  √âtant une solution interne √† AXA, la documentation publique est probablement limit√©e ou inexistante.\n* **Adoption limit√©e:**  Le manque de large adoption limite la communaut√© et le support disponible.\n* **D√©pendance √† AXA:**  Le futur et le maintien de la solution d√©pendent des priorit√©s d'AXA.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "0158b215-3c8b-4d22-b80a-0dbae9306a1c",
        "title": "Spring AOP",
        "description": "---\nid: d1d0d5d0-ec94-4cb7-8dac-7b39d73a115b\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nSpring AOP ([[Aspect Oriented Programming (AOP)]]) est un framework [[Java]], bas√© sur [[Spring Framework]] qui permet d'ajouter des fonctionnalit√©s transversales √† une application sans modifier le code source principal.  Il permet de modulariser le code qui g√®re des pr√©occupations comme la journalisation, la s√©curit√©, ou la gestion des transactions, en les s√©parant du code m√©tier principal.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring AOP utilise un m√©canisme de *[[Proxy]]* pour intercepter les appels de m√©thodes et ex√©cuter du code additionnel avant, apr√®s, ou autour de l'appel de la m√©thode cibl√©e.  Ces morceaux de code additionnels sont appel√©s *aspects*.  Un aspect est d√©fini par un ensemble de *conseils* (*advice*), qui sp√©cifient quand et comment le code additionnel doit √™tre ex√©cut√©.  Les points d'ex√©cution de ces conseils sont d√©finis par des *points de jonction* (*join points*), qui repr√©sentent des points sp√©cifiques dans l'ex√©cution du programme (par exemple, l'appel d'une m√©thode, la manipulation d'une exception).\n\nSpring AOP supporte diff√©rents types de conseils :\n\n* **Avant (Before):** Le code s'ex√©cute avant l'appel de la m√©thode cibl√©e.\n* **Apr√®s (After):** Le code s'ex√©cute apr√®s l'appel de la m√©thode cibl√©e, que celle-ci r√©ussisse ou √©choue.\n* **Apr√®s retour (After returning):** Le code s'ex√©cute apr√®s l'appel de la m√©thode cibl√©e si celle-ci retourne une valeur avec succ√®s.\n* **Apr√®s lancement d'exception (After throwing):** Le code s'ex√©cute apr√®s l'appel de la m√©thode cibl√©e si celle-ci lance une exception.\n* **Autour (Around):** Le code s'ex√©cute avant et apr√®s l'appel de la m√©thode cibl√©e, et permet de contr√¥ler compl√®tement l'ex√©cution de la m√©thode.\n\n**Exemple utilisant annotations:**\n\n```java\nimport org.aspectj.lang.annotation.*;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\npublic class LoggingAspect {\n\n    @Before(\"execution(* com.example.service.*.*(..))\")\n    public void beforeMethodExecution(JoinPoint joinPoint) {\n        System.out.println(\"Avant l'ex√©cution de : \" + joinPoint.getSignature());\n    }\n\n    @AfterReturning(pointcut = \"execution(* com.example.service.*.*(..))\", returning = \"result\")\n    public void afterMethodExecution(JoinPoint joinPoint, Object result) {\n        System.out.println(\"Apr√®s l'ex√©cution de : \" + joinPoint.getSignature() + \" - R√©sultat : \" + result);\n    }\n\n    @AfterThrowing(pointcut = \"execution(* com.example.service.*.*(..))\", throwing = \"exception\")\n    public void afterThrowing(JoinPoint joinPoint, Throwable exception) {\n        System.out.println(\"Exception lev√©e lors de l'ex√©cution de : \" + joinPoint.getSignature() + \" - Exception : \" + exception.getMessage());\n    }\n}\n```\n\nCet exemple utilise des expressions pointcut pour d√©finir les m√©thodes √† intercepter.  `execution(* com.example.service.*.*(..))` intercepte toutes les m√©thodes de tous les classes dans le package `com.example.service`.\n\nA la diff√©rence de [[AspectJ]], Spring AOP cr√©er des proxy autour des objets afin d'ajouter les comportements voulu. Quand √† lui [[AspectJ]], vient modifier directement les objets au d√©marrage de l'application. Le code est concret.\nLa diff√©rence se fait donc dans la port√© offerte par les deux frameworks. [[AspectJ]] permet de toucher tout les fichiers (m√™me ceux des librairies), tandis que Spring AOP va se restreindre aux beans (m√™me port√© que [[Spring Framework]]).\n\n## Qu'est-ce qui est top ? üëç\n\n* **Modularit√©:** S√©pare les pr√©occupations transversales du code m√©tier, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application.\n* **Simplicit√©:**  L'int√©gration avec [[Spring Framework]] est simple et bien document√©e.\n* **Pouvoir d'expression:** Les expressions Pointcut permettent de cibler pr√©cis√©ment les m√©thodes √† intercepter.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:**  Pour des applications complexes, la configuration et la gestion des aspects peuvent devenir difficiles.\n* **D√©bogage:**  Le d√©bogage peut √™tre plus complexe en raison de l'utilisation des [[Proxy]].\n* **Performances:** L'utilisation des [[Proxy]] peut avoir un l√©ger impact sur les performances, bien que g√©n√©ralement n√©gligeable.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n(Laisser vide)\n"
    },
    {
        "id": "9e434a98-3fa9-48e3-9369-8abea2e18897",
        "title": "Spring Boot Actuator",
        "description": "---\nid: d8c7dbd9-13a6-477b-b02b-4905b243151c\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Spring Boot Actuator** est un module de [[Spring Boot]] qui permet d'ajouter des fonctionnalit√©s de gestion et de surveillance √† une application, en exposant des **endpoints** pour r√©cup√©rer des informations sur son √©tat, ses m√©triques, sa sant√©, etc.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nSpring Boot Actuator offre un ensemble d'**endpoints** accessibles via HTTP qui fournissent des informations sur la sant√©, les performances et la configuration de l‚Äôapplication en temps r√©el. Ces endpoints sont principalement utilis√©s pour :\n\n- **Surveillance** : Permet de suivre l'√©tat de sant√© de l'application, ses m√©triques de performance, et la configuration environnementale.\n- **Gestion des logs** : Permet d'ajuster dynamiquement les niveaux de logs.\n- **Diagnostics** : Fournit des informations d√©taill√©es sur les threads ou la m√©moire pour d√©tecter des probl√®mes de performance.\n\nQuelques endpoints cl√©s :\n\n- `/actuator/health` : Indique la sant√© de l‚Äôapplication.\n- `/actuator/metrics` : Expose les statistiques de performance (via [[Micrometer]]).\n- `/actuator/info` : Informations g√©n√©rales sur l'application.\n- `/actuator/env` : D√©taille les propri√©t√©s d‚Äôenvironnement.\n- `/actuator/loggers` : Permet de g√©rer les niveaux de logs.\n- `/actuator/threaddump` : Affiche un dump des threads pour aider au diagnostic des probl√®mes de performance.\n- `/actuator/heapdump` : Permet de prendre un dump de la m√©moire Java.\n\n**Important** : En production, il est crucial de s√©curiser ou masquer certains endpoints pour √©viter des risques de s√©curit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Surveillance facilit√©e** : Permet de suivre facilement l'√©tat de l'application et d'effectuer des diagnostics.\n- **Int√©gration avec [[Prometheus]]** : Expose des m√©triques que [[Prometheus]] peut r√©cup√©rer via `/actuator/metrics`, gr√¢ce √† l'int√©gration avec **[[Micrometer]]**.\n- **Gestion dynamique des logs** : Permet de changer les niveaux de logs √† chaud, ce qui facilite le d√©bogage en production.\n- **Large gamme d'endpoints** : Fournit une vari√©t√© d'informations (sant√©, performance, m√©moire, etc.) pour un contr√¥le complet de l'application.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **S√©curit√©** : Par d√©faut, les endpoints peuvent exposer des informations sensibles. Il est essentiel de les s√©curiser en production.\n- **Performance** : L'ajout de plusieurs endpoints peut avoir un impact sur la performance, surtout s'ils sont mal configur√©s ou trop nombreux.\n- **D√©pendance √† [[Micrometer]]** : Pour certaines fonctionnalit√©s comme les m√©triques, il est n√©cessaire d'int√©grer [[Micrometer]], ce qui peut ajouter une couche de complexit√©.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "7e4eec89-9862-487b-add2-797220c08b74",
        "title": "Spring Cloud Config",
        "description": "---\nid: a725a0a3-511b-459b-a1d0-6f946cf0c527\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nSpring Cloud Config est un outil permettant de centraliser la gestion des configurations dans une architecture de [[Micros services]]. Il permet √† tous les services de r√©cup√©rer leurs configurations depuis un serveur centralis√©.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nSpring Cloud Config permet de centraliser les configurations de tous les [[Micros services]] d'une application dans un serveur de configuration. Ce serveur peut r√©cup√©rer les configurations depuis divers fournisseurs (comme [[Git]] ou [[S3]]). Chaque [[Micros services]], √† son d√©marrage, se connecte √† ce serveur pour r√©cup√©rer sa propre configuration, ce qui simplifie la gestion de configurations multiples et complexes dans une architecture distribu√©e.\n\n- Un serveur Spring Cloud Config est mis en place en ajoutant une d√©pendance et en activant `@EnableConfigServer` sur la classe de d√©marrage.\n- Le serveur peut r√©cup√©rer des configurations depuis des sources comme [[Git]], avec un format sp√©cifique de fichiers (`application.yml`, `application.properties`).\n- Chaque [[Micros services]] client r√©cup√®re sa configuration via un URL sp√©cifique en fonction de son nom, de son profil et de son label [[Git]].\n\nLes configurations sont versionn√©es et g√©r√©es comme du code, permettant de b√©n√©ficier d'un suivi et de la r√©versibilit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Centralisation des configurations** : Une seule source pour g√©rer toutes les configurations des [[Micros services]], ce qui simplifie la maintenance.\n- **Versioning** : Utiliser [[Git]] pour stocker les configurations permet de versionner, suivre l'historique et revenir √† des versions pr√©c√©dentes facilement.\n- **Flexibilit√© des sources de configuration** : Supporte divers fournisseurs comme [[Git]], [[S3]], ce qui permet de s‚Äôadapter √† diff√©rents environnements.\n- **Simplicit√© d'int√©gration** : L'int√©gration dans [[Spring Boot]] se fait via de simples d√©pendances et annotations.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance au serveur de configuration** : Si le serveur de configuration tombe, les services ne pourront plus r√©cup√©rer leurs configurations.\n- **Complexit√© de mise en place** : Bien que la configuration de base soit simple, la gestion de multiples profils et labels [[Git]] peut compliquer la configuration des services.\n- **Scalabilit√© du serveur** : Il est important de mettre en place des r√©plicas du serveur pour garantir la disponibilit√©, mais cela peut ajouter de la complexit√©.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "d022bf8a-c96a-4f14-90a3-ae8cb7ad7e26",
        "title": "Certification Java 17 - Streams et Expressions Lambda",
        "description": "---\nid: 4278c6cd-387f-47f0-a011-d5c10f9d1b1c\n---\n## **8.1. Utilisation des `Stream<T>`, `IntStream`, `DoubleStream`**\n\nUn **Stream** est une s√©quence d‚Äô√©l√©ments pouvant √™tre trait√©e de mani√®re d√©clarative et fonctionnelle.\n\n|**Type**|**Description**|\n|---|---|\n|`Stream<T>`|Flux d‚Äôobjets g√©n√©riques|\n|`IntStream`|Flux de `int` (√©vite l‚Äôauto-boxing)|\n|`DoubleStream`|Flux de `double`|\n|`LongStream`|Flux de `long`|\n\n### **Cr√©ation d‚Äôun `Stream`**\n\n```java\nimport java.util.stream.*;\n\nList<String> noms = List.of(\"Alice\", \"Bob\", \"Charlie\");\nStream<String> stream = noms.stream();\nstream.forEach(System.out::println);\n```\n\nüìå **Un `Stream` ne peut √™tre consomm√© qu‚Äôune seule fois.**\n\n---\n\n### **Utilisation des `IntStream`, `DoubleStream`**\n\n```java\nIntStream.range(1, 5).forEach(System.out::print); // 1234\nDoubleStream.of(3.14, 2.71, 1.41).forEach(System.out::println);\n```\n\nüìå **`range(1,5)` g√©n√®re `{1, 2, 3, 4}` (exclut `5`), `rangeClosed(1,5)` inclut `5`.**\n\n---\n\n## **8.2. `filter()`, `map()`, `reduce()`, `collect()`**\n\n### **1. `filter()` : S√©lectionne les √©l√©ments correspondant √† une condition**\n\n```java\nList<String> noms = List.of(\"Alice\", \"Bob\", \"Charlie\");\nList<String> resultat = noms.stream()\n    .filter(n -> n.startsWith(\"A\"))\n    .toList(); // Java 16+\nSystem.out.println(resultat); // [Alice]\n```\n\n---\n\n### **2. `map()` : Transforme les √©l√©ments**\n\n```java\nList<Integer> longueurs = noms.stream()\n    .map(String::length)\n    .toList();\nSystem.out.println(longueurs); // [5, 3, 7]\n```\n\nüìå **`map()` applique une fonction √† chaque √©l√©ment du `Stream`.**\n\n---\n\n### **3. `reduce()` : R√©duction des √©l√©ments √† une seule valeur**\n\n```java\nint somme = IntStream.of(1, 2, 3, 4)\n    .reduce(0, Integer::sum);\nSystem.out.println(somme); // 10\n```\n\nüìå **Permet de combiner les √©l√©ments (somme, multiplication, concat√©nation, etc.).**\n\n---\n\n### **4. `collect()` : Transformer un `Stream` en collection**\n\n```java\nList<String> listeMaj = noms.stream()\n    .map(String::toUpperCase)\n    .collect(Collectors.toList());\nSystem.out.println(listeMaj); // [ALICE, BOB, CHARLIE]\n```\n\nüìå **`collect()` permet de rassembler les √©l√©ments dans une `List`, `Set` ou `Map`.**\n\n---\n\n## **8.3. D√©composition, concat√©nation, partitionnement**\n\n### **1. `flatMap()` : D√©composition d‚Äô√©l√©ments imbriqu√©s**\n\n```java\nList<List<Integer>> listOfLists = List.of(List.of(1, 2), List.of(3, 4));\nList<Integer> flattenedList = listOfLists.stream()\n    .flatMap(List::stream)\n    .toList();\nSystem.out.println(flattenedList); // [1, 2, 3, 4]\n```\n\nüìå **`flatMap()` aplatit plusieurs collections en un seul `Stream`.**\n\n---\n\n### **2. Concat√©nation de `Stream`**\n\n```java\nStream<String> s1 = Stream.of(\"A\", \"B\");\nStream<String> s2 = Stream.of(\"C\", \"D\");\n\nStream<String> concatStream = Stream.concat(s1, s2);\nconcatStream.forEach(System.out::print); // ABCD\n```\n\nüìå **`Stream.concat(s1, s2)` fusionne deux flux.**\n\n---\n\n### **3. Partitionnement (`partitioningBy`)**\n\n```java\nMap<Boolean, List<String>> partition = noms.stream()\n    .collect(Collectors.partitioningBy(n -> n.length() > 3));\n\nSystem.out.println(partition);\n// {false=[Bob], true=[Alice, Charlie]}\n```\n\nüìå **Retourne deux groupes : ceux qui respectent la condition (`true`) et les autres (`false`).**\n\n---\n\n## **8.4. Streams S√©quentiels et Parall√®les**\n\n### **1. `parallelStream()` : Ex√©cution multi-thread**\n\n```java\nList<String> noms = List.of(\"Alice\", \"Bob\", \"Charlie\");\nnoms.parallelStream()\n    .forEach(System.out::println); // Ex√©cution parall√®le\n```\n\nüìå **Peut am√©liorer les performances sur des collections volumineuses.**\n\n### **2. `parallel()` sur un `Stream` existant**\n\n```java\nnoms.stream()\n    .parallel()\n    .forEach(System.out::println);\n```\n\nüìå **Attention aux op√©rations d√©pendant de l‚Äôordre !**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Cr√©ation de `Stream<T>`, `IntStream`, `DoubleStream`**  \n‚úÖ **Op√©rations `filter()`, `map()`, `reduce()`, `collect()`**  \n‚úÖ **D√©composition (`flatMap`), concat√©nation, partitionnement**  \n‚úÖ **Utilisation des `Streams` s√©quentiels et parall√®les**\n\n---"
    },
    {
        "id": "c52446cb-bd97-4c08-a19f-20ea2a450b58",
        "title": "Supprimer des fichiers sensibles pousser sur un repository",
        "description": "---\nid: 80596fd6-1ff6-4512-8919-fe89db6b5c22\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Supprimer des fichiers sensibles pouss√©s sur un repo** consiste √† retirer des fichiers contenant des informations sensibles (comme des mots de passe ou des cl√©s API) qui ont √©t√© accidentellement pouss√©s dans un d√©p√¥t [[Git]]. Pour cela, des outils comme `git-filter-branch` ou `bfg-repo-cleaner` permettent de nettoyer l'historique du d√©p√¥t.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **git-filter-branch** : Outil int√©gr√© √† Git qui permet de r√©√©crire l'historique d'un d√©p√¥t en supprimant des fichiers ou des r√©pertoires sp√©cifiques, ainsi que toutes leurs traces dans l‚Äôhistorique des commits.\n    \n- **bfg-repo-cleaner** : Outil tiers √©crit en Scala, con√ßu sp√©cifiquement pour nettoyer un d√©p√¥t Git en supprimant rapidement des fichiers ou des objets (comme des cl√©s API) qui ne doivent pas √™tre pr√©sents. Il est plus rapide et plus simple que `git-filter-branch` et peut √™tre √©tendu en Scala si n√©cessaire.\n    \n\nExemples de commandes avec BFG :\n\n- `bfg --delete-files id_{dsa,rsa} my-repo.git` : Supprime les fichiers de type id_dsa et id_rsa.\n- `bfg --strip-blobs-bigger-than 50M my-repo.git` : Supprime les fichiers de plus de 50 Mo.\n- `bfg --replace-text passwords.txt my-repo.git` : Remplace les mots contenus dans un fichier texte (par exemple des mots de passe) dans tout l'historique.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **BFG est plus rapide** : Par rapport √† `git-filter-branch`, il est plus rapide et plus efficace, surtout pour les gros d√©p√¥ts.\n- **Simplicit√©** : BFG est con√ßu uniquement pour la suppression de fichiers sensibles, rendant son usage plus direct et moins complexe que `git-filter-branch`.\n- **Extensible** : √âtant √©crit en Scala, il est possible de l‚Äôadapter √† des besoins sp√©cifiques.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **git-filter-branch plus flexible** : Bien que BFG soit plus rapide, `git-filter-branch` reste plus flexible pour les t√¢ches complexes n√©cessitant une r√©√©criture d‚Äôhistorique plus fine.\n- **Pas de protection native contre les fichiers d√©j√† clon√©s** : La suppression dans l'historique ne les retire pas des copies locales d√©j√† clon√©es du d√©p√¥t. Il est donc n√©cessaire d'informer les autres contributeurs pour √©viter qu'ils ne poussent √† nouveau ces fichiers sensibles.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "3926e5c7-d157-433e-b410-32b6cfcc9a63",
        "title": "Test Driven Developpement (TDD)",
        "description": "---\nid: ff0f5989-5d86-4a56-aeed-d3be0809cc54\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi ‚ùì\n\nLe **TDD** (Test Driven Development) est une m√©thode de d√©veloppement (Et pas simplement une strat√©gie de test) o√π les tests sont √©crits avant le code. Contrairement aux m√©thodes classiques o√π les tests viennent apr√®s le d√©veloppement, le TDD place les tests au centre du processus pour garantir un code de meilleure qualit√©.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n## Cycle du TDD\nLe TDD suit un cycle it√©ratif en trois √©tapes :\n\n1. **√âcrire un test qui √©choue** : On commence par cr√©er un test qui v√©rifie un comportement sp√©cifique, sachant qu'il √©chouera au d√©part.\n2. **√âcrire le minimum de code pour faire passer le test** : Ensuite, on r√©dige juste assez de code pour que le test passe, sans chercher √† le rendre complexe.\n\t- C'est super important de faire des baby steps. C'est comme √ßa qu'on arrive √† la meilleure conception. Il faut √©viter de trop anticiper la conception.\n3. **Refactoriser le code** : Une fois que le test passe, on am√©liore et optimise le code tout en s‚Äôassurant qu‚Äôil reste fonctionnel (les tests passent toujours).\n\nLe processus permet d'am√©liorer la qualit√© du code de mani√®re incr√©mentale et de rendre la conception plus simple et fiable.\nOn va clairement moins s'emmerder, et rendre le code plus fiable et plus simple.\nIl est tr√®s important de soigner autant le code de test que le code de prod, si on veut qu'ils puissent √™tre maintenable.\n\n## Ecoles de TDD\n### Chicago/Detroit School :\n- Ces √©coles sont parfois consid√©r√©es comme des variantes de la **TDD classique** mais avec une approche plus stricte et plus disciplin√©e dans l'application du processus.\n- Les partisans de ces √©coles insistent sur l'importance de ne **jamais √©crire de code** qui n‚Äôa pas d'abord √©t√© test√©. Leurs pratiques privil√©gient la simplicit√© et la rigueur dans le respect du cycle TDD (√©crire un test, coder, refactoriser).\n- L'accent est mis sur un **code tr√®s test√©**, mais parfois au prix d'une mise en ≈ìuvre plus rigide de la m√©thode.\n### London School :    \n- La **London School** adopte une approche plus souple et pragmatique du TDD.\n- Elle met l'accent sur l‚Äôimportance d'√©crire des tests qui sont facilement compr√©hensibles et utiles √† long terme. Plut√¥t que de se concentrer strictement sur la couverture de test, cette √©cole encourage √† **distinguer les tests utiles des tests superflus**.\n- L‚Äôid√©e est de faire en sorte que le processus soit **adaptable au projet**, en fonction des besoins r√©els.\n### Le style Ian Cooper :\n- Ian Cooper, un d√©fenseur du **TDD moderne**, met l'accent sur l‚Äôapplication du TDD pour une **architecture propre et √©volutive**.\n- Il insiste sur l'importance de tester des **unit√©s de travail coh√©rentes et isol√©es**, et de se concentrer sur des tests qui correspondent vraiment √† l‚Äôintention et √† la conception du syst√®me.\n- Son style met en avant la pratique de **ne pas tester √† outrance** et de bien d√©finir les limites des tests pour garantir qu'ils aient un impact r√©el sur la qualit√© du code.\n### Diamond TDD :\n- Le **Diamond TDD** est une approche qui introduit une **flexibilit√© dans le cycle TDD** traditionnel, en adoptant une structure en forme de diamant.\n- Ce style combine **refactoring, test et d√©veloppement** en fonction des besoins du projet et du code, plut√¥t que de suivre rigoureusement les √©tapes lin√©aires de TDD classique. L'id√©e est de **r√©√©valuer constamment la conception** et les tests pour trouver un √©quilibre optimal.\n- Il s'agit d'une approche plus dynamique, o√π le d√©veloppement et les tests ne sont pas forc√©ment r√©alis√©s dans un ordre strict, mais peuvent s'adapter en fonction des retours imm√©diats.\n\n## Documentation as code\nIl est possible d'utiliser le TDD comme d'une documentation fonctionnelle. Pour cela on va pouvoir utiliser l'[[Ubiquitous Language]] du projet afin de n'importe qui puisse comprendre les sp√©cificit√©s de la fonctionnalit√©.\n\n---\n# Qu'est ce qui est top ? üëç\n\n- **Documentation vivante** : Les tests servent de documentation dynamique, qui est mise √† jour en fonction des √©volutions du code. Si un test √©choue, cela indique qu‚Äôune modification est n√©cessaire, ce qui aide √† suivre l‚Äô√©volution du code et √† pr√©server les exigences m√©tiers.\n- **S√©curit√© lors du refactoring** : Le TDD offre un filet de s√©curit√©, ce qui permet de modifier le code ou de le refactoriser sans risque de r√©gression, car les tests signalent rapidement les erreurs introduites.\n- Force √† rendre son code testable. On cr√©ant des abstractions sur les d√©pendances afin de les mocker ou de cr√©er des stubs (en fonction de l'√©cole).\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Processus contraignant au d√©part** : L'√©criture des tests avant le code peut sembler difficile et ralentir initialement le d√©veloppement.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "a39dfca8-2229-4e91-90f6-1230c3170a4b",
        "title": "Test de mutation",
        "description": "---\nid: 344bca62-9704-4c85-9b12-7e21128579e2\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe test de mutation est une technique utilis√©e pour √©valuer la qualit√© des [[Test unitaire]]. Il consiste √† introduire des mutations (modifications) dans le code et √† v√©rifier si les tests √©chouent. Si un test passe apr√®s la mutation, cela signifie que le test n'est pas suffisamment pr√©cis pour d√©tecter les erreurs.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **But** : V√©rifier l'efficacit√© des [[Test unitaire]] en s'assurant qu'ils d√©tectent bien les changements dans le code.\n- **Mutations** : Ce sont des modifications syst√©matiques dans le code, comme changer un op√©rateur, inverser une condition, ou supprimer une instruction.\n- **Processus** :\n    1. V√©rification de la validit√© des [[Test unitaire]] existants.\n    2. Application de mutations sur le code.\n    3. Ex√©cution des [[Test unitaire]] sur les mutants g√©n√©r√©s.\n- **Analyse** : Si un test passe malgr√© une mutation, cela indique que le test est incomplet ou trop laxiste. L'objectif est que tous les mutants √©chouent, ce qui montre que le test est robuste.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Am√©liore la couverture des tests** : Permet de s'assurer que les tests couvrent r√©ellement tous les cas possibles.\n- **Identifie les tests inefficaces** : Permet de rep√©rer les tests qui ne d√©tectent pas les erreurs dans le code.\n- **Renforce la qualit√© du code** : En am√©liorant les tests, la qualit√© globale du projet est am√©lior√©e.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Consommation de ressources** : G√©n√©rer et tester des mutants peut √™tre co√ªteux en termes de temps et de ressources.\n- **Peut donner des faux positifs** : Si le pool de mutations est mal con√ßu, certains mutants peuvent passer, faussant ainsi l'√©valuation de la qualit√© des tests.\n- **Complexit√©** : La mise en place d'un test de mutation n√©cessite une bonne configuration et peut √™tre complexe √† int√©grer dans le flux de travail de d√©veloppement.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "66b6af95-a52b-458d-8494-57219fc88ff9",
        "title": "Testinfra",
        "description": "---\nid: 6697390d-2ee4-497d-9f15-9728cd165ca0\n---\n# Rapidement c'est quoi‚ùì\n\nTestinfra est un framework de [[Test d'infrastructure]] bas√© sur [[Python]]. Il permet de v√©rifier l'√©tat de vos serveurs et de votre infrastructure en ex√©cutant des tests √©crits en [[Python]] simple et lisible.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nTestinfra est un outil puissant pour l'automatisation des [[Test d'infrastructure]].  Il fonctionne en se connectant √† des machines distantes (via [[SSH]], [[WinRM]], etc.) et en ex√©cutant des assertions sur l'√©tat du syst√®me.  Au lieu de d√©pendre de commandes sp√©cifiques √† un syst√®me d'exploitation ou √† un outil de provisionnement, Testinfra utilise les modules [[Python]] standard et les modules sp√©cifiques √† l'infrastructure pour interagir avec le syst√®me cible.  Cela assure une grande portabilit√© et une simplification du processus de test.\n\nLes tests sont √©crits en Python et utilisent une syntaxe simple et intuitive.  On peut tester une vari√©t√© de choses, incluant :\n\n* **Pr√©sence de fichiers et de dossiers:** V√©rifier si un fichier existe, s'il est lisible, s'il a les permissions appropri√©es.\n* **Services syst√®me:** V√©rifier si un service est en marche, arr√™t√©, ou en cours de red√©marrage.\n* **Packages logiciels:** V√©rifier si un package est install√©, sa version, etc.\n* **Ports r√©seau:** V√©rifier si un port est ouvert ou ferm√©.\n* **Contenu de fichiers de configuration:** V√©rifier la pr√©sence de lignes sp√©cifiques dans un fichier de configuration.\n* **Commandes syst√®me:** Ex√©cuter des commandes et valider leur sortie.\n* **Utilisateurs et groupes:** V√©rifier l'existence et les permissions des utilisateurs et des groupes.\n\n\nTestinfra s'int√®gre facilement dans les [[pipelines CI/CD]] et permet de valider l'√©tat de votre infrastructure de mani√®re automatis√©e et fiable.  Il est particuli√®rement utile pour le test d'[[Infra as Code (IaC]] en permettant de v√©rifier que l'infrastructure provisionn√©e correspond bien √† la configuration souhait√©e.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplicit√© et lisibilit√©:** Les tests sont √©crits en Python, ce qui les rend faciles √† √©crire, √† lire et √† maintenir.\n* **Portabilit√©:** Fonctionne sur plusieurs syst√®mes d'exploitation ([[Linux]], [[Windows]], [[macOS]]) et utilise un langage de test ind√©pendant des outils de provisionnement.\n* **Int√©gration CI/CD:** S'int√®gre facilement dans les [[pipelines CI/CD]].\n* **Large couverture:** Permet de tester une grande vari√©t√© d'aspects de l'infrastructure.\n* **Bas√© sur [[Python]]:**  Tire parti de l'√©cosyst√®me riche de [[Python]] et de ses librairies.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:** N√©cessite une connaissance de base de [[Python]].\n* **D√©pendance √† [[Python]]:**  Fonctionne uniquement avec [[Python]].\n* **D√©bogage:** Le d√©bogage des tests peut √™tre plus complexe que avec certains outils sp√©cifiques.  (Cependant, les capacit√©s de d√©bogage de [[Python]] restent disponibles)\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "87ba0245-8bf1-4701-ade6-2b36a270bc94",
        "title": "Unit√© responsive css",
        "description": "---\nid: 26571386-fada-49d8-b94c-b71bcd74cc84\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes unit√©s responsive [[CSS]] permettent de d√©finir des tailles relatives en fonction de la taille du viewport, c‚Äôest-√†-dire la fen√™tre d'affichage. Elles sont particuli√®rement utiles pour les designs fluides et adaptatifs sur diff√©rents appareils.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **`vh` (viewport height)** : Repr√©sente 1% de la hauteur du viewport. Par exemple, `100vh` occupe toute la hauteur de l'√©cran.\n- **`vw` (viewport width)** : Repr√©sente 1% de la largeur du viewport. Par exemple, `100vw` occupe toute la largeur de l'√©cran.\n- **`lvh` (large viewport height)** : Unit√© relative √† la hauteur du \"grand viewport\". Elle est stable et ignore les variations dues √† la barre d'adresse des appareils mobiles.\n- **`svh` (small viewport height)** : Repr√©sente la hauteur en excluant les √©l√©ments qui se cachent (comme la barre d'adresse sur mobile), utile pour un redimensionnement plus stable.\n- **`dvh` (dynamic viewport height)** : Similaire √† `lvh` et `svh`, mais prend en compte les changements dynamiques du viewport dus √† l‚Äôorientation ou des √©v√©nements d‚Äôinterface utilisateur.\n- **`vmin` (viewport minimum)** : Repr√©sente la plus petite des valeurs entre `vh` et `vw`, pour maintenir une proportion uniforme entre la largeur et la hauteur du viewport, quel que soit l'orientation de l'appareil.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Adaptabilit√©** : Ces unit√©s permettent de cr√©er des interfaces qui s'ajustent automatiquement √† la taille du viewport, rendant le design plus flexible.\n- **Stabilit√© sur mobile** : Les unit√©s comme `lvh`, `svh`, et `dvh` sont sp√©cialement con√ßues pour g√©rer les variations de taille sur les appareils mobiles, offrant une exp√©rience utilisateur plus pr√©visible.\n- **Proportions coh√©rentes** : `vmin` permet de maintenir des proportions constantes entre la largeur et la hauteur du viewport, quelle que soit l'orientation de l'√©cran.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Probl√®mes de compatibilit√©** : Certaines unit√©s comme `lvh`, `svh`, et `dvh` peuvent ne pas √™tre support√©es de mani√®re uniforme dans tous les navigateurs, surtout dans les versions plus anciennes.\n- **Complexit√© accrue** : Utiliser plusieurs unit√©s responsive dans un m√™me projet peut ajouter de la complexit√©, et il faut tester minutieusement pour s'assurer de la coh√©rence sur tous les appareils.\n- **Incertitude sur les mobiles** : Le comportement de certaines unit√©s (notamment `vh` et `vw`) peut √™tre affect√© par des √©l√©ments de l'interface (barre d‚Äôadresse ou navigation), rendant les tailles moins fiables.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "1ff270c7-4a18-4105-9d25-25da9d598351",
        "title": "VitePress",
        "description": "---\nid: b9f8677a-eceb-429a-8172-e5dea5e9833b\n---\n# Rapidement c'est quoi‚ùì\n\nVitePress est un g√©n√©rateur de site statique [[Server Side Generation (SSG)]] bas√© sur [[Vite]] et [[Vue.js]].  Il permet de cr√©er rapidement et facilement des sites web, notamment des documentations.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nVitePress est un g√©n√©rateur de site statique qui tire parti de la vitesse et des performances de [[Vite]], un serveur de d√©veloppement rapide et un outil de construction.  Il utilise [[Vue.js]] pour le rendu des pages, permettant de cr√©er des sites web dynamiques et interactifs malgr√© la nature statique du r√©sultat final.  Contrairement √† des g√©n√©rateurs de sites statiques plus traditionnels, VitePress offre un processus de d√©veloppement plus rapide gr√¢ce √† l'utilisation de Hot Module Replacement (HMR).  Cela signifie que les modifications de code sont instantan√©ment refl√©t√©es dans le navigateur sans n√©cessiter un rechargement complet de la page.  Il est particuli√®rement bien adapt√© √† la cr√©ation de documentations, car il offre des fonctionnalit√©s int√©gr√©es pour la gestion de la navigation, la recherche, et le d√©ploiement.  Le syst√®me de fichiers est utilis√© pour structurer le contenu, ce qui facilite la gestion et la maintenance du site.  La configuration est minimale, rendant VitePress accessible m√™me aux d√©veloppeurs peu exp√©riment√©s avec [[Vue]].  Il fournit √©galement des th√®mes par d√©faut personnalisables.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Rapidit√© de d√©veloppement:** Le HMR de Vite permet un cycle de d√©veloppement extr√™mement rapide.\n* **Facilit√© d'utilisation:** Configuration simple et intuitive, id√©ale pour les d√©butants en [[Vue.js]].\n* **Int√©gration avec [[Vue.js]]:** Permet de tirer parti de la puissance et de la flexibilit√© de [[Vue.js]].\n* **Performance:** Les sites g√©n√©r√©s sont optimis√©s pour la vitesse de chargement.\n* **Bon pour la documentation:**  Fonctionnalit√©s int√©gr√©es facilitant la cr√©ation de documentations.\n* **Syst√®me de theming:** Permet une personnalisation facile de l'apparence du site.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Moins flexible que des solutions plus complexes:**  Peut manquer de flexibilit√© pour des projets tr√®s sp√©cifiques ou complexes.  Les options de personnalisation, bien que pr√©sentes, sont plus limit√©es que des solutions plus g√©n√©ralistes.\n* **√âcosyst√®me moins large que d'autres [[Server Side Generation (SSG)]]:**  La communaut√© et les plugins disponibles sont moins nombreux que pour des SSG plus matures comme [[Astro]], [[Gatsby]] ou [[Hugo]].\n* **D√©pendance √† Vue.js:**  Si vous n'√™tes pas familier avec Vue.js, il faudra apprendre √† l'utiliser.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "73b8a1b5-01f0-4e3f-a721-f5ba47faef97",
        "title": "pg_vector",
        "description": "---\nid: 77c31383-8845-47ff-89f1-44766cf8f9b3\n---\n# Rapidement c'est quoi‚ùì\n\npg_vector est une extension pour le syst√®me de gestion de base de donn√©es [[PostgreSQL]] permettant d'indexer et de rechercher des vecteurs.  Cela facilite la mise en ≈ìuvre de la recherche s√©mantique et des syst√®mes de recommandation au sein d'une [[Base de donn√©e]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\npg_vector est une extension open-source pour [[PostgreSQL]] qui ajoute la capacit√© de stocker et de rechercher efficacement des vecteurs de donn√©es.  Ces vecteurs, g√©n√©ralement cr√©√©s par des mod√®les d'apprentissage automatique (embeddings), repr√©sentent des informations s√©mantiques (texte, images, audio, etc.).  L'extension fournit un type de donn√©es d√©di√© (`vector`), des op√©rateurs et des index sp√©cifiques pour optimiser les requ√™tes de recherche de similarit√©.\n\nLe c≈ìur de pg_vector r√©side dans ses capacit√©s de recherche par similarit√©.  Au lieu de rechercher des correspondances exactes, il permet de trouver les vecteurs les plus proches d'un vecteur donn√©, en utilisant des m√©triques de distance comme la distance euclidienne ou la distance cosinus.  Cette approche est cruciale pour les applications de recherche s√©mantique, o√π l'objectif est de trouver des √©l√©ments similaires en termes de signification, m√™me si les mots cl√©s ne correspondent pas parfaitement.\n\nL'extension g√®re l'indexation des vecteurs, ce qui permet des recherches rapides et efficaces m√™me sur de grands ensembles de donn√©es.  Les index utilis√©s optimisent la recherche en espace vectoriel, r√©duisant le temps de traitement et am√©liorant les performances.  Elle fournit √©galement des fonctions pour calculer les distances entre les vecteurs et pour effectuer des recherches √† l'aide de ces distances.\nCette extension permet de convertir [[PostgreSQL]] en une [[Base de donn√©e vectorielle]], id√©al pour la cr√©ation de [[RAG]] dans les [[Large Language Model (LLM)]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Int√©gration native avec [[PostgreSQL]]:**  Pas besoin d'une solution externe complexe.  Tout est g√©r√© au sein de la base de donn√©es.\n* **Performances:**  L'utilisation d'index optimis√©s permet des recherches rapides et efficaces, m√™me sur de tr√®s grands ensembles de donn√©es vectoris√©es.\n* **[[Open-source]] et communaut√© active:**  Acc√®s au code source, contribution possible et communaut√© pour le support.\n* **Simplicit√© d'utilisation:**  Relativement facile √† installer et √† utiliser, m√™me pour ceux qui ne sont pas experts en bases de donn√©es.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Limit√© √† [[PostgreSQL]]:**  L'extension ne fonctionne qu'avec PostgreSQL.  L'utilisation avec d'autres bases de donn√©es n√©cessite une solution alternative.\n* **D√©pendance aux mod√®les d'apprentissage automatique:**  N√©cessite de g√©n√©rer des vecteurs √† l'aide de mod√®les externes.  L'extension ne fournit pas de fonctionnalit√© de cr√©ation de vecteurs.\n* **Complexit√© potentielle pour des applications tr√®s sp√©cifiques:**  La configuration optimale des index et le choix de la m√©trique de distance peuvent n√©cessiter une expertise technique.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[Base de donn√©e SQL]]"
    },
    {
        "id": "bc62b3e7-b04a-4d75-8ed7-1d1b2693304f",
        "title": "vLLM",
        "description": "---\nid: fb7bce3a-8584-449e-8086-fa44d07ff590\n---\n# Rapidement c'est quoi‚ùì\n\nvLLM est un outil permettant de d√©ployer rapidement et facilement de grands mod√®les de langage ([[Large Language Model (LLM)]]) sous forme d'API web compatible avec l'API d'[[OpenAI]].  Cela permet d'utiliser les SDK OpenAI existants avec des mod√®les LLM personnalis√©s.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nvLLM est une infrastructure [[Open-source]] con√ßue pour servir des mod√®les de langage volumineux (LLMs) via une API [[RESTful]] imitant celle d'OpenAI.  Au lieu de devoir construire une infrastructure complexe de serveurs et de g√©rer la mise √† l'√©chelle, vLLM permet de d√©ployer un LLM existant (entra√Æn√© pr√©alablement) et de le rendre accessible via une interface simple et standardis√©e.  L'avantage cl√© r√©side dans la compatibilit√© avec les SDK OpenAI : les applications existantes qui utilisent l'API OpenAI peuvent fonctionner sans modification majeure avec un LLM d√©ploy√© via vLLM, simplement en changeant l'URL de l'API.  vLLM g√®re la mise en m√©moire du mod√®le, le parall√©lisme des requ√™tes, et optimise les performances pour servir efficacement des requ√™tes d'inf√©rence (g√©n√©rer du texte, r√©pondre √† des questions, etc.).  Il est g√©n√©ralement utilis√© avec des mod√®les quantifi√©s pour r√©duire la taille m√©moire n√©cessaire et am√©liorer les performances.  Il propose diff√©rents modes de service (ex : serveur unique, serveur distribu√©) pour s'adapter aux besoins en ressources et au volume de requ√™tes.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Compatibilit√© OpenAI:**  Permet une transition facile vers des LLM personnalis√©s sans modifier le code client.\n* **Simplicit√© de d√©ploiement:**  Facilite le processus de mise en production d'un LLM, simplifiant l'infrastructure n√©cessaire.\n* **Performances:** Optimis√© pour g√©rer les requ√™tes d'inf√©rence efficacement, m√™me avec des mod√®les volumineux.\n* **Open-source:** Accessible, modifiable et am√©liorable par la communaut√©.\n* **Scalabilit√©:**  Possibilit√© de d√©ploiement sur des serveurs multiples pour une meilleure gestion des charges importantes.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© initiale (potentielle):** Bien que visant la simplicit√©, la configuration et le d√©ploiement initiaux peuvent n√©cessiter une certaine expertise technique, notamment en ce qui concerne la gestion des mod√®les et des ressources.\n* **D√©pendances:** N√©cessite des biblioth√®ques sp√©cifiques et un environnement d'ex√©cution adapt√©.\n* **Ressources:**  Le d√©ploiement de grands mod√®les n√©cessite des ressources mat√©rielles importantes (RAM, GPU).\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n[[Intelligence Artificielle]]\n"
    },
    {
        "id": "69136136-c910-4337-baa8-695b2bdbcf2e",
        "title": "",
        "description": "# Gestion des Exceptions en Java\n\nCette note d√©taille la gestion des exceptions en Java, un m√©canisme crucial pour la robustesse et la fiabilit√© des applications.  Une bonne gestion des exceptions permet d'anticiper et de traiter les erreurs de mani√®re √©l√©gante, emp√™chant ainsi des plantages inattendus.\n\n## 1. Qu'est-ce qu'une exception ?\n\nUne exception est un √©v√©nement qui interrompt le flux normal d'ex√©cution d'un programme.  Elle survient g√©n√©ralement lorsqu'une erreur se produit, comme une tentative d'acc√®s √† un fichier inexistant, une division par z√©ro, ou une erreur r√©seau.  En Java, les exceptions sont des objets qui h√©ritent de la classe `Throwable`.\n\n## 2. Types d'exceptions\n\nJava distingue deux grands types d'exceptions :\n\n* **Exceptions v√©rifi√©es (checked exceptions):**  Le compilateur Java impose la gestion de ces exceptions.  Si une m√©thode peut lever une exception v√©rifi√©e,  elle doit soit la g√©rer avec un bloc `try-catch`, soit la d√©clarer dans sa signature √† l'aide du mot-cl√© `throws`.  Exemples : `IOException`, `SQLException`.\n\n* **Exceptions non v√©rifi√©es (unchecked exceptions):**  Le compilateur ne force pas leur gestion explicite.  Ce sont g√©n√©ralement des erreurs de programmation (ex: `NullPointerException`, `IndexOutOfBoundsException`, `ArithmeticException`). Elles sont souvent le signe d'un bug dans le code.  [Concepts de Base en Java]\n\n## 3. Gestion des exceptions avec `try-catch`\n\nLe m√©canisme principal pour g√©rer les exceptions est le bloc `try-catch`.  Le code susceptible de lever une exception est plac√© dans le bloc `try`.  Si une exception survient, le programme saute au bloc `catch` correspondant au type d'exception.\n\n```java\ntry {\n    // Code susceptible de lever une exception\n    int result = 10 / 0; // Division par z√©ro\n    System.out.println(\"R√©sultat : \" + result);\n} catch (ArithmeticException e) {\n    // Gestion de l'exception ArithmeticException\n    System.err.println(\"Erreur : Division par z√©ro !\");\n    e.printStackTrace(); // Affiche le d√©tails de l'exception dans la console\n}\n```\n\nDans cet exemple, la division par z√©ro l√®ve une `ArithmeticException`. Le bloc `catch` correspondant intercepte l'exception, affiche un message d'erreur, et utilise `e.printStackTrace()` pour afficher la pile d'appels, utile pour le d√©bogage.\n\n\n## 4.  Gestion de plusieurs exceptions\n\nUn bloc `try` peut √™tre suivi de plusieurs blocs `catch` pour g√©rer diff√©rents types d'exceptions. L'ordre des blocs `catch` est important : les exceptions les plus sp√©cifiques doivent √™tre trait√©es avant les exceptions plus g√©n√©rales (car les classes filles sont trait√©es avant leurs classes m√®res).\n\n```java\ntry {\n    // ...\n} catch (IOException e) {\n    // Gestion d'une IOException\n} catch (SQLException e) {\n    // Gestion d'une SQLException\n} catch (Exception e) { // Exception g√©n√©rale, √† utiliser en dernier recours\n    // Gestion d'autres exceptions\n}\n```\n\n\n## 5. Le bloc `finally`\n\nLe bloc `finally` est optionnel et contient du code qui s'ex√©cute toujours, que l'exception soit lev√©e ou non.  Il est souvent utilis√© pour lib√©rer des ressources (fermer des fichiers, des connexions √† une base de donn√©es, etc.).\n\n```java\ntry {\n    // ...\n} catch (Exception e) {\n    // ...\n} finally {\n    // Code qui s'ex√©cute toujours\n    System.out.println(\"Bloc finally ex√©cut√©\");\n}\n```\n\n\n## 6. Propagation des exceptions\n\nSi une m√©thode ne g√®re pas une exception, elle la propage vers la m√©thode appelante.  Cette propagation continue jusqu'√† ce qu'une m√©thode g√®re l'exception ou que le programme termine son ex√©cution.  Ceci est g√©r√© via le mot-cl√© `throws` dans la signature de la m√©thode.\n\n```java\npublic void maMethode() throws IOException {\n    // Code qui peut lever une IOException\n    throw new IOException(\"Erreur d'entr√©e/sortie\");\n}\n```\n\n## 7.  Exceptions personnalis√©es\n\nIl est possible de cr√©er des exceptions personnalis√©es pour g√©rer des situations sp√©cifiques au sein de l'application.  Cela am√©liore la lisibilit√© et la maintenabilit√© du code.  Il suffit de cr√©er une nouvelle classe qui √©tend `Exception` (ou une de ses sous-classes).  [Gestion des Exceptions]\n\n\n## Conclusion\n\nLa ma√Ætrise de la gestion des exceptions est essentielle pour d√©velopper des applications Java robustes et fiables.  Une gestion appropri√©e des exceptions am√©liore la qualit√© du code, facilite le d√©bogage et permet de fournir une exp√©rience utilisateur plus agr√©able en √©vitant les plantages inattendus.\n"
    },
    {
        "id": "e8e30d2b-96ea-40d6-b6f3-405ab87d1a5d",
        "title": "@MapsId",
        "description": "---\nid: d232d5f0-ad62-4cb1-be4b-eb4682ecb271\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\n`@MapsId` est une annotation de Spring Data JPA utilis√©e dans les relations `@OneToOne` pour partager la cl√© primaire entre une entit√© parent et une entit√© enfant.  Cela √©vite la cr√©ation d'une colonne de cl√© √©trang√®re dans la table enfant.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nDans une relation `@OneToOne`,  Spring Data JPA cr√©e g√©n√©ralement une colonne de cl√© √©trang√®re dans la table de l'entit√© enfant pour faire r√©f√©rence √† l'entit√© parent.  Si la relation est optionnelle (l'enfant peut exister sans le parent), cette colonne est souvent nullable.  `@MapsId` permet de contourner ce comportement.  Au lieu d'une cl√© √©trang√®re, l'entit√© enfant partage la m√™me cl√© primaire que l'entit√© parent.  Cela implique que la cl√© primaire de l'entit√© enfant est identique √† celle du parent.  L'annotation `@MapsId` sp√©cifie le nom du champ de la cl√© primaire de l'entit√© parent qui sera mapp√© √† la cl√© primaire de l'entit√© enfant.\n\n**Exemple:**\n\nSupposons que nous ayons une entit√© `Utilisateur` et une entit√© `Profil` avec une relation `@OneToOne`.\n\n```java\n@Entity\npublic class Utilisateur {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    // ... autres attributs ...\n\n    @OneToOne(mappedBy = \"utilisateur\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    private Profil profil;\n    // ...\n}\n\n@Entity\n@Table(name = \"profil\")\npublic class Profil {\n\n    @Id\n    private Long id; // Cl√© primaire partag√©e\n\n    @MapsId\n    @OneToOne\n    @JoinColumn(name = \"id\") //Optionnel, le nom est deja id de base\n    private Utilisateur utilisateur;\n\n\n    // ... autres attributs ...\n}\n```\n\nDans cet exemple, `@MapsId` dans la classe `Profil` indique que le champ `id` de `Profil` utilise la m√™me cl√© primaire que le champ `id` de `Utilisateur`.  La table `profil` n'aura pas de colonne de cl√© √©trang√®re.  La contrainte d'unicit√© de la cl√© primaire g√®re la relation.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Simplicit√©:**  √âvite la complexit√© d'une cl√© √©trang√®re, surtout dans les relations optionnelles.\n* **Performance:** Peut am√©liorer l√©g√®rement les performances des requ√™tes, car cela √©vite les jointures sur la cl√© √©trang√®re.\n* **Clart√© du sch√©ma de donn√©es:** Le sch√©ma relationnel est plus propre et plus facile √† comprendre.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Contraintes:**  Il est crucial que la cl√© primaire de l'entit√© enfant soit du m√™me type que celle du parent.  Une mauvaise configuration peut conduire √† des erreurs.\n* **Moins flexible:**  `@MapsId` est moins flexible que l'utilisation d'une cl√© √©trang√®re classique, particuli√®rement si vous avez besoin de fonctionnalit√©s avanc√©es de gestion de la relation.\n* **Difficult√© de compr√©hension:**  Pour les d√©veloppeurs non exp√©riment√©s avec JPA, cette annotation peut √™tre moins intuitive qu'une relation avec cl√© √©trang√®re.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "bd6d23da-1d38-4bd8-abca-a651a7fe152a",
        "title": "Akka",
        "description": "---\nid: 3b6dc02c-51c8-42be-85d6-9effe457e5ec\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nAkka est un toolkit open-source et multiplateforme pour construire des applications concurrentes, distribu√©es et r√©silientes bas√©es sur le mod√®le acteur.  Il simplifie le d√©veloppement d'applications hautement parall√®les et tol√©rantes aux pannes.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAkka est bas√© sur le mod√®le acteur, un paradigme de programmation concurrent qui traite les acteurs comme des unit√©s ind√©pendantes de calcul.  Chaque acteur poss√®de sa propre bo√Æte aux lettres pour recevoir des messages, son propre √©tat interne et un thread d√©di√© (ou un pool de threads).  La communication entre les acteurs se fait exclusivement par l'envoi de messages asynchrones.  Cela permet d'√©viter les probl√®mes de concurrence classiques tels que les interblocages et les conditions de course.\n\nAkka offre plusieurs fonctionnalit√©s cl√©s :\n\n* **Mod√®le Acteur:**  Le c≈ìur d'Akka.  Il g√®re la cr√©ation, la surveillance et la communication entre les acteurs.\n* **Supervision:** Akka fournit un m√©canisme de supervision hi√©rarchique permettant de g√©rer les erreurs et les pannes des acteurs.  Si un acteur plante, son superviseur peut d√©cider de le red√©marrer, de le surveiller, ou de le terminer.\n* **R√©silience:** Gr√¢ce √† la supervision et √† la nature asynchrone des messages, Akka permet de construire des syst√®mes r√©silients capables de tol√©rer les pannes.\n* **Distribution:** Akka peut distribuer les acteurs sur plusieurs machines, permettant la cr√©ation d'applications distribu√©es.\n* **Persistance:** Akka permet de persister l'√©tat des acteurs pour garantir la coh√©rence des donn√©es en cas de panne.\n* **Streaming:** Akka Streams offre un cadre puissant pour traiter des flux de donn√©es de mani√®re r√©active et concurrente.\n* **HTTP/WebSockets:**  Akka HTTP fournit des outils pour cr√©er des serveurs et des clients HTTP et WebSockets.\n\n**Exemple (Scala):**\n\n```scala\nimport akka.actor.{Actor, ActorSystem, Props}\n\nclass MyActor extends Actor {\n  def receive: Receive = {\n    case \"hello\" => println(\"Hello from actor!\")\n    case _ => println(\"Unknown message\")\n  }\n}\n\nobject MyAkkaApp extends App {\n  val system = ActorSystem(\"mySystem\")\n  val myActor = system.actorOf(Props[MyActor], \"myActor\")\n  myActor ! \"hello\"\n  Thread.sleep(1000)\n  system.terminate()\n}\n```\n\nCet exemple cr√©e un syst√®me d'acteurs, un acteur `MyActor`, et lui envoie un message \"hello\".\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Concurrence facile:**  Le mod√®le acteur simplifie la gestion de la concurrence.\n* **R√©silience:**  Les syst√®mes Akka sont plus r√©silients gr√¢ce √† la supervision.\n* **Scalabilit√©:**  Akka permet de cr√©er des applications distribu√©es et hautement scalables.\n* **Communaut√© active et documentation compl√®te:** Akka b√©n√©ficie d'une large communaut√© et d'une documentation abondante.\n* **Langages support√©s:** Akka est disponible pour Java, Scala, Kotlin et d'autres langages.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:**  Le mod√®le acteur peut avoir une courbe d'apprentissage plus raide que les approches de programmation concurrentes traditionnelles.\n* **D√©bogage:**  Le d√©bogage des applications Akka peut √™tre plus complexe que celui des applications monothread√©es.\n* **Complexit√© pour les applications simples:**  Pour les applications simples, Akka peut √™tre un sur-ing√©nierie.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "75ef67dd-da48-429a-ab54-af38f2851448",
        "title": "Algorithmes de Garbage Collector",
        "description": "---\nid: 11284ca5-0259-472f-bb46-962fa1f2500d\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nLes garbage collectors (GC) sont des algorithmes qui automatisent la gestion de la m√©moire dans les langages de programmation comme Java.  Ils identifient et r√©cup√®rent la m√©moire qui n'est plus utilis√©e par le programme, emp√™chant les fuites de m√©moire et lib√©rant des ressources pour de nouvelles allocations.  Parallel, G1, et ZGC sont trois algorithmes de GC diff√©rents utilis√©s par la JVM (Java Virtual Machine).\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nCes trois algorithmes diff√®rent principalement dans leur strat√©gie de collecte et leur impact sur les performances de l'application :\n\n**1. Parallel Garbage Collector:**\n\n* **Strat√©gie:**  Un GC \"stop-the-world\" qui utilise plusieurs threads pour collecter les objets inaccessibles. Il effectue une collecte des g√©n√©rations (Young, Old) et utilise un copy collector pour la g√©n√©ration Young (objets jeunes). La g√©n√©ration Old (objets √¢g√©s) utilise un mark-sweep-compact collector.  \n* **Fonctionnement:** Pendant la collecte, tous les autres threads de l'application sont interrompus (stop-the-world). La collecte est rapide pour la g√©n√©ration Young mais peut prendre plus de temps pour la g√©n√©ration Old.\n* **Avantages:**  Performant pour les applications avec un taux de cr√©ation d'objets faible √† moyen.  Le parall√©lisme acc√©l√®re la collecte.\n* **Inconv√©nients:**  Longs temps d'arr√™t (\"pause times\") lors de la collecte de la g√©n√©ration Old.  Non adapt√© aux applications exigeantes en faible latence.\n\n**2. G1 Garbage Collector (Garbage-First):**\n\n* **Strat√©gie:** Un GC concurrent et √† faible pause qui divise le heap en r√©gions. Il priorise la collecte des r√©gions avec le plus de garbage. Il utilise une approche √† plusieurs g√©n√©rations.\n* **Fonctionnement:**  Il effectue des collectes partielles et concurrentes, ce qui signifie qu'il travaille en parall√®le avec l'application, minimisant les temps d'arr√™t.  Il vise √† atteindre un objectif de temps de pause donn√©.\n* **Avantages:**  Meilleur compromis entre temps de pause et d√©bit que le Parallel GC.  Adapt√© aux applications avec des heaps de grande taille.\n* **Inconv√©nients:**  Plus complexe √† configurer que le Parallel GC.  Peut consommer plus de ressources CPU que le Parallel GC.\n\n**3. Z Garbage Collector (ZGC):**\n\n* **Strat√©gie:** Un GC concurrent, √† tr√®s faible pause, et √† haute performance. Il utilise des pointeurs color√©s et un m√©canisme de d√©tection de cycles efficace.\n* **Fonctionnement:**  Le ZGC vise √† atteindre des temps de pause inf√©rieurs √† 10ms, m√™me avec des heaps de plusieurs t√©raoctets. Il est extr√™mement efficace et utilise plusieurs threads pour collecter les objets de mani√®re concurrente.\n* **Avantages:**  Tr√®s faibles pauses, adapt√© aux applications n√©cessitant une faible latence (ex: applications en temps r√©el).  Excellent d√©bit m√™me pour des heaps volumineux.\n* **Inconv√©nients:**  Plus r√©cent que les autres GC, donc moins mature.  Peut consommer plus de ressources CPU que G1 ou Parallel GC. N√©cessite une version Java r√©cente.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **Parallel GC:**  Simple, performant pour les applications √† faible latence tol√©rable.\n* **G1 GC:**  Bon compromis entre d√©bit et temps de pause, adapt√© aux grandes applications.\n* **ZGC:**  Temps de pause extr√™mement faibles, id√©al pour des applications √† faible latence.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Parallel GC:**  Longs temps de pause lors de la collecte de la g√©n√©ration Old.\n* **G1 GC:**  Peut √™tre plus complexe √† configurer et √† ma√Ætriser.\n* **ZGC:**  Plus gourmand en ressources, relativement r√©cent et n√©cessite une version Java r√©cente.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "8b72417a-7de5-4399-b169-e1f5066764f7",
        "title": "Apache CouchDB",
        "description": "---\nid: f21c9312-cb75-458c-bc61-69e46d477f40\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nApache CouchDB est une base de donn√©es NoSQL orient√©e document, open source, qui utilise le protocole HTTP pour acc√©der et manipuler les donn√©es.  Elle se distingue par sa simplicit√©, sa facilit√© de r√©plication et son mod√®le de donn√©es flexible.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nCouchDB stocke les donn√©es sous forme de documents JSON.  Chaque document est identifi√© par un unique ID et poss√®de des r√©visions, permettant le suivi des modifications.  L'acc√®s aux donn√©es se fait via des requ√™tes HTTP (GET, POST, PUT, DELETE) sur des URLs sp√©cifiques.  Elle utilise un m√©canisme de r√©plication facile √† mettre en place, permettant la synchronisation de donn√©es entre plusieurs serveurs.  CouchDB utilise le concept de \"vues\" (views) pour cr√©er des index sur les documents, permettant des requ√™tes plus performantes.  Ces vues sont d√©finies en utilisant une syntaxe MapReduce simplifi√©e, ou bien avec des fonctions √©crites en Javascript.\n\nVoici un exemple d'ajout d'un document en utilisant une requ√™te HTTP POST :\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"John Doe\", \"age\": 30}' http://localhost:5984/mydb/\n```\n\nEt un exemple de requ√™te pour r√©cup√©rer un document sp√©cifique :\n\n```bash\ncurl http://localhost:5984/mydb/doc_id\n```\n\nCouchDB offre un m√©canisme de gestion des conflits lors de la r√©plication.  Le mod√®le de donn√©es flexible permet de stocker des donn√©es structur√©es et non structur√©es facilement.  L'architecture est distribu√©e par nature, favorisant la haute disponibilit√© et la tol√©rance aux pannes.\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Simplicit√© et facilit√© d'utilisation:**  L'API HTTP est intuitive et facile √† comprendre.\n* **R√©plication facile:**  La r√©plication est un processus simple et robuste, permettant une haute disponibilit√© et une distribution g√©ographique des donn√©es.\n* **Mod√®le de donn√©es flexible:**  Le format JSON permet de stocker des donn√©es de diff√©rentes structures.\n* **Open source et communaut√© active:**  B√©n√©ficie d'une grande communaut√© et d'un support important.\n* **Architecture distribu√©e:**  Int√©gr√©e par nature pour une meilleure tol√©rance aux pannes et scalabilit√©.\n\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Performance des requ√™tes complexes:**  Peut √™tre moins performante que d'autres bases de donn√©es pour des requ√™tes complexes n√©cessitant des jointures ou des op√©rations avanc√©es.  La performance d√©pend fortement de la conception des vues.\n* **Manque de fonctionnalit√©s ACID strictes:**  Bien que CouchDB offre des m√©canismes pour la coh√©rence des donn√©es, elle ne fournit pas les garanties ACID compl√®tes comme les bases de donn√©es relationnelles.\n* **Mod√®le de donn√©es moins structur√©:**  L'absence de sch√©ma rigide peut compliquer la gestion des donn√©es pour certaines applications.\n* **La courbe d'apprentissage des vues MapReduce peut √™tre raide** pour les d√©veloppeurs qui ne sont pas familiers avec ce paradigme.\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "b73fab9d-4ae1-42cb-acf8-d6b4ca556589",
        "title": "Apache Pulsar",
        "description": "---\nid: 9058cd6d-9b55-44d4-ac8f-efcfa34393bd\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nApache Pulsar est un syst√®me de messagerie distribu√©, hautement scalable et performant, con√ßu pour g√©rer des flux de donn√©es √† grande √©chelle et √† faible latence.  Il est particuli√®rement adapt√© aux applications n√©cessitant une haute disponibilit√© et une grande capacit√© de traitement de messages.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nApache Pulsar est un syst√®me de messagerie √† publication/abonnement (pub/sub) qui utilise une architecture multi-tenant et g√©r√©e par le cloud.  Il se diff√©rencie des syst√®mes de messagerie traditionnels par plusieurs aspects cl√©s :\n\n* **Architecture en couches:** Pulsar utilise une architecture en trois couches :  brokers, clients et le service de stockage. Les brokers g√®rent les connexions clients et la routage des messages. Le stockage peut √™tre effectu√© dans diff√©rents syst√®mes de stockage persistants (comme BookKeeper ou un syst√®me de fichiers distribu√©), offrant flexibilit√© et haute disponibilit√©.\n\n* **BookKeeper:** Pulsar utilise BookKeeper, un syst√®me de stockage distribu√© hautement performant et fiable, pour la persistance des messages. Ceci assure la durabilit√© des messages m√™me en cas de panne de brokers.\n\n* **Gestion des namespaces et des topics:** Pulsar offre une gestion fine des namespaces et des topics, permettant une s√©paration claire entre les diff√©rents locataires et applications.  Cela facilite la gestion des ressources et l'isolation des applications.\n\n* **Routing flexible:** Pulsar supporte diff√©rents modes de routage, dont le routage g√©om√©trique, permettant une distribution efficace des messages entre les consommateurs.\n\n* **Fonctionnalit√©s avanc√©es:** Pulsar offre des fonctionnalit√©s telles que la segmentation des topics, la r√©plication des messages, la gestion des transactions et l'int√©gration avec des outils de monitoring.\n\n**Exemple (concept):** Imaginons une application de streaming vid√©o.  Pulsar peut √™tre utilis√© pour g√©rer le flux de donn√©es vid√©o en temps r√©el. Les producteurs publient les donn√©es vid√©o sur un topic Pulsar, et les consommateurs les re√ßoivent pour les diffuser aux utilisateurs.  La haute scalabilit√© de Pulsar permet de g√©rer un grand nombre d'utilisateurs simultan√©s.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Haute performance et faible latence:** Pulsar est optimis√© pour une faible latence et un d√©bit √©lev√©.\n* **Scalabilit√© horizontale:** Pulsar peut facilement √™tre √©tendu pour g√©rer des charges de travail de plus en plus importantes.\n* **Haute disponibilit√©:** Gr√¢ce √† la r√©plication et √† BookKeeper, Pulsar offre une haute disponibilit√© des messages.\n* **Multi-tenancy:** Pulsar permet une s√©paration claire des ressources entre les diff√©rents locataires.\n* **Gestion avanc√©e des topics:** La segmentation et la r√©plication des topics offre une grande flexibilit√©.\n* **Support de multiples langages:** Pulsar fournit des clients pour divers langages de programmation.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La configuration et la gestion de Pulsar peuvent √™tre plus complexes que celle de syst√®mes de messagerie plus simples.\n* **Courbe d'apprentissage:**  Il faut du temps pour ma√Ætriser toutes les fonctionnalit√©s et les subtilit√©s de Pulsar.\n* **D√©pendance √† BookKeeper:** La performance et la fiabilit√© de Pulsar d√©pendent en grande partie de BookKeeper.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "f2d08ce3-3069-4de6-998b-85703c531cef",
        "title": "Arch Unit",
        "description": "---\nid: ffaf4087-aebd-46bc-9684-f0d5c8c188bb\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nArchUnit est une librairie Java bas√©e sur JUnit permettant de tester l'architecture d'une application.  Elle v√©rifie les relations entre diff√©rents composants (classes, packages, etc.) et s'assure que l'architecture respecte les r√®gles d√©finies.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nArchUnit permet de d√©finir des r√®gles architecturales et de v√©rifier si le code source les respecte.  Ces r√®gles peuvent porter sur diff√©rents aspects de l'architecture, tels que :\n\n* **D√©pendances entre couches :**  V√©rifier qu'une couche pr√©sentation ne d√©pend pas directement de la couche donn√©es, mais uniquement de la couche service.\n* **Cycles de d√©pendances :** D√©tecter les cycles entre les packages ou les classes, signe d'une architecture complexe et difficile √† maintenir.\n* **Utilisation d'annotations :** S'assurer que toutes les classes annot√©es d'une certaine mani√®re respectent une convention de nommage ou une structure sp√©cifique.\n* **Respect de principes de conception :** V√©rifier le respect de principes tels que la s√©paration des pr√©occupations ou l'inversion des d√©pendances.\n\n\nArchUnit utilise une API fluide et expressive pour d√©finir ces r√®gles.  On d√©crit la structure souhait√©e √† l'aide de conditions sur les classes, les packages et leurs relations.  L'ex√©cution des tests v√©rifie ensuite si le code source correspond √† cette description.  La fonctionnalit√© \"freezing arch rules\" est particuli√®rement utile pour int√©grer ArchUnit dans des projets existants (legacy) en permettant d'appliquer les r√®gles uniquement sur le nouveau code.\n\n\n**Exemple (Illustratif):**\n\nSupposons que l'on veuille v√©rifier qu'aucune classe du package `com.example.presentation` ne d√©pend directement du package `com.example.data`.  Avec ArchUnit, on pourrait √©crire une r√®gle similaire √† :\n\n```java\nimport com.tngtech.archunit.core.importer.ImportOption;\nimport com.tngtech.archunit.lang.syntax.ArchRuleDefinition;\nimport org.junit.jupiter.api.Test;\n\nimport static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;\nimport static com.tngtech.archunit.library.dependencies.SlicesRuleDefinition.slices;\n\npublic class ArchitectureTest {\n\n    @Test\n    void presentationLayerShouldNotDependOnDataLayer() {\n        classes()\n                .that().resideInAPackage(\"com.example.presentation\")\n                .should().onlyDependOnClassesThat().resideInAnyPackage(\"..presentation\", \"..service\");\n\n    }\n      @Test\n    void cyclicDependenciesAreForbidden(){\n        slices().matching(\"com.example.(*)..\").should().beFreeOfCycles();\n    }\n\n}\n```\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Automatisation des v√©rifications architecturales :**  ArchUnit permet d'automatiser le respect des r√®gles architecturales, √©vitant ainsi les r√©gressions et am√©liorant la qualit√© du code.\n* **D√©tection pr√©coce des probl√®mes :**  Les tests d'architecture sont ex√©cut√©s lors des tests unitaires ou d'int√©gration, permettant une d√©tection rapide des violations architecturales.\n* **Am√©lioration de la maintenabilit√© :**  En garantissant le respect de r√®gles architecturales, ArchUnit contribue √† une meilleure maintenabilit√© du code.\n* **Documentation de l'architecture :** Les r√®gles d√©finies avec ArchUnit peuvent servir de documentation de l'architecture du projet.\n* **Int√©gration facile avec JUnit :**  L'int√©gration avec JUnit est simple et transparente.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage :**  Il faut un certain temps pour ma√Ætriser l'API d'ArchUnit et d√©finir des r√®gles complexes.\n* **Maintenance des r√®gles :**  La maintenance des r√®gles architecturales peut devenir co√ªteuse √† mesure que le projet √©volue.\n* **Potentiellement intrusif :** L'ajout de r√®gles ArchUnit peut n√©cessiter des modifications dans le code existant.  \n* **Peut ralentir les tests :**  L'ex√©cution des r√®gles ArchUnit peut ajouter du temps aux tests.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\nJUnit, Architecture logicielle,  tests unitaires,  int√©gration continue.\n"
    },
    {
        "id": "6cdb72d6-e752-4997-ae64-c08258bc90bf",
        "title": "Biscuit authentication authorization token",
        "description": "---\nid: 3bf7e0ea-40ce-415e-8c21-bb28171de774\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nUn Biscuit est un jeton d'authentification et d'autorisation d√©centralis√©, cryptographiquement s√©curis√© et v√©rifiable hors ligne.  Il permet de v√©rifier les autorisations d'un utilisateur sans avoir besoin d'une connexion r√©seau constante √† un serveur central.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nUn Biscuit est un petit fichier de donn√©es contenant des affirmations sur l'identit√© et les autorisations d'un utilisateur.  Ces affirmations sont chiffr√©es et v√©rifi√©es √† l'aide de la cryptographie.  Contrairement aux syst√®mes centralis√©s qui reposent sur un serveur pour v√©rifier les jetons, les Biscuits peuvent √™tre v√©rifi√©s localement par l'application cliente.\n\nUn Biscuit est cr√©√© par un serveur autoris√© (\"issuer\").  Ce serveur inclut des affirmations initiales dans le Biscuit.  Par la suite, des parties tierces peuvent ajouter de nouvelles affirmations au Biscuit, mais seulement si elles ont re√ßu l'autorisation de le faire par le serveur initial.  Ces nouvelles affirmations sont ajout√©es sous forme de \"preuves\" qui sont attach√©es au Biscuit et v√©rifi√©es ult√©rieurement.\n\nLa v√©rification se fait gr√¢ce √† une signature cryptographique int√©gr√©e au Biscuit.  L'application cliente poss√®de une copie de la cl√© publique du serveur qui a √©mis le Biscuit.  Elle peut ainsi v√©rifier l'int√©grit√© et l'authenticit√© du Biscuit, ainsi que la validit√© des affirmations qu'il contient.\n\n**Fonctionnement interne (simplifi√©):**\n\n1. **Cr√©ation:** Le serveur g√©n√®re un Biscuit avec des affirmations initiales (par exemple, \"l'utilisateur est authentifi√©\", \"l'utilisateur a le r√¥le d'administrateur\").\n2. **Extension (optionnel):** Une autre entit√© (avec autorisation) peut ajouter de nouvelles affirmations au Biscuit (par exemple, \"l'utilisateur a acc√®s √† la ressource X\").  Cela se fait par la g√©n√©ration d'une preuve qui est attach√©e au Biscuit.\n3. **V√©rification:** L'application cliente v√©rifie le Biscuit en utilisant la cl√© publique du serveur. Cette v√©rification confirme que le Biscuit n'a pas √©t√© alt√©r√© et que toutes les affirmations sont valides.\n\n**Exemple (conceptuel):**\n\nImaginez une application de partage de fichiers.  Un Biscuit pourrait contenir l'affirmation \"utilisateur A a acc√®s au fichier X\".  Ce Biscuit serait v√©rifi√© localement par l'application avant de permettre l'acc√®s au fichier.  L'ajout d'une nouvelle affirmation, comme \"utilisateur B peut lire le fichier X\", pourrait se faire par une entit√© autoris√©e, ajoutant une preuve au Biscuit existant.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **S√©curit√©:** La cryptographie assure l'int√©grit√© et l'authenticit√© du Biscuit, emp√™chant la falsification.\n- **D√©centralisation:** La v√©rification hors ligne r√©duit la d√©pendance √† un serveur central, am√©liorant la r√©silience et la performance.\n- **Privacy:**  Certaines impl√©mentations permettent de limiter les informations expos√©es lors de la v√©rification.\n- **Flexibilit√©:**  L'ajout de preuves permet une gestion fine des autorisations et une adaptation √† diff√©rents contextes.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Complexit√©:** La mise en ≈ìuvre d'un syst√®me de Biscuits peut √™tre complexe, n√©cessitant une bonne compr√©hension de la cryptographie.\n- **Taille des Biscuits:** Les Biscuits peuvent prendre un certain espace de stockage, bien que leur taille reste g√©n√©ralement raisonnable.\n- **Gestion des cl√©s:** La s√©curit√© du syst√®me d√©pend de la gestion s√©curis√©e des cl√©s publiques et priv√©es.\n- **Adoption limit√©e:**  La technologie des Biscuits est relativement nouvelle et son adoption n'est pas encore aussi r√©pandue que d'autres technologies d'authentification.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "21ec1638-0060-4a17-9b23-f21e76551e13",
        "title": "Blocking Queue (Java)",
        "description": "---\nid: be601ded-fbb0-4d7d-82ba-aed2c27ceaa3\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nUne `BlockingQueue` en Java est une interface qui repr√©sente une file d'attente thread-safe.  Elle bloque les op√©rations d'insertion (ajout d'√©l√©ments) si la file est pleine et les op√©rations de suppression (retrait d'√©l√©ments) si elle est vide.  Cela permet une synchronisation efficace entre les threads producteurs et consommateurs.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nUne `BlockingQueue` est une interface dans le package `java.util.concurrent`.  Elle √©tend l'interface `Queue` et ajoute des m√©thodes sp√©cifiques pour g√©rer le blocage des op√©rations d'ajout et de suppression.  Lorsque la file est pleine, l'insertion d'un nouvel √©l√©ment bloquera le thread producteur jusqu'√† ce qu'un √©l√©ment soit retir√©.  Inversement, si la file est vide, la tentative de suppression bloquera le thread consommateur jusqu'√† ce qu'un √©l√©ment soit ajout√©.\n\nPlusieurs impl√©mentations de `BlockingQueue` existent, chacune avec des caract√©ristiques sp√©cifiques :\n\n* **`ArrayBlockingQueue`**:  Impl√©mente une file d'attente born√©e utilisant un tableau.  Sa taille est fixe lors de la cr√©ation.\n* **`LinkedBlockingQueue`**: Impl√©mente une file d'attente born√©e ou non born√©e (par d√©faut non born√©e) utilisant une liste cha√Æn√©e.  Offre une meilleure performance pour les insertions et suppressions fr√©quentes.\n* **`PriorityBlockingQueue`**:  Impl√©mente une file d'attente non born√©e qui ordonne les √©l√©ments selon leur priorit√© (d√©finie par l'impl√©mentation de `Comparable` ou un `Comparator`).\n* **`DelayQueue`**: Une file d'attente non born√©e qui maintient des √©l√©ments qui ne sont accessibles que lorsqu'un d√©lai sp√©cifi√© est √©coul√©.\n* **`SynchronousQueue`**: Une file d'attente particuli√®re o√π chaque insertion doit attendre une suppression correspondante, et vice-versa.  Elle n'a pas de capacit√© interne.\n\n**Exemple avec `ArrayBlockingQueue`:**\n\n```java\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class BlockingQueueExample {\n\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(5); // File d'attente de taille 5\n\n        // Thread producteur\n        Thread producer = new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    queue.put(i); // Bloquera si la queue est pleine\n                    System.out.println(\"Producer added: \" + i);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        // Thread consommateur\n        Thread consumer = new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    int value = queue.take(); // Bloquera si la queue est vide\n                    System.out.println(\"Consumer consumed: \" + value);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        producer.start();\n        consumer.start();\n    }\n}\n```\n\nCet exemple montre comment les threads producteur et consommateur interagissent avec la `BlockingQueue`. Les m√©thodes `put()` et `take()` g√®rent le blocage et la synchronisation automatiquement.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Thread-safety:**  G√®re la concurrence entre les threads de mani√®re s√©curis√©e et efficace, √©liminant le besoin de m√©canismes de synchronisation manuels.\n* **Blocage automatique:**  Simplifie la gestion de la concurrence en bloquant automatiquement les threads producteurs et consommateurs lorsque n√©cessaire.\n* **Flexibilit√©:**  Diff√©rentes impl√©mentations permettent de choisir la structure de donn√©es la plus appropri√©e √† l'application.\n* **Performance:** Les impl√©mentations optimis√©es offrent une bonne performance dans de nombreux cas d'utilisation.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© potentielle:**  Le choix de l'impl√©mentation appropri√©e peut n√©cessiter une compr√©hension des diff√©rentes caract√©ristiques de chaque type de `BlockingQueue`.\n* **Blocage:**  Bien que le blocage soit une fonctionnalit√© importante, il peut causer des probl√®mes si mal g√©r√©, notamment des deadlocks.\n* **Gestion des exceptions:** Il faut g√©rer les `InterruptedException` lors de l'utilisation des m√©thodes de blocage.\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "ac35e30e-23da-4355-8326-80e45caf7521",
        "title": "Compose-go",
        "description": "---\nid: b977a102-d94a-4a34-97a4-4bf34427ab50\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nCompose-go est une biblioth√®que Go qui simplifie l'interaction avec Docker Compose.  Elle permet de programmer la cr√©ation, la mise √† jour et la destruction de services et de r√©seaux d√©finis dans des fichiers `docker-compose.yml`.  Elle offre une interface plus flexible et programmable que l'utilisation directe de la commande `docker-compose`.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nCompose-go fournit des fonctions Go pour interagir avec l'API Docker Compose.  Au lieu d'utiliser des commandes shell, on peut utiliser le code Go pour effectuer des op√©rations sur les fichiers `docker-compose.yml`.  Cela permet d'int√©grer la gestion de Docker Compose dans des scripts et des applications Go, offrant un meilleur contr√¥le et une meilleure automatisation.  La biblioth√®que g√®re la communication avec le daemon Docker, l'analyse des fichiers `docker-compose.yml`, et la gestion des erreurs.\n\nVoici un exemple simple pour d√©marrer un projet Docker Compose avec Compose-go:\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/compose-spec/compose-go/cli\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tproject, err := cli.ProjectFromOptions(ctx, &cli.ProjectOptions{\n\t\tConfigFiles: []string{\"docker-compose.yml\"}, // Chemin vers votre fichier docker-compose.yml\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error loading project: %v\", err)\n\t}\n\n\terr = project.Up(ctx, cli.UpOptions{\n\t\t// Ajoutez des options ici si n√©cessaire\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error starting project: %v\", err)\n\t}\n\n\tfmt.Println(\"Project started successfully!\")\n\n\t// ... autres interactions avec le projet ...\n\n\t// Arr√™ter le projet √† la fin\n\terr = project.Down(ctx, cli.DownOptions{})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error stopping project: %v\", err)\n\t}\n\tfmt.Println(\"Project stopped successfully!\")\n}\n\n```\n\nCe code charge un fichier `docker-compose.yml`, d√©marre les services d√©finis et les arr√™te ensuite.  Compose-go offre des fonctions pour effectuer d'autres op√©rations, comme `project.Create`, `project.Build`, `project.Start`, `project.Stop`, `project.Restart`, etc.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Automatisation:**  Permet d'int√©grer la gestion de Docker Compose dans des pipelines CI/CD et des scripts Go.\n- **Programmation:** Offre un contr√¥le pr√©cis sur les op√©rations Docker Compose.\n- **Flexibilit√©:**  Permet de personnaliser le comportement de Docker Compose en utilisant le code Go.\n- **Testabilit√©:** Facilite l'√©criture de tests unitaires pour les interactions avec Docker Compose.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Courbe d'apprentissage:**  N√©cessite des connaissances en Go et en Docker Compose.\n- **D√©pendances:**  Ajoute une d√©pendance suppl√©mentaire √† votre projet.\n- **Complexit√©:**  Pour des cas d'utilisation complexes, le code Go peut devenir plus long et difficile √† maintenir qu'une simple commande `docker-compose`.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "a87947c1-5cf5-42e3-9e3f-99787a1a2a04",
        "title": "DSFR (Design System France)",
        "description": "---\nid: 885faf14-e488-4285-bd84-cb9ec7f2f730\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nDSFR (Design System France) est une biblioth√®que de composants d'interface utilisateur et un ensemble de guidelines de design pour la cr√©ation d'applications web et mobiles conformes aux standards d'accessibilit√© fran√ßais.  Elle offre des composants pr√™ts √† l'emploi et des styles coh√©rents pour assurer une exp√©rience utilisateur uniforme et accessible.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nDSFR vise √† standardiser la conception et le d√©veloppement d'interfaces num√©riques pour les services publics fran√ßais.  Il fournit une collection de composants r√©utilisables (boutons, formulaires, menus, etc.)  avec des styles pr√©d√©finis, assurant une coh√©rence visuelle et une meilleure exp√©rience utilisateur.  L'objectif principal est de faciliter le d√©veloppement d'applications accessibles, conformes aux exigences du RGAA (R√©f√©rentiel G√©n√©ral d'Accessibilit√© pour les Administrations).  DSFR propose des impl√©mentations pour divers frameworks (React, Angular, Vue.js, etc.), permettant aux d√©veloppeurs d'int√©grer facilement ces composants dans leurs projets.  Ces impl√©mentations souvent appel√©s \"surcouches\" fournissent des composants sp√©cifiques √† chaque framework mais conservent l'apparence visuelle et l'accessibilit√© d√©finies par le DSFR.\n\nL'utilisation de DSFR permet :\n\n* **Coh√©rence visuelle:**  Toutes les applications utilisant DSFR auront une apparence coh√©rente, am√©liorant l'exp√©rience utilisateur et la reconnaissance de la marque.\n* **Accessibilit√©:**  Les composants sont con√ßus pour respecter les exigences du RGAA, garantissant une accessibilit√© optimale pour les personnes handicap√©es.\n* **Efficacit√© de d√©veloppement:**  R√©utilisation des composants pr√©-construits et styl√©s, acc√©l√©rant le processus de d√©veloppement.\n* **Maintenance simplifi√©e:**  Les mises √† jour et corrections de bugs sont appliqu√©es √† l'ensemble des applications utilisant DSFR.\n\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Accessibilit√©:**  Respect des standards RGAA, essentiel pour les services publics.\n* **Coh√©rence:**  Assure une exp√©rience utilisateur uniforme sur l'ensemble des applications gouvernementales.\n* **R√©utilisabilit√©:**  Composants pr√™ts √† l'emploi, acc√©l√©rant le d√©veloppement.\n* **Support multiple frameworks:**  Disponibilit√© de surcouches pour diff√©rents frameworks populaires.\n* **Documentation:**  Documentation g√©n√©ralement compl√®te et bien maintenue (bien que la qualit√© puisse varier selon les versions et les frameworks).\n\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© d'int√©gration:**  L'int√©gration initiale peut parfois √™tre complexe, n√©cessitant une compr√©hension du fonctionnement du DSFR et de sa surcouche pour le framework utilis√©.\n* **D√©pendance:**  L'application est d√©pendante du DSFR et de ses mises √† jour.  Les changements dans le DSFR peuvent n√©cessiter des adaptations dans les applications qui l'utilisent.\n* **Personnalisation limit√©e:**  Bien que la personnalisation soit possible, elle peut √™tre contraignante pour s'assurer que l'accessibilit√© et la coh√©rence restent intactes.  Un √©cart trop important par rapport aux styles standards peut compromettre l'exp√©rience utilisateur et l'accessibilit√©.\n* **Taille du bundle:** L'inclusion de tous les composants DSFR peut augmenter la taille du bundle final de l'application, impactant le temps de chargement.  Une s√©lection judicieuse des composants est donc n√©cessaire.\n\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "27dc5b58-d4a7-4402-99f8-edf4d383f78c",
        "title": "Doppler",
        "description": "---\nid: 03bc89d4-ca8c-4258-a7fe-ae938a70b0cc\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nDoppler est un gestionnaire de secrets (secret manager) en tant que service (SaaS) qui permet de stocker et de g√©rer en toute s√©curit√© les variables d'environnement et autres informations sensibles utilis√©es par les applications.  Il simplifie la gestion des secrets pour les √©quipes de d√©veloppement et d'exploitation.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nDoppler fournit une interface centralis√©e pour stocker et g√©rer les secrets, √©vitant ainsi de les coder en dur dans les applications ou de les stocker dans des fichiers non s√©curis√©s.  Il fonctionne en permettant aux d√©veloppeurs de d√©finir des \"configurations\" qui contiennent des cl√©s et des valeurs, y compris les secrets. Ces configurations sont ensuite accessibles par les applications via une API ou des outils en ligne de commande.  Doppler se charge de chiffrer et de prot√©ger ces secrets, en utilisant des techniques de chiffrement robustes.\n\nLes principales fonctionnalit√©s incluent :\n\n* **Gestion des variables d'environnement:**  Doppler simplifie la gestion des variables d'environnement sensibles, comme des cl√©s API, des mots de passe de base de donn√©es, et des jetons d'authentification.\n* **Contr√¥le d'acc√®s:**  Il permet de g√©rer les autorisations d'acc√®s aux secrets, permettant de limiter l'acc√®s aux personnes autoris√©es.\n* **Int√©gration CI/CD:** Doppler s'int√®gre facilement avec les pipelines CI/CD, permettant d'injecter automatiquement les secrets dans les environnements de d√©ploiement.\n* **Audit trails:**  Il fournit un historique complet des modifications apport√©es aux secrets, facilitant le suivi et la v√©rification.\n* **Chiffrement:** Les donn√©es sont chiffr√©es √† la fois en transit et au repos.\n* **Support de multiples environnements:**  Permet de g√©rer des configurations s√©par√©es pour diff√©rents environnements (d√©veloppement, test, production).\n\n\n**Exemple (concept):**  Imaginons une application qui n√©cessite une cl√© API pour acc√©der √† un service tiers.  Au lieu de coder en dur cette cl√© API dans le code source, le d√©veloppeur peut la stocker dans Doppler et la r√©cup√©rer au moment de l'ex√©cution de l'application.\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **S√©curit√© am√©lior√©e:**  Le chiffrement et le contr√¥le d'acc√®s robustes garantissent la s√©curit√© des secrets.\n* **Simplicit√© d'utilisation:**  L'interface utilisateur est intuitive et facile √† utiliser, m√™me pour les d√©veloppeurs peu exp√©riment√©s.\n* **Int√©gration facile:**  L'int√©gration avec les pipelines CI/CD simplifie le processus de d√©ploiement.\n* **Collaboration facilit√©e:**  Plusieurs membres de l'√©quipe peuvent acc√©der et g√©rer les secrets de mani√®re contr√¥l√©e.\n* **Auditabilit√©:**  L'historique des modifications permet de suivre facilement les changements.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **D√©pendance √† un service tiers:**  Votre application d√©pend du service Doppler, ce qui introduit un point de d√©faillance potentiel.\n* **Co√ªt:**  L'utilisation de Doppler implique des co√ªts, selon le plan d'abonnement choisi.\n* **Complexit√© pour des configurations tr√®s complexes:**  Pour des environnements avec une multitude de configurations interd√©pendantes, la gestion pourrait devenir complexe.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "613183f4-d4b5-41e0-ab01-8635dd8faa42",
        "title": "Eclipse Mosquitto",
        "description": "---\nid: 34fc0c9b-c544-45c5-bd61-a2199ddf11d0\n---\n# Rapidement c'est quoi‚ùì\n\nEclipse Mosquitto est un serveur MQTT l√©ger, open-source et performant, permettant la publication et la souscription √† des messages. Il est r√©put√© pour sa robustesse et sa facilit√© de d√©ploiement.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nEclipse Mosquitto est une impl√©mentation du protocole MQTT (Message Queuing Telemetry Transport), un protocole de communication machine-√†-machine (M2M) l√©ger et bas√© sur le publish/subscribe.  Il sert de courtier (broker) centralis√©, permettant √† diff√©rents dispositifs (capteurs, actionneurs, applications) d'√©changer des messages de mani√®re asynchrone.  Mosquitto est con√ßu pour √™tre performant, scalable et fiable, capable de g√©rer un grand nombre de clients connect√©s simultan√©ment et un volume important de messages.  Il supporte plusieurs fonctionnalit√©s cl√©s, notamment :\n\n* **Authentification et autorisation:**  Mosquitto permet de contr√¥ler l'acc√®s aux ressources via diff√©rents m√©canismes d'authentification (mot de passe, certificats X.509) et d'autorisation (ACL - Access Control Lists).\n* **QoS (Quality of Service):**  Il g√®re diff√©rents niveaux de qualit√© de service pour garantir la livraison des messages (QoS 0, 1 et 2).\n* **R√©tention de messages:**  Les messages peuvent √™tre retenus par le broker, m√™me si aucun client n'est abonn√©, assurant ainsi que les nouveaux abonn√©s re√ßoivent les messages les plus r√©cents.\n* **Will messages:**  Permet de sp√©cifier un message √† publier lorsque le client se d√©connecte inopin√©ment.\n* **WebSockets:**  Mosquitto supporte les connexions via WebSockets, permettant une int√©gration plus facile avec les applications web.\n* **TLS/SSL:**  Le chiffrement TLS/SSL est support√© pour s√©curiser les communications.\n\nMosquitto est disponible sous forme de binaires pr√©compil√©s pour plusieurs syst√®mes d'exploitation ou en code source pour une compilation personnalis√©e. Sa configuration se fait via un fichier de configuration simple et lisible.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et gratuit:**  Mosquitto est sous licence EPL, ce qui permet une utilisation libre et gratuite, m√™me pour des applications commerciales.\n* **L√©ger et performant:**  Il consomme peu de ressources syst√®me et est capable de g√©rer un grand nombre de clients et de messages.\n* **Facile √† installer et configurer:**  L'installation et la configuration sont relativement simples, m√™me pour les utilisateurs novices.\n* **Documentation compl√®te et active communaut√©:**  Mosquitto b√©n√©ficie d'une documentation compl√®te et d'une communaut√© active et r√©active.\n* **Largement adopt√© et test√©:**  Son utilisation r√©pandue en fait un choix fiable et √©prouv√©.\n* **Support multiplateforme:**  Mosquitto est disponible sur de nombreuses plateformes, facilitant le d√©ploiement sur diff√©rents environnements.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Interface utilisateur limit√©e:**  Mosquitto est principalement un serveur en ligne de commande, ne disposant pas d'interface graphique intuitive pour la gestion.  Des outils tiers peuvent √™tre n√©cessaires pour une gestion plus conviviale.\n* **Fonctionnalit√©s avanc√©es potentiellement complexes √† configurer:**  Certaines fonctionnalit√©s avanc√©es (authentification, QoS, ACL) peuvent n√©cessiter une configuration plus complexe.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "5a3bca99-abe2-4aa0-90de-c31092299dd3",
        "title": "Ember.js",
        "description": "---\nid: cfe3dff1-dabd-489c-95cd-b4bc688004e6\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nEmber.js est un framework JavaScript open-source, ambitieux et mature, con√ßu pour construire des applications web ambitieuses,  scalables et maintenables. Il privil√©gie une architecture conventionnelle sur la configuration, offrant une structure claire et pr√©dictible pour le d√©veloppement.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nEmber.js fournit une structure compl√®te pour d√©velopper des applications web c√¥t√© client, s'appuyant sur le mod√®le MVC (Model-View-Controller) et int√©grant des fonctionnalit√©s avanc√©es telles que :\n\n* **Routage:**  Un syst√®me de routage puissant et d√©claratif permettant de g√©rer facilement les URLs et la navigation au sein de l'application.  Il permet de cr√©er des URLs propres et SEO-friendly.\n\n* **Gestion des donn√©es:**  Ember Data est un ORM (Object-Relational Mapper) int√©gr√© qui facilite l'interaction avec des APIs RESTful ou autres sources de donn√©es. Il g√®re la mise en cache, les requ√™tes et les relations entre les donn√©es.\n\n* **Composants:**  Ember utilise un syst√®me de composants r√©utilisables et encapsul√©s, facilitant l'organisation du code et la maintenance.  Ces composants g√®rent leur propre logique,  template et donn√©es.\n\n* **Templates:**  Les templates Ember utilisent Handlebars, un moteur de templating facile √† utiliser et puissant. Il permet d'int√©grer facilement la logique et les donn√©es dans l'interface utilisateur.\n\n* **Convention over Configuration:**  Ember privil√©gie les conventions, r√©duisant le besoin de configuration manuelle et am√©liorant la coh√©rence du code. Cela rend le d√©veloppement plus rapide et plus pr√©visible.\n\n* **Gestion du cycle de vie des composants:**  Ember g√®re automatiquement le cycle de vie des composants (cr√©ation, mise √† jour, destruction), simplifiant la gestion des √©tats et des √©v√©nements.\n\n\n**Exemple de code (Cr√©ation d'un composant simple):**\n\n```javascript\n// app/components/welcome-message.js\nimport Component from '@glimmer/component';\n\nexport default class WelcomeMessageComponent extends Component {\n  message = \"Bienvenue sur mon application Ember!\";\n}\n\n// app/templates/components/welcome-message.hbs\n<p>{{this.message}}</p>\n```\n\nCe code d√©finit un composant simple affichant un message.  Il est ensuite utilis√© dans les templates de l'application.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Productivit√©:**  L'architecture conventionnelle et les outils int√©gr√©s am√©liorent la productivit√© du d√©veloppeur.\n* **Maintenabilit√©:**  Le code est plus organis√© et facile √† maintenir gr√¢ce √† la structure impos√©e par le framework.\n* **Scalabilit√©:**  Ember est con√ßu pour g√©rer des applications complexes et de grande envergure.\n* **Communaut√© active:**  Une communaut√© forte et active fournit un support et des ressources abondantes.\n* **Tests int√©gr√©s:**  Ember encourage les tests unitaires et d'int√©gration, facilitant la qualit√© du code.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:**  Ember poss√®de une courbe d'apprentissage plus raide que certains frameworks plus simples.\n* **Taille du bundle:**  Les applications Ember peuvent g√©n√©rer des bundles JavaScript importants, impactant le temps de chargement initial.  Des techniques d'optimisation sont n√©cessaires.\n* **Moins flexible que React ou Vue.js:**  La forte conventionnalit√©, bien que b√©n√©fique, peut parfois limiter la flexibilit√© pour des cas d'utilisation tr√®s sp√©cifiques.\n* **Difficult√©s pour les petites applications:**  Pour les applications tr√®s petites et simples, Ember peut √™tre un choix surdimensionn√©.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "8b0d746d-bce7-4c53-8aac-337a36c628f8",
        "title": "Exherbo",
        "description": "---\nid: 50d36a14-2216-4608-bf2e-3ec2ef4d7bca\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nExherbo est un outil de gestion de configurations open-source pour les syst√®mes Linux. Il utilise un langage d√©claratif pour d√©crire l'√©tat souhait√© du syst√®me, puis g√®re les modifications n√©cessaires pour atteindre cet √©tat.  Il se diff√©rencie des autres outils par sa simplicit√©, sa robustesse et sa focalisation sur l'id√©mpotence.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nExherbo utilise un fichier de configuration simple, g√©n√©ralement √©crit en YAML, pour d√©finir l'√©tat souhait√© du syst√®me. Ce fichier d√©crit les paquets logiciels √† installer, les services √† activer, les fichiers de configuration √† modifier, etc.  Exherbo compare ensuite l'√©tat actuel du syst√®me avec l'√©tat d√©crit dans le fichier de configuration et applique les modifications n√©cessaires pour les faire correspondre.  Ce processus est *id√©mpotent*, ce qui signifie qu'ex√©cuter la m√™me commande plusieurs fois aura le m√™me effet que de l'ex√©cuter une seule fois.  Il ne fera pas de changements si le syst√®me est d√©j√† dans l'√©tat souhait√©.\n\nExherbo est bas√© sur une approche d√©clarative, ce qui le rend plus facile √† comprendre et √† maintenir que les approches imp√©ratives.  On d√©crit *ce qu'on veut*, et Exherbo s'occupe de *comment le faire*.  Ceci simplifie la gestion de configurations complexes et permet une meilleure reproductibilit√© des environnements.\n\n**Exemple de fichier de configuration (YAML):**\n\n```yaml\npackages:\n  - vim\n  - git\n\nservices:\n  - sshd\n\nfiles:\n  - source: /etc/exherbo/ssh_config.sample\n    destination: /etc/ssh/sshd_config\n```\n\nCe fichier indique qu'Exherbo doit installer les paquets `vim` et `git`, activer le service `sshd`, et copier le fichier `/etc/exherbo/ssh_config.sample` vers `/etc/ssh/sshd_config`.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Id√©mpotence:**  La plus grande force d'Exherbo.  On peut l'ex√©cuter plusieurs fois sans risque de modifications ind√©sirables.\n- **Simplicit√©:** Le langage de configuration est clair et facile √† apprendre.\n- **Robustesse:**  Exherbo est con√ßu pour √™tre fiable et g√©rer les erreurs de mani√®re robuste.\n- **Open-source:**  Librement disponible et auditable.\n- **Focalisation:**  Contrairement √† certains outils plus vastes, Exherbo se concentre sur la gestion de configurations syst√®me, ce qui le rend efficace et sp√©cialis√©.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Communaut√© plus petite:**  Compar√© √† des outils comme Ansible ou Puppet, Exherbo poss√®de une communaut√© plus restreinte, ce qui peut rendre la recherche de solutions √† des probl√®mes sp√©cifiques plus difficile.\n- **Moins de fonctionnalit√©s avanc√©es:**  Exherbo ne propose pas toutes les fonctionnalit√©s avanc√©es que l'on trouve dans des outils plus complets.  Par exemple, il n'int√®gre pas nativement la gestion de configurations √† distance.\n- **Documentation limit√©e (potentiellement):** La documentation pourrait √™tre plus compl√®te pour certains aspects.  (Ceci d√©pend de l'√©tat actuel du projet).\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "cbf62fa1-f5fb-481f-b040-5e0282fe3793",
        "title": "Gestion des artefacts",
        "description": "---\nid: c71d6e3d-3d47-4940-96b9-6a8aaf0e2a53\n---\n# Rapidement c'est quoi‚ùì\n\nLa gestion des artefacts est le processus de stockage, de r√©cup√©ration et de gestion de fichiers produits lors du cycle de vie du d√©veloppement logiciel.  Cela inclut le code source compil√©, les biblioth√®ques, les packages d'installation, etc.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLa gestion des artefacts est une partie cruciale de la gestion de configuration logicielle et de l'int√©gration continue/livraison continue (CI/CD). Elle assure le suivi des versions de tous les composants logiciels, permettant une tra√ßabilit√© compl√®te et facilitant la reconstruction et le d√©ploiement de logiciels √† partir d'artefacts archiv√©s.  Un artefact est n'importe quel produit tangible du processus de d√©veloppement,  comme un fichier JAR, un WAR, un fichier ex√©cutable, un script d'installation, ou m√™me un document de sp√©cification.\n\nUn syst√®me de gestion d'artefacts efficace doit fournir des fonctionnalit√©s telles que :\n\n* **Stockage:**  Un d√©p√¥t centralis√© pour stocker les artefacts, souvent avec versioning (contr√¥le de version).  Des solutions comme les buckets Amazon S3, des r√©f√©rentiels Maven ou npm, ou des solutions d√©di√©es comme JFrog Artifactory ou Nexus sont couramment utilis√©es.\n* **R√©cup√©ration:**  M√©canismes pour r√©cup√©rer facilement les versions sp√©cifiques d'artefacts.\n* **M√©tadonn√©es:**  Stockage d'informations sur les artefacts (date de cr√©ation, version, auteur, d√©pendances, etc.) pour une meilleure organisation et recherche.\n* **Int√©gration:**  Int√©gration transparente avec les outils CI/CD pour automatiser le d√©ploiement et la gestion des versions.\n* **S√©curit√©:** Contr√¥le d'acc√®s et authentification pour garantir l'int√©grit√© et la s√©curit√© des artefacts.\n\n\nL'exemple `maven-s3-wagon` mentionn√© utilise les buckets S3 d'Amazon comme d√©p√¥t pour les artefacts Maven, d√©montrant comment un syst√®me de stockage cloud peut √™tre utilis√© pour la gestion d'artefacts.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Tra√ßabilit√© am√©lior√©e:**  Permet de suivre facilement l'√©volution du logiciel et de retrouver des versions sp√©cifiques.\n* **R√©duction des erreurs:**  Minimise les risques li√©s √† l'utilisation de versions incorrectes ou incompatibles des composants.\n* **Automatisation:**  Int√©gration facile avec les pipelines CI/CD pour automatiser le processus de construction, de test et de d√©ploiement.\n* **Collaboration am√©lior√©e:**  Facilite le partage des artefacts entre les membres de l'√©quipe de d√©veloppement.\n* **Scalabilit√©:**  Les solutions modernes de gestion d'artefacts peuvent facilement s'adapter √† des projets de grande envergure.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:**  La mise en place et la gestion d'un syst√®me de gestion d'artefacts peuvent √™tre complexes, surtout pour les petits projets.\n* **Co√ªt:**  Certaines solutions (comme les services cloud) peuvent engendrer des co√ªts importants en fonction de l'utilisation.\n* **Surcharge:**  Une mauvaise gestion peut conduire √† une accumulation d'artefacts inutiles, rendant le syst√®me difficile √† g√©rer.\n* **D√©pendances:**  Une d√©pendance forte √† un syst√®me de gestion d'artefacts peut cr√©er un point de d√©faillance unique.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "25a68590-b3ad-459f-8628-f0d9b608d2ce",
        "title": "Gotify",
        "description": "---\nid: 1f7e13b1-9b4b-476d-9712-0229556402bd\n---\n# Gotify: Rapidement c'est quoi‚ùì\n\nUn serveur open-source l√©ger et simple pour envoyer et recevoir des notifications.  Il utilise une API RESTful pour une int√©gration facile avec d'autres applications et services.\n\n---\n# Gotify: Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nGotify est un serveur de notification auto-h√©bergeable, con√ßu pour √™tre simple √† utiliser et √† d√©ployer.  Il fonctionne en recevant des messages de notification via son API REST, puis en les redistribuant aux clients connect√©s.  Ces clients peuvent √™tre des applications mobiles (Android, iOS), des applications de bureau (Windows, macOS, Linux), ou m√™me des scripts personnalis√©s.  Gotify supporte plusieurs m√©thodes d'authentification, incluant des cl√©s API et une authentification par mot de passe, pour s√©curiser l'envoi des notifications.  Le serveur lui-m√™me est tr√®s l√©ger, n√©cessitant peu de ressources et pouvant √™tre facilement d√©ploy√© sur un Raspberry Pi ou un serveur cloud.  Il est √©crit en Go, d'o√π son nom, et propose une interface web simple pour la gestion des utilisateurs, des applications et des messages.  Les notifications peuvent √™tre personnalis√©es avec des titres, des messages, et des priorit√©s.  Gotify ne conserve pas d'historique des notifications par d√©faut, mais des solutions existent pour la journalisation externe si n√©cessaire.\n\n---\n# Gotify: Qu'est ce qui est top ? üëç\n\n* **Simplicit√©:**  Installation, configuration et utilisation extr√™mement faciles.\n* **Flexibilit√©:** API REST compl√®te permettant l'int√©gration avec une grande vari√©t√© d'applications et de services.\n* **L√©ger:**  N√©cessite peu de ressources serveur.\n* **Open-source:**  Code source disponible, permettant une analyse et une adaptation du logiciel.\n* **Auto-h√©bergeable:** Contr√¥le total sur vos donn√©es et votre infrastructure.\n* **Multi-plateforme:** Clients disponibles pour de nombreux syst√®mes d'exploitation.\n\n---\n# Gotify: Qu'est ce qui est pas ouf ? üëé\n\n* **Fonctionnalit√©s limit√©es:**  Par rapport √† des solutions plus compl√®tes, Gotify manque de certaines fonctionnalit√©s avanc√©es comme la planification des notifications ou une int√©gration native avec des services sp√©cifiques.\n* **Gestion de l'historique limit√©e:**  Pas de stockage d'historique des notifications int√©gr√© par d√©faut.  N√©cessite une solution externe pour cette fonctionnalit√©.\n* **D√©pendance √† un serveur:**  N√©cessite le maintien d'un serveur actif pour fonctionner.\n\n\n---\n# Gotify: A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "bf22a8e7-bac3-452e-8c34-a26fdb615473",
        "title": "Gulp",
        "description": "---\nid: 17e65120-21b5-485c-99e6-c77162ee080c\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nGulp est un outil open-source bas√© sur Node.js servant √† automatiser des t√¢ches de d√©veloppement web.  Il permet de simplifier et d'acc√©l√©rer des processus r√©p√©titifs comme la minification de code, la compilation de pr√©processeurs CSS (Sass, Less), la concat√©nation de fichiers, et le rafra√Æchissement automatique du navigateur.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nGulp utilise un syst√®me de flux (streams) pour traiter les fichiers.  Un flux est un ensemble de donn√©es qui traverse une s√©rie de transformations.  Au lieu de lire et d'√©crire des fichiers entiers √† chaque √©tape, Gulp travaille sur des flux, ce qui le rend beaucoup plus performant que les outils concurrents qui traitent les fichiers de mani√®re plus lin√©aire.  L'utilisateur d√©finit une s√©rie de t√¢ches (tasks) dans un fichier `gulpfile.js`. Chaque t√¢che utilise des plugins pour ex√©cuter des op√©rations sp√©cifiques sur les fichiers qui la traversent.\n\n**Exemple concret : Minification de fichiers CSS et JS**\n\nPour minifier les fichiers CSS et JS d'un projet, on pourrait √©crire un `gulpfile.js` comme ceci :\n\n```javascript\nconst gulp = require('gulp');\nconst cssmin = require('gulp-cssmin');\nconst uglify = require('gulp-uglify');\n\n// T√¢che pour minifier les fichiers CSS\ngulp.task('minify-css', () => {\n  return gulp.src('src/css/*.css')\n    .pipe(cssmin())\n    .pipe(gulp.dest('dist/css'));\n});\n\n// T√¢che pour minifier les fichiers JS\ngulp.task('minify-js', () => {\n  return gulp.src('src/js/*.js')\n    .pipe(uglify())\n    .pipe(gulp.dest('dist/js'));\n});\n\n// T√¢che par d√©faut qui ex√©cute les deux t√¢ches pr√©c√©dentes\ngulp.task('default', gulp.parallel('minify-css', 'minify-js'));\n```\n\nCe code utilise les plugins `gulp-cssmin` et `gulp-uglify` pour minifier respectivement les fichiers CSS et JS.  La commande `gulp` dans le terminal ex√©cuterait la t√¢che `default`, qui √† son tour ex√©cuterait `minify-css` et `minify-js`.\n\n**Fonctionnement interne:** Gulp utilise Node.js et le module `vinyl-fs` pour g√©rer les fichiers.  Les plugins Gulp sont des modules Node.js qui interagissent avec les flux de donn√©es et effectuent les transformations souhait√©es.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Performance:** L'utilisation des flux rend Gulp tr√®s rapide et efficace, surtout sur de grands projets.\n* **Modularit√©:** Le syst√®me de plugins permet une grande extensibilit√© et la possibilit√© d'utiliser des outils tiers.\n* **Lisibilit√©:** Le code des `gulpfile.js` est g√©n√©ralement plus clair et plus facile √† maintenir que celui d'autres outils similaires.\n* **Declaratif:** La d√©finition des t√¢ches est simple et intuitive.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** Bien que la syntaxe soit simple, la compr√©hension du syst√®me de flux et l'utilisation des plugins peut n√©cessiter un temps d'apprentissage.\n* **D√©pendances:** Gulp repose sur Node.js et n√©cessite l'installation de plusieurs plugins, ce qui peut complexifier la configuration.\n* **Maintenance:** La communaut√© autour de Gulp est moins active qu'avant, certains plugins peuvent devenir obsol√®tes.\n* **Alternatives:** Des outils comme npm scripts, Parcel et Webpack offrent des fonctionnalit√©s similaires, parfois plus int√©gr√©es et compl√®tes.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "bbad9982-49d3-4aef-93d5-075605177c94",
        "title": "JFrog Artifactory",
        "description": "---\nid: b5d82f2c-3c72-483c-8599-9e87e733a492\n---\n# Rapidement c'est quoi‚ùì\n\nJFrog Artifactory est un gestionnaire universel d'artefacts logiciels.  Il stocke, g√®re et distribue tous types de paquets logiciels, des biblioth√®ques Java aux images Docker.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nJFrog Artifactory est un serveur de gestion d'artefacts (repository manager) qui fournit un r√©f√©rentiel centralis√© pour stocker et g√©rer tous les types d'artefacts logiciels utilis√©s dans un cycle de d√©veloppement DevOps.  Il supporte un large √©ventail de formats de paquets, incluant (mais sans s'y limiter) : Maven, Gradle, npm, NuGet, Python (pip), Docker, Helm, Debian, RPM et bien d'autres.\n\nAu-del√† du simple stockage, Artifactory offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Gestion de versions:**  Suivi des diff√©rentes versions des artefacts, permettant un rollback facile.\n* **Contr√¥le d'acc√®s:**  Gestion fine des permissions pour garantir la s√©curit√© et le contr√¥le des acc√®s aux artefacts.\n* **Int√©gration CI/CD:**  Int√©gration transparente avec les outils d'int√©gration continue et de livraison continue (CI/CD) pour automatiser le d√©ploiement.\n* **R√©plication:**  Possibilit√© de r√©pliquer les r√©f√©rentiels pour une haute disponibilit√© et une meilleure performance.\n* **Recherche et analyse:**  Fonctions de recherche avanc√©es et d'analyse des artefacts pour une meilleure visibilit√©.\n* **Promotion de versions:**  Gestion du cycle de vie des artefacts, de la phase de d√©veloppement √† la production, via un syst√®me de promotion entre les diff√©rents r√©f√©rentiels (par exemple, de \"d√©veloppement\" √† \"staging\" puis √† \"production\").\n* **Virtual Repositories:**  Cr√©ation de r√©f√©rentiels virtuels combinant plusieurs r√©f√©rentiels physiques pour une meilleure organisation et simplification de la configuration client.\n* **Support de plusieurs protocoles:**  Acc√®s aux artefacts via divers protocoles comme HTTP, HTTPS, SFTP, etc.\n\n\nArtifactory permet ainsi d'am√©liorer la collaboration entre les √©quipes de d√©veloppement, de simplifier la gestion des d√©pendances et d'acc√©l√©rer le processus de livraison continue.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Support multi-langages et multi-formats:**  Gestion d'un tr√®s grand nombre de types d'artefacts.\n* **Fonctionnalit√©s avanc√©es:**  Gestion des versions, contr√¥le d'acc√®s fin, int√©gration CI/CD robuste, etc.\n* **Haute disponibilit√© et scalabilit√©:**  Possibilit√© de configuration pour la haute disponibilit√© et la gestion de volumes importants d'artefacts.\n* **Interface utilisateur intuitive:**  L'interface utilisateur est g√©n√©ralement consid√©r√©e comme conviviale et facile √† utiliser.\n* **Int√©gration avec d'autres outils JFrog:**  Synergie avec d'autres outils de l'√©cosyst√®me JFrog, comme Xray (analyse de vuln√©rabilit√©s).\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Prix:**  Artifactory peut √™tre co√ªteux, surtout pour les grandes organisations avec de nombreux utilisateurs et de gros volumes d'artefacts.\n* **Complexit√©:**  La configuration et l'administration d'Artifactory peuvent √™tre complexes pour des utilisateurs moins exp√©riment√©s.\n* **Ressources requises:**  N√©cessite des ressources serveur significatives pour g√©rer de gros volumes d'artefacts.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n# JFrog Artifactory\n\n## Rapidement, c'est quoi ? ü§î\n\nJFrog Artifactory est un gestionnaire universel d'artefacts logiciels.  Imaginez un entrep√¥t centralis√© qui stocke et g√®re tous les composants n√©cessaires √† vos applications, des plus petites librairies aux plus grosses images Docker.\n\n## Plus pr√©cis√©ment, c'est quoi / √ßa fait quoi ? üîç\n\nJFrog Artifactory est un serveur de gestion d'artefacts (repository manager). Il centralise le stockage et la gestion de tous les types d'artefacts logiciels utilis√©s dans un cycle de d√©veloppement DevOps.  Il supporte une multitude de formats, parmi lesquels : Maven, Gradle, npm, NuGet, Python (pip), Docker, Helm, Debian, RPM, et bien d'autres.\n\n**Au-del√† du simple stockage, Artifactory offre des fonctionnalit√©s essentielles pour un workflow DevOps efficace :**\n\n* **Gestion de versions:**  Suivi pr√©cis des versions, facilitant les rollbacks (retour √† une version ant√©rieure).  Imaginez pouvoir facilement revenir √† une version stable de votre application en cas de probl√®me.\n* **Contr√¥le d'acc√®s:**  Permissions granulaires pour s√©curiser l'acc√®s aux artefacts.  Seuls les utilisateurs autoris√©s peuvent acc√©der √† certains composants.\n* **Int√©gration CI/CD:**  Int√©gration fluide avec vos outils CI/CD ([Concept supprim√©]) pour automatiser les d√©ploiements.  Cela acc√©l√®re le cycle de d√©veloppement et r√©duit les erreurs manuelles.\n* **R√©plication:**  R√©plication des r√©f√©rentiels pour haute disponibilit√© et performances accrues.  Vos artefacts sont disponibles m√™me en cas de panne d'un serveur.\n* **Recherche et analyse:**  Recherche puissante et analyse des artefacts pour une meilleure visibilit√© sur votre √©cosyst√®me logiciel.\n* **Promotion de versions:**  Gestion du cycle de vie des artefacts, de d√©veloppement √† production, via un syst√®me de promotion entre r√©f√©rentiels (ex: \"dev\" -> \"staging\" -> \"prod\").  Cela permet un contr√¥le rigoureux des d√©ploiements.\n* **Virtual Repositories:**  Cr√©ation de r√©f√©rentiels virtuels combinant plusieurs r√©f√©rentiels physiques pour simplifier la configuration client.  Cela simplifie grandement l'acc√®s aux artefacts pour les d√©veloppeurs.\n* **Support de plusieurs protocoles:**  Acc√®s aux artefacts via HTTP, HTTPS, SFTP, etc.  Flexibilit√© d'int√©gration avec diff√©rents environnements.\n\n\nEn r√©sum√©, Artifactory am√©liore la collaboration, simplifie la gestion des d√©pendances et acc√©l√®re la livraison continue.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Support multi-langages et multi-formats:**  Gestion d'une large vari√©t√© d'artefacts.\n* **Fonctionnalit√©s avanc√©es:**  Gestion de versions, contr√¥le d'acc√®s fin, int√©gration CI/CD robuste.\n* **Haute disponibilit√© et scalabilit√©:**  Adaptable √† des besoins croissants.\n* **Interface utilisateur intuitive:**  Facile √† prendre en main.\n* **Int√©gration avec d'autres outils JFrog:**  Synergie avec Xray (analyse de vuln√©rabilit√©s) par exemple.\n\n\n## Qu'est-ce qui est moins bien ? üëé\n\n* **Prix:**  Peut √™tre co√ªteux pour les grandes organisations.\n* **Complexit√©:**  Configuration avanc√©e pouvant √™tre complexe.\n* **Ressources requises:**  N√©cessite des ressources serveur importantes pour g√©rer de gros volumes.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n* [Gestion des artefacts]\n* [CI/CD] (Int√©gration Continue / Livraison Continue)\n* [Docker] (Pour la gestion des images conteneuris√©es)\n\n\n## Exemple de configuration d'un r√©f√©rentiel Maven dans Artifactory (snippet):\n\n```yaml\nrepositories:\n  - repoKey: libs-release-local\n    repositoryType: local\n    packageType: maven\n    description: Local Maven repository for releases\n```\n"
    },
    {
        "id": "b54a6baf-dffc-4f42-abf8-54d421bfd881",
        "title": "JMeter",
        "description": "---\nid: 0635b1b3-d5fa-4382-8668-72e0ccd88568\n---\n# Rapidement c'est quoi‚ùì\n\nJMeter est un outil open-source de test de performance et de charge pour des applications web et autres.  Il permet de simuler un grand nombre d'utilisateurs simultan√©s pour mesurer la capacit√© de r√©ponse et la stabilit√© d'un syst√®me.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nJMeter est un outil de test de performance √©crit en Java. Il permet de simuler un important volume de requ√™tes sur un serveur, une application web ou un autre syst√®me afin d'en √©valuer les performances et la robustesse sous forte charge.  Il offre la possibilit√© de cr√©er des sc√©narios de test complexes, incluant des √©l√©ments comme :\n\n* **Requ√™tes HTTP/HTTPS:**  Simuler des navigations web, des appels d'API REST, etc.  Il supporte diff√©rents protocoles et m√©thodes HTTP.\n* **Tests de base de donn√©es:** Tester les performances des requ√™tes SQL sur diff√©rentes bases de donn√©es.\n* **Tests FTP:** Tester les performances des transferts de fichiers FTP.\n* **Tests de performances JMS:** Tester les performances de la messagerie JMS.\n* **Tests LDAP:** Tester les performances des services LDAP.\n* **√âl√©ments de configuration:**  Contr√¥ler les aspects du test, comme les temporisations, les boucles, les assertions, etc.\n* **√âcouteurs:**  Collecter et visualiser les r√©sultats des tests, sous forme de tableaux, de graphiques, et de rapports d√©taill√©s (temps de r√©ponse, nombre d'erreurs, temps d'attente, etc.).\n* **Assertions:** V√©rifier si la r√©ponse du serveur correspond aux attentes (codes de statut HTTP, contenu de la r√©ponse, etc.).\n\nJMeter est tr√®s flexible et extensible gr√¢ce √† ses nombreux plugins et son architecture modulaire.  Il permet d'int√©grer des scripts personnalis√©s et d'automatiser des t√¢ches de test complexes. Les r√©sultats des tests permettent d'identifier les goulots d'√©tranglement et d'optimiser les performances de l'application test√©e.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et gratuit:**  Accessible √† tous sans co√ªt de licence.\n* **Large communaut√© et documentation:**  Facile d'obtenir de l'aide et des ressources en cas de besoin.\n* **Flexible et extensible:**  Adaptable √† une grande vari√©t√© de sc√©narios de test gr√¢ce √† ses plugins et fonctionnalit√©s.\n* **Interface graphique intuitive (pour la cr√©ation des tests):**  Relativement facile √† prendre en main, m√™me pour les d√©butants.\n* **Rapports d√©taill√©s:**  Fournit des informations compl√®tes sur les performances du syst√®me test√©.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Consommation de ressources:**  Peut consommer beaucoup de ressources (m√©moire, CPU) lors de la simulation de charges importantes, surtout sur une seule machine.\n* **Courbe d'apprentissage:**  Bien que l'interface soit intuitive pour les tests simples, la cr√©ation de tests complexes et l'interpr√©tation des r√©sultats avanc√©s peuvent n√©cessiter une certaine expertise.\n* **Interface graphique peu performante pour les gros tests:**  L'interface graphique peut devenir lente et r√©active avec de tr√®s grands tests.  L'utilisation de mode non-GUI est alors conseill√©e.\n* **D√©bogage parfois complexe:**  Identifier la source des erreurs dans des sc√©narios de test complexes peut √™tre difficile.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "304b6f37-1909-4af5-a92b-bc4e62895631",
        "title": "Jaeger",
        "description": "---\nid: dba8623c-06a9-4387-a258-3a4acaaca56f\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nJaeger est un syst√®me de tra√ßage distribu√© open-source qui permet de surveiller et de d√©boguer les applications distribu√©es.  Il collecte et visualise les traces des requ√™tes traversant diff√©rents services, permettant ainsi d'identifier les goulots d'√©tranglement et les erreurs.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nJaeger impl√©mente le standard OpenTracing (maintenant OpenTelemetry) pour le tra√ßage distribu√©.  Il est compos√© de plusieurs composants principaux :\n\n* **Agent:** Un agent l√©ger qui s'ex√©cute sur chaque service et collecte les traces. Il envoie ces traces au collecteur.\n* **Collecteur:** Un service qui re√ßoit les traces de plusieurs agents et les traite.  Il peut √™tre configur√© pour stocker les traces dans une base de donn√©es (ex: Cassandra, Elasticsearch).\n* **Query:** Un service qui permet de rechercher et de visualiser les traces via une interface utilisateur web.\n* **Ingest:** Le composant qui re√ßoit les donn√©es brutes du traceur et les envoie au backend de stockage.\n\nLe fonctionnement se r√©sume ainsi:\n\n1. Une application instrumente son code pour injecter des spans (unit√©s de travail) dans le flux de la requ√™te.  Ces spans contiennent des informations contextuelles comme le nom de l'op√©ration, la dur√©e et des tags.\n2. L'agent Jaeger, en local, collecte ces spans et les envoie au collecteur.\n3. Le collecteur traite les donn√©es et les stocke dans une base de donn√©es.\n4. L'interface utilisateur permet de visualiser les traces, de filtrer par service, par tag, etc.  On peut ainsi suivre le parcours d'une requ√™te √† travers l'ensemble de l'infrastructure.\n\n**Exemple (Python avec opentelemetry):**\n\n```python\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.jaeger.thrift import JaegerExporter\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\n\nresource = Resource.get_empty().merge({SERVICE_NAME: \"my_service\"})\ntrace.set_tracer_provider(TracerProvider(resource=resource))\njaeger_exporter = JaegerExporter(agent_host_name='localhost', agent_port=6831)\nspan_processor = BatchSpanProcessor(jaeger_exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\ntracer = trace.get_tracer(__name__)\nwith tracer.start_as_current_span(\"main_function\"):\n    with tracer.start_as_current_span(\"sub_function\"):\n        # ... code ...\n        pass\n    # ... code ...\n    pass\n```\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Open Source et mature:**  Jaeger est un projet stable et largement adopt√©.\n* **Interface utilisateur intuitive:** La visualisation des traces est facile √† comprendre et √† utiliser.\n* **Int√©gration avec plusieurs technologies:**  Jaeger s'int√®gre facilement avec de nombreux langages de programmation et frameworks.\n* **Scalabilit√©:**  Jaeger est con√ßu pour g√©rer un grand nombre de traces.\n* **Support de diff√©rents backends de stockage:**  On peut choisir le stockage qui convient le mieux √† son infrastructure.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© de configuration:**  La configuration peut √™tre complexe, notamment pour des d√©ploiements √† grande √©chelle.\n* **Surco√ªt de performance:**  L'instrumentation et la collecte des traces peuvent avoir un l√©ger impact sur les performances de l'application.  Une instrumentation mal faite peut amplifier ce probl√®me.\n* **N√©cessite un backend de stockage:**  Jaeger ne fonctionne pas sans un backend de stockage pour les traces.  Ceci ajoute une d√©pendance suppl√©mentaire.\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "6234d20e-2789-4aed-a6a5-ee646881890d",
        "title": "Jitpack",
        "description": "---\nid: f7b3616a-498c-4574-a2d9-4d5a46afee0e\n---\n# Rapidement c'est quoi‚ùì\n\nJitPack est un service d'h√©bergement et de distribution d'artefacts Java et Kotlin.  Il permet d'int√©grer facilement des librairies h√©berg√©es sur des d√©p√¥ts Git (GitHub, GitLab, Bitbucket) directement dans vos projets.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nJitPack est un r√©f√©rentiel Maven et Gradle qui automatise la construction et la publication de biblioth√®ques Java et Kotlin √† partir de d√©p√¥ts Git.  Au lieu de publier vos librairies manuellement sur des r√©f√©rentiels comme Maven Central, vous fournissez simplement JitPack avec l'URL de votre d√©p√¥t Git (public ou priv√©, mais les priv√©s n√©cessitent un abonnement payant). JitPack se charge ensuite de :\n\n1. **Cloner votre d√©p√¥t Git:** Il r√©cup√®re le code source de votre projet.\n2. **Construire votre projet:** Il utilise un environnement de build (Maven ou Gradle) d√©fini dans votre projet pour compiler votre code et g√©n√©rer les artefacts (JAR, AAR, etc.).\n3. **Publier les artefacts:** Il met √† disposition les artefacts compil√©s via son propre r√©f√©rentiel, accessible via des coordonn√©es Maven ou Gradle.\n\nCela permet aux d√©veloppeurs d'int√©grer vos librairies directement dans leurs projets via un simple ajout de d√©pendances dans leur fichier `build.gradle` (ou √©quivalent).  JitPack surveille les modifications dans votre d√©p√¥t Git et met √† jour les artefacts automatiquement, facilitant ainsi la gestion des versions et la mise √† jour des librairies.  L'int√©gration est transparente pour le d√©veloppeur qui n'a pas besoin de g√©rer la publication des artefacts.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplicit√© d'utilisation:**  Int√©gration facile et rapide gr√¢ce √† l'ajout d'une simple d√©pendance dans votre fichier de build.\n* **Automatisation:** JitPack automatise le processus de compilation et de publication, r√©duisant ainsi le temps et l'effort n√©cessaire.\n* **Mise √† jour automatique:** Les mises √† jour du d√©p√¥t Git sont automatiquement refl√©t√©es dans le r√©f√©rentiel JitPack.\n* **Int√©gration avec les d√©p√¥ts Git populaires:**  Fonctionne avec GitHub, GitLab et Bitbucket.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Co√ªt pour les d√©p√¥ts priv√©s:** L'utilisation de d√©p√¥ts Git priv√©s n√©cessite un abonnement payant.\n* **D√©pendance √† JitPack:** Votre projet d√©pend d'un service tiers, ce qui introduit un point de d√©faillance potentiel.\n* **Performances:**  La construction et le d√©ploiement peuvent √™tre plus lents que sur un serveur de build d√©di√©.\n* **Contr√¥le limit√©:** Vous avez moins de contr√¥le sur le processus de build que si vous g√©rez vous-m√™me la publication de vos artefacts.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "39981e27-4afb-40f9-a0b7-7ab17fc52da6",
        "title": "K6",
        "description": "---\nid: 31ca0fd2-70a8-43d5-8c3c-250984ee0d52\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nk6 est un outil open-source de test de charge et de performance √©crit en Go.  Il permet de simuler un grand nombre d'utilisateurs simultan√©s interagissant avec une application web ou un service afin d'√©valuer sa capacit√© √† g√©rer la charge et d'identifier les goulots d'√©tranglement.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nk6 permet de d√©finir des sc√©narios de test en utilisant un langage de script simple et puissant bas√© sur JavaScript.  Ces scripts d√©finissent les actions que les utilisateurs virtuels doivent r√©aliser (requ√™tes HTTP, interactions avec l'interface utilisateur, etc.).  k6 ex√©cute ensuite ces scripts en parall√®le, simulant ainsi une charge importante sur le syst√®me test√©.  L'outil collecte diverses m√©triques de performance (temps de r√©ponse, taux d'erreur, utilisation des ressources serveur, etc.) et les pr√©sente sous forme de rapports et de graphiques.\n\nVoici un exemple simple de script k6:\n\n```javascript\nimport http from 'k6/http';\nimport { sleep } from 'k6';\n\nexport let options = {\n  stages: [\n    { duration: '30s', target: 20 }, // Simuler 20 utilisateurs pendant 30 secondes\n    { duration: '1m', target: 20 }, // Maintenir 20 utilisateurs pendant 1 minute\n    { duration: '30s', target: 0 },  // Ramener le nombre d'utilisateurs √† 0 pendant 30 secondes\n  ],\n};\n\nexport default function () {\n  let res = http.get('https://test-api.com/users');\n  sleep(1); // Attendre 1 seconde avant la prochaine requ√™te\n  check(res, { 'status was 200': (r) => r.status === 200 });\n}\n```\n\nCe script simule 20 utilisateurs effectuant une requ√™te GET sur une API pendant une minute et demie.  `check` permet de valider que la r√©ponse a un code de statut 200.  L'option `stages` d√©finit l'√©volution du nombre d'utilisateurs virtuels au cours du test.\n\nk6 offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Int√©gration avec des outils d'observation:**  k6 peut envoyer des m√©triques vers des syst√®mes de monitoring comme Prometheus, Grafana, InfluxDB.\n* **Scripts modulaires et r√©utilisables:**  Les scripts k6 peuvent √™tre organis√©s en modules pour faciliter la maintenance et le partage de code.\n* **Tests de charge bas√©s sur des sc√©narios r√©alistes:**  Il est possible de simuler des comportements d'utilisateurs plus complexes, en incluant des temps d'attente, des distributions al√©atoires, etc.\n* **Support des protocoles HTTP/1.1, HTTP/2, et WebSocket:**  k6 permet de tester une large gamme d'applications.\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Open-source et gratuit:** k6 est librement disponible et utilisable.\n* **Langage de script simple et puissant:**  Le JavaScript utilis√© est relativement facile √† apprendre et permet de cr√©er des tests complexes.\n* **R√©sultats clairs et concis:**  k6 fournit des rapports d√©taill√©s et des visualisations graphiques des r√©sultats.\n* **Int√©gration facile avec l'√©cosyst√®me DevOps:**  k6 s'int√®gre bien avec d'autres outils populaires.\n* **Performance et stabilit√©:**  k6 est performant et robuste.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:** Bien que le langage de script soit simple, une certaine familiarit√© avec JavaScript est n√©cessaire pour cr√©er des tests sophistiqu√©s.\n* **D√©bogage:** Le d√©bogage des scripts peut √™tre parfois complexe.  Des outils sp√©cifiques sont n√©cessaires pour un d√©bogage efficace.\n* **Limitations pour les tests UI complexes:** Bien que possible,  tester des applications avec de nombreuses interactions UI complexes peut √™tre plus difficile qu'avec d'autres outils sp√©cialis√©s dans les tests d'interface utilisateur.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "ff09cb51-6aea-4704-908c-b252fcebb82b",
        "title": "Karate",
        "description": "---\nid: 1c914381-073b-493f-9b0e-f8c82b8f9e98\n---\n# Rapidement c'est quoi‚ùì\n\nKarate DSL est un framework open-source bas√© sur Cucumber (Gherkin) pour l'automatisation des tests, notamment pour les API, mais aussi pour les applications web et les applications desktop.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nKarate est un framework de test d'int√©gration bas√© sur le langage [[Gherkin]], connu pour sa syntaxe simple et lisible (BDD - Behavior Driven Development).  Il permet de d√©crire les sc√©narios de test de mani√®re concise et compr√©hensible par les √©quipes techniques et non-techniques.  Au lieu d'√©crire du code complexe, on d√©crit le comportement attendu de l'application via des mots cl√©s simples.  Karate s'occupe ensuite de l'ex√©cution et de la validation.\n\nKarate offre une grande flexibilit√© et peut √™tre utilis√© pour tester diff√©rents types d'applications :\n\n* **API REST :** C'est son utilisation principale. Il permet d'envoyer des requ√™tes HTTP (GET, POST, PUT, DELETE, etc.), de valider les r√©ponses (codes de statut, corps JSON, etc.) et de g√©rer l'authentification.\n* **Applications Web :**  Karate peut interagir avec des applications web via son int√©gration avec des outils comme Selenium, permettant de simuler des actions utilisateur.\n* **Applications Desktop :**  Bien que moins courant, Karate peut √™tre utilis√© pour tester des applications desktop gr√¢ce √† son API extensible.\n* **Tests de performance de base :**  Karate permet d‚Äôeffectuer des tests de charge l√©gers, notamment gr√¢ce √† ses capacit√©s de parall√©lisation.\n\nKarate utilise un puissant moteur de matching JSON qui simplifie les validations. Il propose √©galement des fonctionnalit√©s avanc√©es telles que la gestion des donn√©es de test, la g√©n√©ration de rapports et l'int√©gration avec des syst√®mes de CI/CD.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Syntaxe simple et lisible (Gherkin) :** Rend les tests faciles √† comprendre et √† maintenir.\n* **Polyvalence :** Permet de tester des API REST, des applications web et m√™me des applications desktop.\n* **Int√©gration facile :** S'int√®gre bien avec de nombreux outils et technologies.\n* **Gestion avanc√©e des donn√©es de test :** Simplifie la gestion des donn√©es d'entr√©e.\n* **Puissant moteur de matching JSON :** Facilite la validation des r√©ponses API.\n* **Reporting clair et concis :** Facilite l'analyse des r√©sultats.\n* **Communaut√© active et documentation assez compl√®te:** Facilite le d√©marrage et l'apprentissage.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Pour les tests UI complexes, il peut √™tre moins performant que des outils d√©di√©s comme Selenium ou Cypress:** Il est plus adapt√© pour la validation de l'API qui sous-tend l'UI plut√¥t que la validation de l'exp√©rience utilisateur elle-m√™me.\n* **Courbe d'apprentissage l√©g√®rement plus raide que des outils plus simples pour les d√©butants complets en test.**  La ma√Ætrise des expressions r√©guli√®res et des manipulations JSON est un atout.\n* **Moins de plugins disponibles qu'avec des frameworks plus √©tablis** pour les tests UI.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "4f9fb72d-9eb3-4874-b3cf-2aea798c1efa",
        "title": "LowDb",
        "description": "---\nid: 1f2a7d57-7f12-4d6a-8ad5-d1eb8ef07f91\n---\n## **Rapidement, c'est quoi ? ‚ùì**\n\nLowDB est une petite base de donn√©es JavaScript l√©g√®re, bas√©e sur un fichier JSON.  Elle est id√©ale pour les applications qui n'ont pas besoin d'une base de donn√©es relationnelle complexe et qui veulent un stockage persistant simple et rapide.\n\n---\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLowDB est une base de donn√©es NoSQL orient√©e document.  Cela signifie qu'elle stocke les donn√©es sous forme de documents JSON, sans le besoin de sch√©mas rigides.  Elle utilise un seul fichier JSON comme stockage persistant, ce qui la rend facile √† d√©ployer et √† utiliser.  LowDB fournit une API simple et intuitive pour effectuer des op√©rations CRUD (Cr√©er, Lire, Mettre √† jour, Supprimer) sur les donn√©es.  Elle est bas√©e sur Lodash, ce qui facilite l'utilisation de ses fonctions de manipulation de donn√©es.  Elle ne n√©cessite aucune configuration de serveur, ni aucune d√©pendance externe autre que Lodash.\n\nVoici un exemple d'utilisation en JavaScript :\n\n```javascript\nconst low = require('lowdb')\nconst FileSync = require('lowdb/adapters/FileSync')\n\nconst adapter = new FileSync('db.json')\nconst db = low(adapter)\n\n// Set some defaults (optional)\ndb.defaults({ users: [], posts: [] })\n  .write()\n\n// Add a user\ndb.get('users').push({ id: 1, name: 'John' }).write()\n\n// Find a user\nconst john = db.get('users').find({ id: 1 }).value()\n\n// Update a user\ndb.get('users').find({ id: 1 }).assign({ age: 30 }).write()\n\n// Remove a user\ndb.get('users').remove({ id: 1 }).write()\n\n// Read all users\nconst users = db.get('users').value()\n\nconsole.log(users)\n```\n\nCet exemple montre comment cr√©er une base de donn√©es, ajouter, rechercher, mettre √† jour et supprimer des utilisateurs.  La m√©thode `.write()` sauvegarde les modifications dans le fichier `db.json`.\n\n---\n\n# Qu'est-ce qui est top ? üëç\n\n* **Simplicit√©:**  Extr√™mement facile √† installer et √† utiliser, avec une API intuitive.\n* **L√©ger:**  Tr√®s petite taille, ne surcharge pas l'application.\n* **Facile √† d√©ployer:**  Ne n√©cessite aucune configuration de serveur.\n* **Persistant:**  Stocke les donn√©es dans un fichier JSON, garantissant la persistance des donn√©es.\n* **Bas√© sur Lodash:**  B√©n√©ficie de la puissance et de la flexibilit√© de Lodash pour la manipulation des donn√©es.\n\n---\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Scalabilit√© limit√©e:**  N'est pas con√ßue pour les applications √† tr√®s grande √©chelle.  La performance peut d√©grader avec des jeux de donn√©es importants.\n* **Transactions non support√©es:**  Ne supporte pas les transactions, ce qui peut √™tre un probl√®me pour les applications n√©cessitant une coh√©rence forte des donn√©es.\n* **Concurrence limit√©e:**  La gestion de la concurrence n'est pas optimis√©e.  L'utilisation simultan√©e par plusieurs processus peut n√©cessiter des m√©canismes de verrouillage externes.\n* **Fonctionnalit√©s limit√©es:**  Ne propose pas autant de fonctionnalit√©s qu'une base de donn√©es relationnelle ou un syst√®me de base de donn√©es NoSQL plus complet.\n\n---\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "2dd2c605-ae74-4ae6-8c67-dfd4a2df88ec",
        "title": "MQTT",
        "description": "---\nid: 7b1fe336-18e3-4bbc-a2d1-4f869db47e43\n---\n# Rapidement c'est quoi‚ùì\n\nMQTT (Message Queuing Telemetry Transport) est un protocole de messagerie l√©ger, publi√©-abonn√©, utilis√© principalement pour l'Internet des objets (IoT).  Il permet aux appareils de publier des messages sur des sujets sp√©cifiques, et aux autres appareils abonn√©s √† ces sujets de recevoir ces messages.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nMQTT est un protocole de communication machine-√†-machine (M2M) bas√© sur le paradigme de publication-abonnement.  Il fonctionne sur le principe de \"sujets\" (topics) auxquels les clients (publishers et subscribers) s'abonnent.  Un √©diteur (publisher) publie un message sur un sujet sp√©cifique.  Tous les abonn√©s (subscribers) √† ce sujet re√ßoivent alors une copie de ce message.  Ceci permet une communication unidirectionnelle efficace, id√©ale pour les applications √† faible bande passante et √† forte latence comme l'IoT.\n\nContrairement √† d'autres protocoles de messagerie plus lourds, MQTT est con√ßu pour √™tre l√©ger et efficace en termes de bande passante et d'√©nergie.  Il utilise un format de message compact et g√®re les connexions intermittentes et les d√©connexions.  Il offre diff√©rents niveaux de qualit√© de service (QoS) pour garantir la fiabilit√© de la livraison des messages :\n\n* **QoS 0 (At most once):** Le message est envoy√© une seule fois, sans garantie de livraison.\n* **QoS 1 (At least once):** Le message est envoy√© au moins une fois, le serveur envoie un accus√© de r√©ception.  Il est possible de recevoir le message plusieurs fois en cas de perte du message d'accus√© de r√©ception.\n* **QoS 2 (Exactly once):** Le message est envoy√© exactement une fois, garantie de livraison et d'unicit√©.  C'est le niveau le plus robuste, mais aussi le plus co√ªteux en ressources.\n\nUn broker MQTT agit comme un interm√©diaire centralis√©, g√©rant les abonnements et la diffusion des messages entre les √©diteurs et les abonn√©s.  Le publisher peut sp√©cifier s'il attend une confirmation de r√©ception (QoS 1 et 2) ou non (QoS 0).\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **L√©ger et efficace:**  Id√©al pour les appareils √† faible puissance et bande passante limit√©e.\n* **Simple √† impl√©menter:**  Protocole relativement simple √† comprendre et √† utiliser.\n* **Publication-abonnement efficace:**  Permet une communication unidirectionnelle scalable.\n* **Gestion des connexions intermittentes:**  Robuste face aux d√©connexions et aux r√©seaux instables.\n* **Plusieurs niveaux de QoS:**  Offre des options de fiabilit√© pour adapter la communication aux besoins de l'application.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Pas adapt√© √† toutes les applications:**  Moins appropri√© pour les applications n√©cessitant des transactions complexes ou une communication bidirectionnelle tr√®s r√©active.\n* **S√©curit√©:**  N√©cessite une attention particuli√®re √† la s√©curit√©, surtout dans les environnements sensibles.  Des m√©canismes d'authentification et de chiffrement sont importants.\n* **Complexit√© du Broker:** La gestion d'un broker MQTT peut devenir complexe pour un grand nombre d'appareils et de messages.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "2ac4eb26-18a4-4910-80a6-380bdeef9ae0",
        "title": "Macaron",
        "description": "---\nid: 4ca900d5-f49d-4a08-8a97-35a6683ef57f\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nUn macaron est un jeton cryptographique utilis√© pour l'authentification.  Il repr√©sente une alternative aux m√©canismes d'authentification traditionnels, offrant une approche plus s√©curis√©e et flexible.  On peut le voir comme une version plus simple et moins complexe d'un biscuit (d√©velopp√© par Clever Cloud).\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nUn macaron est un jeton num√©rique, g√©n√©ralement encod√© en base64, qui contient des informations chiffr√©es sur l'identit√© d'un utilisateur et ses autorisations.  Contrairement √† un cookie HTTP classique, un macaron n'est pas directement stock√© par le navigateur.  Son utilisation implique g√©n√©ralement un m√©canisme d'√©change entre le client (application, navigateur) et le serveur, souvent via un en-t√™te HTTP.\n\nLe serveur cr√©e le macaron en incluant des donn√©es pertinentes (identifiant utilisateur, timestamp, r√¥les, etc.) et en les chiffrant sym√©triquement avec une cl√© secr√®te connue uniquement du serveur.  Le client re√ßoit et conserve le macaron.  Chaque requ√™te subsequente au serveur inclut le macaron, qui est alors v√©rifi√© et d√©chiffr√© par le serveur pour authentifier l'utilisateur et valider ses autorisations.  Ceci √©vite de devoir transmettre des informations sensibles comme mots de passe √† chaque requ√™te.\n\nL'architecture pr√©cise de l'int√©gration des macarons peut varier, mais le principe central reste la g√©n√©ration, transmission et v√©rification s√©curis√©e du jeton chiffr√©.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **S√©curit√© am√©lior√©e:** Le chiffrement du macaron prot√®ge les informations sensibles de l'utilisateur.  Le caract√®re √©ph√©m√®re du macaron (dur√©e de vie limit√©e) renforce la s√©curit√©.\n* **Simplicit√© (compar√© aux syst√®mes plus complexes):**  Par rapport √† des solutions d'authentification plus sophistiqu√©es, le concept est relativement simple √† mettre en ≈ìuvre.\n* **Flexibilit√©:** Les macarons peuvent √™tre adapt√©s √† divers contextes et protocoles.\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Gestion de la cl√© secr√®te:**  La s√©curit√© du syst√®me d√©pend enti√®rement de la protection de la cl√© secr√®te utilis√©e pour chiffrer/d√©chiffrer les macarons.  Une compromission de cette cl√© compromet la s√©curit√© de tout le syst√®me.\n* **Complexit√© d'impl√©mentation (par rapport aux cookies simples):**  L'impl√©mentation n√©cessite une gestion plus complexe que des cookies HTTP simples.\n* **D√©pendance au serveur:**  La validit√© du macaron d√©pend enti√®rement du serveur.  Des probl√®mes de connectivit√© ou des pannes du serveur peuvent emp√™cher l'acc√®s.\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "31d7445a-110f-47ad-b006-c15034db4caf",
        "title": "Mockoon",
        "description": "---\nid: 6fbdf1a5-224a-40eb-8d39-f3a7b21e6fe8\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nMockoon est une application open-source permettant de cr√©er et de g√©rer facilement des mocks d'API.  Elle permet de simuler des r√©ponses HTTP pour des besoins de test et de d√©veloppement, sans avoir besoin d'un serveur backend fonctionnel.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nMockoon est un outil qui permet de d√©finir des routes API, chacune associ√©e √† une r√©ponse HTTP sp√©cifique.  Ces r√©ponses peuvent √™tre configur√©es pour simuler diff√©rents statuts HTTP (200 OK, 404 Not Found, etc.), des en-t√™tes personnalis√©s, et des corps de r√©ponse au format JSON, XML, ou texte brut.  L'application embarque un serveur qui rend ces mocks accessibles via une URL locale.  Les d√©veloppeurs peuvent ainsi tester leurs applications front-end ou leurs int√©grations sans d√©pendre d'un serveur backend en cours de d√©veloppement ou indisponible.\n\nMockoon offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Gestion des requ√™tes:**  Possibilit√© de d√©finir des requ√™tes sp√©cifiques (m√©thodes HTTP, headers, param√®tres, corps de la requ√™te) pour d√©clencher des r√©ponses diff√©rentes.\n* **Mocks dynamiques:**  Les r√©ponses peuvent √™tre g√©n√©r√©es dynamiquement gr√¢ce √† des fonctionnalit√©s de templating (ex: utilisant des variables).\n* **D√©lai de r√©ponse:**  Simulation de latence r√©seau pour des tests plus r√©alistes.\n* **Import/Export:**  Import et export de configurations au format JSON pour faciliter le partage et la sauvegarde.\n* **Environnements:**  Possibilit√© de g√©rer plusieurs environnements (d√©veloppement, test, production) avec des configurations diff√©rentes.\n\n**Exemple simple (JSON):**\n\nImaginons une route `/users` qui doit retourner une liste d'utilisateurs.  Dans Mockoon, on d√©finirait une route avec la m√©thode `GET`, l'URL `/users`, et un corps de r√©ponse JSON comme suit :\n\n```json\n[\n  {\"id\": 1, \"name\": \"John Doe\"},\n  {\"id\": 2, \"name\": \"Jane Smith\"}\n]\n```\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Facilit√© d'utilisation:**  Interface utilisateur intuitive et facile √† prendre en main.\n* **Open-source:**  Gratuit, et le code source est disponible pour un audit ou des contributions.\n* **Fonctionnalit√©s compl√®tes:**  Offre un ensemble complet de fonctionnalit√©s pour la simulation d'API.\n* **Interface graphique:**  Permet une configuration visuelle et simple des mocks.\n* **Multiplateforme:**  Disponible pour Windows, macOS et Linux.\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Limitations pour les mocks complexes:**  Pour les cas d'utilisation tr√®s complexes n√©cessitant des interactions sophistiqu√©es avec le serveur (authentification avanc√©e, gestion d'√©tat, etc.), Mockoon pourrait s'av√©rer moins adapt√© que des solutions plus sp√©cialis√©es.\n* **D√©pendance √† une application:**  Contrairement √† des solutions bas√©es sur un script ou un fichier de configuration, Mockoon n√©cessite l'ex√©cution de l'application.\n\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "3e904263-df71-47ca-a67f-c0e3adcd11bd",
        "title": "Nexus OSS",
        "description": "---\nid: e34dad01-51d0-4b44-b981-ab5d072436c6\n---\n# Nexus OSS : Rapidement c'est quoi‚ùì\n\nNexus OSS est un gestionnaire d'artefacts open-source.  Il permet de stocker et de g√©rer des paquets logiciels de diff√©rents types (Java, Python, Node.js, Docker, etc.) centralisant ainsi la distribution et la versioning de ces √©l√©ments au sein d'un projet.\n\n---\n# Nexus OSS : Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nNexus OSS est un serveur de gestion d'artefacts qui fournit un r√©f√©rentiel centralis√© pour les d√©pendances de logiciels.  Il prend en charge une large vari√©t√© de formats de paquets, incluant mais sans s'y limiter : Maven, npm, NuGet, Bower, PyPI, Docker, et beaucoup d'autres.  Son r√¥le principal est de faciliter la gestion du cycle de vie des artefacts, de leur cr√©ation √† leur d√©ploiement.\n\nPlus concr√®tement, Nexus OSS permet :\n\n* **Stockage centralis√©:**  Tous les artefacts d'un projet sont stock√©s dans un emplacement unique, facilitant l'acc√®s et la gestion.\n* **Gestion de versions:** Nexus g√®re efficacement les diff√©rentes versions des artefacts, permettant de revenir √† des versions pr√©c√©dentes si n√©cessaire.\n* **Proxy de r√©f√©rentiels:** Il peut agir comme un proxy pour des r√©f√©rentiels externes (comme Maven Central), r√©duisant la charge sur les r√©seaux et am√©liorant les performances.\n* **Cr√©ation de r√©f√©rentiels priv√©s:**  Permet de cr√©er des r√©f√©rentiels priv√©s pour h√©berger des artefacts internes, avant leur √©ventuelle publication publique.\n* **Contr√¥le d'acc√®s:**  Offre des m√©canismes de contr√¥le d'acc√®s pour restreindre l'acc√®s aux artefacts en fonction des r√¥les utilisateurs.\n* **Recherche et navigation:**  Fournit une interface utilisateur intuitive pour rechercher et naviguer parmi les artefacts stock√©s.\n* **Int√©gration CI/CD:**  S'int√®gre facilement aux pipelines CI/CD pour automatiser le processus de d√©ploiement.\n\n\n---\n# Nexus OSS : Qu'est ce qui est top ? üëç\n\n* **Open-source et gratuit:**  Nexus OSS est disponible gratuitement et son code source est accessible.\n* **Large support de formats:**  Il g√®re un tr√®s grand nombre de types d'artefacts.\n* **Interface utilisateur conviviale:**  Navigation et recherche faciles.\n* **Fonctionnalit√©s avanc√©es:**  Gestion des versions, proxy, r√©f√©rentiels priv√©s, contr√¥le d'acc√®s.\n* **Communaut√© active:**  Une communaut√© importante fournit un support et contribue au d√©veloppement.\n\n\n---\n# Nexus OSS : Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:** La configuration initiale peut √™tre complexe pour les utilisateurs d√©butants.\n* **Ressources serveur:**  Peut n√©cessiter des ressources serveur importantes pour g√©rer un grand nombre d'artefacts.\n* **Courbe d'apprentissage:**  N√©cessite une certaine familiarisation avec les concepts de gestion d'artefacts.\n* **D√©pendances Java:** N√©cessite une machine virtuelle Java pour fonctionner.\n\n\n---\n# Nexus OSS : A quoi c'est li√© ? ü™¢\n\n(√† compl√©ter)\n"
    },
    {
        "id": "0e88d3df-da53-4647-8099-8872358acab6",
        "title": "NuxtHub",
        "description": "---\nid: afb4d2a0-248c-4f80-9886-88258531a052\n---\n# Rapidement c'est quoi‚ùì\n\nNuxtHub est une plateforme en ligne qui simplifie la gestion et le d√©ploiement d'applications Nuxt.js sur le cloud Cloudflare.  Elle fournit une interface utilisateur intuitive pour g√©rer les projets, automatisant plusieurs t√¢ches complexes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nNuxtHub est un service de plateforme comme service (PaaS) sp√©cifiquement con√ßu pour les applications web construites avec le framework JavaScript Nuxt.js.  Il offre une interface centralis√©e pour g√©rer tout le cycle de vie d'un projet Nuxt, du d√©veloppement au d√©ploiement.  Les fonctionnalit√©s cl√©s incluent :\n\n* **Gestion de projet:**  Cr√©ation, organisation et suivi de multiples projets Nuxt.js depuis une seule interface.\n* **D√©ploiement automatis√©:**  NuxtHub int√®gre directement le cloud Cloudflare, automatisant le processus de d√©ploiement et rendant la mise en production simple et rapide.  Cela inclut la configuration du serveur, la gestion des certificats SSL et la mise √† jour automatique.\n* **Environnements multiples:**  Possibilit√© de g√©rer diff√©rents environnements (d√©veloppement, staging, production) pour chaque projet.\n* **Collaboration:**  Facilite la collaboration entre d√©veloppeurs gr√¢ce √† un syst√®me de contr√¥le d'acc√®s et de gestion des utilisateurs.\n* **Supervision et monitoring:**  Outils de monitoring permettant de surveiller les performances et la stabilit√© des applications d√©ploy√©es.  (La nature pr√©cise de ces outils d√©pend de l'int√©gration avec Cloudflare.)\n* **Int√©gration CI/CD (potentielle):**  Bien que non explicitement mentionn√©, une plateforme comme NuxtHub est susceptible d'offrir ou de s'int√©grer facilement √† des pipelines CI/CD pour automatiser davantage le processus de d√©veloppement et de d√©ploiement.\n\n\nEn r√©sum√©, NuxtHub vise √† simplifier le workflow des d√©veloppeurs Nuxt.js en centralisant et en automatisant les t√¢ches fastidieuses li√©es √† la gestion et au d√©ploiement d'applications.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplification du d√©ploiement:** Le d√©ploiement sur Cloudflare est grandement simplifi√© gr√¢ce √† l'interface utilisateur intuitive.\n* **Centralisation de la gestion:** Gestion multi-projets facilit√©e.\n* **Automatisation des t√¢ches:**  R√©duction du temps et de l'effort n√©cessaires pour le d√©ploiement et la maintenance.\n* **Int√©gration Cloudflare:** B√©n√©ficie de l'infrastructure robuste et performante de Cloudflare.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **D√©pendance √† Cloudflare:**  Le d√©ploiement est limit√© √† Cloudflare.  Les d√©veloppeurs souhaitant utiliser d'autres fournisseurs de cloud pourraient √™tre limit√©s.\n* **Potentielles limitations des fonctionnalit√©s:** L'√©tendue exacte des fonctionnalit√©s de monitoring et d'int√©gration CI/CD n'est pas toujours clairement d√©finie.  Une √©valuation approfondie est n√©cessaire.\n* **Co√ªt:**  Le mod√®le de tarification peut constituer un inconv√©nient pour certains utilisateurs, n√©cessitant une analyse des co√ªts avant utilisation.\n* **Manque de contr√¥le (potentiel):**  Le niveau de contr√¥le sur l'infrastructure sous-jacente pourrait √™tre inf√©rieur √† une configuration manuelle.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "42b53c23-df81-462b-94cb-78777ddbe672",
        "title": "Objet du testing",
        "description": "---\nid: 2f7853dd-9d03-467b-99ae-804dd65e0865\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nLes objets de test (dummy, stub, mock, fake, spy) sont des outils utilis√©s dans le d√©veloppement logiciel pour simuler le comportement de parties d'un syst√®me lors de tests unitaires ou d'int√©gration.  Ils permettent d'isoler le code test√© et de contr√¥ler son environnement, facilitant ainsi la d√©tection de bugs et la validation du comportement attendu.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nVoici une description plus d√©taill√©e des diff√©rents types d'objets de test :\n\n* **Dummy:** Un objet simple servant √† compl√©ter une liste de param√®tres. Il ne poss√®de g√©n√©ralement aucune impl√©mentation concr√®te et sert principalement √† satisfaire les contraintes de signature d'une fonction ou d'une m√©thode sans avoir d'impact r√©el sur le test.\n\n    * **Exemple:** Un constructeur n√©cessitant trois param√®tres, mais dont un seul est pertinent pour le test.  On utilise un `dummy` pour les deux autres.\n\n* **Stub:** Un objet qui remplace une d√©pendance et renvoie des valeurs pr√©d√©finies.  Il simule un comportement sp√©cifique sans ex√©cuter le code r√©el de la d√©pendance.\n\n    * **Exemple:** Une fonction appelant une base de donn√©es.  Un `stub` simule la r√©ponse de la base de donn√©es sans r√©ellement interagir avec elle.  Cela permet de tester la fonction sans d√©pendre de l'√©tat de la base de donn√©es.\n\n* **Mock:** Un objet plus sophistiqu√© qui v√©rifie non seulement les appels √† des m√©thodes mais aussi leurs arguments.  Il permet de s'assurer que les interactions avec les d√©pendances se produisent comme pr√©vu.  Il est g√©n√©ralement utilis√© pour valider les interactions, pas juste les r√©sultats.\n\n    * **Exemple:** V√©rifier si une m√©thode `envoyerEmail` a √©t√© appel√©e avec les bons param√®tres (adresse email, sujet, corps du message).\n\n* **Fake:** Un objet qui fournit une impl√©mentation simplifi√©e d'une d√©pendance.  Il est souvent plus complet qu'un `stub` car il peut avoir une certaine logique interne, mais cette logique est plus simple et plus rapide que l'impl√©mentation r√©elle.\n\n    * **Exemple:** Utiliser une liste en m√©moire comme `fake` pour une base de donn√©es lors d'un test,  ce qui est plus rapide qu'une v√©ritable connexion √† une base de donn√©es.\n\n\n* **Spy:** Un objet qui enregistre les appels √† une fonction ou une m√©thode sans modifier leur comportement.  Il permet d'observer les appels et de v√©rifier qu'ils ont eu lieu avec les param√®tres attendus, sans influencer le comportement de la fonction espionn√©e.  Il sert souvent de compl√©ment √† un `mock` ou un `stub`.\n\n    * **Exemple:** Utiliser un `spy` pour compter le nombre d'appels √† une m√©thode sp√©cifique.\n\n**Exemple (Python avec `unittest.mock`):**\n\n```python\nimport unittest\nfrom unittest.mock import patch, Mock\n\nclass MyClass:\n    def ma_methode(self, param1, param2):\n        return param1 + param2\n\nclass MyTests(unittest.TestCase):\n    @patch('__main__.MyClass.ma_methode')  # Mock de la m√©thode ma_methode\n    def test_ma_methode(self, mock_ma_methode):\n        mock_ma_methode.return_value = 10  # Stub : retourne une valeur fixe\n        obj = MyClass()\n        resultat = obj.ma_methode(5, 5)  # L'appel r√©el ne se produit pas\n        self.assertEqual(resultat, 10)  # V√©rification du r√©sultat stubb√©\n\n        mock_ma_methode.assert_called_once_with(5, 5) # Mock : v√©rification des arguments\n```\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Isolation:** Permet de tester des unit√©s de code de mani√®re ind√©pendante de leurs d√©pendances.\n* **Fiabilit√©:** R√©duit les erreurs li√©es aux d√©pendances externes (bases de donn√©es, r√©seaux, etc.).\n* **Rapidit√©:** Les tests sont plus rapides car ils n'ont pas √† interagir avec des syst√®mes externes lents.\n* **R√©p√©tabilit√©:**  Les tests sont toujours reproductibles car l'environnement de test est contr√¥l√©.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La mise en place de mocks et stubs peut ajouter de la complexit√© aux tests.\n* **Maintenance:**  Les tests utilisant des mocks et stubs peuvent n√©cessiter une maintenance accrue si l'API des d√©pendances √©volue.\n* **Sur-mocking:** Un exc√®s de mocking peut masquer des probl√®mes d'int√©gration.\n* **Difficult√© de debug:** Des tests trop isol√©s peuvent rendre le debugging plus difficile si le probl√®me vient d'une interaction inattendue entre les diff√©rentes parties du syst√®me.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "e938662b-f332-4f3b-b8fd-b3729a7b352f",
        "title": "Optimisation",
        "description": "---\nid: 3ee82aac-362e-40bd-96ee-8c9734e0d8b9\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nL'optimisation consiste √† am√©liorer les performances d'un syst√®me, dans ce cas pr√©cis, d'une base de donn√©es et de la gestion des logs.  Cela vise √† r√©duire les temps de r√©ponse, √† augmenter le d√©bit et √† am√©liorer l'utilisation des ressources.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nCette note d√©crit deux techniques d'optimisation : l'augmentation de la pool de connexions pour la base de donn√©es et la bufferisation des logs.\n\n**1. Augmentation de la pool de connexions de la base de donn√©es:**\n\nUne pool de connexions est un ensemble de connexions pr√©-√©tablies √† la base de donn√©es.  Au lieu d'√©tablir une nouvelle connexion pour chaque requ√™te, l'application utilise les connexions disponibles dans la pool.  Augmenter la taille de cette pool permet de g√©rer un plus grand nombre de requ√™tes concurrentes, r√©duisant ainsi les temps d'attente et am√©liorant les performances.  Cependant, il est crucial de v√©rifier la configuration du param√®tre `max_connections` (ou un param√®tre √©quivalent) au niveau de la base de donn√©es elle-m√™me.  D√©passer cette limite peut mener √† des erreurs et √† une d√©gradation des performances.\n\n**Exemple (concept, pas de code sp√©cifique √† une base de donn√©es):**\n\nImaginons une application web avec 10 utilisateurs concurrents.  Si la pool de connexions est de taille 5, 5 utilisateurs devront attendre qu'une connexion devienne disponible avant de pouvoir interagir avec la base de donn√©es.  En augmentant la taille de la pool √† 20, plus d'utilisateurs pourront acc√©der simultan√©ment √† la base de donn√©es sans attente.\n\n**2. Bufferisation des logs:**\n\nLa journalisation (logging) peut √™tre une op√©ration co√ªteuse en termes de ressources, surtout avec un volume important de logs.  La bufferisation consiste √† accumuler les logs dans une m√©moire tampon (buffer) avant de les √©crire physiquement sur le disque ou de les envoyer √† un syst√®me de logging distant.  Cela permet de rendre l'√©criture des logs plus asynchrone, √©vitant ainsi de bloquer le thread principal de l'application et de surcharger la sortie standard.  Une fois le buffer plein (ou apr√®s un certain d√©lai), son contenu est √©crit en bloc, ce qui est plus efficace que l'√©criture de chaque log individuellement.\n\n**Exemple (concept):**\n\nAu lieu d'√©crire chaque message de log directement sur le disque, on les accumule dans un buffer de taille 1000 messages.  Une fois le buffer plein, on √©crit les 1000 messages en une seule op√©ration.  Cela r√©duit le nombre d'op√©rations d'√©criture sur le disque, ce qui am√©liore les performances.  Divers frameworks de logging offrent des m√©canismes de bufferisation.\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Augmentation de la pool de connexions:**  Am√©lioration significative des performances pour les applications avec un fort trafic concurrent.\n* **Bufferisation des logs:**  R√©duction de la charge sur le syst√®me et am√©lioration de la r√©activit√© de l'application, en particulier sous forte charge de logging.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Augmentation de la pool de connexions:**  Risque de saturation de la base de donn√©es si la taille de la pool d√©passe la limite `max_connections` d√©finie par le serveur de base de donn√©es.  Cela peut entra√Æner des erreurs et une d√©gradation des performances. N√©cessite une bonne compr√©hension des limites de la base de donn√©es.\n* **Bufferisation des logs:**  Peut introduire une latence dans la journalisation, ce qui peut compliquer le d√©bogage en temps r√©el si un probl√®me survient.  La gestion de la taille du buffer et de la fr√©quence d'√©criture est critique pour trouver le bon √©quilibre entre performance et temps de r√©ponse.  En cas de crash de l'application avant l'√©criture du buffer, les logs seront perdus.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "dda6a9ab-f010-41f6-9158-b779fa0e1bd6",
        "title": "Plugin Oauth2 Proxy Nexus",
        "description": "---\nid: 2fa8fce2-e236-4f36-b969-556a3f001603\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nLe plugin OAuth2Proxy pour Nexus est une extension qui ajoute une couche d'authentification bas√©e sur OAuth 2.0.  Il permet aux utilisateurs de se connecter √† Nexus via un fournisseur d'identit√© (IdP) comme Keycloak, Okta, etc., au lieu d'utiliser les m√©canismes d'authentification int√©gr√©s de Nexus.  Une fois authentifi√©, l'utilisateur re√ßoit un token permettant l'acc√®s aux ressources de Nexus (comme les d√©p√¥ts Maven) sans avoir besoin de fournir de nouveau ses identifiants.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nCe plugin agit comme un proxy inverse devant Nexus.  Au lieu d'acc√©der directement √† Nexus, les requ√™tes passent d'abord par OAuth2Proxy.  OAuth2Proxy intercepte la requ√™te, redirige l'utilisateur vers son IdP pour l'authentification. Une fois l'authentification r√©ussie aupr√®s de l'IdP, OAuth2Proxy v√©rifie le token re√ßu et, s'il est valide, redirige la requ√™te vers Nexus en ajoutant des informations d'authentification au header de la requ√™te (souvent un `Authorization: Bearer <token>`).  Cela permet √† Nexus d'identifier l'utilisateur sans avoir besoin d'une authentification directe.  L'utilisateur peut ainsi acc√©der aux ressources de Nexus uniquement si le token OAuth 2.0 est valide.\n\nLe plugin se configure g√©n√©ralement en d√©finissant l'URL de l'IdP, les identifiants de l'application enregistr√©e dans l'IdP, et les scopes n√©cessaires.  La configuration peut inclure des options avanc√©es comme la gestion des r√¥les et des autorisations.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **S√©curit√© am√©lior√©e:** D√©l√©gue l'authentification √† un syst√®me d'identit√© centralis√© et plus robuste, r√©duisant le risque d'attaques directes sur Nexus.\n* **Centralisation de l'authentification:** Gestion unique des utilisateurs et des mots de passe via l'IdP.\n* **Int√©gration avec diff√©rents IdP:** Compatible avec de nombreux fournisseurs d'identit√© populaires (Keycloak, Okta, Google, etc.).\n* **Acc√®s headless:** Permet aux outils automatis√©s (ex: scripts Maven, CI/CD) d'acc√©der √† Nexus en utilisant le token OAuth 2.0, sans intervention manuelle.\n* **Am√©lioration de l'exp√©rience utilisateur:**  Authentification unique (SSO) possible si l'IdP est d√©j√† utilis√© pour d'autres applications.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:** La configuration initiale peut √™tre complexe, n√©cessitant une bonne compr√©hension d'OAuth 2.0 et de la configuration de l'IdP.\n* **D√©pendance √† un IdP:**  N√©cessite un IdP fonctionnel et correctement configur√©.\n* **Surco√ªt de performance:** L'ajout d'un proxy interm√©diaire peut introduire une l√©g√®re latence.  Cependant, cela est g√©n√©ralement n√©gligeable.\n* **D√©bogage:** Le d√©bogage des probl√®mes d'authentification peut √™tre difficile, n√©cessitant une analyse des logs de l'IdP et d'OAuth2Proxy.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "d3ab7db6-fa95-43cb-acc9-4f7113eadee8",
        "title": "PouchDB",
        "description": "---\nid: 11870a2a-4362-4192-bc6e-f4b4c92ff908\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nPouchDB est une base de donn√©es NoSQL JavaScript open-source qui fonctionne comme une base de donn√©es client-side, imitant l'API de CouchDB.  Elle permet de stocker des donn√©es localement dans le navigateur ou un environnement Node.js, offrant des fonctionnalit√©s de synchronisation avec une base de donn√©es distante (comme CouchDB ou Cloudant).\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nPouchDB est une base de donn√©es JavaScript orient√©e document, ce qui signifie qu'elle stocke les donn√©es sous forme de documents JSON.  Elle impl√©mente une API similaire √† celle de CouchDB, facilitant la migration entre les deux.  Le principal avantage est la capacit√© de fonctionner hors connexion.  Les donn√©es sont stock√©es localement, et une fois la connexion r√©tablie, PouchDB se synchronise avec la base de donn√©es distante en utilisant des m√©canismes de r√©plication bidirectionnelle.  Cela permet aux applications web et mobiles de fonctionner m√™me sans acc√®s √† internet, les modifications √©tant sauvegard√©es localement et synchronis√©es ult√©rieurement.\n\nPouchDB utilise un syst√®me de versionnement des documents pour g√©rer les conflits lors de la synchronisation.  Si des modifications sont effectu√©es √† la fois localement et √† distance sur le m√™me document, PouchDB utilise un algorithme pour r√©soudre les conflits et fusionner les changements.  L'utilisateur peut personnaliser la gestion des conflits.\n\n**Exemple d'utilisation (ajout d'un document):**\n\n```javascript\nconst db = new PouchDB('mydb');\n\ndb.put({\n  _id: 'mydoc',\n  name: 'Example Document'\n}).then(() => {\n  console.log('Document added successfully!');\n}).catch((err) => {\n  console.log('Error adding document:', err);\n});\n```\n\n**Exemple de synchronisation avec une base de donn√©es distante (CouchDB):**\n\n```javascript\nconst remoteCouchDB = 'http://example.com:5984/mydb';\nconst db = new PouchDB('mydb');\n\ndb.sync(remoteCouchDB, {\n  live: true,\n  retry: true\n}).on('change', (info) => {\n    console.log(\"Changes detected, replicating...\");\n}).on('paused', (err) => {\n    console.log('Replication paused.');\n}).on('error', (err) => {\n    console.error('Replication failed.', err);\n});\n\n```\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Fonctionnement hors ligne:**  La principale force de PouchDB est sa capacit√© √† fonctionner sans connexion internet.\n* **Synchronisation facile:**  La r√©plication avec une base de donn√©es distante est simple √† mettre en ≈ìuvre.\n* **API intuitive:** L'API est similaire √† celle de CouchDB, facile √† apprendre et √† utiliser.\n* **Open source et communaut√© active:**  B√©n√©ficie d'une communaut√© active et d'une documentation compl√®te.\n* **L√©ger et performant:**  PouchDB est relativement l√©ger et performant, m√™me sur des appareils mobiles.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Gestion des conflits:** Bien que PouchDB g√®re les conflits,  la r√©solution automatique peut parfois √™tre complexe et n√©cessiter une intervention manuelle.\n* **Limites de taille des donn√©es:**  Pour des applications √† tr√®s grande √©chelle avec des volumes importants de donn√©es, PouchDB peut avoir ses limites.  Il est plus adapt√© aux applications n√©cessitant une persistance locale et une synchronisation r√©guli√®re.\n* **D√©pendance √† JavaScript:**  Son utilisation est intrins√®quement li√©e √† JavaScript et ne peut pas √™tre utilis√©e directement dans d'autres langages.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "a7f557fc-7458-4115-81c0-b3b481a4b64b",
        "title": "R2DBC",
        "description": "---\nid: bfc84f55-fe42-4506-951b-7f9edd1ac060\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nR2DBC (Reactive Relational Database Connectivity) est une sp√©cification pour acc√©der de mani√®re r√©active aux bases de donn√©es relationnelles depuis Java.  Il fournit une API asynchrone et non-bloquante, contrastant avec l'approche synchrone et bloquante de JDBC.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nR2DBC d√©finit une API pour interagir avec les bases de donn√©es relationnelles en utilisant un mod√®le r√©actif.  Au lieu de bloquer le thread d'ex√©cution en attendant la r√©ponse de la base de donn√©es, R2DBC utilise des m√©canismes asynchrones, permettant au thread de continuer √† traiter d'autres t√¢ches pendant que la requ√™te est ex√©cut√©e. Cela am√©liore l'efficacit√© et les performances, surtout dans les applications √† haute concurrence.\n\nContrairement √† JDBC, qui utilise des objets `Statement`, `ResultSet`, etc., R2DBC utilise un mod√®le bas√© sur `Flux` (de la librairie Reactor) pour les requ√™tes et les r√©sultats.  Cela permet de traiter les donn√©es de mani√®re asynchrone et r√©active, en utilisant des op√©rateurs comme `map`, `filter`, `flatMap`, etc.  L'API R2DBC est plus d√©clarative que JDBC, laissant la gestion de la concurrence et de l'asynchronisme au framework.\n\nVoici un exemple simplifi√© d'utilisation de R2DBC avec Spring Data R2DBC (Note:  Ce code est simplifi√© pour illustrer le concept.  Une impl√©mentation r√©elle n√©cessiterait plus de d√©tails):\n\n```kotlin\n@Repository\ninterface UserRepository : ReactiveCrudRepository<User, Long> {\n    // M√©thodes CRUD g√©n√©r√©es automatiquement\n}\n\n//Entit√© User\ndata class User(val id: Long?, val name: String)\n\n//Dans un service\n@Service\nclass UserService(private val userRepository: UserRepository){\n    fun getAllUsers(): Flux<User> = userRepository.findAll()\n}\n```\n\nCet exemple montre comment Spring Data R2DBC simplifie l'interaction avec la base de donn√©es en fournissant une impl√©mentation de `ReactiveCrudRepository`. Les op√©rations CRUD sont effectu√©es de mani√®re r√©active et asynchrone gr√¢ce √† l'utilisation de `Flux`.  Notez qu'il est n√©cessaire de g√©rer soi-m√™me les jointures avec R2DBC, contrairement √† certains ORM qui les g√®rent automatiquement.\n\n# Qu'est-ce qui est top ? üëç\n\n* **Performances:** L'approche asynchrone et non-bloquante am√©liore consid√©rablement les performances, surtout pour les applications √† forte charge.\n* **Scalabilit√©:**  R2DBC est mieux adapt√© √† la gestion de la concurrence et permet une meilleure scalabilit√© que JDBC.\n* **Int√©gration avec Spring:** L'int√©gration avec Spring Data R2DBC simplifie l'utilisation de R2DBC et permet de b√©n√©ficier des fonctionnalit√©s de Spring.\n* **R√©activit√©:** L'utilisation de `Flux` permet un traitement r√©actif des donn√©es.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La programmation r√©active peut √™tre plus complexe que la programmation synchrone traditionnelle.  Comprendre les concepts de `Flux`, `Mono`, et les op√©rateurs r√©actifs est crucial.\n* **Maturation:**  Bien que mature, R2DBC est une technologie plus r√©cente que JDBC, et certaines bases de donn√©es et outils peuvent avoir un support moins complet que pour JDBC.\n* **Gestion des jointures:**  R2DBC ne g√®re pas les jointures automatiquement, demandant une gestion explicite dans le code, ce qui peut complexifier les requ√™tes plus sophistiqu√©es.\n* **Debugging:** Le d√©bogage de code r√©actif peut √™tre plus difficile que le d√©bogage de code synchrone.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\nJDBC, Spring Data R2DBC, Project Reactor, bases de donn√©es relationnelles, programmation r√©active.\n"
    },
    {
        "id": "e0f385b0-ed98-4b3c-a1bf-b859880071c0",
        "title": "RGAA",
        "description": "---\nid: dd5ba0ba-bc56-46d7-8c93-631e4758609a\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nLe RGAA (R√©f√©rentiel G√©n√©ral d'Accessibilit√© pour les Administrations) est un r√©f√©rentiel fran√ßais qui d√©finit les crit√®res d'accessibilit√© num√©rique pour les sites web et applications des administrations publiques. Il s'appuie sur les WCAG (Web Content Accessibility Guidelines) internationales, mais les adapte au contexte fran√ßais et fournit des crit√®res plus pr√©cis et concrets.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLe RGAA vise √† garantir que les services num√©riques publics soient accessibles √† tous, y compris les personnes handicap√©es.  Il d√©finit des crit√®res d'accessibilit√© regroup√©s en quatre principes :\n\n* **Percevable:** L'information et les composants de l'interface utilisateur doivent √™tre pr√©sent√©s aux utilisateurs de mani√®re qu'ils puissent les percevoir.  Cela inclut des aspects comme le contraste des couleurs, les alternatives textuelles aux images, la transcription des contenus audio et vid√©o, etc.\n* **Op√©rable:** L'interface utilisateur doit √™tre op√©rable.  Cela signifie que les utilisateurs doivent pouvoir utiliser l'interface avec une vari√©t√© de dispositifs d'entr√©e, comme une souris, un clavier, un √©cran tactile, etc.  Cela comprend aussi des aspects comme la navigation au clavier, l'√©vitement des pi√®ges √† souris, etc.\n* **Compr√©hensible:** L'information et le fonctionnement de l'interface utilisateur doivent √™tre compr√©hensibles.  Cela implique une r√©daction claire et concise, une navigation intuitive, l'utilisation d'un langage simple, etc.\n* **Robuste:** Le contenu doit √™tre robuste, c'est-√†-dire compatible avec un large √©ventail de technologies d'assistance et d'appareils.\n\nChaque principe est ensuite d√©clin√© en crit√®res plus sp√©cifiques, avec des niveaux de conformit√© (A, AA, AAA).  La version actuelle du RGAA est la version 4.0.  L'√©valuation de la conformit√© au RGAA se fait g√©n√©ralement via des audits, manuels ou automatis√©s, qui permettent d'identifier les points d'am√©lioration pour rendre un site web ou une application plus accessible.\n\n**Exemple concret:** Un crit√®re du RGAA pourrait √™tre \"Le texte doit avoir un contraste suffisant avec l'arri√®re-plan\".  Cela signifie que la diff√©rence de luminosit√© entre le texte et l'arri√®re-plan doit √™tre suffisamment importante pour √™tre per√ßue par les personnes malvoyantes.\n\n# Qu'est-ce qui est top ? üëç\n\n* **Cadre clair et pr√©cis:**  Le RGAA fournit des crit√®res concrets et mesurables pour l'accessibilit√©, ce qui facilite l'√©valuation et l'am√©lioration de l'accessibilit√© des sites web et applications.\n* **Adaptation au contexte fran√ßais:**  Il adapte les WCAG au contexte fran√ßais, ce qui le rend plus pertinent pour les administrations publiques fran√ßaises.\n* **Am√©lioration de l'inclusion:**  Il contribue √† am√©liorer l'inclusion num√©rique et permet √† un plus grand nombre de personnes d'acc√©der aux services en ligne.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:**  Le RGAA est un r√©f√©rentiel complexe avec de nombreux crit√®res et niveaux de conformit√©, ce qui peut rendre sa mise en ≈ìuvre difficile.\n* **Co√ªt:**  L'audit et la mise en conformit√© avec le RGAA peuvent engendrer des co√ªts importants, notamment pour les sites web complexes.\n* **√âvolution constante:**  Les technologies et les besoins des personnes handicap√©es √©voluent, ce qui n√©cessite une mise √† jour r√©guli√®re du RGAA.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n\n(Laisser vide)\n"
    },
    {
        "id": "d460347c-b86a-4170-ad92-1f2f8cf350ab",
        "title": "Resource et RxResource (Angular)",
        "description": "---\nid: 5114a4ec-5c32-4fb5-bfd6-2d475c4cbb42\n---\n# Rapidement c'est quoi‚ùì\n\n`Resource` et `RxResource` (Angular) sont des m√©canismes facilitant la gestion des appels API dans les applications Angular. Ils encapsulent la logique de requ√™te HTTP et fournissent une interface r√©active pour suivre l'√©tat de la requ√™te (chargement, succ√®s, erreur).  `RxResource` utilise RxJS pour une gestion asynchrone plus avanc√©e.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n`Resource` et `RxResource` sont des abstractions con√ßues pour simplifier l'interaction avec des API RESTful dans Angular.  Ils permettent d'√©viter la r√©p√©tition de code pour les appels HTTP courants (GET, POST, PUT, DELETE).  Au lieu d'√©crire manuellement des appels `HttpClient`, vous utilisez une instance `Resource` ou `RxResource` configur√©e avec l'URL de votre API et les m√©thodes HTTP appropri√©es.\n\n**`Resource`:**  Cette approche plus basique utilise les promesses JavaScript pour g√©rer les r√©ponses asynchrones.  Elle fournit des propri√©t√©s pour suivre l'√©tat de la requ√™te (par exemple, `isLoading`, `data`, `error`).  L'acc√®s aux donn√©es se fait via ces propri√©t√©s une fois la promesse r√©solue.\n\n**`RxResource`:**  Cette version plus sophistiqu√©e exploite les observables RxJS.  Elle offre une interface plus r√©active et plus puissante, permettant de g√©rer facilement les flux de donn√©es et les erreurs.  L'√©tat de la requ√™te (chargement, succ√®s, erreur) est √©mis sous forme d'√©v√©nements observables, permettant des mises √† jour dynamiques de l'interface utilisateur et une gestion fine des erreurs.  Ceci est particuli√®rement utile pour les requ√™tes longues ou multiples.\n\nPour les deux, la configuration se fait g√©n√©ralement via la d√©finition d'une classe qui sp√©cifie l'URL de base et les actions (GET, POST, etc.).  Ces actions sont ensuite appel√©es pour d√©clencher les requ√™tes HTTP.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **R√©duction de la Boilerplate:**  R√©duction significative du code n√©cessaire pour g√©rer les appels API.\n* **Gestion centralis√©e des erreurs:**  Facilite la gestion des erreurs r√©seau et des erreurs c√¥t√© serveur.\n* **Am√©lioration de la lisibilit√© du code:**  S√©pare la logique de gestion des requ√™tes HTTP du reste du code applicatif.\n* **`RxResource` et la r√©activit√©:**  Avec `RxResource`, une int√©gration naturelle avec la programmation r√©active d'Angular et RxJS, pour une meilleure gestion des flux de donn√©es asynchrones.\n* **Testabilit√© am√©lior√©e:**  Les classes `Resource` ou `RxResource` sont plus faciles √† tester que des appels `HttpClient` directement int√©gr√©s dans les composants.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension des promesses (pour `Resource`) ou des observables RxJS (pour `RxResource`).\n* **Complexit√© potentielle:**  Pour les applications simples, l'utilisation de `Resource` ou `RxResource` peut ajouter une complexit√© inutile.\n* **D√©pendance:**  Ajoute une d√©pendance suppl√©mentaire au projet.\n* **Maintenance:**  N√©cessite une maintenance √† long terme si l'API √©volue.  Il faut adapter les d√©finitions des `Resource` ou `RxResource`.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "7a750faf-40c3-463b-8bab-e6e1e0be4af2",
        "title": "Rio",
        "description": "---\nid: bd8cfc04-d694-45ba-b346-084595d3ab27\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nRio est une librairie Python permettant de cr√©er des interfaces web directement en Python, sans n√©cessiter de connaissances approfondies en HTML, CSS ou JavaScript.  Elle facilite la cr√©ation d'interfaces utilisateur pour des applications et scripts Python.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nRio utilise un mod√®le d√©claratif pour construire des interfaces utilisateur.  Au lieu d'√©crire du HTML et du CSS, vous d√©crivez la structure et le style de votre page web √† l'aide de fonctions Python. Rio g√®re ensuite la conversion en HTML, CSS et JavaScript n√©cessaires pour afficher la page dans un navigateur.  Cela permet de cr√©er des applications web interactives en exploitant les capacit√©s de Python, notamment pour le traitement de donn√©es et la logique m√©tier.\n\nRio s'appuie sur des composants modulaires et r√©utilisables pour construire des interfaces complexes.  Il permet de g√©rer des √©v√©nements utilisateur (clics, soumissions de formulaires, etc.) directement depuis le code Python.  L'interaction avec le serveur (si n√©cessaire) se fait √©galement via du code Python.\n\n**Exemple (simplifi√©):**\n\n```python\nimport rio\n\napp = rio.App()\n\n@app.route(\"/\")\ndef index():\n  return rio.html.div(\"Hello, world!\")\n\napp.run()\n```\n\nCe code simple cr√©e une page web affichant \"Hello, world!\".  La fonction `index` est d√©cor√©e avec `@app.route(\"/\")` pour indiquer qu'elle g√®re la requ√™te √† la racine du site.  `rio.html.div` cr√©e un √©l√©ment HTML `<div>`.\n\nDes exemples plus complexes pourraient inclure des formulaires, des tableaux, des graphiques, et une interaction plus sophistiqu√©e avec le serveur.\n\n## Qu'est-ce qui est top ? üëç\n\n* **D√©veloppement rapide:**  La programmation en Python permet un d√©veloppement plus rapide et plus efficace que le d√©veloppement web traditionnel avec HTML, CSS et JavaScript.\n* **Int√©gration facile avec les scripts Python:** Rio s'int√®gre facilement aux applications et scripts Python existants.\n* **Mod√®le d√©claratif:** La d√©claration de l'interface utilisateur rend le code plus lisible et plus facile √† maintenir.\n* **Abstraction:** Rio masque la complexit√© sous-jacente du d√©veloppement web, permettant aux d√©veloppeurs Python de se concentrer sur la logique m√©tier.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Communaut√© limit√©e:**  Compar√© √† des frameworks web populaires comme Flask ou Django, Rio a une communaut√© plus petite, ce qui peut impacter le support et la disponibilit√© des ressources.\n* **Performance potentielle:**  L'interpr√©tation Python pourrait engendrer une performance l√©g√®rement inf√©rieure √† celle d'applications web construites avec des technologies compil√©es.  Cependant, pour beaucoup d'applications, cette diff√©rence sera n√©gligeable.\n* **Flexibilit√© limit√©e (potentielle):**  Bien que Rio permette une grande partie des fonctionnalit√©s web, il pourrait manquer certaines fonctionnalit√©s tr√®s sp√©cifiques ou n√©cessiter des solutions de contournement pour des cas d'utilisation avanc√©s.\n* **D√©pendances:** Rio ajoute une d√©pendance suppl√©mentaire √† votre projet.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "7663b49c-a5f3-421b-84ef-262d66c0c6ad",
        "title": "R√©flexion (Java)",
        "description": "---\nid: 16be4a3f-fb5e-4258-b88a-d8f3bd3f5389\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nLa r√©flexion en Java est une fonctionnalit√© puissante qui permet √† un programme de manipuler ses propres structures et comportements √† l'ex√©cution.  Elle permet d'inspecter et de modifier les classes, les m√©thodes, les champs, etc., dynamiquement.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLa r√©flexion en Java s'appuie sur les classes du package `java.lang.reflect`.  Ces classes fournissent des interfaces pour interagir avec les m√©tadonn√©es des classes et des objets √† l'ex√©cution.  On peut, par exemple :\n\n* **Obtenir des informations sur une classe:**  Nom de la classe, ses interfaces impl√©ment√©es, ses constructeurs, ses m√©thodes, ses champs (variables d'instance et statiques).  Cela se fait via la classe `Class`.\n* **Cr√©er des instances de classes dynamiquement:**  Invoquer un constructeur d'une classe dont le nom n'est connu qu'√† l'ex√©cution.\n* **Invoquer des m√©thodes dynamiquement:**  Appeler une m√©thode d'un objet, m√™me si le nom de la m√©thode n'est pas connu √† la compilation.\n* **Acc√©der aux champs dynamiquement:**  Lire ou modifier la valeur d'un champ d'un objet.\n* **Cr√©er des proxies:**  G√©n√©rer dynamiquement des classes qui impl√©mentent des interfaces donn√©es, interceptant les appels de m√©thodes pour ajouter du comportement (AOP).\n\n**Exemple:**\n\n```java\nClass<?> myClass = Class.forName(\"com.example.MyClass\"); // R√©cup√®re la classe MyClass dynamiquement\nMethod myMethod = myClass.getMethod(\"myMethod\", String.class); // R√©cup√®re la m√©thode myMethod\nObject myObject = myClass.getDeclaredConstructor().newInstance(); // Cr√©e une instance de MyClass\nObject result = myMethod.invoke(myObject, \"Hello\"); // Appelle la m√©thode myMethod avec l'argument \"Hello\"\nSystem.out.println(result); // Affiche le r√©sultat de l'appel de m√©thode\n```\n\nCet exemple montre comment r√©cup√©rer une classe, une m√©thode, cr√©er une instance et invoquer la m√©thode dynamiquement.  `Class.forName()` est une m√©thode cl√© pour r√©cup√©rer une r√©f√©rence de classe √† partir d'un nom de classe (String).\n\n## Qu'est-ce qui est top ? üëç\n\n* **Flexibilit√©:** Permet de cr√©er des applications tr√®s dynamiques et configurables, adaptant leur comportement √† l'ex√©cution.\n* **Extension du code:**  Facilite la cr√©ation d'outils de d√©veloppement tels que les frameworks de test, les outils de monitoring ou les debuggers.\n* **Interop√©rabilit√©:**  Permet d'interagir avec des librairies ou des composants dont la structure n'est pas connue √† la compilation.\n* **Frameworks puissants:**  Fondamentale pour des frameworks comme Spring qui utilisent la r√©flexion pour l'injection de d√©pendances et l'AOP.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Performances:**  L'utilisation intensive de la r√©flexion peut impacter les performances, car elle n√©cessite une recherche et une manipulation dynamiques des m√©tadonn√©es.\n* **S√©curit√©:**  Une mauvaise utilisation de la r√©flexion peut exposer √† des failles de s√©curit√©, notamment en permettant l'acc√®s ou la modification non autoris√©e de donn√©es.\n* **Complexit√©:**  Le code utilisant la r√©flexion peut √™tre plus complexe √† lire, √† maintenir et √† d√©boguer que le code traditionnel.\n* **Erreurs √† l'ex√©cution:**  Les erreurs li√©es √† la r√©flexion surviennent souvent √† l'ex√©cution plut√¥t qu'√† la compilation, rendant le debugging plus difficile.\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "a4d130be-3eb5-4ee3-8991-f9ca30af1689",
        "title": "Serialisation-Deserialisation",
        "description": "---\nid: ea084ff5-b622-4420-b2ee-d8a3d6cb1ea5\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nLa s√©rialisation et la d√©s√©rialisation sont des processus qui permettent de convertir un objet en une repr√©sentation lin√©aire (g√©n√©ralement un flux de donn√©es comme un fichier, une cha√Æne de caract√®res ou un flux r√©seau) et inversement. La s√©rialisation transforme l'objet en cette repr√©sentation, tandis que la d√©s√©rialisation reconstitue l'objet √† partir de cette repr√©sentation.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nLa s√©rialisation permet de stocker des objets complexes dans un format persistant ou de les transmettre sur un r√©seau.  Elle implique de convertir l'√©tat d'un objet, incluant ses attributs et √©ventuellement ses relations avec d'autres objets, en une s√©quence de bits.  La d√©s√©rialisation est le processus inverse : √† partir de cette s√©quence de bits, elle reconstitue l'objet dans sa forme originale, avec ses attributs et ses relations.\n\nPlusieurs formats et techniques existent pour la s√©rialisation/d√©s√©rialisation :\n\n* **Formats de donn√©es:** JSON, XML, Protocol Buffers, Avro, etc.  Chaque format a ses avantages et inconv√©nients en termes de lisibilit√©, taille des donn√©es, performance et compatibilit√©.\n* **Techniques de s√©rialisation:**  La s√©rialisation peut √™tre impl√©ment√©e de diff√©rentes mani√®res, notamment via la r√©flexion (Java utilise souvent cette m√©thode avec des biblioth√®ques comme Jackson ou Gson), ou via des techniques de g√©n√©ration de code AOT (Ahead-Of-Time) plus performantes.  La r√©flexion implique d'analyser la structure des classes au runtime, ce qui peut √™tre co√ªteux en termes de performance.  Les approches AOT g√©n√®rent du code sp√©cifique pour chaque classe, optimisant ainsi le processus de s√©rialisation/d√©s√©rialisation.\n\n**Exemple (Java avec Jackson):**\n\n```java\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class User {\n    public String name;\n    public int age;\n\n    public User(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public static void main(String[] args) throws Exception {\n        ObjectMapper mapper = new ObjectMapper();\n        User user = new User(\"John Doe\", 30);\n\n        // S√©rialisation en JSON\n        String jsonString = mapper.writeValueAsString(user);\n        System.out.println(\"JSON: \" + jsonString);\n\n        // D√©s√©rialisation √† partir de JSON\n        User user2 = mapper.readValue(jsonString, User.class);\n        System.out.println(\"Name: \" + user2.name + \", Age: \" + user2.age);\n    }\n}\n```\n\nCet exemple montre comment Jackson s√©rialise un objet `User` en JSON et le d√©s√©rialise ensuite.\n\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Persistance des donn√©es:**  Possibilit√© de sauvegarder l'√©tat d'objets dans un stockage persistant (fichiers, bases de donn√©es).\n* **Communication r√©seau:**  Transmission d'objets complexes sur un r√©seau.\n* **Interop√©rabilit√©:**  Utilisation de formats standardis√©s comme JSON ou XML pour l'√©change de donn√©es entre diff√©rents syst√®mes et langages de programmation.\n* **Approches AOT (pour certaines technologies):**  Performance significativement am√©lior√©e par rapport √† la r√©flexion.\n\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© de l'impl√©mentation:**  La conception d'un syst√®me de s√©rialisation/d√©s√©rialisation robuste et efficace peut √™tre complexe.\n* **S√©curit√©:**  Une s√©rialisation mal con√ßue peut pr√©senter des failles de s√©curit√© (par exemple, des attaques de d√©s√©rialisation).\n* **Performances (r√©flexion):**  L'utilisation de la r√©flexion peut √™tre co√ªteuse en termes de performance, surtout pour des objets complexes ou de grands volumes de donn√©es.\n* **Gestion des versions:**  La compatibilit√© entre diff√©rentes versions des sch√©mas de donn√©es peut √™tre un d√©fi.\n\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "53302f5c-252d-4a66-9511-c7a0262ad123",
        "title": "Spring Batch",
        "description": "---\nid: 2c0ef40f-9587-45c4-bef7-b2db691c9065\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nSpring Batch est un framework l√©ger, puissant et complet de traitement par lots pour Java. Il permet de d√©velopper des applications robustes et performantes pour traiter de grands volumes de donn√©es de mani√®re fiable et efficace. Il s'appuie sur des concepts de base comme la lecture, le traitement et l'√©criture de donn√©es par lots, en utilisant une approche de type pipeline.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring Batch automatise le traitement de grands volumes de donn√©es de fa√ßon fiable et efficace.  Il est con√ßu pour des applications qui requi√®rent des op√©rations r√©p√©titives et volumineuses sur les donn√©es, comme le chargement de donn√©es, la transformation de donn√©es, ou la g√©n√©ration de rapports.  Le framework structurait le processus en **Jobs**, qui sont des t√¢ches globales, divis√©s en **Steps**.  Chaque Step consiste en trois phases principales :\n\n* **Read (Lecture):**  Lit les donn√©es depuis une source (base de donn√©es, fichier plat, etc.).  Plusieurs `ItemReader` impl√©mentent des sources vari√©es, telles que `JdbcCursorItemReader` (pour les requ√™tes SQL), `FlatFileItemReader` (pour les fichiers plats), `RepositoryItemReader` (pour les repositories Spring Data).\n\n* **Process (Traitement):** Transforme les donn√©es lues. Un `ItemProcessor` effectue cette transformation.  On peut utiliser des mappers comme MapStruct pour simplifier cette √©tape.\n\n* **Write (Ecriture):** Enregistre les donn√©es trait√©es dans une destination (base de donn√©es, fichier, etc.).  Divers `ItemWriter` sont disponibles, dont `JdbcBatchItemWriter`, `FlatFileItemWriter`, et `RepositoryItemWriter` (pour les repositories Spring Data).\n\nChaque phase utilise des interfaces pour une grande flexibilit√©.  Spring Batch g√®re √©galement la gestion des erreurs, le commit/rollback des transactions, le restarting des jobs en cas d'erreur, et la surveillance de l'ex√©cution. La gestion du chunk (traitement de donn√©es par blocs) optimise les performances.\n\n**Exemple simplifi√© (sans code complet):**  Imaginons un job qui importe des donn√©es d'un fichier CSV dans une base de donn√©es.\n\n1. **Job:** \"ImporterDonn√©esCSV\"\n2. **Step:** \"ImporterDonn√©es\"\n    * **Read:** `FlatFileItemReader` lit les lignes du fichier CSV.\n    * **Process:** `ItemProcessor` transforme chaque ligne en objet Java.\n    * **Write:** `JdbcBatchItemWriter` ins√®re les objets Java dans la base de donn√©es.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Fiabilit√©:** Gestion robuste des erreurs et reprise sur erreur.\n* **Performance:** Traitement par lots optimis√©, gestion des transactions et du chunking.\n* **Flexibilit√©:** Large gamme de lecteurs, processeurs et √©crivains pour diff√©rentes sources et destinations de donn√©es.\n* **Int√©gration Spring:** S'int√®gre parfaitement avec d'autres composants Spring.\n* **D√©bogage et surveillance:** Facilite le suivi et le d√©bogage des jobs.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** Peut √™tre complexe √† mettre en ≈ìuvre pour des t√¢ches simples. La courbe d'apprentissage est assez raide.\n* **Configuration XML (ancienne version):** Bien que la configuration bas√©e sur annotations soit privil√©gi√©e, la configuration XML peut √™tre complexe √† comprendre.\n* **D√©pendances:** N√©cessite plusieurs d√©pendances Spring.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "67a33c81-2bce-4911-ae4d-3080d557425e",
        "title": "Spring Cloud Open Feign",
        "description": "---\nid: a64c1da0-4ff7-4acc-b305-83aeff5d5079\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nSpring Cloud Open Feign est une librairie Java qui simplifie la cr√©ation de clients HTTP pour consommer des API REST.  Elle s'int√®gre parfaitement √† l'√©cosyst√®me Spring Cloud et permet de d√©clarer des interfaces Java qui sont automatiquement traduites en clients HTTP, √©liminant la n√©cessit√© d'√©crire du code boilerplate pour les appels REST.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring Cloud Open Feign repose sur la librairie Feign, mais l'enrichit avec des fonctionnalit√©s sp√©cifiques √† Spring Cloud, notamment l'int√©gration avec Ribbon pour le load balancing et Hystrix pour la gestion des erreurs et la tol√©rance aux pannes.  Au lieu d'√©crire du code pour chaque appel REST (par exemple, avec RestTemplate), on d√©finit une interface Java annot√©e avec des annotations Feign (comme `@GetMapping`, `@PostMapping`, etc.).  Feign se charge ensuite de cr√©er un proxy qui impl√©mente cette interface et g√®re les appels HTTP sous-jacents.\n\n**Exemple:**\n\nImaginons une API REST qui fournit des informations sur les utilisateurs.  On pourrait d√©finir une interface Feign comme suit :\n\n```java\n@FeignClient(name = \"user-service\")\npublic interface UserService {\n\n    @GetMapping(\"/users/{id}\")\n    User getUser(@PathVariable(\"id\") Long id);\n\n    @PostMapping(\"/users\")\n    User createUser(@RequestBody User user);\n}\n```\n\n`@FeignClient(\"user-service\")` indique que cette interface est un client pour un service nomm√© \"user-service\".  Feign se charge ensuite de trouver ce service (g√©n√©ralement via un registre de services comme Eureka) et de cr√©er un proxy qui impl√©mente `UserService`.  On peut ensuite injecter ce proxy dans d'autres classes et l'utiliser comme n'importe quelle autre classe Java :\n\n```java\n@Autowired\nprivate UserService userService;\n\n// ...\n\nUser user = userService.getUser(1L);\n```\n\nSpring Cloud Open Feign g√®re automatiquement les d√©tails de l'appel HTTP, y compris la construction de l'URL, la gestion des en-t√™tes HTTP, la s√©rialisation/d√©s√©rialisation des donn√©es JSON, et le load balancing si plusieurs instances du \"user-service\" sont disponibles.\n\n# Qu'est-ce qui est top ? üëç\n\n* **Simplicit√© et lisibilit√©:**  Le code est beaucoup plus propre et facile √† lire que lorsqu'on utilise `RestTemplate` directement.\n* **D√©claratif:** On d√©finit les appels REST de mani√®re d√©clarative, ce qui rend le code plus maintenable et moins sujet aux erreurs.\n* **Int√©gration Spring Cloud:** S'int√®gre parfaitement avec d'autres composants Spring Cloud comme Ribbon et Hystrix.\n* **Tests facilit√©s:**  Les interfaces Feign sont facilement testables avec des mocks.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension de base de Feign et des annotations Spring.\n* **D√©bogage:**  Le d√©bogage peut √™tre plus difficile que lorsqu'on utilise `RestTemplate` directement, car la logique HTTP est cach√©e derri√®re le proxy Feign.\n* **Complexit√© pour des cas d'utilisation avanc√©s:** Pour des sc√©narios HTTP complexes (gestion de plusieurs types de r√©ponses,  gestion fine des erreurs HTTP non g√©r√©s par Hystrix, ...), il peut √™tre n√©cessaire de recourir √† des configurations et des intercepteurs plus avanc√©s.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n\n(Laisser vide)\n"
    },
    {
        "id": "06c3248f-0cd0-4455-806d-fbc11f2130ae",
        "title": "Spring Cloud Square",
        "description": "---\nid: fba146b1-f075-4072-9323-b9af98af76bd\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nSpring Cloud Square est une biblioth√®que Java open-source qui simplifie la cr√©ation et la gestion de microservices bas√©s sur Spring Boot.  Elle utilise un registre de services (comme Eureka ou Consul) pour permettre aux services de se d√©couvrir et de communiquer entre eux.  Elle s'appuie sur le pattern \"sidecar\" pour injecter des fonctionnalit√©s suppl√©mentaires sans modifier le code des microservices.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring Cloud Square n'est pas une biblioth√®que existante √† ma connaissance. Le lien fourni pointe vers un article de blog Spring de 2021 qui introduit *Spring Cloud 2021*.  Il n'y a pas de mention de \"Spring Cloud Square\".  L'article discute de nouvelles fonctionnalit√©s et am√©liorations dans Spring Cloud, dont l'am√©lioration de la gestion des microservices.  Il n'y a pas de nouvelle biblioth√®que sp√©cifique nomm√©e \"Spring Cloud Square\".\n\nPour clarifier, Spring Cloud (sans \"Square\") fournit des outils pour construire des applications distribu√©es bas√©es sur des microservices.  Ces outils incluent :\n\n* **D√©couverte de services:**  Permet aux microservices de se trouver les uns les autres via un serveur de registre.\n* **Gestion de la configuration:**  Centralise la gestion des param√®tres de configuration.\n* **Gestion de circuit breakers:**  Prot√®ge les applications contre les pannes de services d√©pendants.\n* **Routage intelligent:**  Distribue le trafic entre les instances d'un service.\n\n\nIl est possible que \"Spring Cloud Square\" soit un nom interne, un projet non-officiel, ou une interpr√©tation erron√©e.  Sans plus d'informations, il est impossible de fournir une description pr√©cise de son fonctionnement.  L'int√©gration avec OkHttp et Retrofit est √©galement impossible √† d√©tailler sans une d√©finition claire de \"Spring Cloud Square\".\n\n## Qu'est-ce qui est top ? üëç\n\n(Impossible √† r√©pondre sans une description claire de \"Spring Cloud Square\")\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n(Impossible √† r√©pondre sans une description claire de \"Spring Cloud Square\")\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Si \"Spring Cloud Square\" existait, il serait probablement li√© √† d'autres projets Spring Cloud comme Spring Boot, Eureka, Consul, Ribbon, Hystrix, etc.)\n"
    },
    {
        "id": "c2ae4899-2bd6-4b4b-ae74-f143bf33dfa6",
        "title": "Spring Cloud Stream",
        "description": "---\nid: f64ebe55-d2d7-479a-b490-91a369e08354\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nSpring Cloud Stream est un framework bas√© sur Spring Boot qui simplifie la cr√©ation d'applications microservices qui communiquent de mani√®re asynchrone via des messages.  Il fournit une abstraction au-dessus de diff√©rentes technologies de messagerie comme Kafka, RabbitMQ, etc., permettant de changer de technologie sans modifier le code applicatif.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nSpring Cloud Stream fournit un mod√®le de programmation bas√© sur des flux de donn√©es (streams) et des liaisons (bindings).  Les applications utilisent des interfaces `@Input` et `@Output` pour d√©finir des points d'entr√©e et de sortie pour les messages.  Spring Cloud Stream g√®re la configuration et la connexion √† la technologie de messagerie sous-jacente.\n\nLe framework s'appuie sur les concepts suivants:\n\n* **Bindings:**  Des liens entre l'application et le broker de messages. Ils d√©finissent comment les messages sont envoy√©s et re√ßus.  On peut les configurer √† l'aide de propri√©t√©s.\n* **Destinations:**  Des files d'attente ou des topics (selon la technologie de messagerie) o√π les messages sont envoy√©s et re√ßus.  Le nom de la destination est configur√© via les propri√©t√©s.\n* **Processors:** Composants qui consomment les messages d'une destination et les envoient vers une autre.\n* **Sources:** Composants qui envoient des messages vers une destination.\n* **Sinks:** Composants qui consomment des messages d'une destination.\n\n**Exemple (Kafka):**\n\n```java\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.annotation.StreamListener;\nimport org.springframework.cloud.stream.messaging.Sink;\nimport org.springframework.messaging.Message;\n\n@EnableBinding(Sink.class) // Utilise l'interface Sink fournie par Spring Cloud Stream\npublic class MessageConsumer {\n\n    @StreamListener(Sink.INPUT) // √âcoute les messages sur la destination \"input\"\n    public void receive(Message<String> message) {\n        String payload = message.getPayload();\n        System.out.println(\"Received message: \" + payload);\n        // Traitement du message...\n    }\n}\n```\n\nCe code d√©finit un consommateur de messages qui √©coute sur la destination `input` (d√©finie par d√©faut par `Sink`).  La configuration de Kafka sera g√©r√©e automatiquement par Spring Cloud Stream via les propri√©t√©s d'application.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Abstraction:**  Simplifie l'interaction avec les brokers de messages. Le changement de technologie est facile gr√¢ce √† la configuration.\n* **Simplicit√©:**  Mod√®le de programmation d√©claratif et facile √† utiliser gr√¢ce aux annotations.\n* **Int√©gration Spring Boot:**  Int√©gration transparente avec l'√©cosyst√®me Spring.\n* **√âvolutivit√©:**  Con√ßu pour des applications distribu√©es et √©volutives.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© (potentielle):** La configuration peut devenir complexe pour des sc√©narios avanc√©s.\n* **D√©pendances:**  N√©cessite des d√©pendances suppl√©mentaires pour les diff√©rentes technologies de messagerie.\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension de base des concepts de messagerie asynchrone.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "14875961-7083-4170-b55a-5fcc5c10d848",
        "title": "Spring_ApplicationEvent",
        "description": "---\nid: 9d4a3b37-f1cd-4e24-a3ea-7c477784e113\n---\n# Spring ApplicationEvent\n\n---\n\n# **Rapidement, c'est quoi ? ‚ùì**\n\nUn `ApplicationEvent` dans Spring est un m√©canisme permettant de publier et de g√©rer des √©v√©nements au sein d'une application.  Il permet de d√©-coupler diff√©rentes parties du code et de r√©agir √† des √©v√©nements sp√©cifiques sans avoir besoin d'une connaissance directe des autres composants.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\n`ApplicationEvent` est une classe abstraite dans Spring qui sert de base pour tous les √©v√©nements de l'application.  Pour cr√©er un √©v√©nement personnalis√©, on h√©rite de cette classe et on fournit les donn√©es n√©cessaires.  Spring fournit un m√©canisme d'√©coute (listeners) bas√© sur le pattern \"Observer\".  Lorsqu'un √©v√©nement est publi√© (`ApplicationEventPublisher.publishEvent()`), tous les listeners enregistr√©s qui s'int√©ressent √† ce type d'√©v√©nement sont notifi√©s et peuvent y r√©agir.\n\nLe fonctionnement repose sur :\n\n* **`ApplicationEvent`:**  Classe abstraite repr√©sentant un √©v√©nement.  Contient un champ `source` qui repr√©sente l'objet qui a d√©clench√© l'√©v√©nement.\n* **`ApplicationEventPublisher`:** Interface permettant de publier des √©v√©nements.  L'impl√©mentation la plus courante est `ApplicationContext`.\n* **`ApplicationListener<T extends ApplicationEvent>`:** Interface pour les listeners.  On impl√©mente la m√©thode `onApplicationEvent(T event)` qui sera appel√©e lorsque l'√©v√©nement est publi√©.  Le param√®tre `T` sp√©cifie le type d'√©v√©nement auquel le listener s'abonne.\n* **`@EventListener` annotation:** An annotation based approach that simplifies the definition of listeners. This approach is preferred over explicitly implementing `ApplicationListener`.\n\n**Exemple concret avec annotation `@EventListener`:**\n\n```java\nimport org.springframework.context.event.EventListener;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class MyEventListener {\n\n    @EventListener\n    public void handleMyEvent(MyCustomEvent event) {\n        System.out.println(\"MyCustomEvent received: \" + event.getMessage());\n    }\n}\n\n// D√©finition d'un √©v√©nement personnalis√©\npublic class MyCustomEvent extends ApplicationEvent {\n    private final String message;\n\n    public MyCustomEvent(Object source, String message) {\n        super(source);\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\n\n//Publication de l'√©v√®nement :\n// ApplicationContext applicationContext;\n// applicationContext.publishEvent(new MyCustomEvent(this, \"Hello from event\"));\n```\n\nCet exemple montre comment cr√©er un listener qui √©coute un √©v√©nement personnalis√© (`MyCustomEvent`).  L'annotation `@EventListener` indique √† Spring qu'il faut l'enregistrer comme listener pour ce type d'√©v√©nement.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **D√©couplage:**  Permet de d√©-coupler les diff√©rents composants de l'application.  Les √©metteurs d'√©v√©nements n'ont pas besoin de conna√Ætre les listeners.\n* **Flexibilit√©:**  Facile √† √©tendre et √† adapter √† de nouveaux types d'√©v√©nements.\n* **Simplicit√©:** L'utilisation de l'annotation `@EventListener` rend la d√©claration des listeners tr√®s concise.\n* **Asynchrone (avec conditions):**  L'utilisation de `@Async` sur la m√©thode de l'√©coute permet un traitement asynchrone.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© potentielle:**  Pour des applications tr√®s complexes avec de nombreux √©v√©nements et listeners, la gestion peut devenir difficile.\n* **D√©bogage:**  Le d√©bogage d'√©v√©nements peut √™tre complexe si les listeners ne sont pas correctement configur√©s.\n* **Ordre de traitement non garanti:** Le traitement des √©v√©nements par les listeners n'est pas garanti dans un ordre pr√©cis, sauf si une strat√©gie particuli√®re est mise en place.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "40cef7bb-7d89-483d-91f3-6beec18bfd04",
        "title": "Streamlit",
        "description": "---\nid: 43c514bb-6740-4553-bb6a-8a2186187deb\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nStreamlit est une librairie Python open-source qui permet de cr√©er rapidement et facilement des applications web interactives pour visualiser et partager des donn√©es.  Elle simplifie le processus de d√©veloppement en r√©duisant le besoin de connaissances approfondies en d√©veloppement web frontal.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nStreamlit fournit un framework permettant de construire des applications web √† partir de code Python.  L'interface utilisateur est g√©n√©r√©e automatiquement √† partir du code Python, qui est ex√©cut√© de mani√®re incr√©mentale.  Chaque modification dans le script Python est instantan√©ment refl√©t√©e dans l'application web, permettant un d√©veloppement it√©ratif rapide.\n\nStreamlit utilise des d√©corateurs pour d√©finir les diff√©rents composants de l'application (ex: `@st.cache_data` pour le cache, `@st.cache_resource` pour les ressources, etc.).  Il offre une large gamme de widgets interactifs (boutons, curseurs, s√©lecteurs, etc.) pour interagir avec les donn√©es et des fonctions pour afficher des donn√©es sous diff√©rentes formes (graphiques, tableaux, cartes, etc.) via des librairies comme Matplotlib, Seaborn, Plotly, etc.\n\nVoici un exemple simple :\n\n```python\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\n\nst.title(\"Mon Application Streamlit\")\n\n# G√©n√©rer des donn√©es al√©atoires\ndata = np.random.randn(20, 3)\ndf = pd.DataFrame(data, columns=['A', 'B', 'C'])\n\n# Afficher le dataframe\nst.dataframe(df)\n\n# Afficher un graphique\nst.line_chart(df)\n\n# Ajouter un curseur\nx = st.slider('S√©lectionner une valeur', 0, 100, 50)\nst.write(f\"La valeur s√©lectionn√©e est : {x}\")\n```\n\nCe code cr√©e une application Streamlit simple avec un titre, un tableau de donn√©es, un graphique lin√©aire et un curseur interactif.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **Rapidit√© de d√©veloppement:** Streamlit permet de cr√©er des applications web fonctionnelles tr√®s rapidement, m√™me sans exp√©rience en d√©veloppement web.\n* **Facilit√© d'utilisation:** La syntaxe est intuitive et simple √† apprendre pour les utilisateurs Python.\n* **Mise √† jour en temps r√©el:** Les modifications de code sont instantan√©ment refl√©t√©es dans l'application web.\n* **Int√©gration avec les librairies de visualisation de donn√©es:** Streamlit s'int√®gre facilement avec des librairies populaires comme Matplotlib, Seaborn, Plotly et Altair.\n* **Partage facile:**  Le d√©ploiement et le partage d'applications sont simplifi√©s gr√¢ce √† Streamlit Cloud.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Moins flexible que les frameworks web complets:** Pour des applications web complexes et personnalis√©es, Streamlit peut avoir des limites par rapport √† des frameworks comme React, Angular ou Vue.js.\n* **Performances potentielles:**  Pour les applications traitant des ensembles de donn√©es tr√®s volumineux, les performances peuvent √™tre un probl√®me. L'utilisation de `@st.cache_data` ou de techniques d'optimisation est alors n√©cessaire.\n* **D√©bogage:** Le d√©bogage peut √™tre plus difficile que dans des frameworks web traditionnels car le code est ex√©cut√© de mani√®re incr√©mentale.\n* **S√©curit√©:** Comme pour toute application web, il faut prendre des pr√©cautions pour s√©curiser l'application, surtout si elle est expos√©e publiquement.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "9c6f2d70-5161-4aff-bcc4-a4e7ff073819",
        "title": "Tanstack",
        "description": "---\nid: 721dcca9-837e-464d-be3d-d7676e23332b\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nTanstack est une collection de biblioth√®ques JavaScript open-source de haute qualit√©, principalement ax√©es sur la cr√©ation d'interfaces utilisateur performantes et robustes.  Elle est connue pour ses performances exceptionnelles, sa facilit√© d'utilisation et son approche ax√©e sur les d√©veloppeurs.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nTanstack n'est pas une seule biblioth√®que, mais plut√¥t un √©cosyst√®me de projets interconnect√©s, dont les plus connus sont :\n\n* **`@tanstack/react-query`:**  Une biblioth√®que pour g√©rer facilement l'√©tat de l'application, notamment la r√©cup√©ration et la mise √† jour des donn√©es provenant d'API. Elle g√®re la mise en cache, la pagination, l'optimisation des requ√™tes, et la gestion des erreurs de mani√®re transparente.  Elle permet de simplifier consid√©rablement le d√©veloppement d'applications qui interagissent avec des sources de donn√©es externes.\n\n* **`@tanstack/react-table`:** Une biblioth√®que pour cr√©er des tableaux de donn√©es interactifs et hautement personnalisables. Elle offre des fonctionnalit√©s avanc√©es de tri, de filtrage, de pagination et d'√©dition, tout en maintenant des performances √©lev√©es, m√™me avec des ensembles de donn√©es volumineux.\n\n* **`@tanstack/virtual`:**  Une solution pour le rendu virtuel de listes et de tableaux, permettant de g√©rer efficacement de tr√®s grands ensembles de donn√©es sans compromettre les performances.  Elle est souvent utilis√©e en conjonction avec `react-table`.\n\n* **`@tanstack/router`:** Un routeur client pour React offrant des performances exceptionnelles et une grande flexibilit√©. Il se caract√©rise par son approche d√©clarative et sa capacit√© √† g√©rer efficacement les transitions et la navigation dans une application complexe.\n\n\nCes biblioth√®ques partagent une philosophie commune de performance, de simplicit√© et d'extensibilit√©. Elles sont con√ßues pour √™tre utilis√©es ensemble, mais peuvent √©galement fonctionner ind√©pendamment.  L'utilisation de TypeScript est omnipr√©sente dans l'√©cosyst√®me Tanstack, ce qui contribue √† la robustesse et √† la maintenabilit√© du code.\n\n\n**Exemple (react-query):**\n\n```javascript\nimport { useQuery } from '@tanstack/react-query';\n\nfunction MyComponent() {\n  const { data, isLoading, error } = useQuery(['todos'], () =>\n    fetch('/api/todos').then((res) => res.json())\n  );\n\n  if (isLoading) return 'Loading...';\n  if (error) return 'Error: ' + error.message;\n\n  return (\n    <ul>\n      {data.map((todo) => (\n        <li key={todo.id}>{todo.text}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Performances exceptionnelles:** Tanstack est r√©put√© pour sa vitesse et son efficacit√©, particuli√®rement pour les applications √† grande √©chelle et celles qui manipulent de grands ensembles de donn√©es.\n* **Facilit√© d'utilisation:** Les API sont g√©n√©ralement intuitives et bien document√©es, ce qui facilite l'apprentissage et l'int√©gration.\n* **Extensibilit√©:** Les biblioth√®ques sont con√ßues pour √™tre facilement personnalis√©es et √©tendues pour r√©pondre aux besoins sp√©cifiques des applications.\n* **Bonne communaut√© et support:**  Une communaut√© active et un support efficace contribuent √† la r√©solution rapide des probl√®mes et √† l'am√©lioration continue des biblioth√®ques.\n* **TypeScript:** L'utilisation intensive de TypeScript am√©liore la qualit√© du code et r√©duit les erreurs.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage (l√©g√®rement plus raide pour certains):** Bien que g√©n√©ralement faciles √† utiliser, certaines fonctionnalit√©s plus avanc√©es de `react-table` ou de `react-query` peuvent n√©cessiter un peu plus d'apprentissage.\n* **√âcosyst√®me sp√©cifique √† React (principalement):** Bien que certaines biblioth√®ques aient des adaptations pour d'autres frameworks, l'√©cosyst√®me Tanstack est principalement centr√© sur React.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "c8e1bc04-e275-4998-8f37-1250113c36a0",
        "title": "Terragrunt",
        "description": "---\nid: 7d944ee8-6e62-4068-a425-0eae01d821c8\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nTerragrunt est un outil open-source qui √©tend Terraform pour g√©rer des infrastructures complexes et r√©p√©titives.  Il simplifie le d√©ploiement et la gestion de plusieurs environnements Terraform en fournissant des fonctionnalit√©s de modularit√©, de r√©utilisation de code et de gestion de configuration plus avanc√©es que Terraform seul.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nTerragrunt n'est pas un remplacement de Terraform, mais un wrapper autour de lui. Il ajoute des fonctionnalit√©s pour :\n\n* **R√©utilisation de code:**  Permet de cr√©er des modules r√©utilisables et de les appliquer √† diff√©rents endroits, √©vitant la duplication de code.  Cela se fait par l'inclusion de modules dans un r√©pertoire centralis√© et leur inclusion dans plusieurs projets.\n* **Gestion de configurations multiples:** Facilite la gestion d'environnements distincts (d√©veloppement, staging, production) en utilisant des configurations distinctes avec des variables appropri√©es pour chaque environnement.\n* **Gestion des d√©pendances:**  Permet de d√©finir et de g√©rer les d√©pendances entre diff√©rents blocs Terraform, assurant que les ressources sont cr√©√©es dans l'ordre correct.\n* **Inclusion de fichiers de configuration externes:**  Permet d'externaliser des parties de la configuration dans des fichiers s√©par√©s, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **Gestion des secrets:**  Int√®gre plus facilement la gestion des secrets en permettant de les importer depuis des sources externes.\n\nTerragrunt utilise des fichiers `.hcl` (HashiCorp Configuration Language) pour d√©finir ses configurations.  Un fichier `terragrunt.hcl` est g√©n√©ralement plac√© √† la racine de chaque projet Terraform. Ce fichier sp√©cifie les param√®tres de configuration de Terragrunt, comme les variables, les modules √† inclure et les options d'ex√©cution.\n\n**Exemple de `terragrunt.hcl`:**\n\n```hcl\nterraform {\n  source = \"github.com/gruntwork-io/terragrunt-example-aws-ecs\"\n}\n\n# Cette ligne inclut une configuration externe\ninclude {\n  path = \"config.hcl\"\n}\n\nlocals {\n  environment = \"dev\"\n}\n```\n\nTerragrunt ex√©cute ensuite Terraform en arri√®re-plan, utilisant les configurations d√©finies dans le fichier `terragrunt.hcl` et les fichiers Terraform standard.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Modularit√© et R√©utilisation du Code:**  Am√©liore consid√©rablement la maintenabilit√© et la coh√©rence des infrastructures Terraform.\n* **Gestion simplifi√©e des environnements multiples:**  Facilite le d√©ploiement dans plusieurs environnements avec des configurations sp√©cifiques √† chaque environnement.\n* **Am√©lioration de la collaboration:**  Permet une meilleure organisation et collaboration pour les √©quipes travaillant sur de grands projets Terraform.\n* **Gestion des d√©pendances:**  Assure l'ex√©cution des ressources dans l'ordre correct, ce qui est crucial pour √©viter les erreurs.\n* **Int√©gration ais√©e avec les pipelines CI/CD:**  Peut √™tre facilement int√©gr√© dans des pipelines CI/CD pour automatiser les d√©ploiements.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  N√©cessite d'apprendre une nouvelle couche d'abstraction au-dessus de Terraform.\n* **Complexit√© additionnelle:**  Pour les projets Terraform simples, l'ajout de Terragrunt peut ajouter une complexit√© inutile.\n* **D√©pendance √† un autre outil:**  Ajoute une d√©pendance √† un autre outil, ce qui peut complexifier le processus de maintenance.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "75b5181a-1176-4e8a-b37e-8e2b57659aaa",
        "title": "TinyDb",
        "description": "---\nid: b7cee06e-93fe-4f42-b117-225f172d8611\n---\n## **Rapidement, c'est quoi ? ‚ùì**\n\nTinyDB est une petite base de donn√©es NoSQL orient√©e document pour Python.  Elle stocke les donn√©es dans un simple fichier JSON, ce qui la rend facile √† utiliser et √† int√©grer dans des projets Python.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nTinyDB est une base de donn√©es embarqu√©e, ce qui signifie qu'elle ne n√©cessite pas de serveur s√©par√©. Elle utilise un fichier JSON pour stocker les donn√©es, ce qui facilite son utilisation et son d√©ploiement.  Elle supporte les op√©rations CRUD (Cr√©er, Lire, Mettre √† jour, Supprimer) sur des documents JSON.  Contrairement aux bases de donn√©es relationnelles, TinyDB ne repose pas sur un sch√©ma fixe ; vous pouvez stocker des documents JSON de structures diff√©rentes dans la m√™me collection.\n\nTinyDB offre des fonctionnalit√©s de requ√™te puissantes via une API intuitive. Vous pouvez effectuer des recherches sur des champs sp√©cifiques, utiliser des op√©rateurs de comparaison (>, <, >=, <=, ==, !=), et combiner plusieurs crit√®res de recherche.\n\n**Exemple:**\n\n```python\nfrom tinydb import TinyDB, Query\n\n# Cr√©er une instance de TinyDB (cr√©e le fichier si inexistant)\ndb = TinyDB('mydb.json')\n\n# Cr√©er une table (collection)\ntable = db.table('users')\n\n# Ins√©rer des donn√©es\ntable.insert({'name': 'Alice', 'age': 30})\ntable.insert({'name': 'Bob', 'age': 25})\n\n# Requ√™te: trouver un utilisateur avec l'age > 25\nUser = Query()\nresult = table.search(User.age > 25)\nprint(result)\n\n# Mettre √† jour un document\ntable.update({'age': 31}, User.name == 'Alice')\n\n# Supprimer un document\ntable.remove(User.name == 'Bob')\n\n# Fermer la connection\ndb.close()\n```\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Simplicit√©:**  Extr√™mement facile √† utiliser et √† apprendre, id√©ale pour les petits projets ou les prototypes.\n* **Lightweight:**  N'a pas besoin d'un serveur, ce qui la rend portable et facile √† d√©ployer.\n* **Int√©gration facile avec Python:** S'int√®gre parfaitement dans les applications Python.\n* **Stockage persistant:**  Les donn√©es sont persist√©es dans un fichier JSON, facile √† sauvegarder et √† restaurer.\n* **API intuitive:** Les requ√™tes sont faciles √† √©crire et √† comprendre.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Performance:**  Peut devenir lente avec de tr√®s grandes quantit√©s de donn√©es car elle est bas√©e sur un fichier JSON.  Non adapt√©e aux applications haute performance ou √† forte charge.\n* **Fonctionnalit√©s limit√©es:**  Ne propose pas toutes les fonctionnalit√©s d'une base de donn√©es NoSQL compl√®te (par exemple, indexation complexe, transactions atomiques robustes).\n* **Scalabilit√©:**  Difficult√© √† g√©rer la croissance importante des donn√©es et des utilisateurs.  Non adapt√©e aux applications distribu√©es.\n* **S√©curit√©:**  La s√©curit√© d√©pend de la s√©curit√© du syst√®me de fichiers.  Pas de m√©canismes de s√©curit√© int√©gr√©s sophistiqu√©s.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "448d0047-a90c-4db7-b45a-835e4bad9237",
        "title": "Uv",
        "description": "---\nid: c1b3650e-bf9c-41f9-9ec6-bde23e8c5732\n---\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nUv est un outil en ligne de commande qui g√®re les d√©pendances des projets Python.  Contrairement √† pip, qui est √©crit en Python, Uv est impl√©ment√© en Rust, ce qui lui conf√®re une vitesse d'ex√©cution et une robustesse accrues. Il utilise un syst√®me de r√©solution de d√©pendances pour identifier et installer les packages n√©cessaires, en tenant compte des versions et des conflits possibles.  Il g√®re √©galement la cr√©ation d'environnements virtuels isol√©s pour chaque projet, permettant ainsi une meilleure gestion des d√©pendances sp√©cifiques √† chaque projet.  L'utilisation d'Uv se fait g√©n√©ralement via des fichiers de configuration (comme `pyproject.toml`), qui sp√©cifient les d√©pendances du projet.  Uv lit ces fichiers, t√©l√©charge les paquets depuis des r√©f√©rentiels (comme PyPI), et les installe dans l'environnement virtuel appropri√©.\n\n\n**Exemple d'utilisation (hypoth√©tique):**\n\nSupposons un `pyproject.toml` contenant :\n\n```toml\n[tool.uv.dependencies]\nrequests = \"2.28.2\"\nnumpy = \">=1.24.0\"\n```\n\nLa commande `uv install` analyserait ce fichier, t√©l√©chargerait `requests` version 2.28.2 et une version compatible de `numpy` (au moins 1.24.0), et les installerait dans l'environnement virtuel actif.\n\n\n---\n\n# Qu'est-ce qui est top ? üëç\n\n* **Rapidit√©:** √âtant √©crit en Rust, Uv est potentiellement beaucoup plus rapide que pip pour l'installation et la r√©solution de d√©pendances.\n* **Fiabilit√©:** Rust offre une meilleure gestion des erreurs et une s√©curit√© m√©moire accrue par rapport √† Python, ce qui peut rendre Uv plus robuste et moins sujet aux plantages.\n* **Gestion des d√©pendances am√©lior√©e:**  Uv pourrait offrir des fonctionnalit√©s de gestion des d√©pendances plus avanc√©es (bien que cela d√©pende de son impl√©mentation).\n* **Int√©gration avec `pyproject.toml`:** L'utilisation de `pyproject.toml` est une pratique courante et permet une meilleure gestion du projet.\n\n\n---\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Maturit√©:**  En tant que nouvel outil, Uv pourrait manquer de fonctionnalit√©s ou de stabilit√© par rapport √† un outil mature comme pip.\n* **Adoption:**  Le manque d'adoption pourrait limiter la communaut√© de soutien et la disponibilit√© des ressources.\n* **Compatibilit√©:** Il pourrait exister des incompatibilit√©s avec certains packages ou outils existants.\n* **D√©pendances:**  Uv lui-m√™me a des d√©pendances, ce qui peut introduire une complexit√© suppl√©mentaire.\n\n\n---\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "e8deee3f-007b-48f4-a9de-78ab0e076b6d",
        "title": "WCAG",
        "description": "---\nid: f10ac51f-8930-4fe5-81f1-99355f3e8d4d\n---\n## **Rapidement, c'est quoi ? ‚ùì**\n\nLes WCAG (Web Content Accessibility Guidelines) sont un ensemble de lignes directrices internationales pour rendre les sites web et le contenu web accessibles √† tous, y compris les personnes handicap√©es.  Elles visent √† assurer que le web soit utilisable par le plus grand nombre possible de personnes, ind√©pendamment de leurs capacit√©s.\n\n---\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLes WCAG d√©finissent des crit√®res de r√©ussite pour l'accessibilit√© web, regroup√©s en quatre principes fondamentaux :\n\n* **Percevable (Perceivable):**  L'information et les composants de l'interface utilisateur doivent √™tre pr√©sent√©s aux utilisateurs de mani√®re qu'ils puissent les percevoir.  Cela inclut des crit√®res sur le texte alternatif pour les images, les l√©gendes pour les vid√©os, le contraste des couleurs, etc.\n\n* **Op√©rable (Operable):** L'interface utilisateur doit √™tre op√©rable.  Cela signifie que les utilisateurs doivent pouvoir utiliser l'interface utilisateur.  Des crit√®res concernent la navigation au clavier, le temps de saisie, les saisies inappropri√©es, etc.\n\n* **Compr√©hensible (Understandable):** L'information et l'utilisation de l'interface utilisateur doivent √™tre compr√©hensibles.  Cela implique des crit√®res sur la lisibilit√©, la pr√©visibilit√© et la coh√©rence du site.\n\n* **Robuste (Robust):** Le contenu doit √™tre robuste, c'est-√†-dire compatible avec une large gamme de technologies d'assistance.\n\nChaque principe est d√©clin√© en plusieurs crit√®res de r√©ussite, class√©s par niveaux de s√©v√©rit√© (A, AA, AAA).  Le niveau AA est g√©n√©ralement consid√©r√© comme le minimum pour une bonne accessibilit√©.\n\n**Exemple concret :** Une image d'un chat sans texte alternatif (\"alt text\") viole le principe de perceptibilit√©. Un utilisateur utilisant un lecteur d'√©cran ne pourra pas comprendre ce que repr√©sente l'image.  L'ajout d'un texte alternatif (\"alt text\" = \"Un chat mignon\") rend l'image accessible.\n\n**Exemple de code (HTML) illustrant un bon contraste:**\n\n```html\n<p style=\"color: white; background-color: #000080;\">Ce texte a un bon contraste.</p>\n```\n\n```html\n<p style=\"color: black; background-color: #FFFFE0;\">Ce texte a un contraste insuffisant</p>\n```\n\nL'utilisation de v√©rificateurs d'accessibilit√© (outils automatis√©s) peut aider √† identifier les probl√®mes d'accessibilit√©. Cependant, ils ne d√©tectent pas tous les probl√®mes, une revue manuelle est essentielle.\n\n\n---\n\n# Qu'est-ce qui est top ? üëç\n\n* **Standard internationalement reconnu:** Les WCAG sont largement accept√©es comme la norme pour l'accessibilit√© web.\n* **Cadre complet:** Elles couvrent un large √©ventail de probl√®mes d'accessibilit√©.\n* **Niveaux de conformit√©:**  Permettent d'adapter le niveau d'accessibilit√© aux ressources disponibles.\n* **Am√©liore l'exp√©rience utilisateur pour tous:**  Un site web accessible est g√©n√©ralement plus facile √† utiliser pour tout le monde, m√™me les utilisateurs sans handicap.\n\n\n---\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La compr√©hension et la mise en ≈ìuvre compl√®te des WCAG peuvent √™tre complexes, n√©cessitant des comp√©tences sp√©cifiques.\n* **Co√ªt:** Rendre un site web pleinement accessible peut n√©cessiter des efforts importants et des co√ªts de d√©veloppement suppl√©mentaires.\n* **Tests manuels n√©cessaires:** Les outils automatis√©s ne suffisent pas √† garantir une accessibilit√© compl√®te. Des tests manuels approfondis sont indispensables.\n* **Evolution constante:** Les WCAG √©voluent r√©guli√®rement, n√©cessitant une mise √† jour continue des connaissances et des pratiques.\n\n\n---\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "6a27445d-5e3c-4435-9e55-9dd9103a5d81",
        "title": "Watch Tower Docker",
        "description": "---\nid: ba859634-f672-4bdf-92fa-d8a6e6ceec08\n---\n# Rapidement c'est quoi‚ùì\n\nWatch Tower est un outil Docker qui automatise les mises √† jour des conteneurs. Il surveille r√©guli√®rement les nouvelles versions d'images sur un registre (Docker Hub par d√©faut, ou un registre priv√©) et met √† jour les conteneurs en cours d'ex√©cution lorsqu'une nouvelle version est disponible.  Id√©al pour les environnements de test et les homelabs.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nWatch Tower est un conteneur Docker l√©ger qui fonctionne comme un agent de surveillance.  Il est configur√© pour surveiller un ou plusieurs autres conteneurs.  Pour chaque conteneur surveill√©, Watch Tower v√©rifie p√©riodiquement la disponibilit√© de nouvelles images sur un registre Docker sp√©cifi√© (Docker Hub par d√©faut, mais configurable pour des registres priv√©s, n√©cessitant alors des identifiants).  Cette v√©rification se fait en comparant l'ID de l'image courante du conteneur avec la derni√®re version disponible sur le registre.\n\nSi une nouvelle version est d√©tect√©e, Watch Tower t√©l√©charge automatiquement la nouvelle image.  Puis, il arr√™te proprement l'ancien conteneur, d√©marre un nouveau conteneur bas√© sur la nouvelle image, et conserve les donn√©es du conteneur pr√©c√©dent gr√¢ce √† des volumes persistants s'ils sont d√©finis.  Le processus est transparent pour l'utilisateur, qui ne devrait pas remarquer d'interruption de service (√† condition d'avoir configur√© correctement les volumes de donn√©es).  La configuration se fait principalement via des variables d'environnement, ce qui simplifie son d√©ploiement et sa customisation.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Automatisation des mises √† jour:** √âlimine le besoin de mises √† jour manuelles des conteneurs, r√©duisant le risque d'erreur et le travail manuel.\n* **Facilit√© d'utilisation:**  Simple √† configurer et √† d√©ployer gr√¢ce √† son architecture en conteneur et √† sa configuration par variables d'environnement.\n* **Support des registres priv√©s:** Permet de g√©rer les mises √† jour d'images h√©berg√©es sur des registres priv√©s, crucial pour les environnements professionnels ou les configurations plus s√©curis√©es.\n* **Mise √† jour transparente (en th√©orie):**  Les mises √† jour se font avec une interruption minimale, gr√¢ce √† l'arr√™t et le red√©marrage automatis√© du conteneur.\n* **L√©ger et peu gourmand en ressources:**  N'affecte pas significativement les performances du syst√®me h√¥te.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **D√©pendances:** N√©cessite Docker et un acc√®s √† un registre Docker (public ou priv√©).\n* **Complexit√© potentielle pour des configurations avanc√©es:** Bien que simple √† utiliser de base, la gestion de sc√©narios complexes (d√©pendances entre conteneurs, configurations de volumes complexes) peut demander plus d'attention.\n* **Potentiel de probl√®mes en cas de mauvaise configuration des volumes:**  Une mauvaise configuration des volumes de donn√©es peut entra√Æner la perte de donn√©es lors d'une mise √† jour.  Il est crucial de bien d√©finir et de tester la persistance des donn√©es.\n* **Pas de gestion des configurations internes du conteneur:**  Watchtower met √† jour uniquement l'image du conteneur.  Les configurations internes au conteneur doivent √™tre g√©r√©es s√©par√©ment (par exemple, via des fichiers de configuration persistants).\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "5ce536ee-9346-4042-888f-3641480236b6",
        "title": "Wiremock",
        "description": "---\nid: 31caea1a-0cb7-434b-89d8-ba31405f704b\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nWireMock est un outil open-source permettant de cr√©er facilement des mocks d'API.  Il simule des services web pour les tests, renvoyant des r√©ponses pr√©-d√©finies √† des requ√™tes sp√©cifiques.  Cela permet de d√©boucler les tests des applications qui d√©pendent d'autres services sans avoir √† les d√©marrer ou √† les utiliser en production.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nWireMock est un serveur ind√©pendant qui √©coute sur un port donn√©.  On le configure pour r√©pondre √† des requ√™tes HTTP (GET, POST, PUT, DELETE, etc.) avec des r√©ponses sp√©cifi√©es.  Ces r√©ponses peuvent √™tre statiques (un fichier JSON, XML, etc.) ou dynamiques (g√©n√©r√©es √† la vol√©e en fonction de la requ√™te).  La configuration se fait g√©n√©ralement via des fichiers JSON ou YAML, d√©finissant des mappings entre des requ√™tes et des r√©ponses.\n\nVoici un exemple de configuration YAML simple :\n\n```yaml\n---\nrequest:\n  method: GET\n  url: /users\nresponse:\n  status: 200\n  body:\n    - id: 1\n      name: John Doe\n    - id: 2\n      name: Jane Doe\n```\n\nCe mapping indique √† WireMock de r√©pondre √† une requ√™te GET sur `/users` avec un code de statut 200 et un corps JSON contenant une liste de deux utilisateurs.\n\nWireMock offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Gestion des retards:** Simuler des temps de r√©ponse lents.\n* **Validation des requ√™tes:** V√©rifier que les requ√™tes envoy√©es par l'application sont conformes aux attentes.\n* **Stubbing:** Fournir des r√©ponses pr√©d√©finies pour des requ√™tes sp√©cifiques.\n* **Mocking:** Simuler le comportement d'un service distant.\n* **Int√©gration avec des frameworks de test:**  WireMock s'int√®gre facilement avec de nombreux frameworks de test (JUnit, pytest, etc.).\n\n## Qu'est-ce qui est top ? üëç\n\n* **Facile √† utiliser:** La configuration est simple et intuitive, m√™me pour des cas d'utilisation complexes.\n* **Flexible:**  Permet de simuler un large √©ventail de sc√©narios de tests.\n* **Open-source:**  Gratuit et la communaut√© contribue √† son am√©lioration constante.\n* **Large choix de langages et d'int√©grations:**  Disponible pour diff√©rents langages et frameworks.\n* **Gestion des d√©pendances:** D√©couple les tests de l'infrastructure et des services externes.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© pour les cas tr√®s complexes:**  Pour des simulations extr√™mement sophistiqu√©es, la configuration peut devenir complexe.\n* **Courbe d'apprentissage l√©g√®re:** Bien que simple √† utiliser de base, la ma√Ætrise de toutes ses fonctionnalit√©s peut demander un certain temps.\n* **Maintenance des mocks:**  Le maintien des mocks √† jour avec l'√©volution de l'API peut demander de l'effort.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "27e9c2f4-bd91-4a4d-be4e-f01ce1f058f8",
        "title": "io_uring",
        "description": "---\nid: 68a5471b-4061-46f5-b990-d0851a73aaf7\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nio_uring est une interface syst√®me Linux permettant d'effectuer des op√©rations d'E/S (entr√©e/sortie) de mani√®re asynchrone et tr√®s performante.  Elle am√©liore consid√©rablement l'efficacit√© du traitement des requ√™tes d'E/S par rapport aux m√©thodes traditionnelles comme les appels syst√®me `read()` et `write()`.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nio_uring est une interface bas√©e sur des anneaux (rings) pour la communication entre l'espace utilisateur et le noyau.  Au lieu d'effectuer des appels syst√®me individuels pour chaque op√©ration d'E/S,  l'application soumet un ensemble de requ√™tes en bloc √† un anneau de soumission (submission queue). Le noyau traite ces requ√™tes et renvoie les r√©sultats dans un anneau de compl√©tion (completion queue). Cette approche r√©duit consid√©rablement le contexte switching et la surcharge li√©e aux appels syst√®me.\n\nio_uring supporte un large √©ventail d'op√©rations, notamment :\n\n* **Op√©rations de fichiers:** `read`, `write`, `open`, `close`, `fsync`, `fdatasync`, etc.\n* **Op√©rations de sockets:** `accept`, `connect`, `recv`, `send`, etc.\n* **Op√©rations de gestion de fichiers:** `stat`, `ftruncate`, `rename`, etc.\n* **Op√©rations de timers:**  Permet de g√©rer des timers de mani√®re asynchrone.\n* **Op√©rations de signalisation:**  Permet de g√©rer les signaux de mani√®re asynchrone.\n\n\n**Fonctionnement interne (simplifi√©):**\n\n1. **Soumission des requ√™tes:** L'application remplit une structure de donn√©es repr√©sentant les requ√™tes d'E/S et les place dans l'anneau de soumission.\n2. **Traitement par le noyau:** Le noyau r√©cup√®re les requ√™tes de l'anneau de soumission et les traite concurremment.\n3. **Compl√©tion des requ√™tes:**  Une fois les requ√™tes trait√©es, le noyau place les r√©sultats (codes de retour, donn√©es, etc.) dans l'anneau de compl√©tion.\n4. **R√©cup√©ration des r√©sultats:** L'application lit l'anneau de compl√©tion pour r√©cup√©rer les r√©sultats des op√©rations d'E/S.\n\n**Exemple (concept simplifi√© en C):**\n\n```c\n// ... (Initialisation io_uring) ...\n\nstruct io_uring_sqe *sqe = io_uring_get_sqe(&ring);\nio_uring_prep_read(sqe, fd, buffer, size, offset);\nio_uring_submit(&ring); // Envoie les requ√™tes au noyau\n\n// ... (Attente de la compl√©tion des requ√™tes via io_uring_wait_cqe) ...\n\n// ... (R√©cup√©ration des r√©sultats depuis l'anneau de compl√©tion) ...\n```\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Performances exceptionnelles:** io_uring offre des performances bien sup√©rieures √† celles des appels syst√®mes traditionnels, notamment pour les applications √† forte intensit√© d'E/S.\n* **Faible latence:** La r√©duction du contexte switching et la gestion asynchrone permettent de r√©duire la latence des op√©rations d'E/S.\n* **Scalabilit√©:** io_uring est con√ßu pour √™tre scalable et capable de g√©rer un grand nombre de requ√™tes simultan√©es.\n* **Flexibilit√©:**  Supporte une grande vari√©t√© d'op√©rations d'E/S.\n* **Efficacit√© √©nerg√©tique:** La r√©duction des appels syst√®me diminue la consommation d'√©nergie.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√©:**  L'impl√©mentation d'applications utilisant io_uring est plus complexe que l'utilisation d'appels syst√®me classiques.  N√©cessite une bonne compr√©hension de la programmation asynchrone.\n* **Sp√©cifique √† Linux:** io_uring est une fonctionnalit√© sp√©cifique au noyau Linux, et n'est donc pas portable vers d'autres syst√®mes d'exploitation.\n* **D√©bogage:** Le d√©bogage des applications utilisant io_uring peut √™tre plus difficile que celui des applications utilisant des appels syst√®me synchrones.\n* **Support limit√© dans certaines biblioth√®ques:**  Certaines biblioth√®ques ne supportent pas encore nativement io_uring, n√©cessitant une impl√©mentation manuelle.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "7c30816c-6780-447e-972e-751ecdd9187d",
        "title": "n8n",
        "description": "---\nid: 97286cb2-9836-4dd2-b5f6-0885a22ca5c7\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nn8n est une plateforme d'automatisation open-source, bas√©e sur le workflow, permettant de connecter diff√©rents services et applications entre eux sans √©crire de code.  Elle fonctionne via une interface visuelle intuitive o√π l'on peut cr√©er des flux de travail (workflows) pour automatiser des t√¢ches r√©p√©titives.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nn8n est un outil de \"low-code/no-code\" qui permet de construire des workflows complexes en connectant divers services web gr√¢ce √† des \"nodes\".  Chaque node repr√©sente une action sp√©cifique, comme envoyer un email, t√©l√©charger un fichier, ou interagir avec une base de donn√©es.  Ces nodes sont connect√©es entre elles pour former un flux de travail.  n8n prend en charge un large √©ventail de protocoles et de services via des int√©grations (connecteurs) pr√©d√©finies, et il est extensible gr√¢ce √† la cr√©ation de nodes personnalis√©es.\n\nLe fonctionnement se base sur un syst√®me d'ex√©cution asynchrone.  Les workflows ne sont pas ex√©cut√©s de mani√®re lin√©aire, mais plut√¥t de mani√®re parall√®le et asynchrone.  Chaque node s'ex√©cute de mani√®re ind√©pendante, ce qui permet une grande flexibilit√© et une meilleure gestion des erreurs.\n\n**Exemple concret : Automatisation de la gestion des leads**\n\nImaginez un workflow n8n qui collecte des leads depuis un formulaire sur un site web (node \"HTTP Request\").  Ces donn√©es sont ensuite envoy√©es √† une base de donn√©es (node \"Database\").  Si le lead correspond √† certains crit√®res, un email est envoy√© √† l'√©quipe de vente (node \"Email\").  En cas d'√©chec, une notification est envoy√©e via Slack (node \"Slack\").  Tout cela sans √©crire une seule ligne de code, en reliant simplement des nodes pr√©existantes.\n\n\n**Fonctionnement interne (simplifi√©):**\n\nn8n est une application Node.js qui utilise une base de donn√©es pour stocker les workflows et leurs ex√©cutions.  L'interface utilisateur est une application web qui permet de cr√©er, √©diter et ex√©cuter les workflows.  L'ex√©cution des nodes est g√©r√©e par un moteur d'ex√©cution interne qui utilise des workers pour traiter les t√¢ches en parall√®le.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Open-source et gratuit:**  n8n est open-source, ce qui permet une grande transparence et une communaut√© active pour le support et le d√©veloppement.  Il est gratuit √† utiliser, m√™me pour les d√©ploiements en production.\n* **Flexibilit√© et extensibilit√©:**  Le large choix de nodes et la possibilit√© de cr√©er des nodes personnalis√©es offrent une grande flexibilit√© pour automatiser presque toutes les t√¢ches.\n* **Interface utilisateur intuitive:** L'interface visuelle facilite la cr√©ation et la gestion des workflows, m√™me pour les utilisateurs sans exp√©rience en programmation.\n* **Scalabilit√©:** n8n peut √™tre d√©ploy√© sur diff√©rentes infrastructures, des machines locales aux solutions cloud, pour g√©rer des workflows de toutes tailles.\n* **Grande vari√©t√© d'int√©grations:**  Une vaste biblioth√®que de nodes permet de se connecter √† de nombreux services populaires.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage initiale (l√©g√®re):**  Bien que l'interface soit intuitive, la compr√©hension du fonctionnement des workflows et des nodes peut prendre un peu de temps au d√©but.\n* **D√©bogage complexe (pour workflows avanc√©s):** Le d√©bogage des workflows complexes peut √™tre difficile, surtout pour les utilisateurs non-familiers avec le concept de workflow asynchrone.\n* **Gestion de la s√©curit√©:**  La s√©curit√© d√©pend de la configuration du serveur et des int√©grations utilis√©es. Une mauvaise configuration peut exposer des donn√©es sensibles.\n* **D√©pendance √† la disponibilit√© d'internet:** n8n n√©cessite une connexion internet pour fonctionner correctement, car la plupart des nodes interagissent avec des services externes.\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "c1ff4ce7-6316-4843-bcbe-8ebfc06c2c34",
        "title": "protobuf",
        "description": "---\nid: 8ef8f16f-6955-49c9-858e-e5c803104b27\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nProtocol Buffers (protobuf) est un syst√®me de s√©rialisation de donn√©es open source d√©velopp√© par Google.  Il permet de d√©finir des structures de donn√©es (messages) dans un langage descriptif simple (`.proto`), puis de g√©n√©rer automatiquement du code dans diff√©rents langages (Java, C++, Python, Go, etc.) pour encoder et d√©coder ces structures.  Cela permet une communication efficace et interop√©rable entre diff√©rents syst√®mes.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nProtobuf d√©finit un langage de description d'interface (IDL) pour sp√©cifier les structures de donn√©es.  Un fichier `.proto` d√©crit les messages, contenant des champs de diff√©rents types (entier, cha√Æne de caract√®res, bool√©en, nombres √† virgule flottante, tableaux, structures imbriqu√©es, etc.).  Le compilateur Protobuf (`protoc`) lit ce fichier et g√©n√®re du code source pour le langage cible. Ce code fournit des fonctions pour:\n\n* **S√©rialiser (encoder):** Convertir une structure de donn√©es en un flux d'octets.  Ce flux est compact et efficace en termes d'espace m√©moire.\n* **D√©s√©rialiser (d√©coder):** Convertir un flux d'octets en une structure de donn√©es.\n\n**Exemple de fichier `.proto`:**\n\n```protobuf\nsyntax = \"proto3\";\n\nmessage Person {\n  string name = 1;\n  int32 id = 2;\n  string email = 3;\n}\n```\n\nCe fichier d√©finit un message `Person` avec trois champs : `name`, `id`, et `email`.  Apr√®s compilation, le code g√©n√©r√© fournira des classes ou des structures pour manipuler des objets `Person` et les encoder/d√©coder en octets.\n\n**Avantages de la s√©rialisation:**\n\n* **Efficacit√©:** Protobuf g√©n√®re des formats binaires compacts, plus petits et plus rapides √† traiter que les formats textuels comme le JSON ou le XML.\n* **Interop√©rabilit√©:** Le m√™me fichier `.proto` peut √™tre utilis√© pour g√©n√©rer du code dans diff√©rents langages, facilitant la communication entre des syst√®mes h√©t√©rog√®nes.\n* **√âvolutivit√©:**  Il est possible d'ajouter de nouveaux champs √† un message sans casser la compatibilit√© avec les anciens clients.  Le syst√®me g√®re les champs inconnus.\n* **Performances:** La s√©rialisation et la d√©s√©rialisation sont rapides et optimis√©es.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Efficacit√© et performance:**  Format compact et rapidit√© de s√©rialisation/d√©s√©rialisation.\n* **Interop√©rabilit√© multi-langage:**  Support d'un large √©ventail de langages de programmation.\n* **√âvolutivit√© et compatibilit√© ascendante:**  Ajout facile de nouveaux champs sans rupture de compatibilit√©.\n* **Bonne documentation et communaut√© active:**  Ressources et support disponibles.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** N√©cessite de comprendre le syst√®me de d√©finition de messages et l'utilisation du compilateur `protoc`.\n* **Format binaire non humainement lisible:**  Le format s√©rialis√© est binaire, rendant le d√©bogage plus difficile que pour les formats textuels.\n* **D√©pendance au compilateur:**  N√©cessite l'utilisation du compilateur `protoc` pour g√©n√©rer le code.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "3cba1234-4473-42ca-81cb-131e4e4bca73",
        "title": "Racine",
        "description": ""
    },
    {
        "id": "8b9b4ca8-2a9a-4af3-96cf-7aabd0fc88ea",
        "title": "Concept supprim√©",
        "description": ""
    },
    {
        "id": "a1786998-f5b9-49ba-95c3-fa9c14e40413",
        "title": "AWS Lambda",
        "description": "---\nid: 574373b1-97bf-4179-87b9-88dc8fc613cf\n---\n# Rapidement c'est quoi‚ùì\n\nAWS Lambda est un service [[Function as a Service (FaaS)]] d'[[AWS]].  Il permet d'ex√©cuter du code sans g√©rer d'infrastructure serveur.  Vous fournissez le code, et [[AWS]] s'occupe du reste.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAWS Lambda est un service de calcul sans serveur qui permet aux d√©veloppeurs d'ex√©cuter du code en r√©ponse √† des √©v√©nements sans provisionner ou g√©rer des serveurs.  Vous √©crivez votre code (fonctions) dans plusieurs langages support√©s ([[Node.js]], [[Python]], [[Java]], [[C#]], [[Go]], [[Ruby]], etc.), le d√©ployez sur [[AWS]], et Lambda s'occupe de l'ex√©cution, du scaling automatique et de la facturation uniquement en fonction de l'utilisation effective.  Chaque fonction est d√©clench√©e par un √©v√©nement, tel qu'une modification dans un [[Bucket S3]] , une requ√™te [[API Gateway]], une entr√©e dans une file [[SQS]], ou un √©v√®nement planifi√© avec [[CloudWatch Events]].\n\nLambda g√®re automatiquement le scaling : si plusieurs √©v√©nements se produisent simultan√©ment, Lambda lance plusieurs instances de votre fonction pour g√©rer la charge.  L'inverse est √©galement vrai : si aucune requ√™te n'est effectu√©e, aucune ressource n'est consomm√©e et vous ne payez rien.  La gestion des ressources (m√©moire, temps d'ex√©cution, etc.) est d√©finie lors de la configuration de la fonction.  Lambda propose √©galement des fonctionnalit√©s avanc√©es comme les versions, les alias, les couches (pour partager du code commun entre plusieurs fonctions) et l'int√©gration avec d'autres services [[AWS]].  Le monitoring et le logging sont int√©gr√©s via [[CloudWatch]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Sans serveur (Serverless):** Pas besoin de g√©rer d'infrastructure, ce qui r√©duit consid√©rablement le co√ªt et la complexit√©.\n* **Scaling automatique:** Lambda s'adapte automatiquement √† la demande, garantissant la disponibilit√© et la performance.\n* **Facturation √† l'utilisation:** Vous ne payez que pour le temps d'ex√©cution effectif de votre code.\n* **Int√©gration avec l'√©cosyst√®me [[AWS]]:**  S'int√®gre facilement avec de nombreux autres services [[AWS]], permettant de cr√©er des applications complexes et robustes.\n* **Langages multiples support√©s:** Large choix de langages de programmation pour d√©velopper vos fonctions.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Dur√©e d'ex√©cution limit√©e:**  Les fonctions Lambda ont une dur√©e d'ex√©cution maximale (variable selon la configuration).  Les t√¢ches longues doivent √™tre trait√©es diff√©remment (par exemple, en utilisant des files d'attente et des fonctions plus courtes).\n* **D√©bogage plus complexe:** Le d√©bogage peut √™tre plus difficile que dans une application traditionnelle, n√©cessitant des outils et des techniques sp√©cifiques.\n* **Cold starts:** La premi√®re ex√©cution d'une fonction peut prendre un peu plus de temps (cold start), ce qui peut affecter les performances pour les requ√™tes occasionnelles.\n* **Verrouillage fournisseur:**  Le code est ex√©cut√© sur l'infrastructure AWS, ce qui cr√©e une d√©pendance envers ce fournisseur.\n* **Gestion des √©tats:** La persistance des donn√©es entre les ex√©cutions de fonctions n√©cessite l'utilisation de services externes comme [[DynamoDB]].\n\n---\n# A quoi c'est li√© ? ü™¢\n\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "f9aee61a-9901-45a2-b522-c3dd3d9f0f52",
        "title": "Certification Java 17 - Acc√®s aux Bases de Donn√©es avec JDBC",
        "description": "---\nid: 8b4f3380-cc59-43fe-baca-4e83b06bb405\n---\n## **11.1. Connexion √† une base de donn√©es (`DriverManager`, `DataSource`)**\n\nJDBC (**Java Database Connectivity**) permet √† une application Java de se connecter √† une base de donn√©es.\n\n### **1. Chargement du driver JDBC**\n\nüìå **Depuis Java 6, le chargement est automatique si le driver est dans le classpath.**\n\n```java\nClass.forName(\"org.postgresql.Driver\"); // PostgreSQL\nClass.forName(\"com.mysql.cj.jdbc.Driver\"); // MySQL\n```\n\nüìå **Plus besoin de `Class.forName()` avec JDBC 4.0+.**\n\n---\n\n### **2. Connexion avec `DriverManager`**\n\n```java\nimport java.sql.*;\n\npublic class ConnexionJDBC {\n    public static void main(String[] args) {\n        String url = \"jdbc:mysql://localhost:3306/ma_base\";\n        String user = \"root\";\n        String password = \"password\";\n\n        try (Connection conn = DriverManager.getConnection(url, user, password)) {\n            System.out.println(\"Connexion r√©ussie !\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\nüìå **Utilisation d‚Äôun `try-with-resources` pour fermer automatiquement la connexion.**\n\n---\n\n### **3. Connexion avec `DataSource` (Meilleure Pratique)**\n\nüìå **`DataSource` permet une gestion optimis√©e des connexions.**\n\n```java\nimport javax.sql.DataSource;\nimport com.mysql.cj.jdbc.MysqlDataSource;\n\npublic class ConnexionDataSource {\n    public static void main(String[] args) throws Exception {\n        MysqlDataSource ds = new MysqlDataSource();\n        ds.setURL(\"jdbc:mysql://localhost:3306/ma_base\");\n        ds.setUser(\"root\");\n        ds.setPassword(\"password\");\n\n        try (Connection conn = ds.getConnection()) {\n            System.out.println(\"Connexion r√©ussie !\");\n        }\n    }\n}\n```\n\nüìå **Utilis√© dans les serveurs d‚Äôapplication avec un pool de connexions.**\n\n---\n\n## **11.2. Ex√©cution de requ√™tes (`Statement`, `PreparedStatement`, `CallableStatement`)**\n\n### **1. Requ√™te avec `Statement` (‚ö† Vuln√©rable aux injections SQL)**\n\n```java\ntry (Connection conn = DriverManager.getConnection(url, user, password);\n     Statement stmt = conn.createStatement()) {\n\n    ResultSet rs = stmt.executeQuery(\"SELECT * FROM utilisateurs\");\n\n    while (rs.next()) {\n        System.out.println(rs.getString(\"nom\"));\n    }\n}\n```\n\nüìå **‚ö† √âviter `Statement` pour les requ√™tes contenant des entr√©es utilisateur (risque d‚Äôinjection SQL).**\n\n---\n\n### **2. Requ√™te s√©curis√©e avec `PreparedStatement`**\n\n```java\nString sql = \"SELECT * FROM utilisateurs WHERE email = ?\";\ntry (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n    pstmt.setString(1, \"user@mail.com\");\n    ResultSet rs = pstmt.executeQuery();\n\n    while (rs.next()) {\n        System.out.println(rs.getString(\"nom\"));\n    }\n}\n```\n\nüìå **S√©curise la requ√™te en emp√™chant les injections SQL.**\n\n---\n\n### **3. Insertion avec `PreparedStatement`**\n\n```java\nString sql = \"INSERT INTO utilisateurs (nom, email) VALUES (?, ?)\";\ntry (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n    pstmt.setString(1, \"Alice\");\n    pstmt.setString(2, \"alice@mail.com\");\n    pstmt.executeUpdate(); // Ex√©cute l‚Äôinsertion\n}\n```\n\nüìå **`executeUpdate()` pour `INSERT`, `UPDATE`, `DELETE`.**\n\n---\n\n### **4. Appel d‚Äôune proc√©dure stock√©e avec `CallableStatement`**\n\n```java\nString sql = \"{call ajouter_utilisateur(?, ?)}\";\ntry (CallableStatement cstmt = conn.prepareCall(sql)) {\n    cstmt.setString(1, \"Alice\");\n    cstmt.setString(2, \"alice@mail.com\");\n    cstmt.execute();\n}\n```\n\nüìå **Utilis√© pour ex√©cuter des proc√©dures stock√©es SQL.**\n\n---\n\n## **11.3. Gestion des transactions (`commit`, `rollback`)**\n\nPar d√©faut, **chaque requ√™te est valid√©e (`commit`) automatiquement**.  \nüìå **Pour g√©rer manuellement une transaction, on d√©sactive l‚Äôauto-commit.**\n\n---\n\n### **1. D√©but d‚Äôune transaction (`setAutoCommit(false)`)**\n\n```java\ntry (Connection conn = DriverManager.getConnection(url, user, password)) {\n    conn.setAutoCommit(false); // D√©sactive l‚Äôauto-commit\n\n    try (PreparedStatement pstmt1 = conn.prepareStatement(\"INSERT INTO comptes VALUES (?, ?)\");\n         PreparedStatement pstmt2 = conn.prepareStatement(\"INSERT INTO transactions VALUES (?, ?)\")) {\n\n        pstmt1.setInt(1, 1);\n        pstmt1.setDouble(2, 1000.00);\n        pstmt1.executeUpdate();\n\n        pstmt2.setInt(1, 1);\n        pstmt2.setDouble(2, -500.00);\n        pstmt2.executeUpdate();\n\n        conn.commit(); // Valide la transaction\n    } catch (SQLException e) {\n        conn.rollback(); // Annule toutes les op√©rations\n        e.printStackTrace();\n    }\n}\n```\n\nüìå **Si une erreur survient, `rollback()` annule les modifications.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Connexion JDBC : `DriverManager` (basique), `DataSource` (optimis√©, recommand√©).**  \n‚úÖ **Ex√©cution de requ√™tes :**\n\n- `Statement` (‚ö† √† √©viter pour les entr√©es utilisateur).\n- `PreparedStatement` (s√©curis√© contre les injections SQL).\n- `CallableStatement` (appelle une proc√©dure stock√©e).  \n    ‚úÖ **Gestion des transactions : `commit`, `rollback`, `setAutoCommit(false)`.**\n"
    },
    {
        "id": "8e5aa410-7105-45e7-b5bc-f1300195e660",
        "title": "Analog.js",
        "description": "---\nid: 4775911f-b142-4a2e-8954-bb74d1475de6\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nAnalogJs est un [[m√©ta-framework]] pour [[Angular]] qui ajoute des fonctionnalit√©s comme le routage automatique, le rendu c√¥t√© serveur, et la g√©n√©ration de sites statiques. Il simplifie le d√©veloppement en int√©grant des outils modernes comme [[Vite]] et [[Vitest]].\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAnalogJs √©tend [[Angular]] avec des fonctionnalit√©s pratiques :\n\n- **Routage bas√© sur le syst√®me de fichiers** : Les routes sont automatiquement g√©n√©r√©es √† partir de la structure des fichiers.\n- **Rendu c√¥t√© serveur ([[Server Side Rendering (SSR)]])** et **g√©n√©ration de sites statiques** ([[Server Side Generation (SSG)]]) : Permet d‚Äôam√©liorer le SEO et la vitesse de chargement.\n- **Support Markdown** : Permet d'utiliser des fichiers Markdown comme contenu.\n- **Routes API int√©gr√©es** : Cr√©e facilement des routes API dans la m√™me application.\n- **Structure simplifi√©e des composants** : Un seul fichier par composant, contrairement √† l'approche Angular traditionnelle avec plusieurs fichiers.\n\nAnalogJs utilise Vite pour la compilation rapide et Vitest pour les tests, offrant une exp√©rience moderne et rapide.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplification du routage** : Gr√¢ce au routage bas√© sur le syst√®me de fichiers.\n- **Rendu c√¥t√© serveur et sites statiques** : Am√©liore la performance et le SEO.\n- **Support Markdown** : Id√©al pour cr√©er du contenu rapidement.\n- **Structure de composants simplifi√©e** : Un fichier par composant pour plus de clart√©.\n- **Int√©gration de [[Vite]] et [[Vitest]]** : D√©veloppement rapide et tests efficaces.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance √† [[Angular]]** : N√©cessite [[Angular]], ce qui peut √™tre contraignant.\n- **Moins mature** : Moins de documentation et de communaut√© par rapport √† [[Nuxt.js]] ou [[Next.js]].\n- **Courbe d'apprentissage** : Complexe pour les d√©butants Angular ou SSR.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[JavaScript]] [[Typescript]]"
    },
    {
        "id": "dd0c0816-84ee-4e93-991a-8f8964cb56ec",
        "title": "Anglais - mot et expression",
        "description": "---\nid: 7d823355-dc92-4f2a-ae2c-e655a70688b1\n---\ngibberish: gibberish\nYou are talking gibberish: Tu dis n'importe quoi\ngrasshopper: sauterelle\nkneehigh to a grasshopper: haut comme trois pomme"
    },
    {
        "id": "56e1c640-ad12-4cc9-8546-43e7a58f1e9a",
        "title": "Annotation (java)",
        "description": "---\nid: 3822ed8e-7f6c-4ff8-a60e-b547afc6523d\n---\n# Rapidement c'est quoi‚ùì\n\nLes annotations [[Java]] sont des m√©tadonn√©es qui fournissent des informations suppl√©mentaires sur le code sans affecter son ex√©cution. Elles sont utilis√©es pour annoter des classes, m√©thodes, champs, etc.,  guidant le compilateur, les outils d'ex√©cution ou d'autres processus, comme [[Aspect Oriented Programming.md]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nEn [[Java]], les annotations sont des balises plac√©es avant les √©l√©ments de code (classes, m√©thodes, champs, etc.). Elles sont d√©finies √† l'aide de l'annotation `@interface`.  Elles ne modifient pas le comportement du code en lui-m√™me, mais fournissent des informations contextuelles pour diff√©rents outils et processus.\n\n**Structure d'une annotation:**\n\nUne annotation est d√©finie avec le mot cl√© `@interface` suivi du nom de l'annotation.  Elle peut contenir des √©l√©ments (attributs) avec des valeurs par d√©faut ou non.  Par exemple :\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface MyAnnotation {\n    String value() default \"default value\";\n    int number() default 0;\n}\n```\n\nDans cet exemple :\n\n* `@Retention(RetentionPolicy.RUNTIME)` sp√©cifie que l'annotation sera disponible au runtime (l'ex√©cution du programme).  Il existe d'autres valeurs possibles: `SOURCE` (disponible uniquement √† la compilation) et `CLASS` (disponible √† la compilation et au chargement de la classe). Il faut savoir qu'il y a tr√®s peu d'int√©r√™t d'utiliser autres chose de RUNTIME car c'est la seule valeur qui conserve l'annotation au runtime, et qui permet donc de faire des traitements.\n* `@Target(ElementType.METHOD)` indique que cette annotation ne peut √™tre appliqu√©e qu'aux m√©thodes.  D'autres valeurs possibles pour `ElementType` incluent `TYPE`, `FIELD`, `CONSTRUCTOR`, `PARAMETER`, etc.\n* `String value() default \"default value\";` d√©finit un attribut `value` de type String avec une valeur par d√©faut.\n* `int number() default 0;` d√©finit un attribut `number` de type int avec une valeur par d√©faut.\n\nL'annotation est ensuite utilis√©e dans le code ainsi :\n\n```java\n@MyAnnotation(value = \"hello\", number = 5)\npublic void myMethod() {\n  // ...\n}\n```\n\nLe compilateur, les outils (frameworks, IDEs) ou le code au runtime peuvent alors interpr√©ter ces informations pour effectuer diff√©rentes actions. Par exemple, un framework pourrait utiliser une annotation pour injecter des d√©pendances ou un outil de test pour identifier les m√©thodes √† tester.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **M√©taprogrammation:** Permet d'ajouter des informations au code sans le modifier directement, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **R√©duction de la redondance:**  Evite la duplication de code en centralisant les informations dans les annotations.\n* **Extensibilit√©:** Facilite l'ajout de fonctionnalit√©s sans modifier le code source existant.\n* **Framework-agnostique:**  Les annotations peuvent √™tre utilis√©es par diff√©rents frameworks et outils.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:** Une sur-utilisation des annotations peut rendre le code difficile √† comprendre.\n* **D√©pendances:**  Le code qui utilise les annotations peut d√©pendre de la pr√©sence de certains outils ou frameworks.\n* **Performances:**  Le traitement des annotations au runtime peut avoir un impact sur les performances, bien que g√©n√©ralement n√©gligeable.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "744b0bb3-e2f9-44bd-badb-57383ee57ed2",
        "title": "Ansible Vault",
        "description": "---\nid: ae62d225-067f-4a01-9d22-52fdabf93106\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nAnsible Vault est un outil d'[[Ansible]] qui permet de chiffrer et prot√©ger des donn√©es sensibles dans des fichiers, comme des mots de passe ou des cl√©s API, afin de les utiliser dans des playbooks Ansible sans exposer ces informations en texte clair\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAnsible Vault chiffre des fichiers ou des cha√Ænes de caract√®res, les rendant illisibles sans un mot de passe sp√©cifique. Les principales commandes sont :\n\n- **`ansible-vault create`** : Cr√©e un fichier chiffr√© √† partir de z√©ro.\n- **`ansible-vault encrypt`** : Chiffre un fichier existant.\n- **`ansible-vault decrypt`** : D√©chiffre un fichier pour le rendre lisible.\n- **`ansible-vault edit`** : Permet de modifier un fichier chiffr√© sans le d√©chiffrer manuellement.\n- **`ansible-vault encrypt_string`** : Chiffre une cha√Æne de caract√®res (ex. un mot de passe) pour l'inclure dans un fichier ou un playbook.\n\nIl est aussi possible de g√©rer plusieurs fichiers Vault avec l'option **`-vault-id`**, permettant de sp√©cifier diff√©rents mots de passe pour diff√©rents environnements. L'option **`-ask-vault-pass`** permet de saisir le mot de passe manuellement √† l'ex√©cution.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **S√©curisation des donn√©es sensibles** : Prot√®ge efficacement les informations sensibles en les chiffrant.\n- **Facilit√© d'int√©gration avec [[Ansible]]** : Fonctionne de mani√®re fluide avec les playbooks Ansible.\n- **Prise en charge de plusieurs fichiers Vault** : Permet de g√©rer diff√©rents environnements de mani√®re s√©curis√©e avec **`-vault-id`**.\n- **Chiffrement granulaire** : Possibilit√© de chiffrer uniquement des valeurs sp√©cifiques avec **`encrypt_string`**.\n- **Interface simple** : Utilisation en ligne de commande intuitive pour cr√©er, modifier ou d√©chiffrer des fichiers.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Gestion des mots de passe** : Si le mot de passe Vault est perdu ou compromis, l'acc√®s aux donn√©es chiffr√©es devient impossible.\n- **D√©pendance aux mots de passe** : Chaque fichier chiffr√© n√©cessite un mot de passe pour y acc√©der, ce qui peut devenir contraignant dans des environnements complexes.\n- **Pas de solution native pour le partage s√©curis√©** : Le partage des fichiers Vault entre plusieurs utilisateurs n√©cessite une gestion manuelle des mots de passe, ce qui peut √™tre source d‚Äôerreurs.\n- **Performance** : Bien que les fichiers chiffr√©s soient l√©gers, l'utilisation r√©p√©t√©e de commandes de chiffrement/d√©chiffrement peut affecter les performances dans des environnements de grande √©chelle.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Python]] [[MOC_DevSecOps]]"
    },
    {
        "id": "d5cddd3c-a911-4b5f-9b0a-1ee9e69b5ae6",
        "title": "Apache Apisix",
        "description": "---\nid: 82d7deb1-0645-4023-8a4c-7c1e96d022f5\n---\n# Rapidement c'est quoi‚ùì\n\nApache APISIX est une [[API Gateway]] open-source, l√©g√®re et performante, con√ßue pour les environnements cloud natifs.  Elle permet de g√©rer, router et s√©curiser le trafic vers vos [[Micros services]] et APIs.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache APISIX est une passerelle d'API dynamique et haute performance, √©crite en [[Lua]] et bas√©e sur [[Nginx]].  Elle se distingue par son architecture enti√®rement bas√©e sur le plugin, ce qui permet une extensibilit√© et une personnalisation exceptionnelles.  Au lieu de reconfigurer le serveur √† chaque changement, APISIX utilise une architecture de donn√©es dynamique,  mettant √† jour ses routes et ses configurations en temps r√©el sans n√©cessiter de red√©marrage.\n\nSes fonctionnalit√©s cl√©s incluent :\n\n* **Routage dynamique et gestion des routes:**  APISIX permet de d√©finir des routes pour diriger le trafic vers diff√©rents services backend en fonction de crit√®res comme l'h√¥te, l'URL, les en-t√™tes HTTP, etc.  Ces routes peuvent √™tre modifi√©es dynamiquement sans interruption de service.\n* **Gestion de la s√©curit√©:**  Int√®gre des m√©canismes de s√©curit√© robustes tels que l'authentification, l'autorisation (via des plugins), le WAF (Web Application Firewall) et la protection contre les DDoS.\n* **Gestion du trafic:**  Offre des fonctionnalit√©s de gestion du trafic avanc√©es comme le [[load balancing]], le [[circuit breaker]] et la limitation de d√©bit.\n* **Plugins extensibles:**  Son architecture plug-in permet d'√©tendre ses fonctionnalit√©s √† l'infini.  Des plugins sont disponibles pour la gestion des logs, la surveillance, l'int√©gration avec des services de monitoring, etc.\n* **Gestion des m√©tadonn√©es:**  Permet de stocker et de g√©rer des m√©tadonn√©es associ√©es aux routes et aux services.\n* **Compatibilit√© [[Kubernetes]]:**  APISIX s'int√®gre bien avec Kubernetes et d'autres orchestrateurs de conteneurs.\n\nContrairement aux passerelles API traditionnelles qui n√©cessitent des red√©marrages pour mettre √† jour la configuration, APISIX offre une gestion dynamique, permettant des mises √† jour en temps r√©el et une haute disponibilit√©.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Haute performance et faible latence:**  APISIX est connu pour sa performance exceptionnelle.\n* **Extensibilit√© gr√¢ce √† l'architecture plug-in:**  Permet d'ajouter facilement de nouvelles fonctionnalit√©s.\n* **Gestion dynamique de la configuration:**  Pas de temps d'arr√™t lors des mises √† jour.\n* **Open-source et communaut√© active:**  B√©n√©ficie d'un support communautaire important.\n* **Int√©gration avec [[Kubernetes]] et d'autres outils cloud natifs.**\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage potentiellement raide:**  La ma√Ætrise compl√®te de l'utilisation des plugins peut demander un certain temps.\n* **D√©pendance √† [[Lua]]:**  N√©cessite une certaine familiarit√© avec le langage Lua pour d√©velopper des plugins personnalis√©s.\n* **La documentation peut parfois manquer de clart√© pour certains aspects avanc√©s.**\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "eb8de89e-4a18-43d3-8bd0-33475992f124",
        "title": "Apache Karaf (OSGi)",
        "description": "---\nid: ef4589e3-be7d-49b4-bb8f-550ea8a049d0\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùìblabla\n\nKaraf est un conteneur d'application l√©ger bas√© sur [[Open Service Gateway initiative (OSGi)]], permettant de d√©ployer, g√©rer et configurer des applications [[Open Service Gateway initiative (OSGi)]] de mani√®re simplifi√©e, avec des fonctionnalit√©s avanc√©es comme la gestion dynamique des configurations, le d√©ploiement √† chaud et l'int√©gration avec divers outils.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache Karaf est un conteneur d'application permettant de g√©rer des applications [[Open Service Gateway initiative (OSGi)]]. Il offre plusieurs fonctionnalit√©s suppl√©mentaires par rapport aux autres impl√©mentations [[Open Service Gateway initiative (OSGi)]], telles que :\n\n- **Console Interactive** : Une interface en ligne de commande pour g√©rer les bundles, services et configurations.\n- **Karaf Features** : Permet l'installation de groupes de bundles et configurations d'un coup.\n- **Support Maven** : D√©ploiement direct de bundles depuis un d√©p√¥t Maven.\n- **Blueprints ([[Apache Aries]])** : Configuration d√©clarative des services [[Open Service Gateway initiative (OSGi)]] via des fichiers XML.\n- **Gestion Dynamique des Configurations** : Permet de modifier les configurations en direct sans red√©marrer l'application.\n- **Hot Deployment** : D√©ploiement et mise √† jour des bundles sans red√©marrage du serveur.\n- **Int√©gration avec des frameworks** : Int√©gration facile avec des outils comme [[Apache Camel]], [[ActiveMQ]] et [[CXF]] pour les services d'int√©gration, la messagerie et les services web.\n- **Gestion de Clusters** : Avec [[Karaf Cellar]], permet de g√©rer et synchroniser des clusters [[Open Service Gateway initiative (OSGi)]].\n- **S√©curisation des configurations** : [[Karaf Vault]] prot√®ge les informations sensibles dans les fichiers de configuration.\n- **[[JMX]] et Monitoring** : Surveillance des services via l'int√©gration avec [[JMX]] et [[Jolokia]].\n- **Commandes Personnalis√©es** : Cr√©ation de commandes personnalis√©es pour automatiser les t√¢ches courantes.\n- **Support [[Java EE]] et [[Micros services]]** : Permet de d√©ployer des applications [[Java EE]] et de supporter des architectures [[Micros services]] gr√¢ce √† son mod√®le modulaire.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Console interactive** : Facilit√© de gestion des applications via une interface simple.\n- **Hot Deployment** : Mise √† jour des applications sans perturber le service, id√©al pour des environnements de production.\n- **Int√©gration avec des outils tiers** : Connexions pr√™tes √† l'emploi avec des technologies comme [[Apache Camel]],[[ ActiveMQ]], et [[CXF]].\n- **Gestion dynamique des configurations** : Modifications √† la vol√©e sans red√©marrage n√©cessaire, simplifiant l'administration.\n- **Blueprints** : Approche d√©clarative facilitant la gestion des services [[Open Service Gateway initiative (OSGi)]], similaire √† [[Spring Framework]].\n- **Support de [[Java EE]] et des [[Micros services]]** : Permet de d√©ployer des applications de grande √©chelle de mani√®re modulaire.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© pour les d√©butants** : L'usage d'[[Open Service Gateway initiative (OSGi)]] et de Karaf peut √™tre d√©routant pour les nouveaux utilisateurs.\n- **Configuration initiale** : La configuration des features et des bundles peut √™tre complexe et n√©cessite une bonne ma√Ætrise de l'environnement.\n- **Performance** : L'usage intensif de bundles et de services peut parfois entra√Æner une surcharge dans des applications tr√®s petites ou simples.\n- **D√©pendance au mod√®le OSGi** : Certains d√©veloppeurs pr√©f√©reront des alternatives plus simples √† OSGi pour des applications ne n√©cessitant pas un mod√®le aussi modulaire.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Java]]"
    },
    {
        "id": "75728b98-3ac9-4c30-b578-92cf0f33c975",
        "title": "Apache Lucene",
        "description": "---\nid: 73e4d839-b181-4a74-b4d5-439c03d44a43\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nApache Lucene est un framework [[Java]] destin√© √† l'indexation et √† la recherche de texte, permettant de g√©rer efficacement de grandes quantit√©s de donn√©es pour cr√©er des moteurs de recherche performants.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache Lucene fournit des outils pour indexer des documents et effectuer des recherches rapides sur des grandes bases de donn√©es textuelles. Il permet de cr√©er des moteurs de recherche en offrant des fonctionnalit√©s comme :\n\n- **Indexation** : Cr√©ation d'index invers√©s pour une recherche rapide.\n- **Recherche textuelle** : Recherche bas√©e sur des mots-cl√©s, phrases, ou expressions r√©guli√®res.\n- **Performance** : Optimisation des recherches avec des structures de donn√©es adapt√©es. Des outils comme **[[Elasticsearch]]** et **[[Apache Solr]]** utilisent Lucene pour faciliter l'int√©gration et l'utilisation dans des environnements de production √† grande √©chelle.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Haute performance** : Tr√®s rapide pour la recherche et l'indexation sur de grandes quantit√©s de donn√©es.\n- **Flexibilit√©** : Offre des options avanc√©es pour affiner les recherches (poids, synonymes, requ√™tes bool√©ennes).\n- **√âcosyst√®me riche** : Utilis√© par des outils comme [[Elasticsearch]] et [[Solr]], ce qui le rend encore plus accessible pour des cas d‚Äôusage complexes.\n- **Support de plusieurs formats** : Peut indexer des fichiers texte, XML, JSON, etc.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© d'int√©gration** : Peut √™tre difficile √† configurer et √† int√©grer directement dans des projets sans outils suppl√©mentaires.\n- **Consommation m√©moire** : L'indexation et la recherche sur de tr√®s grandes bases de donn√©es peuvent n√©cessiter des ressources importantes.\n- **Pas de GUI natif** : Ne propose pas d'interface graphique de gestion, n√©cessitant souvent des outils externes comme Solr ou Elasticsearch pour faciliter l'utilisation.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Java]]"
    },
    {
        "id": "555847cc-90e9-4281-9f5f-ca65cb84ef39",
        "title": "ArgoCD",
        "description": "---\nid: fc23560f-daa5-461d-8a6b-7215c2cf2657\n---\n# Rapidement c'est quoi‚ùì\n\nArgo CD est un outil de gestion de configuration [[GitOps]] pour [[Kubernetes]].  Il synchronise l'√©tat d√©clar√© de votre infrastructure dans un d√©p√¥t [[Git]] avec l'√©tat r√©el de votre cluster [[Kubernetes]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nArgo CD est un syst√®me de d√©ploiement et de gestion continue bas√© sur le principe [[GitOps]].  Il fonctionne en surveillant un d√©p√¥t [[Git]] sp√©cifi√© pour les modifications apport√©es √† des manifestes [[Kubernetes]] .  Lorsqu'une modification est d√©tect√©e, Argo CD compare l'√©tat souhait√© (d√©fini dans le d√©p√¥t Git) √† l'√©tat actuel du cluster [[Kubernetes]].  Il effectue ensuite les actions n√©cessaires pour synchroniser ces deux √©tats, en appliquant les modifications, cr√©ant, mettant √† jour ou supprimant les ressources [[Kubernetes]].  Cela permet un d√©ploiement automatis√©, fiable et tra√ßable des applications sur [[Kubernetes]].\n\nArgo CD utilise un \"Declarative Configuration\" : l'√©tat souhait√© du cluster est enti√®rement d√©fini dans des fichiers de configuration versionn√©s dans un d√©p√¥t [[Git]] (g√©n√©ralement avec un syst√®me de branchement [[Git]] pour g√©rer les d√©ploiements et les rollbacks).  Cela facilite le suivi des changements, la collaboration et l'auditabilit√©.  La visualisation de l'√©tat du d√©ploiement, ainsi que l'historique des modifications et des √©ventuels √©checs, est un aspect central de la plateforme.\n\nIl ne se limite pas aux manifestes [[Kubernetes]] ; il peut g√©rer d'autres ressources en utilisant des m√©canismes d'extensions (comme les applications [[Helm]]).  L'automatisation est pouss√©e, avec la possibilit√© de configurer des notifications et des alertes lors des √©v√©nements importants.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* [[**GitOps]]:**  Adopte une approche [[GitOps]], offrant tous les avantages de la gestion de version, de la collaboration et de l'auditabilit√©.\n* **Automatisation:**  Automatise compl√®tement le processus de d√©ploiement et de gestion des applications [[Kubernetes]].\n* **Observabilit√©:**  Fournit une interface utilisateur pour surveiller l'√©tat des d√©ploiements et l'historique des changements.\n* **Fiabilit√©:**  Minimise les risques d'erreurs manuelles et assure la coh√©rence entre l'√©tat souhait√© et l'√©tat r√©el.\n* **Rollbacks faciles:**  Permet de revenir facilement √† des versions pr√©c√©dentes gr√¢ce √† l'historique [[Git]].\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© initiale:**  La configuration et l'int√©gration initiale peuvent √™tre complexes pour les utilisateurs non familiers avec [[Kubernetes]] et [[GitOps]].\n* **D√©pendance √† Git:**  Une d√©pendance totale √† un syst√®me de gestion de versions [[Git]] est n√©cessaire.\n* **Gestion des secrets:**  La gestion des secrets n√©cessite une configuration suppl√©mentaire et une int√©gration avec des solutions de gestion des secrets.\n* **Surveillance accrue n√©cessaire:**  M√™me avec l'automatisation, la surveillance du syst√®me reste cruciale pour identifier et r√©soudre les probl√®mes.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "0e691bd0-f951-4184-b231-57171dea0300",
        "title": "Aspect Oriented Programming (AOP)",
        "description": "---\nid: 648c597b-2bb8-47b8-8dbb-1ea43bf23d4c\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nL'Aspect Oriented Programming (AOP) est une technique de programmation qui permet de s√©parer les pr√©occupations transversales (cross-cutting concerns) du code principal.  Elle vise √† am√©liorer la modularit√© et la maintenabilit√© du code en regroupant des fonctionnalit√©s qui affectent plusieurs parties du programme, mais qui ne sont pas directement li√©es √† la logique m√©tier principale.  Imaginez des aspects comme la journalisation, la s√©curit√© ou la gestion des transactions, qui traversent plusieurs modules.  AOP permet de les g√©rer s√©par√©ment.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAOP introduit le concept d'**aspects**, qui sont des modules contenant du code qui s'ex√©cute √† des points sp√©cifiques du programme, appel√©s **points de jonction** (join points). Ces points de jonction sont g√©n√©ralement des √©v√©nements tels que l'appel d'une m√©thode, la cr√©ation d'un objet ou l'ex√©cution d'une exception.\n\nUn aspect est d√©fini par un ensemble de points de jonction et d'**avis** (advices). Un avis est un bloc de code qui s'ex√©cute avant, apr√®s ou autour d'un point de jonction.  On peut ainsi ajouter des fonctionnalit√©s sans modifier le code principal.\n\n**Exemple concret ([[Java]] avec [[Spring AOP]]):**\n\nImaginons une m√©thode `processOrder()` qui g√®re le traitement d'une commande.  On veut ajouter une journalisation avant et apr√®s son ex√©cution.  Avec AOP, on peut cr√©er un aspect sans modifier `processOrder()` :\n\n```java\n@Aspect\npublic class LoggingAspect {\n\n    @Before(\"execution(* com.example.OrderService.processOrder(..))\")\n    public void beforeProcessOrder(JoinPoint joinPoint) {\n        System.out.println(\"Avant traitement de la commande: \" + joinPoint.getSignature());\n    }\n\n    @After(\"execution(* com.example.OrderService.processOrder(..))\")\n    public void afterProcessOrder(JoinPoint joinPoint) {\n        System.out.println(\"Apr√®s traitement de la commande: \" + joinPoint.getSignature());\n    }\n}\n```\n\nCe code utilise Spring AOP.  `@Aspect` indique qu'il s'agit d'un aspect.  `@Before` et `@After` d√©finissent les avis qui s'ex√©cutent avant et apr√®s l'ex√©cution de `processOrder()`.  `execution(* com.example.OrderService.processOrder(..))` est un pointcut (expression qui d√©finit les points de jonction).\n\nL'impl√©mentation d'AOP varie selon les langages et les frameworks.  Certains langages ont des fonctionnalit√©s int√©gr√©es, tandis que d'autres utilisent des frameworks sp√©cifiques ([[Spring AOP]] en [[Java]], AspectJ, etc.).  Le m√©canisme sous-jacent implique souvent la modification du code bytecode (transformation du code compil√©) pour injecter le code des aspects aux points de jonction.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Modularit√© et maintenabilit√©:** S√©pare les pr√©occupations transversales du code principal, facilitant la maintenance et la compr√©hension du code.\n- **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rents modules.\n- **R√©duction de la duplication de code:** √âvite la redondance de code pour des fonctionnalit√©s transversales.\n- **Am√©lioration de la lisibilit√©:** Le code principal reste focalis√© sur la logique m√©tier.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Complexit√©:**  AOP peut introduire une complexit√© suppl√©mentaire, surtout pour des projets de petite taille.  La compr√©hension du m√©canisme et des points de jonction peut n√©cessiter une courbe d'apprentissage.\n- **D√©bogage:** Le d√©bogage peut √™tre plus difficile car le code est dispers√© entre les aspects et le code principal.\n- **Performances:**  L'ajout d'aspects peut avoir un impact l√©ger sur les performances, bien que souvent n√©gligeable.\n- **Difficult√© de test:** Tester les aspects isol√©ment peut √™tre complexe.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n\n"
    },
    {
        "id": "d7d701db-d6e0-42c9-8931-bdada3b40dda",
        "title": "AspectJ",
        "description": "---\nid: 0a9b351a-7625-4e02-a252-3dff5766d3e2\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nAspectJ est une extension du langage [[Java]] qui permet la [[Aspect Oriented Programming (AOP)]].  Il offre un moyen de modulariser les pr√©occupations transversales (cross-cutting concerns) comme la journalisation, la gestion des transactions, ou la s√©curit√©, en les s√©parant du code principal de l'application.  Cela am√©liore la lisibilit√©, la maintenabilit√© et la r√©utilisabilit√© du code.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAspectJ permet d'ajouter du code (appel√© *aspects*) √† des points sp√©cifiques dans l'ex√©cution d'un programme [[Java]], sans modifier le code source existant.  Ces points sont d√©finis par des *pointcuts*, qui sont des expressions qui s√©lectionnent des joint points (join points).  Un joint point repr√©sente un point d'ex√©cution dans le programme, comme l'appel d'une m√©thode, la cr√©ation d'un objet, ou le lancement d'une exception.\n\nLes aspects sont d√©finis dans des fichiers s√©par√©s et contiennent des *advice*, qui sont des blocs de code ex√©cut√©s avant, apr√®s, ou autour d'un joint point s√©lectionn√© par le pointcut.  AspectJ utilise un processus de compilation s√©par√© pour tisser (weave) les aspects dans le code Java.\n\n**Exemple:** Imaginons que l'on veuille logger chaque appel de m√©thode d'une classe `UserService`.  Avec AspectJ, on pourrait d√©finir un aspect comme suit :\n\n```java\npublic aspect UserServiceLogger {\n    pointcut logMethodCall(): call(* com.example.UserService.*(..));\n\n    before(): logMethodCall() {\n        System.out.println(\"Appel de m√©thode : \" + thisJoinPoint.getSignature());\n    }\n}\n```\n\nCe code d√©finit un pointcut `logMethodCall()` qui s√©lectionne tous les appels de m√©thode de la classe `com.example.UserService`.  L'advice `before()` est ex√©cut√© avant chaque appel de m√©thode s√©lectionn√©, et affiche un message de log dans la console.  `thisJoinPoint` est une variable sp√©ciale qui fournit des informations sur le joint point courant.\n\nAspectJ supporte plusieurs types d'advice : `before`, `after`, `after returning`, `after throwing`, et `around`.  L'advice `around` permet de contr√¥ler enti√®rement l'ex√©cution d'un joint point.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **S√©paration des pr√©occupations:** Am√©liore la modularit√© et la lisibilit√© du code en s√©parant les pr√©occupations transversales du code principal.\n* **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application ou m√™me dans d'autres applications.\n* **Maintenance simplifi√©e:** Les modifications des pr√©occupations transversales n'impliquent pas de modifier le code principal.\n* **Aspect non invasif:**  On peut ajouter des fonctionnalit√©s sans modifier le code source existant.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** La programmation orient√©e aspect peut avoir une courbe d'apprentissage raide, surtout pour les d√©veloppeurs qui ne sont pas familiers avec ce paradigme.\n* **D√©bogage:** Le d√©bogage peut √™tre plus complexe que dans le code [[Java]] standard, car il faut comprendre l'interaction entre les aspects et le code principal.\n* **Performance:** L'ajout d'aspects peut avoir un impact sur les performances, bien que cela soit g√©n√©ralement n√©gligeable.\n* **Complexit√© potentielle:**  Une mauvaise utilisation des aspects peut conduire √† un code plus complexe et difficile √† maintenir.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "314398fc-a56e-435e-b0bd-8438fd066367",
        "title": "Astro Starlight",
        "description": "---\nid: 3076a9fe-0aeb-4998-b3f7-43f4cb759043\n---\n# Rapidement c'est quoi‚ùì\n\nAstro Starlight est un g√©n√©rateur de sites web statiques, sp√©cifiquement con√ßu pour cr√©er des documentations, similaire √† [[VitePress]] ou [[Docusaurus]].  Il utilise [[Astro]], un framework de sites web rapides et performants.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAstro Starlight est un th√®me (ou un ensemble de composants et de configurations) pour le framework [[Astro]]. Il fournit une structure de base et des composants pr√©-construits pour faciliter la cr√©ation de sites de documentation.  Contrairement √† une solution comme [[VitePress]] qui est une application compl√®te, Starlight se base sur la flexibilit√© d'[[Astro]], permettant une plus grande personnalisation tout en conservant une structure claire pour la documentation.  Il g√®re typiquement la navigation, la mise en forme du code, la recherche et d'autres fonctionnalit√©s courantes des sites de documentation.  On √©crit le contenu de la documentation g√©n√©ralement en [[Markdown]], qui est ensuite trait√© par [[Astro]] pour g√©n√©rer le site web statique final.  Cela permet un workflow rapide, une mise √† jour facile et un excellent SEO.  La performance est un point fort gr√¢ce √† l'utilisation d'[[Astro]], qui est connu pour g√©n√©rer des sites l√©gers et rapides √† charger.  L'utilisateur final a la possibilit√© de personnaliser profond√©ment le th√®me en modifiant les fichiers de configuration et les composants int√©gr√©s.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance:**  Gr√¢ce √† [[Astro]], les sites g√©n√©r√©s sont rapides et l√©gers.\n* **Personnalisation:**  Offre une grande flexibilit√© pour adapter le th√®me √† ses propres besoins et design.\n* **Bas√© sur Astro:** B√©n√©ficie de l'√©cosyst√®me et des avantages d'[[Astro]] (performance, simplicit√©).\n* **Int√©gration [[Markdown]]:**  Simple et efficace pour la cr√©ation du contenu.\n* **Structure claire:**  Fournit une base solide et bien organis√©e pour la documentation.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Potentiellement plus complexe √† mettre en place que [[VitePress]]:**  N√©cessite une compr√©hension de base d'[[Astro]].\n* **Moins de fonctionnalit√©s \"out-of-the-box\":** Par rapport √† une solution plus int√©gr√©e comme [[VitePress]], il faut potentiellement plus de configuration pour obtenir des fonctionnalit√©s avanc√©es.\n* **D√©pendance √† [[Astro]]:**  La connaissance d'[[Astro]] est n√©cessaire pour une utilisation et personnalisation efficace.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "5f1e2ec9-364e-4ce4-9afe-b92ff447af3f",
        "title": "Azure Active Directory",
        "description": "---\nid: 90178cba-c2e7-4de7-a92f-4d570dc3b732\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nAzure Active Directory (Azure AD) est le service d'annuaire cloud de Microsoft. Il fournit une identit√© et une [[Identify Access Manager (IAM)]] pour les applications et les ressources cloud, permettant l'authentification et l'autorisation des utilisateurs et des applications.  Il peut √©galement √™tre int√©gr√© avec des annuaires locaux (via Azure AD Connect).\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nAzure AD est un annuaire bas√© sur le cloud qui g√®re les identit√©s d'utilisateurs et d'applications.  Il permet :\n\n* **Authentification unique (SSO):**  Les utilisateurs peuvent acc√©der √† plusieurs applications avec les m√™mes identifiants.\n* **Gestion des acc√®s bas√©e sur les r√¥les [[Role Based Access Control (RBAC)]]:** Contr√¥le fin des permissions pour les utilisateurs et les groupes.\n* **Gestion des identit√©s:** Cr√©ation, modification et suppression de comptes utilisateurs et groupes.\n* **Int√©gration avec des applications SaaS:**  Acc√®s simple aux applications cloud bas√©es sur le cloud.\n* **Int√©gration avec des applications locales:** Via Azure AD Connect, les identit√©s locales peuvent √™tre synchronis√©es avec Azure AD.\n* **Authentification multi-facteur (MFA):**  Am√©liore la s√©curit√© en exigeant plusieurs m√©thodes d'authentification.\n* **Protection contre les menaces:** Surveillance et d√©tection des activit√©s suspectes.\n* **Gestion des appareils:** Contr√¥le et gestion des appareils acc√©dant aux ressources.\n* **Conditionnel Access:**  D√©finit des politiques d'acc√®s bas√©es sur des conditions (emplacement, appareil, etc.).\n\n\n**Exemple d'int√©gration avec une application:** Une application web peut utiliser l'authentification Azure AD pour v√©rifier l'identit√© des utilisateurs avant de leur accorder l'acc√®s.  Cela se fait g√©n√©ralement via les protocoles OAuth 2.0 et OpenID Connect.\n\n**Exemple de configuration (sch√©matique):**  Pour int√©grer une application web avec Azure AD, il faut enregistrer l'application dans Azure AD, obtenir un ID d'application et un secret client, puis configurer l'application pour qu'elle utilise ces informations pour authentifier les utilisateurs via Azure AD.  La configuration pr√©cise d√©pend du type d'application et des biblioth√®ques utilis√©es.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Int√©gration avec l'√©cosyst√®me Microsoft:**  Fonctionne parfaitement avec d'autres services Microsoft cloud.\n* **Fonctionnalit√©s robustes de s√©curit√©:**  Offre des m√©canismes de s√©curit√© avanc√©s.\n* **Scalabilit√© et fiabilit√©:**  Con√ßu pour g√©rer des millions d'utilisateurs et d'applications.\n* **Gestion centralis√©e des identit√©s:**  Simplifie la gestion des utilisateurs et des acc√®s.\n* **Bonne documentation et support:** Microsoft fournit une documentation compl√®te et un support technique.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Co√ªt:** Peut √™tre co√ªteux pour les grandes organisations avec un grand nombre d'utilisateurs.\n* **Complexit√©:**  La configuration et la gestion d'Azure AD peuvent √™tre complexes pour les utilisateurs inexp√©riment√©s.\n* **D√©pendance √† Microsoft:**  Les organisations sont d√©pendantes de Microsoft pour le service.\n* **Probl√®mes de performance possibles:**  Des probl√®mes de performance peuvent survenir en cas de forte demande.\n* **Int√©gration avec des syst√®mes non-Microsoft:**  Peut n√©cessiter des efforts suppl√©mentaires pour int√©grer des syst√®mes non-Microsoft.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]\n\n**Note concernant la proposition initiale de f√©d√©rer avec [[Keycloak]]:**  Bien que possible, f√©d√©rer Azure AD avec Keycloak ajoute une couche de complexit√©.  Cela peut √™tre utile dans certains sc√©narios (par exemple, pour centraliser la gestion des identit√©s pour des applications multiples, ou pour ajouter des fonctionnalit√©s sp√©cifiques offertes par Keycloak), mais il est important de consid√©rer les implications sur la complexit√© de la gestion et la s√©curit√© globale.  Un choix direct d'Azure AD pour l'authentification est souvent plus simple et plus int√©gr√©.\n"
    },
    {
        "id": "78fcdf93-fb9e-4ab7-9121-ad92a35dbae7",
        "title": "Behaviour Driven Developpement (BDD)",
        "description": "---\nid: f580a39e-f8d4-4c10-b007-25b2f99064b9\n---\n# Rapidement c'est quoi‚ùì\n\nLe Behaviour Driven Development (BDD) est une approche de d√©veloppement logiciel qui √©tend le [[Test Driven Developpement (TDD)]] en mettant l'accent sur la collaboration entre les d√©veloppeurs, les testeurs et les clients.  Il se concentre sur le comportement du logiciel du point de vue de l'utilisateur.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe BDD est une technique de d√©veloppement logiciel agile qui utilise des exemples concrets pour d√©finir et v√©rifier le comportement souhait√© du logiciel.  Au lieu de se concentrer uniquement sur des tests unitaires techniques comme le [[Test Driven Developpement (TDD)]], le BDD d√©finit les exigences et les tests √† partir du point de vue de l'utilisateur final ou d'un autre intervenant (par exemple, un analyste m√©tier).  Ces exigences sont exprim√©es sous forme de sc√©narios √©crits dans un langage compr√©hensible par tous (par exemple, Given-When-Then, ([[Gherkin]])), facilitant ainsi la communication et la collaboration entre les parties prenantes.\n\nLe processus BDD implique g√©n√©ralement les √©tapes suivantes :\n\n1. **D√©finir les comportements attendus:**  Les √©quipes identifient les fonctionnalit√©s et les comportements attendus du logiciel √† l'aide d'exemples concrets.  Ces exemples sont souvent √©crits en utilisant le format Given-When-Then (ou un format similaire).  *Given* d√©crit le contexte initial, *When* d√©crit l'action effectu√©e, et *Then* d√©crit le r√©sultat attendu.\n\n2. **Automatiser les tests:**  Les exemples de comportements sont ensuite traduits en tests automatis√©s.  Ces tests v√©rifient que le logiciel se comporte comme attendu.  Des frameworks BDD comme [[Cucumber]], [[SpecFlow]], ou [[Behat]] sont souvent utilis√©s pour faciliter l'automatisation des tests √† partir de la sp√©cification √©crite en langage naturel.\n\n3. **D√©velopper le logiciel:**  Le d√©veloppement du logiciel se fait it√©rativement, en commen√ßant par les fonctionnalit√©s d√©crites par les exemples de comportement.  Les tests automatis√©s servent de guide pour le d√©veloppement et permettent de valider que chaque it√©ration r√©pond aux exigences.\n\nEn essence, le BDD favorise une compr√©hension partag√©e des exigences entre les d√©veloppeurs, les testeurs et les clients, r√©duisant ainsi les malentendus et les erreurs.  Il permet une documentation vivante et ex√©cutable du comportement du logiciel.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Collaboration am√©lior√©e:**  Facilite la communication et la collaboration entre les √©quipes techniques et les clients gr√¢ce √† un langage commun.\n* **Documentation vivante et ex√©cutable:**  Les exemples de comportement servent de documentation claire et concise, qui est automatiquement v√©rifi√©e par les tests.\n* **R√©duction des erreurs:**  La sp√©cification pr√©cise des comportements permet de d√©tecter et de corriger les erreurs plus t√¥t dans le cycle de d√©veloppement.\n* **Tests plus compr√©hensibles:** Les tests sont √©crits dans un langage naturel et facilement compr√©hensibles par tous, pas seulement les d√©veloppeurs.\n* **Am√©lioration de la qualit√© du logiciel:**  Les tests automatis√©s assurent une meilleure qualit√© du logiciel.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  La mise en place de BDD peut n√©cessiter une courbe d'apprentissage pour les √©quipes non familiaris√©es avec cette approche.\n* **Surco√ªt potentiel:**  L'√©criture des exemples de comportement et l'automatisation des tests peuvent prendre du temps et n√©cessiter des ressources suppl√©mentaires, surtout au d√©but.\n* **Maintenance des tests:**  La maintenance des tests automatis√©s peut √™tre chronophage si le logiciel √©volue rapidement.\n* **D√©pendance aux frameworks:**  Le choix et la ma√Ætrise d'un framework BDD sont essentiels pour une impl√©mentation r√©ussie.\n* **Peut √™tre inad√©quat pour certains projets:**  Le BDD n'est pas toujours la meilleure approche pour tous les projets, notamment les projets tr√®s petits ou ceux avec des exigences tr√®s fluctuantes.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "7e46e637-b644-45d4-887e-b929589b9fa3",
        "title": "Bento grid",
        "description": "---\nid: 1734446d-b56f-421d-847e-74616d8b5715\n---\n# Rapidement c'est quoi‚ùì\n\nBento est une m√©thode de conception d'interface utilisateur (UI) bas√©e sur un syst√®me de grille flexible et adaptable, facilitant la cr√©ation de mises en page r√©actives et modulaires.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nBento est une approche de conception UI qui se diff√©rencie des syst√®mes de grille traditionnels en proposant une plus grande flexibilit√© et modularit√©.  Au lieu d'une grille fixe et pr√©-d√©finie, Bento utilise un syst√®me de conteneurs \"bentos\" qui peuvent contenir diff√©rents √©l√©ments UI, et s'adaptent dynamiquement √† la taille de l'√©cran et au contenu.  Chaque bento est un composant ind√©pendant qui peut √™tre r√©utilis√© et combin√© avec d'autres pour cr√©er des mises en page complexes.  Le principe repose sur l'utilisation de plusieurs conteneurs (les bentos) de tailles variables, dispos√©s les uns √† c√¥t√© des autres ou les uns au-dessus des autres, en fonction des besoins.  Cela permet de cr√©er des layouts facilement adaptables aux diff√©rents appareils (tablettes, smartphones, ordinateurs) sans avoir √† √©crire du code sp√©cifique pour chaque r√©solution.  L'avantage cl√© est la facilit√© de maintenance et d'√©volution du design, car les modifications apport√©es √† un bento impactent uniquement ce dernier, sans n√©cessiter de r√©ajustement global de la mise en page.  La flexibilit√© permet aussi de r√©pondre √† des changements de contenu sans perturber l'ensemble de l'interface.  Il est souvent impl√©ment√© via des frameworks [[CSS]], permettant un contr√¥le pr√©cis du [[Responsive en CSS]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Flexibilit√© et modularit√©:**  Facilement adaptable aux diff√©rents √©crans et contenus.  Les modifications sont localis√©es.\n* **R√©utilisabilit√© des composants:**  Les bentos peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application, r√©duisant la redondance de code et am√©liorant la coh√©rence visuelle.\n* **Maintenance simplifi√©e:**  Les changements sont moins susceptibles d'avoir des effets inattendus sur le reste de l'interface.\n* **Responsive design facilit√©:** L'adaptation aux diff√©rentes tailles d'√©cran est int√©gr√©e au c≈ìur du syst√®me.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:** La mise en place peut √™tre plus complexe que des syst√®mes de grille plus simples, n√©cessitant une bonne compr√©hension des concepts.\n* **Courbe d'apprentissage:**  N√©cessite de ma√Ætriser les concepts de base de la conception UI et des syst√®mes de grille avant de pouvoir l'utiliser efficacement.\n* **Manque de standardisation:**  Bento n'est pas un standard officiel, la mise en ≈ìuvre peut varier selon les frameworks et les d√©veloppeurs.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "ca2e037c-2ea7-453f-8814-c90ca0fb317d",
        "title": "Bonne pratiques Astuces Infos SQL",
        "description": "---\nid: 9598b636-e6c7-433c-9c84-8d2be81bae62\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_Dev]][[MOC_DevSecOps]]\n\n**Plusieurs bonnes pratiques √† mettre en place sur des [[Base de donn√©e SQL]] :** \n\n- Mettre des [[Index]] sur les [[Primary Key]] et les [[Foreign Key]] & sur les colonnes les plus utilis√©s (en terme de comparaison m√©moire on devrait atteindre une part 40% [[Index]] / 60% data)\n- Eviter au max l'utilisation de fonction dans les requ√™tes car elles emp√™chent l'utilisation des index.\n- Regarder les index les moins utilis√©s = Ils ralentissent l‚Äô√©criture\n- En fonction du m√©tier, il peut √™tre pertinent de cr√©er des vues ou des partitions pour optimiser les requ√™tes redondante"
    },
    {
        "id": "44c07912-e569-4ffd-afe8-ba9f66a366bb",
        "title": "Bonne pratiques Astuces Infos code",
        "description": "---\nid: 25d1a09d-2ccd-4cd5-a763-aa65e2c63372\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_Dev]]\n\n# [[Java]] - Comparaison BigDecimal.\n**Si je veux faire des comparaisons avec des `BigDecimal`.**\n\nOn va pr√©f√©rer cette comparaison : \n\n```java\nsipa2ElementFournisseur.getTauxTva().stripTrailingZeros().equals(fournisseurJSON.getTauxTva())\n```\n\n√† celle-ci : \n\n```java\nObjects.equals(sipa2ElementFournisseur.getMontantTtc(), fournisseurJSON.getMontantTtc());\nsipa2ElementFournisseur.getMontantTtc().equals(fournisseurJSON.getMontantTtc()));\n```\n\nParce qu‚Äôon peut avoir des probl√®mes d‚Äôarrondis (si j‚Äôai 0 et 0.0 le `Objects.equals()` renvoie faux).\n\nA noter que `stripTrailingZeros()` renvoi la notation scientifique de la valeur en string. Donc avec la pr√©cision sur les chiffres apr√®s la virgules.\n\n# [[Java]] - Activer les asserts\nPour pouvoir activer les asserts en java, il faut passer en argument de la JVM **-ea** (Enable Assert)\n\n# Appel en [[Base de donn√©e]]\n\nFaire tr√®s attention aux requ√™tes qu‚Äôon va faire en base.\n\nOn va pr√©f√©rer r√©cup√©rer toutes les infos dont on a besoin une fois, pour ensuite les passer en param√®tre de nos m√©thodes.\n\nDans des structures imbriqu√©es on peut se retrouver √† aller chercher 6 fois la m√™me chose.\n\n# Comparaison de valeur\nToujours mettre en premier dans une comparaison la valeur dont on est s√ªr !\n```java\n# Mauvais exemple\nexception.getEnumCode().equals(ExceptionTechniqueEnum.CONCEPT_NOT_FOUND.getCode())\n\n# Bon Exemple\nExceptionTechniqueEnum.CONCEPT_NOT_FOUND.getCode().equals(exception.getEnumCode())\n```\nCar dans ce cas exception.getEnumCode() peut √™tre null, ou produire null. "
    },
    {
        "id": "afd4c958-e250-4085-aa53-067aafec3f01",
        "title": "Bonne pratiques Astuces Infos ops",
        "description": "---\nid: ddeca416-e229-43bd-9ff3-cf790d5c7db6\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_DevSecOps]]\n# Installation [[WSL]] sans acc√®s au Microsoft Store\n> Si par exemple, il est bloqu√© par l‚Äôordinateur de la soci√©t√©.\n> \n\n```java\nwsl --update\n// Recherche de mises √† jour en cours... Veuillez patienter\n// Erreur : 0x8024500c\n\nwsl --update --web-download\n```"
    },
    {
        "id": "c8431349-aa03-4939-8097-d26735b0555d",
        "title": "Capture Data Change (CDC)",
        "description": "---\nid: 88fa46d4-2deb-41b1-9694-46a255156d83\n---\n# Rapidement c'est quoi‚ùì\n\nCapture Data Change (CDC) est une technique permettant de d√©tecter et de capturer les modifications de donn√©es dans une [[Base de donn√©e]].  Elle est souvent utilis√©e pour la r√©plication de donn√©es et la synchronisation entre [[Base de donn√©e]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCapture Data Change (CDC) est un m√©canisme qui identifie et enregistre les modifications apport√©es aux donn√©es d'une [[Base de donn√©e]].  Au lieu de copier l'int√©gralit√© de la base de donn√©es √† chaque synchronisation, le CDC ne capture que les changements (insertions, mises √† jour, suppressions) survenus depuis la derni√®re synchronisation.  Ceci am√©liore consid√©rablement l'efficacit√© et la performance, notamment pour les bases de donn√©es volumineuses.\n\nPlusieurs m√©thodes existent pour impl√©menter le CDC :\n\n* **Triggers:** Des d√©clencheurs (triggers) sont d√©finis sur les tables pour enregistrer chaque modification dans une table de journalisation (log table).  Cette m√©thode est relativement simple √† impl√©menter mais peut impacter les performances si mal configur√©e.\n\n* **Log Mining:**  L'extraction d'informations directement depuis les logs de la base de donn√©es.  Cette approche est g√©n√©ralement plus performante que les triggers mais plus complexe √† mettre en ≈ìuvre et d√©pend fortement du syst√®me de gestion de base de donn√©es (SGBD).\n\n* **Change Data Capture tools:** Des outils sp√©cialis√©s (ex: [[Debezium]], [[Maxwell]]) offrent des fonctionnalit√©s avanc√©es de CDC, g√©rant la complexit√© de l'extraction et de la transformation des donn√©es.  Ils permettent souvent une int√©gration plus simple avec diff√©rents SGBD et technologies.\n\nLes donn√©es captur√©es par le CDC sont g√©n√©ralement stock√©es dans une table de journalisation ou transmises √† un syst√®me de traitement en temps r√©el (streaming) pour diverses applications, comme la r√©plication vers une base de donn√©es secondaire, l'int√©gration avec des [[Date Warehouse]], la fourniture de donn√©es en temps r√©el pour les applications, etc.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance am√©lior√©e:** Seules les modifications sont trait√©es, ce qui rend le processus de synchronisation beaucoup plus rapide et moins gourmand en ressources.\n* **Efficacit√© accrue:** R√©duction du volume de donn√©es transf√©r√©es et trait√©es.\n* **Scalabilit√©:**  Adaptable √† des bases de donn√©es de grandes tailles.\n* **Faible latence:**  Permet de fournir des donn√©es presque en temps r√©el.\n* **Flexibilit√©:**  Compatible avec diverses technologies et syst√®mes de bases de donn√©es.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© d'impl√©mentation:**  La mise en ≈ìuvre peut √™tre complexe, en particulier pour les solutions bas√©es sur le *log mining* ou n√©cessitant une int√©gration personnalis√©e.\n* **Gestion des erreurs:**  Il est crucial de mettre en place une gestion robuste des erreurs pour garantir l'int√©grit√© des donn√©es.\n* **Co√ªt:** Les outils CDC commerciaux peuvent engendrer des co√ªts suppl√©mentaires.\n* **Maintenance:**  N√©cessite une maintenance r√©guli√®re pour garantir la fiabilit√© et la performance du syst√®me.\n* **D√©pendance au SGBD:**  La m√©thode d'impl√©mentation d√©pend fortement du SGBD utilis√©.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "f9bb1ea6-0be5-467a-86e9-1317b9f9e255",
        "title": "Certification Java 17",
        "description": "---\nid: cdc0b331-bbe5-4556-ad81-10811ff4073c\n---\nSource de la formation : https://r331.github.io/OCP-Oracle-Certified-Professional-Java-SE-21-1Z0-839-Open-Study-Guide/\n### 1. **[[Certification Java 17 - Concepts de Base en Java]]**\n\n- Types primitifs et classes enveloppes (Wrapper)\n- Op√©rations arithm√©tiques et bool√©ennes (promotion de type, casting)\n- Pr√©c√©dence des op√©rateurs\n- Utilisation de `var` pour l‚Äôinf√©rence de type\n\n### 2. **[[Certification Java 17 - Programmation Orient√©e Objet (OOP)]]**\n\n- D√©claration et instanciation d‚Äôobjets\n- Cycle de vie des objets (cr√©ation, r√©f√©rences, garbage collection)\n- Encapsulation, immutabilit√©\n- H√©ritage, classes abstraites et classes scell√©es (`sealed`)\n- Polymorphisme, type objet vs type r√©f√©rence\n- Op√©rateur `instanceof` et pattern matching\n- Interfaces : m√©thodes `default`, `static`, priv√©es\n- Enums avec champs, m√©thodes et constructeurs\n\n### 3. **[[Certification Java 17 - Packages et Modules]]**\n\n- Organisation des classes en packages\n- Java Platform Module System (JPMS) : d√©finition de modules, d√©pendances, services\n\n### 4. **[[Certification Java 17 - Gestion des types Date, Temps, Texte et Num√©rique]]**\n\n- API `Date-Time` : `LocalDate`, `LocalTime`, `LocalDateTime`, `ZonedDateTime`\n- `Period`, `Duration`, `Instant` pour la gestion des intervalles de temps\n- Classes `String`, `StringBuilder`, `Text Blocks`\n- API Math et `BigDecimal`\n\n### 5. **[[Certification Java 17 - Contr√¥le du Flux d'Ex√©cution]]**\n\n- Structures de contr√¥le (`if/else`, `switch`, `while`, `for`, `do-while`)\n- Expressions `switch` et pattern matching\n- Instructions `break`, `continue`\n\n### 6. **[[Certification Java 17 - Gestion des Exceptions]]**\n\n- Utilisation de `try/catch/finally`\n- `try-with-resources`\n- Multi-catch (`catch` de plusieurs exceptions en une seule clause)\n- Exceptions personnalis√©es (`extends Exception` ou `extends RuntimeException`)\n\n### 7. **[[Certification Java 17 - Collections et Tableaux]]**\n\n- Tableaux (`int[]`, `String[]`)\n- Collections (`List`, `Set`, `Map`, `Deque`)\n- API `SequencedCollection`, `SequencedSet`, `SequencedMap` (Java 21)\n- Manipulations : ajout, suppression, tri\n\n### 8. **[[Certification Java 17 - Streams et Expressions Lambda]]**\n\n- Utilisation des `Stream<T>` et `IntStream`, `DoubleStream`\n- `filter()`, `map()`, `reduce()`, `collect()`\n- D√©composition, concat√©nation, partitionnement\n- Streams s√©quentiels et parall√®les\n\n### 9. **[[Certification Java 17 - Programmation Concurrente]]**\n\n- Threads (`Runnable`, `Callable`)\n- `ExecutorService`, `ForkJoinPool`\n- Threads virtuels (`Virtual Threads`, `Thread.ofVirtual()`)\n- Verrous (`synchronized`, `Lock`, `ReadWriteLock`)\n- Collections concurrentes et streams parall√®les\n\n### 10. **[[Certification Java 17 - Sorties et Fichiers]]**\n\n- Flux (`InputStream`, `OutputStream`, `Reader`, `Writer`)\n- S√©rialisation/d√©s√©rialisation d‚Äôobjets (`Serializable`)\n- API `java.nio.file` pour la manipulation des fichiers et r√©pertoires\n\n### 11. **[[Certification Java 17 - Acc√®s aux Bases de Donn√©es avec JDBC]]**\n\n- Connexion √† une base de donn√©es (`DriverManager`, `DataSource`)\n- Ex√©cution de requ√™tes (`Statement`, `PreparedStatement`, `CallableStatement`)\n- Gestion des transactions (`commit`, `rollback`)\n\n### 12. **[[Certification Java 17 - D√©ploiement et Modules Java]]**\n\n- Compilation et cr√©ation de JARs (`modulaires` et `non-modulaires`)\n- Images d‚Äôex√©cution (`jlink`)\n- Migration avec modules anonymes et automatiques\n\n### 13. **[[Certification Java 17 - Internationalisation et Localisation]]**\n\n- Locales (`Locale`)\n- `ResourceBundle` pour la gestion des ressources multilingues\n- Formatage des dates, nombres et devises (`NumberFormat`, `DateTimeFormatter`)\n\n[[Java]]"
    },
    {
        "id": "e5648766-c198-4852-8a19-a50320131cca",
        "title": "ChromaDB",
        "description": "---\nid: 501b3586-143e-448a-bae9-4ff77f3a5793\n---\n# Rapidement c'est quoi‚ùì\n\nChromaDB est une [[Base de donn√©e]] vectorielle open-source permettant de stocker et de rechercher des vecteurs de plongement (embeddings).  Elle est con√ßue pour √™tre facile √† utiliser et √† int√©grer dans des applications de recherche s√©mantique.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nChromaDB est une base de donn√©es qui stocke et recherche des donn√©es non structur√©es en utilisant des embeddings.  Un embedding est une repr√©sentation vectorielle d'un morceau de texte, d'une image, ou d'un autre type de donn√©es.  Au lieu de chercher des donn√©es par mots cl√©s exacts, ChromaDB permet de rechercher des donn√©es similaires en fonction de la similarit√© vectorielle des embeddings.  Cela permet de r√©aliser des recherches s√©mantiques, c'est-√†-dire de trouver des √©l√©ments dont le sens est proche de la requ√™te, m√™me si les mots utilis√©s sont diff√©rents.\n\nChromaDB utilise une architecture client-serveur. Le client envoie des requ√™tes √† un serveur qui contient la base de donn√©es.  Il supporte plusieurs types de stockage persistant, permettant ainsi une grande flexibilit√©.  Il offre des fonctionnalit√©s comme l'ajout, la mise √† jour et la suppression de donn√©es, ainsi que des m√©thodes de recherche bas√©es sur la similarit√© cosinus ou d'autres m√©triques.  L'API est simple et intuitive, facilitant son int√©gration dans divers projets.  ChromaDB est particuli√®rement bien adapt√© aux applications de recherche s√©mantique, de recommandation, et de clustering.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et facile √† utiliser:**  Le code source est disponible publiquement, facilitant l'audit et la contribution.  Son API est simple √† prendre en main.\n* **Flexibilit√©:** Supporte plusieurs types de stockage persistant (en m√©moire, disque, etc.).\n* **Performance:**  Optimis√© pour la recherche de similarit√© vectorielle √† grande √©chelle.\n* **Recherche s√©mantique:** Permet de trouver des donn√©es similaires en fonction du sens, et non seulement des mots cl√©s.\n* **Int√©gration facile:** API simple et bien document√©e pour une int√©gration ais√©e dans diff√©rents projets.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Maturit√© relative:**  Compar√© √† des bases de donn√©es vectorielles plus √©tablies, ChromaDB est relativement jeune et pourrait pr√©senter des imperfections.\n* **Scalabilit√©:** Bien que performant, sa scalabilit√© √† tr√®s grande √©chelle pourrait n√©cessiter une configuration et une optimisation avanc√©es.\n* **D√©pendances:**  N√©cessite des biblioth√®ques sp√©cifiques pour fonctionner, ce qui peut ajouter de la complexit√© √† l'installation et √† la configuration.\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "643b7d68-8af3-4764-8cab-279e51c9bb42",
        "title": "Client Side Rendering (CSR)",
        "description": "---\nid: f0414542-a158-439d-9e1b-0113e950e207\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe **Client Side Rendering (CSR)** est une m√©thode de rendu des pages [[Web]] o√π le navigateur charge une page [[HTML]] basique et ex√©cute ensuite du [[JavaScript]] pour g√©n√©rer dynamiquement le contenu de la page.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe CSR repose sur le principe que le code [[JavaScript]] du c√¥t√© client (navigateur) est responsable de la construction de la page. Lorsqu'un utilisateur acc√®de √† une page, le navigateur charge un fichier [[HTML]] minimal, puis t√©l√©charge et ex√©cute du [[JavaScript]] pour r√©cup√©rer et afficher les donn√©es, souvent via des appels API. Cela permet un rendu dynamique et interactif sans avoir besoin d'un serveur pour g√©n√©rer la page √† chaque requ√™te.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Rapidit√© de compilation** : Seulement un transfert de fichiers est n√©cessaire, ce qui rend le processus de chargement initial rapide.\n- **Adapt√© au contenu dynamique** : Id√©al pour des sites interactifs o√π le contenu change souvent, comme des applications web ou des plateformes sociales.\n- **Exp√©rience utilisateur fluide** : Une fois la page rendue, l'interaction avec la page est rapide et r√©active.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **[[SEO]] limit√©** : Le contenu n'est pas visible pour les moteurs de recherche avant l'ex√©cution du [[JavaScript]], rendant l'indexation difficile pour le r√©f√©rencement.\n- **Temps de chargement initial** : Le navigateur doit ex√©cuter tout le [[JavaScript]] avant d'afficher la page, ce qui peut entra√Æner des d√©lais d'affichage significatifs, notamment sur des appareils peu puissants.\n- **D√©pendance au [[JavaScript]]** : Les utilisateurs avec des configurations de navigateur non optimis√©es ou des d√©sactivations de [[JavaScript]] ne verront pas correctement la page.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "450fc502-04e9-4dd5-bb5d-41d5be4cf560",
        "title": "Certification Java 17 - Collections et Tableaux",
        "description": "---\nid: 205a0c04-b33c-475b-9a7f-cc1720da1bdb\n---\n## **7.1. Tableaux (`int[]`, `String[]`)**\n\n### **D√©claration et initialisation**\n\n```java\nint[] nombres = {1, 2, 3, 4, 5}; // D√©claration et affectation\nString[] noms = new String[3]; // Tableau de taille fixe (valeurs nulles)\n```\n\n### **Acc√®s aux √©l√©ments**\n\n```java\nSystem.out.println(nombres[0]); // Affiche 1\nnoms[0] = \"Alice\";\n```\n\n### **Boucle `for` pour parcourir un tableau**\n\n```java\nfor (int i = 0; i < nombres.length; i++) {\n    System.out.println(nombres[i]);\n}\n```\n\n### **Boucle `for-each` (simplifi√©e)**\n\n```java\nfor (int nombre : nombres) {\n    System.out.println(nombre);\n}\n```\n\n### **Tri avec `Arrays.sort()`**\n\n```java\nimport java.util.Arrays;\n\nArrays.sort(nombres); // Trie le tableau en ordre croissant\nSystem.out.println(Arrays.toString(nombres));\n```\n\nüìå **Un tableau a une taille fixe et ne peut pas √™tre redimensionn√©.**\n\n---\n\n## **7.2. Collections (`List`, `Set`, `Map`, `Deque`)**\n\nüìå **Les collections sont dynamiques**, contrairement aux tableaux.\n\n|**Interface**|**Impl√©mentations courantes**|**Caract√©ristiques**|\n|---|---|---|\n|`List`|`ArrayList`, `LinkedList`|Ordonn√©e, doublons autoris√©s|\n|`Set`|`HashSet`, `LinkedHashSet`, `TreeSet`|Uniques, non ordonn√©es (`HashSet`), tri√©es (`TreeSet`)|\n|`Map`|`HashMap`, `LinkedHashMap`, `TreeMap`|Cl√©/valeur, unique par cl√©|\n|`Deque`|`ArrayDeque`, `LinkedList`|Double-ended queue (FIFO/LIFO)|\n\n---\n\n### **`List` : Tableau dynamique (ArrayList, LinkedList)**\n\n```java\nimport java.util.*;\n\nList<String> liste = new ArrayList<>();\nliste.add(\"Java\");\nliste.add(\"Python\");\nliste.add(\"C++\");\n\nSystem.out.println(liste.get(1)); // Python\nliste.remove(\"C++\"); // Supprime C++\n```\n\nüìå **`ArrayList` est optimis√© pour l‚Äôacc√®s rapide, `LinkedList` pour l‚Äôinsertion/suppression.**\n\n---\n\n### **`Set` : Ensemble d‚Äô√©l√©ments uniques**\n\n```java\nSet<String> set = new HashSet<>();\nset.add(\"Java\");\nset.add(\"Python\");\nset.add(\"Java\"); // Ignor√© (pas de doublons)\nSystem.out.println(set);\n```\n\nüìå **`HashSet` (d√©sordonn√©), `TreeSet` (tri√©), `LinkedHashSet` (ordre d‚Äôinsertion).**\n\n---\n\n### **`Map` : Association cl√©/valeur**\n\n```java\nMap<String, Integer> map = new HashMap<>();\nmap.put(\"Alice\", 25);\nmap.put(\"Bob\", 30);\nSystem.out.println(map.get(\"Alice\")); // 25\n```\n\nüìå **`TreeMap` trie par cl√©, `LinkedHashMap` conserve l‚Äôordre d‚Äôinsertion.**\n\n---\n\n### **`Deque` : File d‚Äôattente double**\n\n```java\nDeque<String> deque = new ArrayDeque<>();\ndeque.addFirst(\"Premier\");\ndeque.addLast(\"Dernier\");\n\nSystem.out.println(deque.pollFirst()); // \"Premier\"\nSystem.out.println(deque.pollLast());  // \"Dernier\"\n```\n\nüìå **`Deque` peut √™tre utilis√© comme une pile (`Stack`) ou une file (`Queue`).**\n\n---\n\n## **7.3. API `SequencedCollection`, `SequencedSet`, `SequencedMap` (Java 21)**\n\nüìå **Ajout√© en Java 21 pour g√©rer l‚Äôordre des √©l√©ments de fa√ßon plus coh√©rente.**\n\n### **`SequencedCollection` : Collection ordonn√©e**\n\n```java\nSequencedCollection<String> list = new LinkedList<>();\nlist.addFirst(\"D√©but\");\nlist.addLast(\"Fin\");\n\nSystem.out.println(list.getFirst()); // D√©but\nSystem.out.println(list.getLast());  // Fin\n```\n\nüìå **Am√©liore `List`, `Deque` et `SortedSet` en offrant des m√©thodes `getFirst()`, `getLast()` et `reversed()`.**\n\n---\n\n### **`SequencedSet` : Ensemble ordonn√©**\n\n```java\nSequencedSet<String> set = new LinkedHashSet<>();\nset.add(\"Java\");\nset.add(\"Python\");\nSystem.out.println(set.getFirst()); // Java\nSystem.out.println(set.getLast());  // Python\n```\n\nüìå **Permet de r√©cup√©rer le premier et le dernier √©l√©ment d‚Äôun `Set`.**\n\n---\n\n### **`SequencedMap` : `Map` ordonn√©e**\n\n```java\nSequencedMap<String, Integer> map = new LinkedHashMap<>();\nmap.put(\"Alice\", 25);\nmap.put(\"Bob\", 30);\nSystem.out.println(map.firstEntry()); // Alice=25\nSystem.out.println(map.lastEntry());  // Bob=30\n```\n\nüìå **Ajoute `firstEntry()`, `lastEntry()` et `reversed()`.**\n\n---\n\n## **7.4. Manipulations des collections (ajout, suppression, tri)**\n\n### **Ajout et suppression**\n\n```java\nList<String> list = new ArrayList<>(List.of(\"Java\", \"Python\", \"C++\"));\nlist.add(\"JavaScript\"); // Ajout\nlist.remove(\"Python\");  // Suppression\nSystem.out.println(list);\n```\n\n### **Tri d‚Äôune `List` avec `Collections.sort()`**\n\n```java\nList<Integer> nombres = Arrays.asList(3, 1, 4, 1, 5);\nCollections.sort(nombres); // Tri croissant\nSystem.out.println(nombres);\n```\n\n### **Tri d‚Äôune `List` avec un comparateur personnalis√©**\n\n```java\nList<String> mots = Arrays.asList(\"Banane\", \"Pomme\", \"Orange\");\nmots.sort(Comparator.reverseOrder()); // Tri d√©croissant\nSystem.out.println(mots);\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Tableaux (`int[]`, `String[]`)** : Taille fixe, rapide mais rigide.  \n‚úÖ **`List`, `Set`, `Map`, `Deque`** : Collections dynamiques et flexibles.  \n‚úÖ **`SequencedCollection` (Java 21)** : Meilleure gestion de l‚Äôordre des √©l√©ments.  \n‚úÖ **Manipulations : ajout, suppression, tri avec `Collections.sort()`.**\n\n---"
    },
    {
        "id": "a1ac1cfe-c0dc-436c-83ca-f17362f54d14",
        "title": "Common Vulnerabilities and Exposures (CVE)",
        "description": "---\nid: 2411dd03-b943-417a-93c1-64d9ff895771\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **CVE (Common Vulnerabilities and Exposures)** sont des identifiants uniques attribu√©s aux vuln√©rabilit√©s de s√©curit√© dans les logiciels et syst√®mes, permettant de les r√©f√©rencer de mani√®re standardis√©e pour faciliter leur gestion et leur correction.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn CVE est un identifiant unique attribu√© √† une vuln√©rabilit√© ou exposition de s√©curit√©. Chaque CVE contient :\n\n- **Un identifiant unique** : Exemple : **CVE-2021-34527**.\n- **Une description de la vuln√©rabilit√©** : Explication du probl√®me de s√©curit√©.\n- **Des r√©f√©rences externes** : Liens vers des d√©tails, solutions ou correctifs pour la vuln√©rabilit√©.\n\nLes CVE sont utilis√©s par les chercheurs en s√©curit√©, les entreprises, et les administrateurs syst√®mes pour suivre et r√©soudre rapidement les failles de s√©curit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Standardisation** : Offre un syst√®me commun pour identifier et discuter des vuln√©rabilit√©s, facilitant la collaboration entre les professionnels de la s√©curit√©.\n- **Accessibilit√©** : Des bases de donn√©es publiques permettent de rechercher rapidement des informations sur les vuln√©rabilit√©s.\n- **Gestion des risques** : Permet une gestion rapide des risques et l'application de correctifs cibl√©s.\n- **Suivi des mises √† jour** : Aide √† suivre l'√©volution des vuln√©rabilit√©s et des correctifs disponibles.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Manque de d√©tails techniques** : Les CVE ne contiennent souvent pas suffisamment d'informations techniques pour comprendre en profondeur la vuln√©rabilit√© sans recherches suppl√©mentaires.\n- **D√©lais de mise √† jour** : Parfois, les vuln√©rabilit√©s peuvent √™tre r√©f√©renc√©es apr√®s une p√©riode de retard, laissant du temps aux attaquants pour les exploiter avant qu'un patch ne soit disponible.\n- **Pas de solutions int√©gr√©es** : Le CVE fournit une identification, mais il appartient aux entreprises de mettre en place des mesures pour corriger les vuln√©rabilit√©s.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "099be107-e1d0-4ad3-93d9-53376662611b",
        "title": "Certification Java 17 - Concepts de Base en Java",
        "description": "---\nid: f00b7523-614f-46cb-81f9-3a5e4acdd35b\n---\n## **1.1. Types primitifs et classes enveloppes (Wrapper)**\n\n### **Types primitifs en Java**\n\nJava propose **8 types primitifs** pour stocker des valeurs en m√©moire de mani√®re efficace. Ces types sont stock√©s directement en **m√©moire stack**, ce qui les rend plus rapides et moins gourmands en m√©moire que les objets.\n\n|Type|Bits|Valeur min|Valeur max|Valeur par d√©faut|\n|---|---|---|---|---|\n|`boolean`|8|`false`|`true`|`false`|\n|`byte`|8|-128|127|`0`|\n|`short`|16|-32 768|32 767|`0`|\n|`int`|32|-2^31|2^31 - 1|`0`|\n|`long`|64|-2^63|2^63 - 1|`0L`|\n|`float`|32|-|-|`0.0f`|\n|`double`|64|-|-|`0.0d`|\n|`char`|16|0 (`\\u0000`)|65 535|`\\u0000`|\n\n**Exemples d‚Äôutilisation des types primitifs :**\n\n```java\nboolean isActive = true;\nint age = 25;\ndouble price = 19.99;\nchar grade = 'A';\n```\n\n### **Classes Enveloppes (Wrappers)**\n\nJava offre des **classes enveloppes (Wrapper Classes)** pour permettre aux types primitifs d‚Äô√™tre trait√©s comme des objets. Cela est utile notamment pour travailler avec des collections (`List`, `Set`, `Map`), qui ne peuvent contenir que des objets.\n\n|Primitif|Classe Wrapper|\n|---|---|\n|`boolean`|`Boolean`|\n|`byte`|`Byte`|\n|`short`|`Short`|\n|`int`|`Integer`|\n|`long`|`Long`|\n|`float`|`Float`|\n|`double`|`Double`|\n|`char`|`Character`|\n\n**Exemple : Auto-boxing et Unboxing**\n\n```java\nInteger obj = 10;  // Auto-boxing (int -> Integer)\nint num = obj;     // Unboxing (Integer -> int)\n```\n\n- **Auto-boxing** : Conversion automatique d‚Äôun type primitif en objet wrapper.\n- **Unboxing** : Conversion automatique d‚Äôun objet wrapper en type primitif.\n\n---\n\n## **1.2. Op√©rations arithm√©tiques et bool√©ennes**\n\n### **Promotion de type (Type Promotion)**\n\nLorsqu‚Äôune op√©ration est r√©alis√©e entre diff√©rents types, **Java effectue une promotion automatique** :\n\n1. **Si un des op√©randes est `double`**, le r√©sultat est `double`.\n2. **Si un des op√©randes est `float`**, le r√©sultat est `float`.\n3. **Si un des op√©randes est `long`**, le r√©sultat est `long`.\n4. **Sinon, le r√©sultat est `int`** (m√™me si les op√©randes sont `byte` ou `short`).\n\n**Exemples :**\n\n```java\nint a = 10;\ndouble b = 2.5;\ndouble result = a + b;  // a est promu en double => 10.0 + 2.5 = 12.5\n\nbyte x = 5;\nshort y = 10;\nint z = x + y;  // x et y sont promus en int => 5 + 10 = 15\n```\n\n### **Casting explicite**\n\nLorsque la promotion automatique ne convient pas, on utilise **le casting explicite** pour convertir manuellement un type.\n\n```java\ndouble d = 9.7;\nint i = (int) d;  // 9 (la partie d√©cimale est tronqu√©e)\n\nlong bigValue = 100000L;\nint smallValue = (int) bigValue;  // Attention : peut causer une perte de donn√©es si la valeur d√©passe la capacit√© d‚Äôun int\n```\n\n### **Op√©rateurs arithm√©tiques**\n\n|Op√©rateur|Description|Exemple|\n|---|---|---|\n|`+`|Addition|`5 + 3 // 8`|\n|`-`|Soustraction|`9 - 2 // 7`|\n|`*`|Multiplication|`4 * 6 // 24`|\n|`/`|Division enti√®re|`10 / 3 // 3`|\n|`%`|Modulo (reste)|`10 % 3 // 1`|\n\n**Attention : Division entre entiers**\n\n```java\nint result = 5 / 2;  // 2 (car division enti√®re)\ndouble correctResult = 5 / 2.0;  // 2.5\n```\n\n### **Op√©rateurs bool√©ens**\n\n| Op√©rateur | Description       | Exemple                  |\n| --------- | ----------------- | ------------------------ |\n| ==        | √âgalit√©           | `a == b`                 |\n| `!=`      | Diff√©rent         | `a != b`                 |\n| `>`       | Sup√©rieur         | `a > b`                  |\n| `<`       | Inf√©rieur         | `a < b`                  |\n| `>=`      | Sup√©rieur ou √©gal | `a >= b`                 |\n| `<=`      | Inf√©rieur ou √©gal | `a <= b`                 |\n| `&&`      | ET logique        | `true && false // false` |\n| `         |                   | `                        |\n| `!`       | NON logique       | `!true // false`         |\n\n---\n\n## **1.3. Pr√©c√©dence des op√©rateurs**\n\nJava √©value les expressions en fonction de la priorit√© des op√©rateurs.  \n**Ordre de priorit√© (du plus √©lev√© au plus faible) :**\n\n1. `++`, `--` (postfix√©s)\n2. `++`, `--`, `!`, `~` (pr√©fix√©s)\n3. `*`, `/`, `%`\n4. `+`, `-`\n5. `<<`, `>>`, `>>>`\n6. `<`, `<=`, `>`, `>=`\n7. \"==\", \"!=\"\n8. `&`\n9. `^`\n10. `|`\n11. `&&`\n12. `||`\n13. `? :` (ternaire)\n14. `=`, `+=`, `-=`, `*=`, `/=`, etc.\n\n**Exemples :**\n\n```java\nint result = 5 + 2 * 3;  // 5 + (2 * 3) = 11\nboolean test = true || false && false; // true || (false && false) = true\n```\n\n**Bonnes pratiques :**\n\n- **Toujours utiliser des parenth√®ses** pour √©viter les ambigu√Øt√©s.\n\n```java\nint result = (5 + 2) * 3;  // 21\n```\n\n---\n\n## **1.4. Inf√©rence de Type avec `var`**\n\nIntroduit en Java 10, `var` permet √† Java de **d√©duire le type d'une variable lors de l'initialisation**.\n\n```java\nvar x = 10;  // int\nvar text = \"Java\";  // String\nvar list = List.of(1, 2, 3);  // List<Integer>\n```\n\n**Limitations de `var` :**\n\n- **Doit √™tre initialis√© imm√©diatement** (`var x;` ne compile pas).\n- **Uniquement utilisable en local** (pas pour les champs de classe ni les param√®tres de m√©thode).\n- **Ne peut pas √™tre utilis√© avec `null` sans type explicite**.\n\n```java\nvar value = null; // ERREUR, type ind√©fini\n```\n\n**Cas d‚Äôutilisation typique :**\n\n```java\nfor (var entry : map.entrySet()) {\n    System.out.println(entry.getKey() + \" -> \" + entry.getValue());\n}\n```\n\n---\n\n### **R√©sum√©**\n\n‚úÖ **Types primitifs vs Wrappers** (Auto-boxing, Unboxing)  \n‚úÖ **Promotion de type & casting explicite**  \n‚úÖ **Op√©rations arithm√©tiques et bool√©ennes**  \n‚úÖ **Pr√©c√©dence des op√©rateurs**  \n‚úÖ **Inf√©rence de type avec `var`**\n\n---\n[[Java]] [[Certification Java 17]]"
    },
    {
        "id": "d27e1fa6-a6f5-4430-ae47-04f0792380f4",
        "title": "Certification Java 17 - Contr√¥le du Flux d'Ex√©cution",
        "description": "---\nid: 6e8b33a4-8d4c-4291-b3eb-f221452b3430\n---\n## **5.1. Structures de contr√¥le (`if/else`, `switch`, `while`, `for`, `do-while`)**\n\n### **`if/else` : Condition simple**\n\n```java\nint age = 20;\nif (age >= 18) {\n    System.out.println(\"Majeur\");\n} else {\n    System.out.println(\"Mineur\");\n}\n```\n\nüìå **Les blocs `{}` sont obligatoires si plusieurs instructions sont pr√©sentes.**\n\n### **Op√©rateur ternaire (`? :`)**\n\n```java\nString statut = (age >= 18) ? \"Majeur\" : \"Mineur\";\nSystem.out.println(statut);\n```\n\n---\n\n### **`switch` : Remplace plusieurs `if/else`**\n\n```java\nint jour = 3;\nswitch (jour) {\n    case 1 -> System.out.println(\"Lundi\");\n    case 2 -> System.out.println(\"Mardi\");\n    case 3 -> System.out.println(\"Mercredi\");\n    default -> System.out.println(\"Jour inconnu\");\n}\n```\n\nüìå **Depuis Java 12**, `switch` retourne une **valeur** directement :\n\n```java\nString jourNom = switch (jour) {\n    case 1 -> \"Lundi\";\n    case 2 -> \"Mardi\";\n    case 3 -> \"Mercredi\";\n    default -> \"Jour inconnu\";\n};\nSystem.out.println(jourNom);\n```\n\n---\n\n### **`while` : Ex√©cution tant que la condition est vraie**\n\n```java\nint i = 0;\nwhile (i < 3) {\n    System.out.println(i);\n    i++;\n}\n```\n\nüìå **Utile quand on ne sait pas √† l'avance combien d'it√©rations seront n√©cessaires.**\n\n---\n\n### **`do-while` : Ex√©cute **au moins une fois** avant de tester la condition**\n\n```java\nint i = 0;\ndo {\n    System.out.println(i);\n    i++;\n} while (i < 3);\n```\n\n---\n\n### **`for` : Boucle avec un compteur**\n\n```java\nfor (int i = 0; i < 3; i++) {\n    System.out.println(i);\n}\n```\n\n### **`for-each` : Parcourir une collection**\n\n```java\nList<String> fruits = List.of(\"Pomme\", \"Banane\", \"Orange\");\nfor (String fruit : fruits) {\n    System.out.println(fruit);\n}\n```\n\nüìå **Plus lisible que `for (int i = 0; i < list.size(); i++)`**\n\n---\n\n## **5.2. Expressions `switch` et Pattern Matching**\n\nDepuis **Java 16+, `switch` permet du Pattern Matching**, √©vitant les conversions manuelles.\n\n### **Pattern Matching (`instanceof`)**\n\n**Avant Java 16**\n\n```java\nObject obj = \"Bonjour\";\nif (obj instanceof String) {\n    String s = (String) obj;  // Cast manuel obligatoire\n    System.out.println(s.length());\n}\n```\n\nüìå **Avec Java 16+, pas besoin de cast explicite :**\n\n```java\nif (obj instanceof String s) {\n    System.out.println(s.length()); // Automatique !\n}\n```\n\n---\n\n### **Pattern Matching avec `switch`** _(Java 17)_\n\nüìå **Permet d'√©viter des `if/else` imbriqu√©s**\n\n```java\nObject obj = 42;\n\nString resultat = switch (obj) {\n    case Integer i -> \"C'est un entier : \" + i;\n    case String s -> \"C'est une cha√Æne : \" + s;\n    default -> \"Type inconnu\";\n};\nSystem.out.println(resultat);\n```\n\nüìå **Ajout de conditions (`when`)**\n\n```java\nObject obj = 50;\nswitch (obj) {\n    case Integer i when i > 10 -> System.out.println(\"Nombre sup√©rieur √† 10\");\n    case Integer i -> System.out.println(\"Nombre inf√©rieur ou √©gal √† 10\");\n    default -> System.out.println(\"Autre type\");\n}\n```\n\n---\n\n## **5.3. Instructions `break` et `continue`**\n\n### **`break` : Sortie imm√©diate d'une boucle**\n\n```java\nfor (int i = 0; i < 5; i++) {\n    if (i == 3) break;  // Arr√™te la boucle d√®s que i == 3\n    System.out.println(i);\n}\n```\n\n**Sortie :**\n\n```\n0\n1\n2\n```\n\n### **`continue` : Passe directement √† l‚Äôit√©ration suivante**\n\n```java\nfor (int i = 0; i < 5; i++) {\n    if (i == 3) continue;  // Ignore l'affichage du 3\n    System.out.println(i);\n}\n```\n\n**Sortie :**\n\n```\n0\n1\n2\n4\n```\n\nüìå **Utilisation dans `while`**\n\n```java\nint i = 0;\nwhile (i < 5) {\n    i++;\n    if (i % 2 == 0) continue; // Ignore les nombres pairs\n    System.out.println(i);\n}\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Structures de contr√¥le :** `if/else`, `switch`, `while`, `for`, `do-while`  \n‚úÖ **`switch` moderne avec pattern matching** (Java 17)  \n‚úÖ **Pattern Matching (`instanceof` avec variables)**  \n‚úÖ **`break` pour arr√™ter une boucle**  \n‚úÖ **`continue` pour passer √† l‚Äôit√©ration suivante**\n\n---\n"
    },
    {
        "id": "1d5c0267-8703-4ef6-9e3d-2c9bc2f4fba4",
        "title": "Cucumber",
        "description": "---\nid: 03afbb9c-cf5e-4cd9-8c81-db00cb35b56b\n---\n# Rapidement c'est quoi‚ùì\n\nCucumber est un outil de test d'automatisation bas√© sur le langage [[Gherkin]]. Il permet aux non-d√©veloppeurs (ex: testeurs, analystes fonctionnels) de d√©crire des sc√©narios de test de mani√®re claire et concise, facilitant la collaboration entre les √©quipes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCucumber utilise le langage [[Gherkin]], un langage simple et lisible par tous, bas√© sur des mots cl√©s comme \"Given\", \"When\", et \"Then\".  Ces mots cl√©s structurent les sc√©narios de test en d√©crivant l'√©tat initial (Given), l'action effectu√©e (When), et le r√©sultat attendu (Then).  Un exemple simple:\n\n```gherkin\nFeature: Withdrawing cash\n  Scenario: Successful withdrawal within balance\n    Given Alice has $234.56 in their account\n    When Alice tries to withdraw $200.00\n    Then the withdrawal is successful\n\n  Scenario: Declined withdrawal in excess of balance\n    Given Hamza has $198.76 in their account\n    When Hamza tries to withdraw $200.00\n    Then the withdrawal is declined\n```\n\nLes d√©veloppeurs impl√©mentent ensuite le code qui correspond √† chaque √©tape (\"Given\", \"When\", \"Then\").  Cette s√©paration des pr√©occupations (s√©paration entre la sp√©cification du test et son impl√©mentation) am√©liore la collaboration, la lisibilit√© et la maintenabilit√© des tests.  Cucumber peut √™tre int√©gr√© √† de nombreux frameworks de test (comme [[Selenium]], [[Cypress]] via `cypress-cucumber-preprocessor`), permettant ainsi d'automatiser l'ex√©cution des sc√©narios.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Collaboration am√©lior√©e:**  Permet une communication plus claire entre les √©quipes techniques et non-techniques. Les tests sont √©crits dans un langage compr√©hensible par tous.\n* **Maintenance facilit√©e:**  La s√©paration des sp√©cifications et de l'impl√©mentation rend les tests plus faciles √† maintenir et √† mettre √† jour.\n* **Tests plus lisibles:** Le format [[Gherkin]] rend les tests plus clairs et plus faciles √† comprendre, m√™me pour les personnes non impliqu√©es dans leur d√©veloppement.\n* **Documentation vivante:** Les sc√©narios [[Gherkin]] servent √©galement de documentation ex√©cutable du syst√®me.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  La mise en place et l'utilisation efficace de Cucumber peuvent n√©cessiter un certain temps d'apprentissage, notamment pour d√©finir des conventions claires et coh√©rentes.\n* **N√©cessite une bonne collaboration:**  Le succ√®s de Cucumber d√©pend fortement de la collaboration entre les √©quipes et d'une bonne compr√©hension des conventions utilis√©es.  Des d√©finitions ambig√ºes des \"Given\", \"When\" et \"Then\" peuvent rendre les tests difficiles √† maintenir.\n* **Peut √™tre verbeux:** Pour des tests complexes, la description [[Gherkin]] peut devenir assez longue et d√©taill√©e.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "7ec4ed2f-43a1-4eb2-a1aa-108cb2b03985",
        "title": "Cypress",
        "description": "---\nid: 80fa04db-9979-4f13-ae6a-087b96aa069b\n---\n# Rapidement c'est quoi‚ùì\n\nCypress est un framework de test [[JavaScript]] populaire pour les applications web. Il permet de r√©aliser des [[Test End2End (E2E)]] et des [[Test unitaire (TU)]] de composants.  Il se distingue par sa facilit√© d'utilisation et son approche int√©gr√©e.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCypress est un outil complet pour le test d'applications web.  Il offre une approche bas√©e sur le [[Document Object Model (DOM)]], ex√©cutant les tests directement dans le navigateur.  Cela permet une interaction plus naturelle et intuitive avec l'application test√©e, contrairement √† des solutions qui interagissent de mani√®re distante.\n\nCypress propose deux types de tests principaux :\n\n* **[[Test End2End (E2E)]]:**  Ces tests simulent le comportement d'un utilisateur r√©el, interagissant avec l'interface utilisateur de bout en bout.  Ils v√©rifient le flux complet d'une action, de l'interaction de l'utilisateur √† la r√©ponse du serveur.\n\n* **[[Test de Composant]]:**  Ces tests permettent de tester des composants individuels de l'interface utilisateur isol√©ment, sans d√©pendance √† l'application compl√®te. Ceci permet des tests unitaires plus rapides et cibl√©s.\n\nL'ex√©cution des tests se fait directement dans le navigateur, offrant un d√©bogage facile et une meilleure visibilit√© sur le d√©roulement des tests.  Cypress propose une API intuitive et chainable, facilitant la cr√©ation et la maintenance des tests.  Les fonctions principales incluent la s√©lection d'√©l√©ments (ex: `cy.get()`, `cy.contains()`), l'interaction avec les √©l√©ments (ex: `cy.click()`, `cy.type()`), et les assertions (ex: `cy.should()`).  Des fonctionnalit√©s avanc√©es comme l'interception des requ√™tes r√©seau (`cy.intercept()`), l'ex√©cution de t√¢ches personnalis√©es (`cy.task()`), et la g√©n√©ration de rapports avec captures d'√©cran sont √©galement disponibles.  La prise en charge de la couverture de code est possible via des plugins tiers.\n\nLa configuration est relativement simple, n√©cessitant un fichier `cypress.config.js` (ou `cypress.config.ts`) pour sp√©cifier les param√®tres de configuration, tels que l'URL de l'application et le navigateur √† utiliser.  La gestion des donn√©es de test peut √™tre r√©alis√©e via des dumps de base de donn√©es ou d'autres techniques.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Facilit√© d'utilisation et d'apprentissage:** L'API intuitive et la documentation claire rendent Cypress accessible aux d√©butants.\n* **D√©bogage simplifi√©:** L'ex√©cution dans le navigateur permet un d√©bogage facile et visuel.\n* **Tests rapides et fiables:**  L'ex√©cution directe dans le navigateur assure des tests rapides et stables.\n* **API chainable:** La possibilit√© d'encha√Æner les commandes facilite la cr√©ation de tests lisibles et maintenables.\n* **Fonctionnalit√©s compl√®tes:** Cypress offre un ensemble complet de fonctionnalit√©s, incluant la g√©n√©ration de rapports, les captures d'√©cran, et l'interception des requ√™tes r√©seau.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Support limit√© de Safari:** Le support de [[Safari]] est moins complet que pour d'autres navigateurs.\n* **Gestion limit√©e des onglets multiples:** La gestion des tests sur plusieurs onglets est limit√©e.\n* **Pas de support natif pour les tests mobiles:** Bien qu'il soit possible d'utiliser des solutions alternatives, il n'y a pas de support natif pour les tests sur des appareils mobiles.\n* **Prise en charge limit√©e des applications non-web:**  Son utilisation principale se concentre sur le web; l'adaptation √† d'autres types d'applications (ex: [[Electron]]) peut n√©cessiter des solutions sp√©cifiques.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]\n"
    },
    {
        "id": "9d6e109e-a4f3-49f9-a5b4-83691dd4497a",
        "title": "Debezium",
        "description": "---\nid: 1f2f593a-0a66-4f5d-860c-1677d5949620\n---\n# Rapidement c'est quoi‚ùì\n\nDebezium est un outil open-source qui capture et diffuse en temps r√©el les modifications de donn√©es ([[Capture Data Change (CDC)]]) dans les [[Base de donn√©e]].  Il permet de traiter ces changements de mani√®re fiable et efficace.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nDebezium est un middleware de [[Capture Data Change (CDC)]] qui s'int√®gre √† diff√©rentes [[Base de donn√©e]] ([[MySQL]], [[PostgreSQL]], [[MongoDB]], [[Oracle]], etc.) pour capturer les modifications de donn√©es (insertions, mises √† jour, suppressions) de mani√®re transparente.  Il utilise des m√©canismes sp√©cifiques √† chaque syst√®me de gestion de bases de donn√©es (SGBD) pour surveiller les logs de transactions (binlogs, WAL, oplogs, etc.) et extraire les √©v√©nements de changement.  Ces √©v√©nements sont ensuite format√©s en JSON et diffus√©s via diff√©rents connecteurs ([[Apache Kafka]], etc.).  La diffusion des donn√©es est effectu√©e de mani√®re incr√©mentale, envoyant uniquement les modifications, ce qui rend le processus efficient et √©vite la duplication massive de donn√©es.  \n\nDebezium offre des fonctionnalit√©s avanc√©es comme :\n\n* **Filtrage des donn√©es:**  Possibilit√© de filtrer les donn√©es captur√©es en fonction de tables, de colonnes ou de crit√®res sp√©cifiques.\n* **Transformation des donn√©es:**  Les donn√©es peuvent √™tre transform√©es avant d'√™tre diffus√©es, par exemple pour normaliser les formats ou enrichir les √©v√©nements avec des informations contextuelles.\n* **Gestion des erreurs et de la reprise:**  Debezium int√®gre des m√©canismes pour g√©rer les erreurs et assurer la reprise sur panne.\n* **Haute disponibilit√©:**  La conception du syst√®me permet une haute disponibilit√© gr√¢ce √† l'utilisation de technologies distribu√©es.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et communautaire:**  B√©n√©ficie d'un grand support communautaire et d'une maintenance active.\n* **Support de multiples SGBD:**  Permet de capturer les modifications de donn√©es dans une vari√©t√© de bases de donn√©es.\n* **Performances et scalabilit√©:**  Con√ßu pour g√©rer de grands volumes de donn√©es et s'adapter √† des besoins croissants.\n* **Flexibilit√©:**  Offre des options de configuration et de personnalisation √©tendues.\n* **Int√©gration avec [[Apache Kafka]]:**  S'int√®gre facilement avec [[Apache Kafka]] pour une diffusion robuste et distribu√©e des donn√©es.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:**  La configuration initiale peut √™tre complexe, surtout pour des environnements h√©t√©rog√®nes.\n* **Courbe d'apprentissage:**  N√©cessite une certaine expertise en mati√®re de [[Base de donn√©e]], de [[Data Streaming]] et de [[Capture Data Change (CDC)]].\n* **D√©pendances:**  D√©pend de diff√©rentes technologies ([[Apache Kafka]], par exemple), ajoutant une couche de complexit√© √† la mise en place.\n* **Gestion des sch√©mas:**  La gestion des √©volutions de sch√©mas de donn√©es peut n√©cessiter une attention particuli√®re.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "103bec1a-cef0-45fb-8eb1-c13ed1074984",
        "title": "Docker Swarm",
        "description": "---\nid: 3c134b45-51a4-4e25-9876-82facf350999\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Docker Swarm** est un outil d'orchestration de containers int√©gr√© √† [[Docker]]. Il permet de g√©rer un cluster de machines pour d√©ployer et orchestrer des applications conteneuris√©es de mani√®re simple et scalable.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nDocker Swarm permet de cr√©er un cluster de machines (n≈ìuds) et de d√©ployer des containers sur ces n≈ìuds. Il utilise un algorithme de consensus appel√© **[[Raft]]** pour √©lire un leader et g√©rer l'√©tat du cluster. Swarm facilite la gestion des services distribu√©s, la mise √† l'√©chelle automatique et la tol√©rance aux pannes. La configuration est simplifi√©e et ressemble √† un **[[Docker Compose]]** am√©lior√©.\n\n- **N≈ìuds** : Au moins 3 (id√©alement 5) n≈ìuds sont n√©cessaires pour garantir la r√©silience du cluster.\n- **Int√©gration avec Docker** : Swarm est inclus avec Docker, donc aucune installation suppl√©mentaire n'est n√©cessaire.\n- **Interface graphique** : Des outils comme **[[Portainer]]** peuvent √™tre utilis√©s pour g√©rer visuellement le cluster Docker Swarm.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Facilit√© d'int√©gration** : D√©j√† inclus avec [[Docker]], pas besoin d'installation suppl√©mentaire.\n- **Simplicit√© de configuration** : La configuration des services se fait via un fichier similaire √† Docker Compose.\n- **Haute disponibilit√©** : Gr√¢ce √† [[Raft]], le leader du cluster est √©lu et le consensus est maintenu, ce qui garantit la r√©silience.\n- **Mise √† l'√©chelle automatique** : Permet d'ajuster automatiquement le nombre de r√©plicas des services selon la charge.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Moins de fonctionnalit√©s avanc√©es** : Par rapport √† [[Kubernetes]], Swarm propose moins de fonctionnalit√©s avanc√©es pour la gestion complexe des clusters.\n- **Scalabilit√© limit√©e** : Bien que Swarm soit bien adapt√© pour des petits √† moyens clusters, il n'est pas aussi performant que [[Kubernetes]] pour des environnements de tr√®s grande √©chelle.\n- **Communaut√© plus petite** : La communaut√© et les ressources sont plus limit√©es compar√©es √† des solutions comme [[Kubernetes]].\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "23f53224-8522-45d1-b851-4fff726a77a5",
        "title": "Certification Java 17 - D√©ploiement et Modules Java",
        "description": "---\nid: e04928bd-dd1d-411a-a12e-6760db620a4c\n---\n## **12.1. Compilation et cr√©ation de JARs (modulaires et non-modulaires)**\n\nJava permet de compiler et de regrouper les classes dans des fichiers **JAR** (`Java Archive`). Avec **Java 9+, le syst√®me de modules (`JPMS`)** permet de mieux organiser les d√©pendances.\n\n---\n\n### **1. Compilation et ex√©cution d‚Äôun projet classique (non modulaire)**\n\nüìå **Un projet classique n‚Äôutilise pas `module-info.java`**\n\n**Compilation** :\n\n```sh\njavac -d out src/com/exemple/Main.java\n```\n\n**Cr√©ation du JAR :**\n\n```sh\njar --create --file monApp.jar -C out .\n```\n\n**Ex√©cution :**\n\n```sh\njava -jar monApp.jar\n```\n\n---\n\n### **2. Compilation et ex√©cution d‚Äôun projet modulaire**\n\nüìå **Un projet modulaire utilise `module-info.java`.**\n\nüìÇ **Structure :**\n\n```\n/mon-projet\n  /src\n    /com.exemple.main\n      module-info.java\n      Main.java\n```\n\nüìÑ **`module-info.java`**\n\n```java\nmodule com.exemple.main {\n    requires com.exemple.util;\n}\n```\n\n**Compilation** :\n\n```sh\njavac -d out --module-source-path src $(find src -name \"*.java\")\n```\n\n**Cr√©ation du JAR modulaire :**\n\n```sh\njar --create --file mods/com.exemple.main.jar --module-version=1.0 -C out/com.exemple.main .\n```\n\n**Ex√©cution du module :**\n\n```sh\njava --module-path mods -m com.exemple.main/com.exemple.Main\n```\n\nüìå **Avantages des JARs modulaires :**\n\n- Encapsulation des modules.\n- R√©duction des conflits de d√©pendances.\n\n---\n\n## **12.2. Cr√©ation d‚Äôimages d‚Äôex√©cution avec `jlink`**\n\nüìå **Depuis Java 9, `jlink` permet de cr√©er une image d‚Äôex√©cution sans installer une JDK compl√®te.**\n\n### **1. G√©n√©ration d‚Äôune image compacte**\n\n```sh\njlink --module-path $JAVA_HOME/jmods:mods \\\n      --add-modules com.exemple.main \\\n      --output monApp-image\n```\n\nüìå **Cela cr√©e un dossier `monApp-image` contenant une JRE minimale avec uniquement les modules n√©cessaires.**\n\n**Ex√©cution de l‚Äôapplication sans JDK install√© :**\n\n```sh\nmonApp-image/bin/java -m com.exemple.main/com.exemple.Main\n```\n\nüìå **Avantages de `jlink` :**\n\n- R√©duction de la taille de l‚Äôapplication.\n- Pas besoin d‚Äôune installation Java sur l‚Äôenvironnement cible.\n\n---\n\n## **12.3. Migration avec modules anonymes et automatiques**\n\nüìå **Lors de la migration d‚Äôun projet Java classique vers un projet modulaire, il existe trois types de modules :**\n\n|**Type de module**|**D√©finition**|\n|---|---|\n|**Module Explicite**|D√©fini avec `module-info.java`|\n|**Module Automatique**|Un JAR classique dans `module-path` devient un module|\n|**Module Anonyme**|Un JAR non modulaire plac√© dans `classpath`|\n\n---\n\n### **1. Modules automatiques**\n\nüìå **Un JAR non modulaire devient un module s‚Äôil est plac√© dans `--module-path`.**\n\nExemple :\n\n```sh\njava --module-path lib --add-modules nom.du.module -m com.exemple.main/com.exemple.Main\n```\n\nüìå **Son nom est d√©riv√© du fichier JAR (`lib/monJAR.jar` devient `monJAR`).**\n\n---\n\n### **2. Modules anonymes**\n\nüìå **Si un JAR est laiss√© dans le `classpath`, il fonctionne comme un module anonyme.**\n\nExemple :\n\n```sh\njava -classpath lib/monJAR.jar com.exemple.Main\n```\n\nüìå **Mais il ne peut pas √™tre r√©f√©renc√© par un module explicite.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **JARs : Compilation et cr√©ation de JARs modulaires et non-modulaires.**  \n‚úÖ **`jlink` : Cr√©ation d‚Äôune image d‚Äôex√©cution sans JDK complet.**  \n‚úÖ **Migration vers Java 9+ : Modules anonymes et automatiques pour compatibilit√©.**\n"
    },
    {
        "id": "0720059e-55bb-4a4b-bb8d-75fd23d0c0df",
        "title": "Elastic Search",
        "description": "---\nid: 694568ef-b128-4cdb-bc87-67ae174314f9\n---\n# Rapidement c'est quoi‚ùì\n\nElasticsearch est un moteur de recherche et une [[Base de donn√©e NoSQL]] distribu√©e, open source, permettant des recherches complexes et rapides sur de grands volumes de donn√©es.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nElasticsearch est un syst√®me de recherche et d'analyse de donn√©es bas√© sur le moteur de recherche [[Apache Lucene]]. Il utilise une architecture distribu√©e, permettant de r√©partir les donn√©es sur plusieurs serveurs pour am√©liorer les performances et la scalabilit√©.  Il indexe les donn√©es (les transforme en un format optimis√© pour la recherche) et les stocke dans une structure invers√©e, permettant des recherches rapides m√™me sur des ensembles de donn√©es tr√®s volumineux.  Contrairement aux bases de donn√©es relationnelles, Elasticsearch n'utilise pas de sch√©mas fixes, offrant une grande flexibilit√©.  Il supporte de nombreux types de donn√©es (texte, num√©rique, g√©ographique, etc.) et permet de r√©aliser des requ√™tes complexes avec des filtres, des agr√©gations, et des fonctionnalit√©s de scoring pour classer les r√©sultats.  Il est souvent utilis√© pour la recherche en temps r√©el, l'analyse de logs, la surveillance, et bien d'autres applications n√©cessitant des recherches performantes sur des donn√©es non-structur√©es ou semi-structur√©es.  Son API RESTful facilite son int√©gration avec d'autres applications.  La gestion de clusters permet une haute disponibilit√© et une tol√©rance aux pannes.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance de recherche:**  Extr√™mement rapide, m√™me sur des index gigantesques.\n* **Scalabilit√©:** Facilement extensible pour g√©rer des volumes de donn√©es croissants.\n* **Flexibilit√©:**  Supporte diff√©rents types de donn√©es et permet des requ√™tes complexes.\n* **Open source:** Communaut√© active et large choix d'outils et de plugins.\n* **API RESTful simple et intuitive:**  Facilite l'int√©gration avec d'autres syst√®mes.\n* **Haute disponibilit√©:**  Architecture distribu√©e permettant une tol√©rance aux pannes.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:**  La configuration et la gestion d'un cluster Elasticsearch peuvent √™tre complexes pour les d√©butants.\n* **Consommation de ressources:**  N√©cessite des ressources mat√©rielles importantes pour g√©rer de grands volumes de donn√©es.\n* **Gestion des transactions:**  Pas aussi robuste que les bases de donn√©es relationnelles pour les transactions ACID.\n* **D√©pendance aux plugins:** Certaines fonctionnalit√©s avanc√©es n√©cessitent l'installation de plugins.\n* **Courbe d'apprentissage:** Peut n√©cessiter un temps d'apprentissage cons√©quent pour ma√Ætriser toutes ses fonctionnalit√©s.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "d7d2e235-de41-4429-8cc3-2048f7ea0f17",
        "title": "Feature Flag",
        "description": "---\nid: 5c3b2bc6-21b3-493c-8658-e5078738ffc5\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **feature flags** sont des m√©canismes permettant d'activer ou de d√©sactiver des fonctionnalit√©s dans une application sans avoir √† red√©ployer le code. Elles permettent de contr√¥ler l'acc√®s √† certaines parties du logiciel en temps r√©el.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn **feature flag** (ou _switch_) est un contr√¥le qui permet de g√©rer dynamiquement l'activation d'une fonctionnalit√© dans une application. Cela permet de :\n\n- **D√©sactiver rapidement** une fonctionnalit√© en cas de bugs ou de probl√®me de performance.\n- **Restreindre l'acc√®s** √† certaines fonctionnalit√©s en fonction de crit√®res (utilisateur, r√©gion, version, etc.).\n- **Tester des fonctionnalit√©s** (A/B testing) et exp√©rimenter des √©volutions avant de les d√©ployer √† tous les utilisateurs.\n\nLes **feature flags** doivent √™tre utilis√©s temporairement. Une fois qu'une fonctionnalit√© est stable et valid√©e, le flag devient inutile et doit √™tre retir√©.\n\nLes **paradigmes** de gestion des flags sont les suivants :\n\n- **√âvaluation c√¥t√© serveur** : Le serveur v√©rifie le statut du flag √† chaque appel.\n- **√âvaluation c√¥t√© client** : Le flag est mis √† jour dans le navigateur et peut imm√©diatement changer l'√©tat de la page.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Flexibilit√©** : Permet d'activer ou d√©sactiver des fonctionnalit√©s sans red√©ployer, facilitant les corrections rapides.\n- **Contr√¥le en temps r√©el** : Offre un contr√¥le granulaire sur la disponibilit√© des fonctionnalit√©s.\n- **Am√©lioration de la gestion des risques** : Id√©al pour tester des nouvelles fonctionnalit√©s sans impacter tous les utilisateurs.\n- **Exp√©rimentation** : Pratique pour effectuer des tests A/B et valider des changements avant leur d√©ploiement complet.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© de gestion** : Si trop de flags sont laiss√©s en place, cela peut rendre le code plus complexe √† maintenir.\n- **Risques de d√©pendances** : L'activation ou la d√©sactivation des flags peut introduire des comportements inattendus si mal g√©r√©s.\n- **Dettes techniques** : Les flags doivent √™tre supprim√©s d√®s qu'ils ne sont plus n√©cessaires, sinon ils peuvent s'accumuler et encombrer le code.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "dae92eec-24b8-41c0-9323-03f55e0f261f",
        "title": "Feign",
        "description": "---\nid: e2c9e1f7-64bc-479b-b312-977feb4a83ec\n---\n# Rapidement c'est quoi‚ùì\n\nFeign est une biblioth√®que [[Java]] qui simplifie la cr√©ation d'interfaces clientes pour communiquer avec des services web [[RESTful]].  Elle permet de d√©finir des interfaces Java qui sont ensuite traduites en appels [[HTTP]] par Feign.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nFeign est une biblioth√®que client [[HTTP]] d√©clarative pour [[Java]].  Au lieu d'√©crire du code HTTP verbeux (gestion des connexions, envoi des requ√™tes, parsing des r√©ponses...), vous d√©clarez une interface Java annot√©e avec des annotations sp√©cifiques (comme `@RequestMapping` de Spring MVC) pour d√©finir les endpoints des services web. Feign se charge ensuite de g√©n√©rer le code n√©cessaire pour effectuer les appels HTTP et de g√©rer les d√©tails de bas niveau.  L'interface d√©crit simplement la m√©thode HTTP (GET, POST, etc.), l'URL, les param√®tres d'entr√©e et la structure des donn√©es de sortie.\n\nFeign s'int√®gre particuli√®rement bien avec [[Spring Boot]], offrant un starter qui simplifie encore plus son int√©gration et sa configuration.  Il est souvent utilis√© dans les [[Micros services]] pour communiquer entre eux, facilitant la gestion des appels inter-services et am√©liorant la maintenabilit√© du code.  Il supporte diff√©rents codecs (pour la s√©rialisation/d√©s√©rialisation des donn√©es) comme [[Jackson]] et [[Gson]].  L'int√©gration avec des m√©canismes de gestion des erreurs et de retries est √©galement possible.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **D√©claratif et concis:**  Le code est plus lisible et plus facile √† maintenir gr√¢ce √† l'approche d√©clarative.  On se concentre sur la logique m√©tier plut√¥t que sur les d√©tails [[HTTP]].\n* **Int√©gration [[Spring Boot]]:**  Le starter [[Spring Boot]] simplifie consid√©rablement la configuration et l'int√©gration avec l'√©cosyst√®me Spring.\n* **Support de plusieurs codecs:**  La flexibilit√© de choisir son codec ([[Jackson]], [[Gson]], etc.) permet de s'adapter √† diff√©rents besoins de s√©rialisation/d√©s√©rialisation.\n* **Am√©lioration de la maintenabilit√©:**  Le code est plus propre et plus facile √† comprendre, ce qui facilite la maintenance et les modifications futures.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage initiale:**  Bien que d√©claratif, il faut comprendre les annotations et les m√©canismes de Feign pour l'utiliser efficacement.\n* **D√©bogage:**  Le d√©bogage peut √™tre plus complexe car les appels HTTP sont g√©r√©s en interne par Feign.  Un bon logging est essentiel.\n* **Complexit√© potentielle pour des sc√©narios avanc√©s:**  Pour des sc√©narios complexes de gestion des erreurs, d'authentification ou de proxies, une configuration plus avanc√©e peut √™tre n√©cessaire.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "811981f6-bf27-4a66-b238-b039f2f14b3e",
        "title": "Firecracker",
        "description": "---\nid: 77d3c304-e73a-4cb4-b3b3-3a683e1ce849\n---\n# Rapidement c'est quoi‚ùì\n\nFirecracker est une technologie de [[Virtualisation]] l√©g√®re, permettant de lancer des micro-machines virtuelles (micro [[VM]]) isol√©es. [[AWS]] l'utilise notamment pour son service Lambda.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nFirecracker est un hyperviseur open source d√©velopp√© par Amazon Web Services ([[AWS]]).  Son objectif principal est de fournir un environnement d'ex√©cution s√©curis√© et performant pour les fonctions sans serveur.  Au lieu d'utiliser des conteneurs ou des processus partag√©s, Firecracker cr√©e une microVM pour chaque fonction. Cela signifie que chaque fonction s'ex√©cute dans son propre espace d'adressage isol√©, avec son propre noyau l√©ger.  Ce niveau d'isolation am√©liore la s√©curit√© en emp√™chant une fonction compromise d'affecter les autres.  Les microVM Firecracker sont con√ßues pour d√©marrer tr√®s rapidement (millisecondes) et utiliser des ressources minimales, ce qui est crucial pour les architectures [[Function as a Service (FaaS)]] o√π de nombreuses fonctions peuvent √™tre ex√©cut√©es simultan√©ment.  Son architecture repose sur un hyperviseur bas√© sur [[Kernel-based Virtual Machine (KVM)]],  mais avec une surface d'attaque significativement r√©duite gr√¢ce √† un design minimaliste et une gestion fine des ressources.  Cela assure une meilleure performance et une plus grande fiabilit√© compar√© √† des solutions de virtualisation plus lourdes.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **S√©curit√© accrue:** L'isolation au niveau de la [[microVM]] offre une s√©curit√© significativement am√©lior√©e par rapport aux conteneurs, limitant l'impact d'une compromission.\n* **D√©marrage rapide:** Les [[microVM]] Firecracker d√©marrent tr√®s rapidement, optimisant l'efficacit√© des architectures [[Function as a Service (FaaS)]].\n* **Ressources l√©g√®res:** Elles utilisent peu de ressources syst√®me, permettant un meilleur rapport co√ªt-performance.\n* **Open source:** La nature open source permet l'auditabilit√© du code et la contribution de la communaut√©.\n* **Int√©gration avec les outils existants:**  Firecracker peut s'int√©grer facilement avec des syst√®mes existants pour la gestion et le provisionnement des machines virtuelles.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La gestion de nombreuses [[microVM]] peut complexifier l'infrastructure par rapport √† des solutions bas√©es sur des conteneurs.\n* **Surco√ªt potentiel:**  Bien que l√©ger, le surco√ªt de la virtualisation reste pr√©sent compar√© √† l'ex√©cution directe de fonctions dans un environnement non virtualis√©.  Toutefois, ce surco√ªt est souvent compens√© par les gains en s√©curit√© et isolation.\n* **N√©cessite un hyperviseur compatible:** Le fonctionnement repose sur un hyperviseur compatible, comme [[Kernel-based Virtual Machine (KVM)]].\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "336c3829-0dde-46ae-ad99-313b5adff93d",
        "title": "Flintlock",
        "description": "---\nid: 84fd28c0-e6a9-44a2-adec-e0a23bf37653\n---\n# Rapidement c'est quoi‚ùì\n\nFlintlock est un gestionnaire de paquets pour [[Firecracker]].  Il simplifie le d√©ploiement et la gestion de microservices bas√©s sur [[Firecracker]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nFlintlock est un outil en ligne de commande qui permet de g√©rer le cycle de vie complet des [[microVM]] bas√©es sur [[Firecracker]].  Il automatise des t√¢ches telles que la cr√©ation, le d√©marrage, l'arr√™t et la suppression de [[microVM]], ainsi que la gestion des images de d√©marrage et des ressources associ√©es.  Flintlock g√®re la configuration des [[microVM]], y compris l'allocation de ressources CPU, m√©moire et stockage. Il permet √©galement de g√©rer le r√©seautage des [[microVM]], en les connectant √† des r√©seaux virtuels ou physiques.  L'objectif principal de Flintlock est de simplifier le processus de d√©ploiement et de gestion d'applications conteneuris√©es ou sans serveur, ex√©cut√©es dans des environnements isol√©s et s√©curis√©s gr√¢ce √† [[Firecracker]]. Il agit comme une couche d'abstraction, cachant la complexit√© de la gestion directe de Firecracker.  Flintlock utilise des fichiers de configuration (g√©n√©ralement au format YAML) pour d√©finir les param√®tres des [[microVM]].  Ces configurations d√©crivent les ressources allou√©es, les images √† utiliser, les r√©seaux et autres aspects du d√©ploiement.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Automatisation:**  Flintlock automatise les t√¢ches r√©p√©titives, simplifiant consid√©rablement la gestion des [[microVM]].\n* **Simplification:**  Il masque la complexit√© de [[Firecracker]], le rendant plus accessible aux d√©veloppeurs.\n* **Gestion de cycle de vie complet:**  Il g√®re la cr√©ation, le d√©marrage, l'arr√™t et la suppression des [[microVM]].\n* **Gestion des ressources:**  Il permet un contr√¥le pr√©cis de l'allocation des ressources (CPU, m√©moire, stockage).\n* **Int√©gration facile (potentielle):**  Son interface en ligne de commande facilite l'int√©gration dans des pipelines [[CI/CD]].\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Maturit√©:**  En tant que projet relativement r√©cent, Flintlock pourrait pr√©senter des bugs ou des fonctionnalit√©s manquantes.\n* **Documentation:** La documentation pourrait √™tre plus compl√®te et d√©taill√©e pour certains aspects.\n* **D√©pendance √† Firecracker:** Flintlock est intrins√®quement li√© √† [[Firecracker]], limitant son usage aux environnements utilisant ce hyperviseur.\n* **Communaut√©:** La communaut√© autour de Flintlock pourrait √™tre moins active que pour des projets plus √©tablis.\n\n\n---\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "ea91c790-320f-495e-9b38-8c6c3795e063",
        "title": "Function as a Service (FaaS)",
        "description": "---\nid: 549b4aed-718c-4342-8b40-b3a1f957ef81\n---\n# Rapidement c'est quoi‚ùì\n\nFonction as a Service (FaaS) : Ex√©cution de code sans gestion d'infrastructures.  Vous envoyez du code, il s'ex√©cute, puis les ressources sont lib√©r√©es.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe Function as a Service (FaaS) est un mod√®le de cloud computing o√π le fournisseur de cloud g√®re l'infrastructure et vous fournissez uniquement le code de votre fonction.  Cette fonction est un petit morceau de code, g√©n√©ralement sans √©tat (stateless), qui s'ex√©cute en r√©ponse √† un √©v√©nement sp√©cifique.  Cet √©v√©nement peut √™tre une requ√™te [[HTTP]], un message dans une file d'attente, un changement de donn√©es dans une base de donn√©es, etc.\n\nUne fois l'√©v√©nement d√©clencheur trait√©, la fonction s'ex√©cute, effectue son traitement (par exemple, le traitement d'une image, l'envoi d'un email, la mise √† jour d'une base de donn√©es), puis se termine.  Le fournisseur de cloud g√®re automatiquement le scaling (mise √† l'√©chelle) : il peut ex√©cuter plusieurs instances de votre fonction simultan√©ment pour g√©rer les pics de demande, et r√©duire le nombre d'instances lorsque la demande diminue.  Vous ne payez que pour la dur√©e d'ex√©cution de votre fonction, ce qui permet une tarification tr√®s avantageuse pour les charges de travail sporadiques ou impr√©visibles.\n\nLes plateformes FaaS populaires incluent [[AWS Lambda]], [[Google Cloud Functions]], [[Azure Functions]], etc.  Elles offrent des fonctionnalit√©s suppl√©mentaires comme le monitoring, le logging, et l'int√©gration avec d'autres services cloud.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Tarification √©conomique:** Payez uniquement pour le temps d'ex√©cution, id√©al pour les applications √©v√©nementielles et les [[Micros services]].\n* **Scalabilit√© automatique:** Le fournisseur de cloud g√®re la mise √† l'√©chelle, vous n'avez pas √† vous soucier des ressources.\n* **Simplicit√© de d√©ploiement:** D√©ployez facilement votre code sans g√©rer d'infrastructures.\n* **Maintenance r√©duite:** Le fournisseur de cloud g√®re la maintenance et les mises √† jour.\n* **Int√©gration facile:** S'int√®gre souvent avec d'autres services cloud.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Cold starts:** Le premier appel √† une fonction peut prendre plus de temps car elle doit √™tre initialis√©e.\n* **Limitations de ressources:** Les fonctions ont des limitations de ressources (m√©moire, temps d'ex√©cution).\n* **D√©bogage plus complexe:** Le d√©bogage peut √™tre plus complexe que dans une application traditionnelle.\n* **Mod√®le √©v√©nementiel:**  Ne convient pas √† toutes les applications, notamment celles n√©cessitant des connexions persistantes ou un √©tat stable.\n* **Verrouillage fournisseur:** Migration potentiellement difficile entre diff√©rents fournisseurs de FaaS.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "eaaa031f-71c3-45df-9287-a65bff77495b",
        "title": "Certification Java 17 - Gestion des Exceptions",
        "description": "---\nid: 92360517-fdbe-479f-bdfb-06c5d02db86f\n---\n## **6.1. Utilisation de `try/catch/finally`**\n\nEn Java, une **exception** est une erreur qui interrompt le programme. Elle peut √™tre **g√©r√©e** avec `try/catch/finally`.\n\n### **Structure d‚Äôun bloc `try/catch/finally`**\n\n```java\ntry {\n    int result = 10 / 0;  // Provoque une ArithmeticException\n    System.out.println(result);\n} catch (ArithmeticException e) {\n    System.out.println(\"Erreur : division par z√©ro !\");\n} finally {\n    System.out.println(\"Ce bloc s‚Äôex√©cute toujours !\");\n}\n```\n\nüìå **Le `finally` est toujours ex√©cut√©**, m√™me en cas d‚Äôexception. Il sert g√©n√©ralement √† **fermer des ressources** (fichiers, connexions).\n\n---\n\n## **6.2. `try-with-resources` : Gestion automatique des ressources**\n\nIntroduit en **Java 7**, ce bloc permet de fermer automatiquement les ressources impl√©mentant **`AutoCloseable`**.\n\n### **Exemple avec `try-with-resources`**\n\n```java\nimport java.io.*;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"fichier.txt\"))) {\n            System.out.println(br.readLine()); // Lit la premi√®re ligne\n        } catch (IOException e) {\n            System.out.println(\"Erreur d'E/S : \" + e.getMessage());\n        }\n    }\n}\n```\n\nüìå **Pas besoin de fermer `BufferedReader` manuellement**, il est automatiquement ferm√© √† la fin du bloc.\n\n---\n\n## **6.3. Multi-catch : Attraper plusieurs exceptions**\n\nDepuis **Java 7**, on peut attraper plusieurs exceptions dans un seul `catch`, avec `|`.\n\n```java\ntry {\n    int[] tab = {1, 2, 3};\n    System.out.println(tab[5]);  // Provoque une ArrayIndexOutOfBoundsException\n} catch (ArithmeticException | ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Erreur : \" + e.getClass().getSimpleName());\n}\n```\n\nüìå **Avantages :**\n\n- Simplifie le code en regroupant des exceptions similaires.\n- √âvite les blocs `catch` redondants.\n\nüìå **Restrictions :**\n\n- Les exceptions ne doivent **pas avoir de relation d‚Äôh√©ritage** (ex: `IOException` et `FileNotFoundException` sont invalides ensemble, car `FileNotFoundException` h√©rite de `IOException`).\n\n---\n\n## **6.4. Exceptions personnalis√©es (`extends Exception` ou `extends RuntimeException`)**\n\n### **1. Exceptions contr√¥l√©es (`extends Exception`)**\n\nüîπ **Obligation** de les g√©rer avec `try/catch` ou `throws`.  \nüîπ Utilis√©es pour les erreurs pr√©visibles (ex : erreurs m√©tier).\n\n```java\nclass MonException extends Exception {\n    public MonException(String message) {\n        super(message);\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        try {\n            verifier(15);\n        } catch (MonException e) {\n            System.out.println(\"Erreur captur√©e : \" + e.getMessage());\n        }\n    }\n\n    static void verifier(int valeur) throws MonException {\n        if (valeur < 18) {\n            throw new MonException(\"√Çge insuffisant !\");\n        }\n    }\n}\n```\n\nüìå **`throws` indique qu‚Äôune m√©thode peut lever une exception.**\n\n---\n\n### **2. Exceptions non contr√¥l√©es (`extends RuntimeException`)**\n\nüîπ **Pas besoin** de `try/catch`, elles interrompent le programme.  \nüîπ Utilis√©es pour des erreurs de programmation (ex : `NullPointerException`).\n\n```java\nclass MonRuntimeException extends RuntimeException {\n    public MonRuntimeException(String message) {\n        super(message);\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        calculer(0);\n    }\n\n    static void calculer(int valeur) {\n        if (valeur == 0) {\n            throw new MonRuntimeException(\"Division par z√©ro interdite !\");\n        }\n    }\n}\n```\n\nüìå **Diff√©rence avec `Exception`** : pas d'obligation de gestion avec `try/catch`.\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **`try/catch/finally`** : G√®re les erreurs, `finally` s'ex√©cute toujours.  \n‚úÖ **`try-with-resources`** : Ferme automatiquement les ressources (`AutoCloseable`).  \n‚úÖ **Multi-catch (`catch` multiple)** : Regroupe plusieurs exceptions en une seule clause.  \n‚úÖ **Exceptions personnalis√©es** :\n\n- `extends Exception` (**contr√¥l√©es**) ‚Üí Doit √™tre g√©r√©e (`throws` ou `try/catch`).\n- `extends RuntimeException` (**non contr√¥l√©es**) ‚Üí Pas d‚Äôobligation de gestion.\n\n---"
    },
    {
        "id": "f750c1bb-d1a8-4f7f-b3d5-2dc4dfab5455",
        "title": "Certification Java 17 - Gestion des types Date, Temps, Texte et Num√©rique",
        "description": "---\nid: 8ed7f80e-caff-443e-8f21-ac0ffb429bec\n---\n## **4.1. API Date-Time : `LocalDate`, `LocalTime`, `LocalDateTime`, `ZonedDateTime`**\n\nDepuis **Java 8**, la gestion des dates et heures se fait via l‚Äô**API `java.time`**, qui remplace `java.util.Date` et `java.util.Calendar`.\n\n|**Classe**|**Description**|\n|---|---|\n|`LocalDate`|Date sans heure ni fuseau horaire|\n|`LocalTime`|Heure sans date ni fuseau horaire|\n|`LocalDateTime`|Date et heure sans fuseau horaire|\n|`ZonedDateTime`|Date, heure et fuseau horaire|\n\n### **Exemples : Cr√©ation et manipulation**\n\n```java\nimport java.time.*;\n\npublic class DateTimeDemo {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.now();  // Date actuelle\n        LocalTime time = LocalTime.now();  // Heure actuelle\n        LocalDateTime dateTime = LocalDateTime.now();  // Date et heure actuelle\n        ZonedDateTime zonedDateTime = ZonedDateTime.now();  // Avec fuseau horaire\n\n        System.out.println(date);         // 2025-03-05\n        System.out.println(time);         // 14:30:45.123\n        System.out.println(dateTime);     // 2025-03-05T14:30:45.123\n        System.out.println(zonedDateTime);// 2025-03-05T14:30:45.123+01:00[Europe/Paris]\n    }\n}\n```\n\n### **Manipulation des dates et heures**\n\nLes objets `java.time` sont **immuables**, donc chaque modification retourne une nouvelle instance.\n\n```java\nLocalDate date = LocalDate.of(2025, 3, 5);\nLocalDate newDate = date.plusDays(10).minusMonths(1);  // 2025-02-15\nLocalTime newTime = LocalTime.of(10, 30).plusHours(2); // 12:30\n```\n\n### **Formatage des dates**\n\n```java\nimport java.time.format.DateTimeFormatter;\n\nLocalDate date = LocalDate.now();\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\nSystem.out.println(date.format(formatter)); // 05/03/2025\n```\n\n---\n\n## **4.2. `Period`, `Duration`, `Instant` pour les intervalles de temps**\n\n|**Classe**|**Utilisation**|\n|---|---|\n|`Period`|Repr√©sente une diff√©rence en **jours, mois ou ann√©es**|\n|`Duration`|Repr√©sente une diff√©rence en **heures, minutes, secondes**|\n|`Instant`|Un point pr√©cis dans le temps (timestamp)|\n\n### **Exemples : `Period`**\n\n```java\nPeriod period = Period.of(1, 2, 3); // 1 an, 2 mois, 3 jours\nLocalDate date = LocalDate.now().plus(period);\nSystem.out.println(date);\n```\n\n### **Exemples : `Duration`**\n\n```java\nDuration duration = Duration.ofHours(5);\nLocalTime time = LocalTime.now().plus(duration);\nSystem.out.println(time);\n```\n\n### **Exemples : `Instant` (Timestamp)**\n\n```java\nInstant instant = Instant.now();\nSystem.out.println(instant); // 2025-03-05T13:15:30.123Z\n```\n\n---\n\n## **4.3. Manipulation de texte : `String`, `StringBuilder`, Text Blocks**\n\n### **`String` : immutable**\n\nüìå **Chaque modification cr√©e un nouvel objet.**\n\n```java\nString s = \"Java\";\ns = s.concat(\" 21\"); // Nouvelle instance\nSystem.out.println(s); // Java 21\n```\n\n### **`StringBuilder` : mutable et performant**\n\nüìå **Utilis√© pour √©viter la cr√©ation excessive d‚Äôobjets.**\n\n```java\nStringBuilder sb = new StringBuilder(\"Java\");\nsb.append(\" 21\");\nSystem.out.println(sb); // Java 21\n```\n\n|**Classe**|**Immutable ?**|**Thread-safe ?**|**Performance**|\n|---|---|---|---|\n|`String`|‚úÖ Oui|‚úÖ Oui|üö´ Lent (cr√©ation d‚Äôobjets)|\n|`StringBuilder`|üö´ Non|üö´ Non|‚úÖ Rapide|\n|`StringBuffer`|üö´ Non|‚úÖ Oui|‚úÖ Rapide (mais synchronis√©)|\n\n### **Principales m√©thodes**\n\n```java\nString s = \"  Java 21  \";\nSystem.out.println(s.trim()); // Supprime espaces : \"Java 21\"\nSystem.out.println(s.toUpperCase()); // \"JAVA 21\"\nSystem.out.println(s.replace(\" \", \"-\")); // \"-Java-21-\"\n```\n\n### **Text Blocks (`\"\"\"`) - Java 13**\n\nPermet d‚Äô√©crire du texte multilignes plus lisible.\n\n```java\nString json = \"\"\"\n    {\n        \"name\": \"Java\",\n        \"version\": 21\n    }\n    \"\"\";\nSystem.out.println(json);\n```\n\n---\n\n## **4.4. API Math et `BigDecimal`**\n\n### **üìå Math API : Calculs avanc√©s**\n\n```java\nSystem.out.println(Math.abs(-10));    // 10\nSystem.out.println(Math.pow(2, 3));   // 8.0\nSystem.out.println(Math.sqrt(16));    // 4.0\nSystem.out.println(Math.random());    // [0.0, 1.0[\n```\n\n### **üìå `BigDecimal` : pr√©cision pour les calculs financiers**\n\nüìå **`double` peut entra√Æner des erreurs d‚Äôarrondi !**\n\n```java\ndouble a = 0.1;\ndouble b = 0.2;\nSystem.out.println(a + b); // 0.30000000000000004 (erreur)\n\nBigDecimal x = new BigDecimal(\"0.1\");\nBigDecimal y = new BigDecimal(\"0.2\");\nSystem.out.println(x.add(y)); // 0.3 (pr√©cis)\n```\n\n|**Type**|**Pr√©cision**|**M√©moire**|**Utilisation**|\n|---|---|---|---|\n|`float`|32 bits|Faible|Calculs approximatifs|\n|`double`|64 bits|Moyenne|Calculs scientifiques|\n|`BigDecimal`|Illimit√©e|Plus lourd|Calculs pr√©cis (monnaie)|\n\n### **Op√©rations avec `BigDecimal`**\n\n```java\nBigDecimal valeur = new BigDecimal(\"10.50\");\nBigDecimal taxe = new BigDecimal(\"1.20\");\nBigDecimal total = valeur.multiply(taxe);\n\nSystem.out.println(total); // 12.60\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **API Date-Time (`LocalDate`, `LocalTime`, etc.)**  \n‚úÖ **Gestion des intervalles avec `Period`, `Duration`, `Instant`**  \n‚úÖ **Manipulation de texte avec `String`, `StringBuilder`, `Text Blocks`**  \n‚úÖ **Math avanc√© (`Math.pow`, `Math.random`) et calculs pr√©cis avec `BigDecimal`**\n\n---\n"
    },
    {
        "id": "c074a5cf-bcf9-464c-90cd-87b69b5095f6",
        "title": "Git Hook",
        "description": "---\nid: 65c4da6e-82ad-454b-b55b-ff45a6462d19\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **[[Git]] Hooks** sont des scripts ex√©cutables permettant d‚Äôautomatiser certaines actions pendant le cycle de vie d'un d√©p√¥t [[Git]], comme avant ou apr√®s un commit, push, ou merge.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLes **Git Hooks** sont des scripts qui s'ex√©cutent √† des moments sp√©cifiques dans le flux de travail de Git. Ils permettent d'ajouter des comportements personnalis√©s et d‚Äôautomatiser des t√¢ches comme des v√©rifications, des validations ou des notifications. Ces hooks sont configur√©s directement dans le r√©pertoire `.git/hooks` du projet. Chaque hook est associ√© √† un √©v√©nement pr√©cis :\n\n1. **`pre-commit`** : Avant qu'un commit soit effectu√©. Utilis√© pour des v√©rifications comme les tests unitaires ou le formatage du code.\n2. **`commit-msg`** : Apr√®s un commit mais avant la validation du message. Permet de valider ou modifier le message de commit.\n3. **`post-commit`** : Apr√®s un commit. Souvent utilis√© pour envoyer des notifications ou effectuer des suivis.\n4. **`pre-push`** : Avant un push vers un d√©p√¥t distant. Permet de v√©rifier la qualit√© du code avant de le partager.\n5. **`post-merge`** : Apr√®s un merge. Souvent utilis√© pour r√©organiser l‚Äôespace de travail ou nettoyer l'environnement.\n6. **`pre-receive` et `update`** : Sur le serveur distant, valident les changements avant qu'ils ne soient re√ßus.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Automatisation** : Facilite l'automatisation de processus tels que les tests, le formatage de code, ou l'envoi de notifications.\n- **Validation** : Permet de valider ou modifier des actions avant qu‚Äôelles ne soient ex√©cut√©es (commit, push).\n- **Personnalisation** : Offre une grande flexibilit√© pour personnaliser le flux de travail de chaque √©quipe ou projet.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Performance** : Trop de hooks ou des v√©rifications lourdes peuvent ralentir le workflow, notamment lors des commits fr√©quents.\n- **Complexit√©** : La gestion de hooks dans un projet peut ajouter de la complexit√©, surtout si chaque d√©veloppeur a une configuration diff√©rente.\n- **D√©pendance locale** : Les hooks sont locaux au d√©p√¥t, ce qui peut poser probl√®me si l'√©quipe utilise des configurations diff√©rentes.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "329a8a5d-8878-414f-996c-fb91884b6abd",
        "title": "Git leaks",
        "description": "---\nid: d24393e4-da90-46f9-98e7-8f2025603958\n---\n# Rapidement c'est quoi‚ùì\n\nGit Leaks est un outil permettant de d√©tecter les fuites d'informations sensibles (mots de passe, cl√©s API, etc.) dans un d√©p√¥t [[Git]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nGit Leaks est un outil de s√©curit√© qui analyse le contenu d'un d√©p√¥t [[Git]] √† la recherche de patterns correspondant √† des informations sensibles.  Il fonctionne en scannant l'historique du d√©p√¥t, incluant les commits pass√©s et les fichiers supprim√©s.  L'objectif est d'identifier et de signaler la pr√©sence accidentelle de donn√©es confidentielles qui auraient pu √™tre commises par erreur.  Ces informations sensibles peuvent inclure :\n\n* **Mots de passe:**  En clair ou hach√©s (m√™me si hach√©s, certains algorithmes faibles peuvent √™tre d√©tect√©s).\n* **Cl√©s API:**  Pour divers services cloud, bases de donn√©es, etc.\n* **Jetons d'authentification:**  Utilis√©s pour l'acc√®s √† des applications ou services.\n* **Num√©ros de cartes de cr√©dit:**  Respectant les formats standards.\n* **Informations personnelles sensibles:**  Num√©ros de s√©curit√© sociale, adresses, etc. (d√©pend des r√©glages et des patterns utilis√©s).\n\nGit Leaks peut √™tre int√©gr√© comme un [[Git Hook]] (ex√©cut√© avant chaque commit) ou dans un [[pipeline CI/CD]] (ex: [[GitLab CI]], [[GitHub Actions]], [[Jenkins]]), permettant une d√©tection proactive des fuites avant qu'elles ne soient publiques.  L'int√©gration permet une automatisation de la s√©curit√© et une meilleure pr√©vention des incidents.  Il existe diff√©rentes impl√©mentations et configurations possibles, modifiant la sensibilit√© de la d√©tection (faible, moyen, fort).\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **D√©tection proactive:** Identifie les fuites avant leur publication publique.\n* **Int√©gration facile:**  Peut √™tre int√©gr√© facilement dans les workflows existants via des hooks ou des [[pipelines CI/CD]].\n* **Automatisation:**  R√©duit le risque d'erreur humaine et acc√©l√®re le processus de s√©curit√©.\n* **Couverture large:**  Peut d√©tecter diff√©rents types d'informations sensibles.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Faux positifs possibles:**  Peut g√©n√©rer des faux positifs en fonction de la configuration et de la complexit√© du code.  Un ajustement fin des r√©glages est souvent n√©cessaire.\n* **D√©pendance aux patterns:**  La d√©tection repose sur des patterns pr√©d√©finis, ce qui signifie qu'il peut manquer des types d'informations sensibles non couverts par ces patterns.\n* **Ne remplace pas une revue de code compl√®te:**  Doit √™tre consid√©r√© comme un outil compl√©mentaire √† une bonne pratique de revue de code.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "e4cdf907-2f2b-4a47-ab7b-735192fb7394",
        "title": "Grafana",
        "description": "---\nid: 73f08fc3-729a-40a2-8abd-96cbe6ca9970\n---\n# Rapidement c'est quoi‚ùì\n\nGrafana est un outil open-source de visualisation et d'analyse de donn√©es. Il permet de cr√©er des dashboards interactifs et personnalisables √† partir de nombreuses sources de donn√©es diff√©rentes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nGrafana est une plateforme d'analyse de donn√©es qui permet de visualiser et d'interroger des donn√©es provenant de diverses sources, telles que des [[Base de donn√©e]] ([[PostgreSQL]], [[MySQL]], [[MongoDB]], etc.), des m√©triques syst√®me ([[Prometheus]], [[Graphite]]), des logs ([[Elasticsearch]], [[Loki]]), des clouds ([[AWS]], [[Azure]], [[GCP]]) et bien d'autres.  Il offre une interface utilisateur intuitive pour cr√©er des dashboards personnalis√©s avec des graphiques, des tableaux, des cartes et autres visualisations.  Ces dashboards peuvent √™tre partag√©s et collaboratifs.  Grafana poss√®de un syst√®me de plugins extensif permettant d'ajouter des fonctionnalit√©s et de supporter de nouvelles sources de donn√©es.  L'utilisateur peut effectuer des requ√™tes directement sur les donn√©es, d√©finir des alertes bas√©es sur des seuils et int√©grer des fonctionnalit√©s d'exploration de donn√©es.  Au-del√† de la visualisation, Grafana permet une analyse temporelle des donn√©es, indispensable pour le monitoring et l'investigation d'incidents.  Il offre √©galement des fonctionnalit√©s d'annotation pour enrichir les donn√©es avec des informations contextuelles.  Enfin, Grafana est disponible en version open-source et en version entreprise avec des fonctionnalit√©s additionnelles.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Interface utilisateur intuitive et conviviale:** La cr√©ation et la personnalisation de dashboards est relativement facile, m√™me pour les utilisateurs non-experts.\n* **Support d'un large √©ventail de sources de donn√©es:** Grafana s'int√®gre avec de nombreux outils et technologies, ce qui en fait une solution polyvalente.\n* **Fonctionnalit√©s avanc√©es d'analyse et d'exploration:**  Au-del√† de la simple visualisation, Grafana permet une analyse approfondie des donn√©es.\n* **Communaut√© active et support important:** La communaut√© open-source est vaste et active, assurant un bon support et une disponibilit√© de ressources.\n* **Extensible gr√¢ce aux plugins:**  L'ajout de nouvelles fonctionnalit√©s et sources de donn√©es se fait facilement via les plugins.\n* **Open-source (avec une version entreprise):**  Offre un bon √©quilibre entre gratuit√© et fonctionnalit√©s avanc√©es.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© pour des configurations avanc√©es:**  La personnalisation pouss√©e et la gestion de sources de donn√©es complexes peuvent devenir difficiles.\n* **Performances potentiellement limit√©es pour des volumes de donn√©es tr√®s importants:**  Les performances peuvent √™tre affect√©es par la taille et la complexit√© des dashboards et des requ√™tes.\n* **Courbe d'apprentissage pour ma√Ætriser toutes les fonctionnalit√©s:** Bien que l'interface soit intuitive, ma√Ætriser toutes les fonctionnalit√©s avanc√©es demande du temps et de l'apprentissage.\n* **D√©pendance aux plugins pour certaines sources de donn√©es:** L'int√©gration avec certaines sources de donn√©es peut n√©cessiter l'installation et la configuration de plugins sp√©cifiques.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "447992ea-077d-4520-a2ce-324d10237189",
        "title": "Harbor",
        "description": "---\nid: 98410515-bfb3-4709-982f-a9c8134b68d5\n---\n# Rapidement c'est quoi‚ùì\n\nHarbor est un registre de conteneurs [[Open-source]], s√©curis√© et de niveau entreprise,  qui √©tend les fonctionnalit√©s de base de [[Registry Docker]].  Il ajoute des fonctionnalit√©s de gestion d'acc√®s, de scan de vuln√©rabilit√©s et de gestion de cycle de vie des images.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nHarbor est une solution de registre de conteneurs qui s'appuie sur le registre Docker standard mais y ajoute des fonctionnalit√©s cruciales pour les d√©ploiements en production.  Il permet de stocker, g√©rer et s√©curiser les images de conteneurs.  Plus pr√©cis√©ment, il offre :\n\n* **Gestion d'acc√®s robuste:**  Contr√¥le d'acc√®s bas√© sur les r√¥les ([[Role Based Access Control (RBAC]]) pour une gestion fine des permissions sur les images, permettant de d√©finir des politiques d'acc√®s granulaires pour les diff√©rents utilisateurs et √©quipes.  L'int√©gration avec des syst√®mes d'authentification existants ([[LDAP]], [[Active Directory]]) est possible.\n\n* **Scan de vuln√©rabilit√©s:** Int√©gration avec des outils de scan de vuln√©rabilit√©s (comme [[Clair]]) pour analyser les images √† la recherche de failles de s√©curit√© connues avant leur d√©ploiement.  Cela permet de d√©tecter et de corriger les vuln√©rabilit√©s potentielles d√®s la phase de d√©veloppement.\n\n* **Gestion du cycle de vie des images:**  Harbor offre des fonctionnalit√©s pour g√©rer le cycle de vie complet des images, de leur cr√©ation √† leur suppression.  Ceci inclut la gestion des versions, la promotion d'images entre diff√©rents environnements (d√©veloppement, test, production), et la gestion des politiques de r√©tention.\n\n* **R√©plication:**  Possibilit√© de r√©pliquer les images de conteneurs vers d'autres registres Harbor, permettant la cr√©ation de registres miroirs pour la haute disponibilit√© et la r√©duction de la latence.\n\n* **Audit:**  Suivi complet des actions effectu√©es sur le registre, fournissant un historique auditable pour des raisons de conformit√© et de s√©curit√©.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **S√©curit√© renforc√©e:**  Le contr√¥le d'acc√®s fin et la fonctionnalit√© de scan de vuln√©rabilit√©s contribuent grandement √† la s√©curit√© des images de conteneurs.\n* **Gestion compl√®te du cycle de vie:**  Simplifie les op√©rations et am√©liore l'efficacit√© en centralisant la gestion des images.\n* **Open source et extensible:**  Permet une grande flexibilit√© et permet des int√©grations personnalis√©es.\n* **Haute disponibilit√© et r√©plication:**  Assure la fiabilit√© et la disponibilit√© du registre.\n* **Interface utilisateur intuitive:**  Facilite la gestion et le suivi des images.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:**  La configuration initiale peut √™tre complexe pour les utilisateurs novices.\n* **Ressources n√©cessaires:**  N√©cessite des ressources serveur pour fonctionner, ce qui peut √™tre un inconv√©nient pour les petites infrastructures.\n* **D√©pendances:**  D√©pend de plusieurs composants et outils, ce qui peut compliquer la maintenance et le d√©pannage.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "15291a12-30f8-4a45-9154-edc382fca715",
        "title": "Htmx",
        "description": "---\nid: 5d0f7309-8e45-4091-b0fe-c2d1f341b3a5\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nHTMX est une biblioth√®que qui permet d'√©viter d'√©crire du [[JavaScript]] pour g√©rer les interactions sur une page web, en utilisant uniquement des attributs HTML pour g√©rer des requ√™tes [[HTTP]] dynamiques.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nHTMX simplifie l'interactivit√© web en permettant de d√©finir des comportements de requ√™tes [[HTTP]] directement via des attributs `hx-` sur les balises HTML. Il permet de :\n\n- Effectuer des requ√™tes HTTP sans JavaScript (ex : `hx-get`, `hx-post`).\n- Traiter et manipuler les r√©ponses avant et apr√®s leur insertion dans le [[DOM]].\n- G√©rer des actions comme le rafra√Æchissement de parties sp√©cifiques d'une page sans recharger la page enti√®re.\n\nCela fonctionne sur n'importe quel serveur g√©n√©rant du HTML, comme ceux en [[Go]], [[Rust]], ou [[JTE]].\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplicit√©** : Remplace une grande partie de [[JavaScript]] pour des interactions simples avec des formulaires et des requ√™tes.\n- **Adapt√© aux petits projets** : Id√©al pour les applications [[backend]] simples sans n√©cessiter de frameworks [[JavaScript]] lourds.\n- **Moins de [[JavaScript]] √† maintenir** : La logique d'interaction est d√©finie dans le [[HTML]], ce qui simplifie la gestion du code.\n- **Compatibilit√© avec n'importe quel backend** : Fonctionne avec n'importe quel serveur g√©n√©rant du [[HTML]].\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Limit√© pour des interactions complexes** : D√®s qu'il y a des traitements complexes ou des manipulations de donn√©es avant l'envoi, HTMX devient difficile √† utiliser.\n- **D√©pendance au HTML** : N√©cessite que les endpoints retournent du HTML, ce qui peut ne pas √™tre adapt√© pour des applications plus modernes qui n√©cessitent du [[JSON]].\n- **Moins flexible que le [[JavaScript]] natif** : Certaines interactions complexes peuvent √™tre plus facilement r√©alis√©es avec JavaScript plut√¥t qu'avec HTMX.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "b40bc9b4-b756-4136-9af1-c2a7fff4d923",
        "title": "Http 103 Early Hints",
        "description": "---\nid: 5bae96ff-d0fa-4198-b12f-edab95488e95\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n[[HTTP]] 103 \"Early Hints\" est un code de statut HTTP qui permet d'indiquer au client, avant la r√©ponse finale du serveur, quelles ressources pr√©charger pour am√©liorer la vitesse de rendu de la page web.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe code HTTP 103 est envoy√© par le serveur avant la r√©ponse finale √† une requ√™te [[HTTP]]. Il informe le client des ressources √† pr√©charger (comme des fichiers [[CSS]], [[JavaScript]] ou des images). Cela permet au navigateur de commencer √† charger ces ressources pendant que le serveur g√©n√®re la r√©ponse principale, r√©duisant ainsi le temps n√©cessaire pour afficher la page.\n\nLe processus fonctionne ainsi :\n\n1. Le client envoie une requ√™te au serveur.\n2. Le serveur r√©pond avec un code 103 et une liste de ressources √† pr√©charger.\n3. Le client commence √† charger ces ressources imm√©diatement.\n4. Le serveur termine le traitement et envoie la page finale, qui peut √™tre affich√©e plus rapidement puisque les ressources ont d√©j√† √©t√© pr√©charg√©es.\n\nCe m√©canisme am√©liore le temps de chargement des pages, en particulier pour les sites avec beaucoup de ressources externes.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Am√©lioration du temps de chargement** : R√©duit de mani√®re significative le temps n√©cessaire pour afficher la page (environ 30% de gain).\n- **Simplicit√© de mise en ≈ìuvre** : Facile √† configurer avec des serveurs comme [[Caddy]] et [[Apache]], en particulier avec HTTP/2.\n- **Exp√©rience utilisateur am√©lior√©e** : Le contenu de la page se charge plus rapidement gr√¢ce au pr√©chargement des ressources.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Support limit√©** : Ne fonctionne pas avec [[HTTP/1]] et n'est pas support√© par [[Nginx]].\n- **Gestion des ressources** : La gestion des ressources √† pr√©charger peut √™tre d√©licate, il faut bien s'assurer qu'elles sont n√©cessaires et g√©r√©es correctement.\n- **D√©pendance au serveur et au client** : N√©cessite un serveur compatible et un client capable de g√©rer le code 103, ce qui limite son adoption imm√©diate.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "64dc974d-6ff7-4106-b3ef-ca7485f6ddec",
        "title": "Husky",
        "description": "---\nid: fe07726f-b2ce-4806-bbe0-a77bc3cd9da7\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nHusky est un outil permettant d'ajouter et de g√©rer des [[Git Hook]] (scripts ex√©cut√©s √† des moments cl√©s du cycle de vie d'un d√©p√¥t [[Git]], comme avant un commit) pour automatiser des t√¢ches comme des tests ou des v√©rifications de code.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nHusky simplifie l'int√©gration des [[Git Hook]] dans un projet [[JavaScript]]. En l'installant dans un projet, il cr√©e un r√©pertoire `.husky` qui contient les scripts des hooks (comme `pre-commit`, `pre-push`). Ces hooks permettent d'automatiser des processus, tels que :\n\n- Lancer des tests avant de valider un commit (`pre-commit`).\n- V√©rifier le format du code (`commit-msg`).\n- Bloquer un push si certaines conditions ne sont pas remplies (`pre-push`).\n\nHusky s'installe via npm et est facile √† configurer avec des commandes simples. Il permet aussi de d√©sactiver des hooks temporairement en ajoutant des arguments ou des variables d'environnement.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Automatisation facile** : Int√©gration simple des hooks Git dans les projets.\n- **Gestion des erreurs** : Permet d‚Äôemp√™cher des commits ou des pushs si des conditions ne sont pas remplies (tests √©chou√©s, mauvaise convention de commit, etc.).\n- **Souplesse** : Facile √† activer ou d√©sactiver via des variables d‚Äôenvironnement ou des arguments Git.\n- **Large compatibilit√©** : Fonctionne avec la plupart des projets [[Git]], quel que soit le framework ou l'outil utilis√©.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance au projet** : N√©cessite un environnement [[Node.js]] et l'installation via [[npm]] pour fonctionner.\n- **Peut ralentir le d√©veloppement** : Les hooks mal configur√©s ou trop nombreux peuvent freiner le d√©veloppement, surtout avec des v√©rifications de tests lourdes.\n- **Gestion des d√©sactivations** : Bien que possible, la d√©sactivation des hooks peut ne pas √™tre triviale dans certains contextes (par exemple dans [[CI/CD]]).\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "a28276a6-3156-4612-a0cf-64eb71fe9552",
        "title": "ImportMap (JS)",
        "description": "---\nid: 302b5d4b-497b-48db-b249-9fa80b82c068\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nUn ImportMap en [[JavaScript]] est un objet [[JSON]] qui permet de simplifier et g√©rer les imports dans une application en cr√©ant des alias pour les modules. Cela facilite la gestion des d√©pendances en permettant de d√©finir des chemins d'acc√®s personnalis√©s pour les imports.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn ImportMap est utilis√© pour d√©finir des correspondances entre les cl√©s d'import (les noms des modules) et leurs chemins r√©els (URLs ou fichiers locaux). Cela permet de contr√¥ler o√π un module est charg√©, simplifiant ainsi la gestion des d√©pendances dans un projet.\n\nExemple : au lieu d'importer directement un fichier via un long chemin, vous pouvez d√©finir un alias comme \"my-component\" dans l'ImportMap et l'utiliser ensuite dans les imports de vos modules.\n\n- **D√©ploiement [[Micros Frontends]]** : Changez dynamiquement les versions de vos composants sans modifier le code, en mettant √† jour uniquement l'ImportMap.\n- **Revue de code** : Permet de rediriger facilement les imports vers des versions sp√©cifiques pour tester des modifications en direct sans toucher au code source.\n\n```html\n<script type=\"importmap\">\n\t{\n\t\t\"imports\" : {\n\t\t\t\"my-component\": \"http://localhost:8080/src/my-component.js\"\n\t\t}\n\t}\n</script>\n\n<script type=\"module\">\n\timport { MyComponent } from \"my-component\"; // L'alias d√©fini dans l'ImportMap\n</script>\n```\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplification des imports** : Les alias permettent d'√©viter des chemins d'import longs et complexes.\n- **Flexibilit√©** : Possibilit√© de modifier les sources des modules sans toucher au code, utile pour le d√©ploiement de micro frontends et le rollback.\n- **Am√©lioration de la revue de code** : Permet de tester et valider rapidement des modifications dans des environnements sans modifier le code source.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Compatibilit√© limit√©e** : L'usage des ImportMaps est encore relativement nouveau et n'est pas pris en charge par tous les navigateurs (n√©cessite des fonctionnalit√©s modernes du navigateur).\n- **Gestion des versions** : Lors de l'utilisation avec des syst√®mes complexes, le suivi et la mise √† jour des versions des modules peuvent devenir difficiles si l'ImportMap n'est pas bien g√©r√©.\n- **Pas de support pour les outils de bundling** : L'ImportMap fonctionne c√¥t√© client mais ne remplace pas les outils de bundling comme [[Webpack]] pour une gestion avanc√©e des modules.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "56274708-5613-4cbd-9d09-78bd95f972b7",
        "title": "Incremental Static Regeneration (ISR)",
        "description": "---\nid: 29cf6b6a-38cb-4f64-9238-309f5dfb2bed\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nIncremental Static Regeneration (ISR) est une am√©lioration du processus de g√©n√©ration statique des pages ([[Server Side Generation (SSG)]]), permettant de mettre √† jour les pages statiques d√©j√† g√©n√©r√©es sans n√©cessiter une reconstruction compl√®te du site. ISR permet de r√©g√©n√©rer des pages statiques de mani√®re incr√©mentielle √† chaque requ√™te, tout en pr√©servant les performances.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nISR permet de g√©n√©rer des pages statiques de mani√®re classique, mais avec la possibilit√© de r√©g√©n√©rer et mettre √† jour ces pages √† la demande (en fonction du temps ou de l'action de l'utilisateur) sans recompiler l'ensemble du site. Cela permet une mise √† jour progressive du contenu sans impact sur la performance globale.\n\nLe processus fonctionne ainsi :\n\n1. Lorsqu'une page est demand√©e, elle est servie statiquement si elle a d√©j√† √©t√© g√©n√©r√©e.\n2. Si la page doit √™tre mise √† jour, le serveur la r√©g√©n√®re en arri√®re-plan tout en servant l'ancienne version.\n3. Une fois la r√©g√©n√©ration termin√©e, la nouvelle version est disponible pour les requ√™tes suivantes.\n\nCela est utile dans les cas o√π les pages doivent √™tre r√©guli√®rement mises √† jour mais sans sacrifier les avantages du contenu statique.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Performance rapide** : Le contenu statique est servi tr√®s rapidement sans travail c√¥t√© serveur.\n- **SEO optimis√©** : Le contenu est index√© par les moteurs de recherche comme du contenu statique, ce qui est id√©al pour le r√©f√©rencement.\n- **Mise √† jour incr√©mentielle** : Permet de mettre √† jour des pages sp√©cifiques sans recompilation compl√®te du site.\n- **Scalabilit√©** : Id√©al pour des sites avec beaucoup de pages ou du contenu qui change r√©guli√®rement.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Temps de compilation** : Le processus de g√©n√©ration initiale des pages peut √™tre long, surtout pour les grands sites.\n- **Non adapt√© au contenu dynamique** : Pas efficace pour les pages qui changent fr√©quemment ou qui n√©cessitent une interaction en temps r√©el.\n- **Complexit√© de gestion des mises √† jour** : Suivre quelles pages doivent √™tre r√©g√©n√©r√©es et quand peut devenir difficile √† g√©rer √† grande √©chelle.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "bedba0c6-f509-4e04-b2f4-feb4b460971d",
        "title": "Interface fonctionnelle",
        "description": "---\nid: 1dc25831-3209-4d96-aa65-41a3b48815c0\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nUne interface fonctionnelle en [[Java]] est une interface qui ne poss√®de qu'une seule m√©thode abstraite.  Elle sert principalement √† cr√©er des expressions lambda et des r√©f√©rences √† des m√©thodes.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nEn [[Java]], une interface est un type qui d√©finit un contrat pour les classes qui l'impl√©mentent.  Une interface fonctionnelle simplifie ce contrat en exigeant la d√©finition d'une seule m√©thode.  Cela permet d'utiliser des expressions lambda (une forme concise d'√©crire des objets impl√©mentant une interface fonctionnelle) et des r√©f√©rences de m√©thodes (une mani√®re compacte de passer une m√©thode existante comme argument).  L'annotation `@FunctionalInterface` est utilis√©e pour indiquer qu'une interface est con√ßue comme une interface fonctionnelle.  Si une interface annot√©e avec `@FunctionalInterface` d√©finit plus d'une m√©thode abstraite, une erreur de compilation se produira.  Cependant, elle peut contenir des m√©thodes de d√©faut (avec une impl√©mentation par d√©faut), des m√©thodes statiques, et des m√©thodes priv√©es.\n\n**Exemple:**\n\n```java\n@FunctionalInterface\ninterface Print {\n    void execute(String label);\n}\n\nclass UseCase {\n    Print print;\n\n    void printAll(List<String> labels) {\n        labels.forEach(label -> print.execute(label)); // Utilisation d'une expression lambda\n    }\n\n    public static void main(String[] args) {\n        UseCase useCase = new UseCase();\n        useCase.print = label -> System.out.println(\"Label: \" + label); // affectation d'une lambda expression √† print\n\n        List<String> labels = List.of(\"Label 1\", \"Label 2\", \"Label 3\");\n        useCase.printAll(labels);\n    }\n}\n```\n\nDans cet exemple, `Print` est une interface fonctionnelle avec une seule m√©thode abstraite `execute`.  La m√©thode `printAll` utilise une expression lambda `label -> System.out.println(\"Label: \" + label)` pour fournir une impl√©mentation de `Print` directement dans l'appel de `forEach`.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Concision du code:** Les expressions lambda rendent le code plus concis et plus lisible que les classes anonymes traditionnelles.\n* **Fonctionnalit√© expressive:**  Permet d'exprimer des concepts fonctionnels (comme le passage de fonctions comme arguments) de mani√®re √©l√©gante et naturelle en [[Java]].\n* **Am√©lioration de la lisibilit√©:** Le code utilisant les interfaces fonctionnelles est g√©n√©ralement plus facile √† lire et √† comprendre.\n* **Interop√©rabilit√©:**  Facilite l'utilisation de biblioth√®ques fonctionnelles et de concepts fonctionnels dans les applications [[Java]].\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle pour les d√©butants:**  La compr√©hension des concepts fonctionnels peut prendre du temps pour les programmeurs habitu√©s √† la programmation imp√©rative.\n* **D√©bogage:** Le d√©bogage des expressions lambda peut √™tre l√©g√®rement plus complexe qu'avec des m√©thodes classiques.  Le nom de la m√©thode √©tant implicite, l‚Äôidentification de la source d‚Äôun bug peut prendre plus de temps.\n* **Surutilisation potentielle:** Une surutilisation des interfaces fonctionnelles peut rendre le code moins lisible si les expressions lambda deviennent trop complexes ou si l'intention du code n'est pas claire.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "be6a1edb-d8a6-44c7-a730-c2b2b95faaa2",
        "title": "Certification Java 17 - Internationalisation et Localisation",
        "description": "---\nid: 2726c3d7-2090-4f23-99f6-b0b1ea5a3ff1\n---\nL‚Äô**internationalisation (i18n)** et la **localisation (l10n)** permettent d‚Äôadapter une application Java √† diff√©rentes langues et r√©gions.\n\n## **13.1. `Locale` : D√©finition de la langue et du pays**\n\n### **1. Cr√©ation d‚Äôun `Locale`**\n\n```java\nimport java.util.Locale;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        Locale fr = new Locale(\"fr\", \"FR\"); // Fran√ßais (France)\n        Locale us = new Locale(\"en\", \"US\"); // Anglais (√âtats-Unis)\n\n        System.out.println(fr.getDisplayLanguage()); // Fran√ßais\n        System.out.println(us.getDisplayCountry());  // United States\n    }\n}\n```\n\nüìå **`Locale(language, country)` : d√©finit une langue et un pays.**\n\n---\n\n### **2. `Locale.getDefault()` : D√©tecter la langue du syst√®me**\n\n```java\nLocale localeParDefaut = Locale.getDefault();\nSystem.out.println(localeParDefaut); // Ex : fr_FR ou en_US\n```\n\nüìå **On peut aussi changer la locale par d√©faut :**\n\n```java\nLocale.setDefault(new Locale(\"es\", \"ES\")); // Espagnol (Espagne)\n```\n\n---\n\n## **13.2. `ResourceBundle` : Chargement de textes multilingues**\n\nüìå **Les fichiers de ressources (`.properties`) permettent de stocker les traductions.**\n\n### **1. Cr√©ation des fichiers `messages.properties`**\n\nüìÇ **Structure du projet :**\n\n```\n/src\n  /messages_fr.properties\n  /messages_en.properties\n```\n\nüìÑ **messages_fr.properties**\n\n```\nsalutation=Bonjour !\n```\n\nüìÑ **messages_en.properties**\n\n```\nsalutation=Hello!\n```\n\n### **2. Chargement des ressources avec `ResourceBundle`**\n\n```java\nimport java.util.*;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        Locale locale = new Locale(\"fr\", \"FR\"); // Changez en \"en\", \"US\" pour tester\n        ResourceBundle bundle = ResourceBundle.getBundle(\"messages\", locale);\n\n        System.out.println(bundle.getString(\"salutation\")); // Affiche \"Bonjour !\" ou \"Hello!\"\n    }\n}\n```\n\nüìå **Le fichier correspondant √† la `Locale` est automatiquement s√©lectionn√©.**\n\n---\n\n## **13.3. Formatage des Dates, Nombres et Devises**\n\n### **1. `NumberFormat` : Formatage des nombres et devises**\n\n```java\nimport java.text.NumberFormat;\nimport java.util.Locale;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        double montant = 1234.56;\n\n        NumberFormat formatFr = NumberFormat.getCurrencyInstance(Locale.FRANCE);\n        NumberFormat formatUs = NumberFormat.getCurrencyInstance(Locale.US);\n\n        System.out.println(formatFr.format(montant)); // 1 234,56 ‚Ç¨\n        System.out.println(formatUs.format(montant)); // $1,234.56\n    }\n}\n```\n\nüìå **`getCurrencyInstance(Locale)` formate selon la devise locale.**\n\n---\n\n### **2. `DateTimeFormatter` : Formatage des dates**\n\n```java\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.now();\n\n        DateTimeFormatter formatterFr = DateTimeFormatter.ofPattern(\"EEEE dd MMMM yyyy\", Locale.FRANCE);\n        DateTimeFormatter formatterUs = DateTimeFormatter.ofPattern(\"EEEE, MMMM dd, yyyy\", Locale.US);\n\n        System.out.println(date.format(formatterFr)); // Ex : mercredi 06 mars 2025\n        System.out.println(date.format(formatterUs)); // Ex : Wednesday, March 06, 2025\n    }\n}\n```\n\nüìå **`ofPattern(\"EEEE dd MMMM yyyy\", Locale)` formate la date selon la langue.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **`Locale` : D√©finit la langue et le pays (`Locale(\"fr\", \"FR\")`).**  \n‚úÖ **`ResourceBundle` : Charge des fichiers `.properties` pour les traductions.**  \n‚úÖ **`NumberFormat` : Formate les nombres et devises selon la locale.**  \n‚úÖ **`DateTimeFormatter` : Affiche les dates dans le format localis√©.**"
    },
    {
        "id": "a6594301-4ed1-451d-b843-a3e8c5e95706",
        "title": "Jpa Specification",
        "description": "---\nid: ec614572-79e3-4b20-bd55-75d790f3a468\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **JPA Specifications** permettent de cr√©er des requ√™tes dynamiques en utilisant l'API **[[Criteria]]** de [[Spring Data ]]. Elles sont utiles pour filtrer ou rechercher des entit√©s en fonction de crit√®res variables et complexes sans avoir √† √©crire des requ√™tes [[SQL]] statiques.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLes JPA Specifications sont des interfaces permettant de d√©finir des crit√®res de recherche dynamiques avec **[[Spring Data JPA]]**. Elles utilisent l'API **[[Criteria]]** pour cr√©er des requ√™tes complexes, notamment des filtres dynamiques bas√©s sur des conditions `WHERE`. Les crit√®res sont repr√©sent√©s par des **Predicates**, qui combinent des conditions logiques et des expressions de filtrage.\n\nUne Specification est construite √† partir d'un `Predicate`, qui est une condition logique sur les donn√©es, comme un test d'√©galit√©, de comparaison ou une recherche de texte. Vous pouvez combiner plusieurs Specifications avec des m√©thodes comme `and()`, `or()`, et `not()` pour cr√©er des requ√™tes complexes.\n\nExemple de Specification :\n\n```java\npublic static Specification<User> firstNameLike(String firstName) {\n    return (root, criteriaQuery, criteriaBuilder) -> criteriaBuilder.like(root.get(\"firstName\"), \"%\" + firstName + \"%\");\n}\n```\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Flexibilit√©** : Cr√©er des requ√™tes dynamiques et personnalis√©es en fonction des besoins de l'utilisateur.\n- **R√©utilisabilit√©** : Les Specifications peuvent √™tre combin√©es et r√©utilis√©es dans diff√©rentes parties du projet.\n- **Lisibilit√©** : Permet de garder un code propre et lisible en √©vitant des requ√™tes [[SQL]] complexes int√©gr√©es directement dans le code.\n- **Int√©gration avec [[Spring Data JPA]]** : Facile √† utiliser avec des repositories Spring en √©tendant `JpaSpecificationExecutor`.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© des requ√™tes** : Lorsque les crit√®res deviennent trop complexes, la lecture et la compr√©hension des Specifications peuvent devenir difficiles.\n- **Performance** : Les requ√™tes g√©n√©r√©es peuvent √™tre lentes pour des bases de donn√©es volumineuses, n√©cessitant une surveillance attentive de la performance.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Base de donn√©e SQL]]"
    },
    {
        "id": "08fad616-b3cf-4f10-88ee-af456f64777e",
        "title": "Kibana",
        "description": "---\nid: d9182905-f3b8-4196-9a7a-a168a04da247\n---\n# Rapidement c'est quoi‚ùì\n\nKibana est une plateforme d'analyse et de visualisation de donn√©es open-source, principalement utilis√©e pour explorer et interagir avec des donn√©es index√©es par [[Elasticsearch]].  Elle permet de cr√©er des tableaux de bord, des graphiques et des visualisations interactives.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nKibana est une application web qui se connecte √† un cluster [[Elasticsearch]].  Elle utilise les donn√©es index√©es dans [[Elasticsearch]] pour g√©n√©rer des visualisations personnalis√©es.  Elle offre un large √©ventail de fonctionnalit√©s, notamment :\n\n* **Visualisation de donn√©es:** Cr√©ation de diff√©rents types de graphiques (barres, lignes, camemberts, cartes, etc.), de tableaux et d'autres repr√©sentations visuelles des donn√©es.  Ces visualisations peuvent √™tre interactives, permettant aux utilisateurs de filtrer, d'explorer et d'analyser les donn√©es de mani√®re dynamique.\n* **Exploration de donn√©es:**  Kibana permet une exploration ad-hoc des donn√©es via une interface intuitive de recherche et de filtrage.  L'utilisateur peut poser des questions aux donn√©es et obtenir des r√©ponses instantan√©ment gr√¢ce √† des requ√™tes [[Elasticsearch]].\n* **Cr√©ation de tableaux de bord:**  Agr√©gation de plusieurs visualisations en un seul tableau de bord personnalisable, offrant une vue d'ensemble des donn√©es importantes.  Ces tableaux de bord peuvent √™tre partag√©s avec d'autres utilisateurs.\n* **Monitoring:**  Surveillance des performances d'[[Elasticsearch]] et des applications qui s'y connectent.\n* **Alerting:**  Mise en place de notifications bas√©es sur des conditions sp√©cifiques d√©finies sur les donn√©es.\n* **Machine Learning:**  Int√©gration avec les capacit√©s de machine learning d'[[Elasticsearch]] pour la d√©tection d'anomalies et la pr√©diction.\n* **Gestion des utilisateurs et des r√¥les:**  Contr√¥le d'acc√®s aux donn√©es et aux fonctionnalit√©s de Kibana.\n\nKibana est con√ßu pour √™tre flexible et extensible, permettant aux utilisateurs de cr√©er des visualisations personnalis√©es et d'int√©grer des donn√©es provenant de diff√©rentes sources.  Son interface utilisateur est intuitive et conviviale, facilitant l'analyse de donn√©es m√™me pour des utilisateurs sans expertise technique approfondie.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Interface utilisateur intuitive et conviviale:**  Facile √† apprendre et √† utiliser, m√™me pour les utilisateurs moins exp√©riment√©s.\n* **Large vari√©t√© de visualisations:**  Offre un large choix de graphiques et de tableaux pour repr√©senter les donn√©es de mani√®re efficace.\n* **Flexibilit√© et extensibilit√©:**  Permet de cr√©er des visualisations personnalis√©es et de s'int√©grer √† d'autres syst√®mes.\n* **[[Open-source]]:**  Gratuit et accessible √† tous.\n* **Int√©gration avec [[Elasticsearch]]:**  Synergie parfaite avec [[Elasticsearch]] pour une exploration et une visualisation des donn√©es optimis√©es.\n* **Fonctionnalit√©s avanc√©es:**  Offre des fonctionnalit√©s puissantes comme l'alerte, le monitoring et le machine learning.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Performances pour de tr√®s gros volumes de donn√©es:**  Peut devenir lent avec des ensembles de donn√©es extr√™mement volumineux.  Une optimisation de l'indexation et de la requ√™te Elasticsearch est alors n√©cessaire.\n* **Courbe d'apprentissage pour les fonctionnalit√©s avanc√©es:**  Certaines fonctionnalit√©s plus techniques (comme le scripting ou les requ√™tes complexes) peuvent n√©cessiter une expertise plus pouss√©e.\n* **D√©pendance √† [[Elasticsearch]]:**  N√©cessite un cluster [[Elasticsearch]] fonctionnel pour fonctionner.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "5ffac79c-2a16-420e-a848-17e8e04395ba",
        "title": "Logstash",
        "description": "---\nid: 6dd4b62f-dfea-48d8-bc6d-31eb62dd914d\n---\n# Rapidement c'est quoi‚ùì\n\nLogstash est un outil open source de traitement de donn√©es en temps r√©el. Il collecte, traite et exp√©die des donn√©es provenant de diverses sources.  On parle d'[[ETL]] (Extraction, Transformation, Loading).\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLogstash est une application √©crite en [[Ruby]], con√ßue pour collecter des donn√©es de multiples sources (logs, bases de donn√©es, applications, etc.), les transformer selon des r√®gles d√©finies par l'utilisateur (filtrage, enrichissement, agr√©gation, etc.) et les envoyer vers des destinations vari√©es (bases de donn√©es, syst√®mes de stockage cloud, syst√®mes de visualisation de donn√©es, etc.).  Il fonctionne comme un pipeline modulaire, o√π chaque √©tape est d√©finie par un plugin.  Ces plugins permettent une grande flexibilit√© et une int√©gration avec un vaste √©cosyst√®me d'outils.  \n\nLe processus se d√©compose en trois phases :\n\n* **Extraction (Input):**  Logstash r√©cup√®re les donn√©es depuis les sources d√©finies.  Les plugins d'entr√©e sont nombreux et permettent de se connecter √† des sources vari√©es (filesystems, r√©seaux, bases de donn√©es, APIs, etc.).\n\n* **Transformation (Filter):**  Logstash manipule les donn√©es.  Les plugins de filtres permettent de r√©aliser des op√©rations telles que le parsing de logs, la modification de champs, l'ajout de nouveaux champs bas√©s sur des calculs, la suppression de donn√©es sensibles, etc.  Ces transformations sont d√©finies via des configurations en langage [[JSON]].\n\n* **Chargement (Output):**  Logstash envoie les donn√©es transform√©es vers les destinations sp√©cifi√©es.  Les plugins de sortie permettent d'envoyer les donn√©es vers [[Elasticsearch]], des [[Base de donn√©e]], des filesystems, des messageries ([[Apache Kafka]], [[RabbitMQ]]), etc.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Flexibilit√© et extensibilit√©:** Gr√¢ce √† son architecture modulaire bas√©e sur les plugins, Logstash s'adapte facilement √† de nombreux cas d'utilisation et s'int√®gre √† une large vari√©t√© d'outils.\n* **Open source:**  Gratuit et accessible √† tous, avec une large communaut√© contribuant √† son d√©veloppement et √† son support.\n* **Traitement en temps r√©el:**  Permet de traiter les donn√©es au fur et √† mesure de leur arriv√©e, ce qui est crucial pour certaines applications.\n* **Configuration d√©clarative:**  La configuration se fait via des fichiers JSON, facilitant la gestion et le partage des configurations.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La configuration peut devenir complexe pour des pipelines sophistiqu√©s, n√©cessitant une bonne compr√©hension de son fonctionnement et des plugins utilis√©s.\n* **Performances:**  Pour des volumes de donn√©es tr√®s importants, les performances de Logstash peuvent √™tre un point de blocage, n√©cessitant l'optimisation de la configuration et potentiellement l'utilisation de solutions plus performantes.\n* **D√©pendance √† Ruby:**  Bien que performant, [[Ruby]] peut √™tre un frein pour certains d√©veloppeurs.\n* **Maintenance et mises √† jour:**  Comme tout logiciel, Logstash n√©cessite une maintenance r√©guli√®re et la prise en compte des mises √† jour de s√©curit√©.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "e7d73c5a-a571-452f-af78-02a88e191259",
        "title": "Micrometer",
        "description": "---\nid: cab051d2-e62d-413b-acab-5c1c7aefa9de\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Micrometer** est une biblioth√®que [[Java]] qui permet de collecter et exporter des m√©triques de performance d'applications vers diff√©rents syst√®mes de monitoring tels que [[Prometheus]], [[Graphite]], [[Datadog]], et [[InfluxDB]]. Elle est souvent utilis√©e avec [[Spring Boot]].\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nMicrometer fournit une API unifi√©e pour int√©grer des m√©triques dans vos applications [[Java]]. Elle supporte plusieurs types de m√©triques, telles que les compteurs, jauges, histogrammes et timers. Ces m√©triques peuvent √™tre envoy√©es vers des syst√®mes de monitoring via des `exporters`.\n\n**Types de m√©triques :**\n\n- **Compteurs** : Compte des √©v√©nements (ex : nombre de requ√™tes HTTP).\n- **Jauges** : Mesure un √©tat variable (ex : taille d‚Äôun cache).\n- **Histogrammes** : Collecte des donn√©es statistiques (ex : latence des requ√™tes).\n- **Timers** : Mesure la dur√©e d‚Äôun √©v√©nement (ex : temps de r√©ponse d‚Äôune requ√™te HTTP).\n\n**Tags** : Vous pouvez ajouter des √©tiquettes (tags) aux m√©triques pour les diff√©rencier par exemple par type de requ√™tes ou r√©gion g√©ographique.\n\nAvec [[Spring Boot]], Micrometer s'int√®gre facilement via le module **[[Spring Boot Actuator]]**, et expose les m√©triques via des endpoints comme `/actuator/prometheus`.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Int√©gration facile avec [[Spring Boot]]** : Micrometer fonctionne bien avec [[Spring Boot]], surtout avec [[Spring Boot Actuator]].\n- **Support multiple pour les syst√®mes de monitoring** : Vous pouvez exporter les m√©triques vers de nombreux backends comme [[Prometheus]], [[Datadog]], [[Graphite]], etc.\n- **Flexibilit√© avec les tags** : Les tags permettent de filtrer et analyser les m√©triques selon plusieurs crit√®res (ex : type de requ√™tes, zones g√©ographiques).\n- **Types de m√©triques vari√©s** : Compteurs, jauges, histogrammes et timers couvrent tous les besoins courants de collecte de m√©triques.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© avec des configurations avanc√©es** : Pour des cas complexes de m√©triques personnalis√©es ou des syst√®mes de monitoring moins communs, la configuration peut devenir d√©licate.\n- **D√©pendance √† des backends externes** : La collecte et l'exportation des m√©triques n√©cessitent une configuration des syst√®mes de monitoring externes.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "fefe5553-dc94-4de2-9dd2-0288dca655c3",
        "title": "Mobile First",
        "description": "---\nid: d7eada46-6aee-42e1-8e29-8aaf4ff9526f\n---\n# Rapidement c'est quoi‚ùì\n\nUne m√©thode de conception web consistant √† prioriser l'exp√©rience utilisateur sur les petits √©crans (mobiles) avant de l'adapter aux plus grands (tablettes, ordinateurs).\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe principe \"mobile-first\" est une approche de d√©veloppement web qui place l'exp√©rience utilisateur mobile au c≈ìur du processus de conception.  Au lieu de concevoir d'abord pour les ordinateurs de bureau et ensuite de r√©duire l'interface pour les mobiles (approche \"desktop-first\"), le mobile-first commence par cr√©er une version optimis√©e pour les petits √©crans.  Cette version inclut uniquement les √©l√©ments essentiels et les fonctionnalit√©s cl√©s.  Ensuite, on ajoute progressivement des fonctionnalit√©s et du contenu pour les √©crans plus grands (tablettes et ordinateurs), en utilisant des requ√™tes [[CSS]] media pour adapter l'affichage.  L'objectif est de garantir que le site web fonctionne correctement et offre une bonne exp√©rience utilisateur, m√™me sur des appareils avec des ressources limit√©es (bande passante, puissance de calcul). Cela implique de prioriser la vitesse de chargement, la lisibilit√© et la simplicit√© de navigation sur mobile.  L'adaptation pour les √©crans plus grands se fait ensuite par ajout de contenu, d'√©l√©ments visuels, et d'une meilleure organisation de l'information, plut√¥t que par une simple mise √† l'√©chelle.  Cette approche am√©liore l'accessibilit√© et l'exp√©rience utilisateur sur tous les appareils.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Exp√©rience utilisateur optimis√©e sur mobile:**  Priorise l'exp√©rience sur les appareils les plus utilis√©s aujourd'hui.\n* **Vitesse de chargement plus rapide:**  Version all√©g√©e initialement con√ßue pour les appareils avec une bande passante limit√©e.\n* **Meilleure accessibilit√©:**  Conception plus simple et plus intuitive, facilitant la navigation pour tous les utilisateurs.\n* **Maintenance simplifi√©e:**  Un code plus propre et plus organis√©, facilitant les mises √† jour et les corrections de bogues.\n* **Adaptabilit√© et flexibilit√©:**  La conception r√©pond naturellement aux diff√©rentes tailles d'√©cran.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Potentiellement plus de travail initial:** Bien que simplifiant la maintenance √† long terme, la conception initiale peut n√©cessiter une r√©flexion plus approfondie pour adapter le contenu aux diff√©rents niveaux d'affichage.\n* **N√©cessite une bonne ma√Ætrise du [[CSS]]:** L'utilisation efficace des requ√™tes media est indispensable pour une bonne adaptation.\n* **Peut √™tre moins intuitif pour les d√©veloppeurs habitu√©s √† la m√©thode \"desktop-first\".**  Un changement de paradigme est n√©cessaire.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "27b397ff-ecad-4089-bd0d-8b2ff8680213",
        "title": "Mol√©cule",
        "description": "---\nid: bf25037e-5dd1-4369-a7aa-d581e9371615\n---\n# Rapidement c'est quoi‚ùì\n\nMol√©cule est un outil [[Python]] qui utilise [[Ansible]] et [[Testinfra]] pour tester l'infrastructure en provisionnant des environnements avec [[Docker]].  Il permet de r√©aliser des [[Test d'int√©gration]] plus rapidement qu'avec des [[VM]].\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nMol√©cule est un framework de [[Test d'infrastructure]] bas√© sur [[Python]]. Il permet de d√©finir, provisionner et tester des environnements d'infrastructure de mani√®re automatis√©e. Il s'appuie sur [[Ansible]] pour la configuration et le d√©ploiement de l'infrastructure, et sur [[Testinfra]] pour la validation et la v√©rification de l'√©tat de l'infrastructure apr√®s d√©ploiement.  L'utilisation de [[Docker]] permet de cr√©er et de d√©truire rapidement des environnements de test, acc√©l√©rant ainsi le cycle de d√©veloppement et de test.  Le principe est de d√©finir la configuration de l'infrastructure souhait√© dans un fichier de configuration (g√©n√©ralement YAML), puis Mol√©cule se charge de la cr√©ation de l'environnement [[Docker]], du d√©ploiement via [[Ansible]] et enfin de l'ex√©cution des tests [[Testinfra]] pour v√©rifier que l'infrastructure d√©ploy√©e correspond √† la configuration attendue.  Ce processus permet de tester l'infrastructure de mani√®re reproductible et fiable.\n\nCet outil rend possible le [[Test Driven Developpement (TDD)]] sur de l'[[Infra as Code (IaC]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Rapidit√©:** L'utilisation de [[Docker]] permet un provisionnement et un nettoyage rapides des environnements de test, comparativement √† l'utilisation de machines virtuelles.\n* **Reproductibilit√©:** Les tests sont ex√©cut√©s dans un environnement contr√¥l√© et reproductible, garantissant la coh√©rence des r√©sultats.\n* **Int√©gration avec [[Ansible]] et [[Testinfra]]:** Mol√©cule tire parti de la puissance d'[[Ansible]] pour le d√©ploiement et de [[Testinfra]] pour la v√©rification de l'√©tat de l'infrastructure, cr√©ant une synergie efficace.\n* **Automatisation:** L'ensemble du processus de test est automatis√©, r√©duisant le temps et l'effort manuel n√©cessaires.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Diff√©rences entre conteneurs et machines virtuelles:** Les conteneurs [[Docker]] ne reproduisent pas parfaitement l'environnement d'une machine virtuelle.  Certaines particularit√©s de fonctionnement peuvent entra√Æner des diff√©rences de comportement et des √©checs de test, n√©cessitant une adaptation des tests et des configurations.\n* **Mocking des services externes:**  Le mocking de services externes peut √™tre complexe et n√©cessiter des solutions sp√©cifiques, selon la d√©pendance du syst√®me test√©.\n* **Courbe d'apprentissage:**  La ma√Ætrise d'[[Ansible]] et de [[Testinfra]] est n√©cessaire pour utiliser efficacement Mol√©cule.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]][[MOC_Testing]]"
    },
    {
        "id": "ca07ae2e-28ac-4040-b12c-3318f0c63df4",
        "title": "Nitro",
        "description": "---\nid: 87c37a5c-546e-4b54-a1f1-db9d7e9b3d00\n---\n# Rapidement c'est quoi‚ùì\n\nNitro est le moteur [[HTTP]] de [[Nuxt.js]] 3, permettant un rendu [[Server Side Rendering (SSR)]] performant et la [[Server Side Generation (SSG)]] de sites web.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nNitro est le runtime de [[Nuxt.js]] 3, un framework [[Vue.js]].  Il remplace le pr√©c√©dent syst√®me bas√© sur [[koa.js]] et offre des am√©liorations significatives en termes de performance et de flexibilit√©.  Son c≈ìur de m√©tier est la gestion des requ√™tes [[HTTP]], permettant √† Nuxt de servir des pages web dynamiques ou pr√©-rendues.  Il g√®re :\n\n* **[[Server Side Rendering (SSR)]]:**  Le code [[Vue.js]] est ex√©cut√© sur le serveur, et le [[HTML]] r√©sultant est envoy√© au navigateur.  Cela permet un meilleur r√©f√©rencement [[SEO]] et une exp√©rience utilisateur plus rapide dans certains cas.\n* **[[Server Side Generation (SSG)]]:**  Nitro permet de g√©n√©rer des pages HTML statiques au moment du build, optimisant le temps de chargement et la performance.  Id√©al pour des sites web √† contenu statique ou peu variable.\n* **API routes:**  Permet de cr√©er facilement des API [[RESTful]].\n* **Int√©gration avec des services [[Function as a Service (FaaS)]]:**  Nitro peut d√©ployer vos applications sur des plateformes serverless comme [[AWS Lambda]], [[Netlify Functions]], etc.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance:** Nitro est significativement plus rapide que le moteur [[HTTP]] de Nuxt 2.\n* **Flexibilit√©:**  Il offre une grande vari√©t√© d'options de d√©ploiement et de configuration.\n* **Int√©gration Serverless:** Simplifie le d√©ploiement sur des plateformes cloud sans serveur.\n* **Maintenance et Am√©lioration:** √âtant le moteur de la nouvelle version de Nuxt, il b√©n√©ficie d'une maintenance active et d'am√©liorations r√©guli√®res.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  Pour les d√©veloppeurs habitu√©s √† Nuxt 2, l'adaptation √† Nitro peut n√©cessiter un certain temps d'apprentissage.\n* **Complexit√©:**  La configuration de Nitro peut √™tre complexe pour des applications tr√®s vastes et complexes.\n* **D√©pendances:**  La bonne performance de Nitro d√©pend fortement de la configuration et des optimisations mises en place.  Une mauvaise configuration peut d√©grader les performances.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]][[MOC_DevSecOps]]"
    },
    {
        "id": "c0d70da5-2d60-4fd4-8d80-22d7bbc471db",
        "title": "Open Feature",
        "description": "---\nid: ac13e1c4-96e2-4632-b280-c159bdad84c8\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nOpenFeature est un framework qui permet de g√©rer de mani√®re centralis√©e l‚Äôutilisation de [[Feature Flag]] dans une application. Il offre une abstraction qui permet de d√©finir des r√®gles pour activer ou d√©sactiver des fonctionnalit√©s en fonction de crit√®res d√©finis.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOpenFeature permet d‚Äôint√©grer des [[Feature Flag]] dans des applications pour activer ou d√©sactiver certaines fonctionnalit√©s √† la vol√©e. Cela permet de tester des nouvelles fonctionnalit√©s sans modifier le code ou d√©ployer une nouvelle version.\n\n- Il supporte l'utilisation de _providers_, tels que [[Flagd]], pour g√©rer les √©tats des [[Feature Flag]].\n- Chaque [[Feature Flag]] peut avoir plusieurs variantes (par exemple, activer une fonctionnalit√© √† 20% des utilisateurs).\n- Avec un provider comme [[Flagd]], la configuration des [[Feature Flag]] peut √™tre d√©finie dans un fichier [[JSON]].\n- L'int√©gration avec des frameworks comme [[Spring Boot]] permet de conditionner des comportements selon l‚Äô√©tat d‚Äôun [[Feature Flag]] dans le code, offrant ainsi un contr√¥le granulaire sur les fonctionnalit√©s activ√©es.\n\nUn exemple d‚Äôutilisation est de configurer un flag pour activer un message de bienvenue uniquement pour certains utilisateurs.\n\n# Qu'est ce qui est top ? üëç\n\n- **Abstraction simple** : OpenFeature fournit une abstraction standard pour g√©rer les [[Feature Flag]], ce qui permet de les int√©grer facilement dans diff√©rentes applications sans d√©pendre d‚Äôune impl√©mentation sp√©cifique.\n- **Flexibilit√©** : Il permet de tester des fonctionnalit√©s en production sans risque, en activant des flags pour une fraction des utilisateurs.\n- **Int√©gration fluide avec [[Spring Boot]]** : OpenFeature peut √™tre facilement int√©gr√© avec des frameworks populaires comme [[Spring Boot]] pour g√©rer dynamiquement l‚Äôactivation des fonctionnalit√©s via des flags.\n- **Support des providers multiples** : OpenFeature peut se connecter √† diff√©rents _providers_ comme [[Flagd]], offrant ainsi un large √©ventail d‚Äôoptions pour g√©rer les [[Feature Flag]].\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **N√©cessit√© d'un provider** : Pour une utilisation compl√®te, il est n√©cessaire de configurer un provider externe (comme [[Flagd]]), ce qui peut √™tre un surco√ªt de gestion pour de petites applications.\n- **Configuration suppl√©mentaire** : La configuration des [[Feature Flag]] et de leur provider n√©cessite une gestion suppl√©mentaire, notamment au niveau de l‚Äôenvironnement (ex. fichiers JSON et lancement de services).\n- **Complexit√© pour les petites applications** : Pour des projets simples, l‚Äôint√©gration d‚ÄôOpenFeature avec un provider externe peut ajouter une complexit√© inutile par rapport √† une gestion manuelle des [[Feature Flag]].\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "b32b473f-a83e-4228-b69a-812ac8669528",
        "title": "Open Service Gateway initiative (OSGi)",
        "description": "---\nid: 0fa947ed-276d-411b-9b71-cc251c56f62d\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**OSGi (Open Service Gateway Initiative)** est un framework [[Java]] qui permet de cr√©er des applications modulaires, o√π des composants appel√©s **bundles** peuvent √™tre install√©s, mis √† jour ou supprim√©s dynamiquement sans red√©marrer l'application.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOSGi facilite la cr√©ation d'applications modulaires en permettant aux composants de s'ajouter, se mettre √† jour ou se retirer √† la vol√©e. Les applications sont constitu√©es de **bundles** (fichiers JAR) qui exposent des **services**. Ces services peuvent √™tre consomm√©s par d'autres bundles de mani√®re dynamique gr√¢ce √† un syst√®me de gestion des d√©pendances et de la d√©couverte de services.\n\n**Principaux concepts :**\n\n- **Bundle** : Un module autonome contenant des services, souvent sous forme de JAR.\n- **Service** : Fonctionnalit√© offerte par un bundle, accessible √† d'autres bundles.\n- **Framework OSGi** : G√®re l'installation, la mise √† jour, la suppression et la r√©solution des d√©pendances des bundles.\n\nLes bundles peuvent interagir dynamiquement via des **r√©f√©rences de services**, permettant une communication fluide sans d√©pendances statiques.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Modularit√©** : Permet de structurer des applications complexes en modules autonomes.\n- **Dynamisme** : Ajout, mise √† jour ou retrait de modules sans interruption du service global.\n- **Flexibilit√©** : La communication entre les bundles via des services est dynamique et d√©coupl√©e.\n- **Gestion des d√©pendances** : OSGi r√©sout automatiquement les d√©pendances entre les modules.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√©** : La configuration et gestion de l'OSGi peut devenir complexe, surtout dans les applications tr√®s grandes ou avec de multiples d√©pendances.\n- **Performance** : L'overhead de gestion dynamique des bundles peut affecter les performances dans des syst√®mes tr√®s sollicit√©s.\n- **√âcosyst√®me limit√©** : Moins d'adoption dans l'√©cosyst√®me [[Java]] moderne compar√© √† d'autres solutions comme les conteneurs ou les [[Micros services]].\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "2bc77698-0a7d-453d-9044-0f6a151c7a02",
        "title": "OpenAPI",
        "description": "---\nid: d256da53-27ac-4a9e-a46c-98cea1cd5d5c\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nOpenAPI est une sp√©cification standardis√©e qui permet de d√©crire les interfaces d'API de mani√®re structur√©e, g√©n√©ralement en format YAML ou JSON. Elle permet de documenter, interagir et g√©n√©rer du code pour une API de fa√ßon automatis√©e.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOpenAPI est une sp√©cification qui standardise la description des API REST. Elle permet de d√©finir de mani√®re pr√©cise les routes, les param√®tres d'entr√©e, les types de r√©ponse, et d'autres aspects d'une API, tout en facilitant l'automatisation du d√©veloppement et de la documentation.\n\n- **Swagger vs OpenAPI** : Swagger √©tait le nom original de la sp√©cification avant son acquisition par SmartBear, qui a transf√©r√© la gestion de la sp√©cification √† l'OpenAPI Initiative. Swagger est d√©sormais utilis√© pour les outils li√©s √† cette sp√©cification.\n- **Documentation API** : La sp√©cification d√©crit les endpoints d'une API, leur m√©thode (GET, POST, etc.), les param√®tres attendus et les r√©ponses, avec des exemples et des codes de statut.\n- **G√©n√©ration de code** : En utilisant la sp√©cification OpenAPI, des outils peuvent g√©n√©rer automatiquement des clients API, des serveurs, ou des SDKs dans diff√©rents langages.\n- **Exemple** : Un fichier YAML peut d√©crire un endpoint API comme `/users`, les param√®tres qu'il accepte, et la structure de la r√©ponse (par exemple, une liste d'utilisateurs au format JSON).\n\n# Qu'est ce qui est top ? üëç\n\n- **Standardisation** : OpenAPI offre un format standard qui est largement adopt√©, ce qui simplifie l‚Äôinterop√©rabilit√© entre syst√®mes.\n- **G√©n√©ration automatique** : Outils comme Swagger peuvent g√©n√©rer automatiquement des clients et serveurs √† partir de la sp√©cification, r√©duisant le besoin de coder manuellement.\n- **Documentation interactive** : Gr√¢ce √† des outils comme Swagger UI, la documentation devient interactive, permettant aux d√©veloppeurs de tester directement les API via une interface web.\n- **Support √©tendu** : OpenAPI est bien support√© par de nombreux outils et langages, ce qui permet de l‚Äôint√©grer facilement dans des projets existants.\n- **Validation et autocompl√©tion** : Les outils peuvent valider les requ√™tes envoy√©es √† l‚ÄôAPI et offrir de l‚Äôautocompl√©tion dans les IDE pour simplifier le d√©veloppement.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© pour les petites API** : Pour de simples API, l'utilisation d'OpenAPI peut sembler un peu trop lourde, avec la n√©cessit√© de maintenir un fichier de sp√©cification.\n- **Peu adapt√© aux APIs non-REST** : Bien que l'OpenAPI soit con√ßu pour les API REST, il n‚Äôest pas aussi adapt√© pour d'autres architectures d‚ÄôAPI, comme GraphQL.\n- **N√©cessite un bon maintien de la sp√©cification** : Pour que la sp√©cification OpenAPI soit r√©ellement utile, elle doit √™tre mise √† jour √† chaque modification de l'API, ce qui demande une discipline de maintenance continue.\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "6ed60fdf-ad49-47cb-9abd-f529c1b03e76",
        "title": "OpenFaas",
        "description": "---\nid: 6e46487a-240e-46da-8086-578df2c86d75\n---\n# Rapidement c'est quoi‚ùì\n\nOpenFaaS est une plateforme serverless open source permettant de d√©ployer et g√©rer des fonctions sans serveur ([[Function as a Service (FaaS)]]). Elle est con√ßue pour la production et int√®gre des outils de monitoring.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOpenFaaS est une plateforme de fonctions-as-a-service ([[Function as a Service (FaaS)]]) open source qui simplifie le d√©ploiement et la gestion de [[Micros services]] encapsul√©s sous forme de fonctions.  Elle utilise des conteneurs [[Docker]] pour encapsuler chaque fonction, ce qui permet une isolation et une portabilit√© √©lev√©es. OpenFaaS fournit une interface utilisateur et une API pour g√©rer le cycle de vie complet des fonctions : d√©ploiement, mise √† jour, scaling et monitoring.  Elle supporte plusieurs langages de programmation ([[Go]], [[Node.js]], [[Python]], etc.) sous la forme de template et offre une int√©gration avec des outils d'orchestration de conteneurs comme [[Kubernetes]].  Le monitoring int√©gr√© permet de surveiller les performances et l'√©tat de sant√© des fonctions d√©ploy√©es, fournissant des m√©triques cruciales pour la gestion et le d√©bogage.  La plateforme est con√ßue pour la production,  garantissant une haute disponibilit√© et une scalabilit√©.  Le \"lourd\" mentionn√© initialement se r√©f√®re probablement √† la complexit√© de la plateforme par rapport √† des solutions plus l√©g√®res, mais cette complexit√© est compens√©e par ses fonctionnalit√©s avanc√©es et sa robustesse pour les environnements de production.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open Source et communautaire:**  B√©n√©ficie d'une communaut√© active et d'un code source librement accessible, favorisant la transparence et la collaboration.\n* **Production-ready:**  Con√ßu pour des environnements de production exigeants, avec une forte attention port√©e √† la stabilit√© et √† la scalabilit√©.\n* **Int√©gration avec [[Kubernetes]]:**  Permet un d√©ploiement facile et une gestion efficace des fonctions dans des clusters Kubernetes.\n* **Monitoring int√©gr√©:**  Fournit des outils de monitoring complets pour surveiller les performances et l'√©tat de sant√© des fonctions.\n* **Support de multiples langages:**  Permet d'utiliser le langage de programmation le plus adapt√© √† chaque fonction.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La configuration et la gestion d'OpenFaaS peuvent √™tre plus complexes que des solutions FaaS plus simplifi√©es.  La courbe d'apprentissage est plus raide.\n* **Ressources:**  N√©cessite des ressources plus importantes que les solutions plus l√©g√®res, surtout pour les environnements √† forte charge.\n* **Monitoring int√©gr√©** : Il peut ne pas √™tre √©vident de brancher OpenFaaS √† son propre syst√®me de monitoring\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]][[MOC_DevSecOps]]\n\n"
    },
    {
        "id": "e09a057d-c675-4911-9715-4d9703cdac1c",
        "title": "Certification Java 17 - Packages et Modules",
        "description": "---\nid: cb5d98b8-992b-410a-94cd-54c70b45c82a\n---\n## **3.1. Organisation des classes en packages**\n\nEn Java, un **package** est un regroupement logique de classes permettant d‚Äôorganiser le code et d'√©viter les conflits de noms.\n\n### **D√©claration d‚Äôun package**\n\nChaque classe Java peut appartenir √† un package d√©fini en haut du fichier source :\n\n```java\npackage com.exemple.util;\n\npublic class Outil {\n    public static void afficherMessage() {\n        System.out.println(\"Message d'un outil\");\n    }\n}\n```\n\nüìå **Le package doit correspondre √† l‚Äôarborescence des fichiers :**  \nüìÇ `com/exemple/util/Outil.java`\n\n### **Utilisation d‚Äôun package (`import`)**\n\nDans une autre classe, on importe la classe `Outil` :\n\n```java\nimport com.exemple.util.Outil;\n\npublic class Main {\n    public static void main(String[] args) {\n        Outil.afficherMessage();\n    }\n}\n```\n\nüìå **Sans `import`**, on doit utiliser le nom complet :\n\n```java\ncom.exemple.util.Outil.afficherMessage();\n```\n\n### **Types d‚Äôacc√®s dans un package**\n\n|Modificateur|M√™me classe|M√™me package|H√©ritage|Autres classes|\n|---|---|---|---|---|\n|`public`|‚úÖ|‚úÖ|‚úÖ|‚úÖ|\n|_(default)_|‚úÖ|‚úÖ|‚ùå|‚ùå|\n|`protected`|‚úÖ|‚úÖ|‚úÖ|‚ùå|\n|`private`|‚úÖ|‚ùå|‚ùå|‚ùå|\n\nüìå **Les classes d‚Äôun m√™me package ont acc√®s aux membres `default` et `protected`.**\n\n---\n\n## **3.2. Java Platform Module System (JPMS)** _(Depuis Java 9)_\n\nJPMS permet d‚Äôorganiser le code en **modules** pour am√©liorer la maintenance et la s√©curit√©.\n\n### **Qu‚Äôest-ce qu‚Äôun module ?**\n\nUn module est un **groupe de packages** d√©clar√©s dans un fichier sp√©cial `module-info.java`.\n\nüìÇ **Structure d‚Äôun projet modulaire :**\n\n```\n/mon-projet\n  /src\n    /com.exemple.util\n      Outil.java\n    /com.exemple.app\n      Main.java\n    module-info.java\n```\n\n---\n\n## **3.3. D√©finition d‚Äôun module**\n\nChaque module a un fichier `module-info.java` d√©finissant ses **d√©pendances** et les packages qu‚Äôil expose.\n\n### **Cr√©er un module `com.exemple.util`**\n\nüìÑ `module-info.java`\n\n```java\nmodule com.exemple.util {\n    exports com.exemple.util;  // Exporte le package pour qu‚Äôil soit utilisable ailleurs\n}\n```\n\nüìÑ `Outil.java`\n\n```java\npackage com.exemple.util;\n\npublic class Outil {\n    public static void afficherMessage() {\n        System.out.println(\"Message du module util\");\n    }\n}\n```\n\n### **Utiliser un module dans un autre (`com.exemple.app`)**\n\nüìÑ `module-info.java`\n\n```java\nmodule com.exemple.app {\n    requires com.exemple.util;  // D√©pendance au module util\n}\n```\n\nüìÑ `Main.java`\n\n```java\npackage com.exemple.app;\n\nimport com.exemple.util.Outil;\n\npublic class Main {\n    public static void main(String[] args) {\n        Outil.afficherMessage();\n    }\n}\n```\n\nüìå **Sans `exports` dans `com.exemple.util`, `Outil` ne serait pas accessible !**\n\n---\n\n## **3.4. D√©pendances entre modules**\n\nUn module peut d√©pendre d‚Äôun autre gr√¢ce √† `requires`.\n\n```java\nmodule com.exemple.app {\n    requires com.exemple.util;  // D√©pend de ce module\n}\n```\n\n### **Types de `requires`**\n\n|Directive|Description|\n|---|---|\n|`requires`|D√©pendance obligatoire|\n|`requires transitive`|Propag√© aux modules d√©pendants|\n|`requires static`|D√©pendance uniquement √† la compilation|\n\nüìå **Exemple de `requires transitive`**  \nSi `com.exemple.ui` d√©pend de `com.exemple.util`, on peut propager la d√©pendance :\n\n```java\nmodule com.exemple.ui {\n    requires transitive com.exemple.util;\n}\n```\n\nMaintenant, tout module **utilisant `com.exemple.ui` aura aussi acc√®s √† `com.exemple.util`**.\n\n---\n\n## **3.5. Services dans JPMS**\n\nLe JPMS introduit un syst√®me de **services** pour **d√©finir et charger dynamiquement des impl√©mentations**.\n\n### **D√©finition d‚Äôun service**\n\nüìÑ `Service.java`\n\n```java\npackage com.exemple.service;\n\npublic interface Service {\n    void executer();\n}\n```\n\n### **Impl√©mentation du service**\n\nüìÑ `ServiceImpl.java`\n\n```java\npackage com.exemple.impl;\n\nimport com.exemple.service.Service;\n\npublic class ServiceImpl implements Service {\n    public void executer() {\n        System.out.println(\"Service ex√©cut√© !\");\n    }\n}\n```\n\n### **Module d√©finissant le service (`provides`)**\n\nüìÑ `module-info.java` dans `com.exemple.impl`\n\n```java\nmodule com.exemple.impl {\n    requires com.exemple.service;\n    provides com.exemple.service.Service with com.exemple.impl.ServiceImpl;\n}\n```\n\n### **Utilisation du service (`uses`)**\n\nüìÑ `module-info.java` dans `com.exemple.app`\n\n```java\nmodule com.exemple.app {\n    requires com.exemple.service;\n    uses com.exemple.service.Service;\n}\n```\n\nüìÑ `Main.java`\n\n```java\npackage com.exemple.app;\n\nimport com.exemple.service.Service;\nimport java.util.ServiceLoader;\n\npublic class Main {\n    public static void main(String[] args) {\n        ServiceLoader<Service> loader = ServiceLoader.load(Service.class);\n        for (Service service : loader) {\n            service.executer();  // Ex√©cute automatiquement les impl√©mentations\n        }\n    }\n}\n```\n\nüìå **Les services permettent d'ajouter dynamiquement des impl√©mentations sans modifier le code existant.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Packages** : Organisation en namespaces (`package` et `import`).  \n‚úÖ **Modules** : Groupes de packages, isol√©s avec `module-info.java`.  \n‚úÖ **D√©pendances** : `requires`, `requires transitive`.  \n‚úÖ **Services** : `provides` et `uses` pour une architecture modulaire et flexible.\n\n---\n"
    },
    {
        "id": "a64ba342-46d1-4714-b28f-193017033846",
        "title": "Pipe Angular",
        "description": "---\nid: 750c7ad4-f7ec-4a65-ae5e-a2b0f34af3be\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nUn **pipe** en [[Angular]] est un outil permettant de transformer les valeurs dans un template. Il s'agit d'une classe qui impl√©mente l'interface `PipeTransform`, utilis√©e pour effectuer des transformations sur des donn√©es avant de les afficher, tout en √©tant optimis√©e pour les performances.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn **pipe** est une fonction qui prend une valeur en entr√©e, effectue une transformation et retourne une nouvelle valeur. Elle est utilis√©e dans les templates Angular pour formater ou modifier les donn√©es de mani√®re d√©clarative.\n\n### Fonctionnement :\n\n- Les **pipes** sont impl√©ment√©s en cr√©ant une classe qui impl√©mente l'interface `PipeTransform`, et en red√©finissant la m√©thode `transform`.\n- Lorsqu'un pipe est utilis√© dans un template, il prend la donn√©e √† transformer comme argument et applique la transformation d√©finie dans la m√©thode `transform`.\n- Par d√©faut, les pipes sont **[[M√©thode pure]]**, ce qui signifie qu'ils ne modifient pas directement la valeur pass√©e, mais retournent une nouvelle instance. Cela aide [[Angular]] √† optimiser les rendus en √©vitant des calculs redondants.\n\n### Exemple de pipe :\n\n1. **Cr√©ation** : Via la CLI [[Angular]] :\n    \n    ```\n    ng g p nom_du_pipe\n    ```\n    \n2. **Utilisation** dans le template :\n    \n    ```\n    {{ maVariable | nom_du_pipe }}\n    ```\n    \n3. **Passage de plusieurs arguments** :\n    \n    ```\n    transform(val: string | undefined, valSiVide: string): string {\n        return val ? val : valSiVide;\n    }\n    \n    {{ maVariable | nom_du_pipe : '-' }}\n    ```\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Optimisation des performances** : Les pipes sont des [[M√©thode pure]] par d√©faut, ce qui √©vite des recalculs inutiles lors des re-renders.\n- **Simplicit√©** : Les transformations dans les templates sont faciles √† mettre en place, sans avoir besoin de logique complexe dans les composants.\n- **R√©utilisabilit√©** : Les pipes peuvent √™tre r√©utilis√©s dans plusieurs templates, ce qui rend le code plus propre et modulaire.\n- **Personnalisation** : Possibilit√© de cr√©er des pipes personnalis√©s pour des transformations sp√©cifiques.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Ex√©cution fr√©quente** : Bien que les pipes purs soient optimis√©s, si des m√©thodes lourdes sont ex√©cut√©es √† l‚Äôint√©rieur d'un pipe non pur, elles risquent de diminuer les performances.\n- **Complexit√© pour les pipes impurs** : Si un pipe a des effets secondaires ou des calculs qui doivent se produire m√™me sans changement de valeur, il peut devenir difficile √† g√©rer et √† optimiser.\n- **Difficult√© avec les types complexes** : Les pipes qui manipulent des objets complexes ou des tableaux peuvent parfois entra√Æner des comportements inattendus, en raison des v√©rifications de changement de r√©f√©rence.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "426b06ca-5a74-48db-95ca-e19b5d566a06",
        "title": "Pitest",
        "description": "---\nid: 3f5a054c-06a1-4812-9802-1e1df6fe8452\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**PiTest** est une biblioth√®que de [[Test de mutation]] pour [[Java]]. Elle permet de tester la robustesse des tests unitaires en introduisant des mutations (modifications) dans le code source et en v√©rifiant si les tests les d√©tectent.\nOn surnomme cette librarie PIT.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nPiTest g√©n√®re des mutants dans le code source, c'est-√†-dire des modifications al√©atoires ou dirig√©es, et ex√©cute les tests unitaires pour voir si ces changements sont d√©tect√©s. Cela permet de mesurer l'efficacit√© des tests existants. Par exemple, un test qui ne d√©tecte pas une mutation est consid√©r√© comme insuffisant.\n\n**Fonctionnement :**\n\n- L‚Äôoutil prend un projet [[Java]] et applique des mutations sur les classes de l‚Äôapplication.\n- Il ex√©cute les tests unitaires pour chaque mutation, et g√©n√®re des rapports d√©taillant les mutations d√©tect√©es ou non par les tests.\n- Configurable via [[Maven]] ou [[Gradle]], PiTest peut √™tre ajust√© pour cibler des classes ou des tests sp√©cifiques.\n\n**Installation :**\n\n- Ajout d‚Äôun plugin dans le fichier `pom.xml` ou `build.gradle`.\n\n**Ex√©cution :**\n\n- Lancer la commande `mvn test-compile org.pitest:pitest-maven:mutationCoverage` pour commencer l'analyse.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Facilit√© d'int√©gration** : Ajout simple via [[Maven]] ou [[Gradle]].\n- **Rapports d√©taill√©s** : Produit des rapports de couverture des mutations qui aident √† √©valuer la qualit√© des tests.\n- **Param√©trable** : Permet de cibler des classes et tests sp√©cifiques pour une analyse plus fine.\n- **Am√©lioration continue** : Aide √† am√©liorer la qualit√© du code en s‚Äôassurant que les tests couvrent bien tous les cas de mutation.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Performance** : L'ex√©cution peut √™tre longue, surtout avec de grandes bases de code ou de nombreux tests.\n- **Complexit√© croissante** : Une fois les mutations et les tests multipli√©s, l‚Äôanalyse peut devenir difficile √† interpr√©ter et √† g√©rer.\n- **Faux positifs** : Certains mutants peuvent ne pas √™tre pertinents pour tous les projets, ce qui n√©cessite des ajustements fins pour √©viter des faux n√©gatifs.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "45af2e5c-f8f4-4925-8f42-792e76f6d8f8",
        "title": "Certification Java 17 - Programmation Concurrente",
        "description": "---\nid: 84743d0a-b01c-4a99-9742-863cc98bedf2\n---\n## **9.1. Threads (`Runnable`, `Callable`)**\n\nUn **thread** permet d‚Äôex√©cuter une t√¢che en parall√®le d‚Äôautres instructions.  \nJava propose deux interfaces principales :\n\n- `Runnable` (pas de retour de valeur)\n- `Callable<V>` (retourne une valeur et peut lever une exception)\n\n---\n\n### **1. Cr√©ation d‚Äôun `Thread` avec `Runnable`**\n\n```java\nclass Tache implements Runnable {\n    public void run() {\n        System.out.println(\"Thread ex√©cut√© !\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread(new Tache());\n        t.start();  // D√©marre le thread\n    }\n}\n```\n\nüìå **Ne pas appeler `run()` directement, utiliser `start()`.**\n\n---\n\n### **2. Cr√©ation d‚Äôun `Thread` avec `Callable` (retour de valeur)**\n\n```java\nimport java.util.concurrent.*;\n\npublic class Exemple {\n    public static void main(String[] args) throws Exception {\n        Callable<Integer> tache = () -> 42;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        Future<Integer> futur = executor.submit(tache);\n\n        System.out.println(futur.get()); // 42\n        executor.shutdown();\n    }\n}\n```\n\nüìå **`Callable<V>` retourne une valeur via `Future<V>`.**\n\n---\n\n## **9.2. `ExecutorService`, `ForkJoinPool`**\n\n### **1. `ExecutorService` : Gestion des threads**\n\n```java\nExecutorService executor = Executors.newFixedThreadPool(3);\nexecutor.submit(() -> System.out.println(\"Thread lanc√©\"));\nexecutor.shutdown();\n```\n\nüìå **Avantages :**\n\n- G√®re automatiquement les threads.\n- Optimise l‚Äôutilisation des ressources.\n\n|**Type d‚ÄôExecutor**|**Description**|\n|---|---|\n|`newFixedThreadPool(n)`|Pool de `n` threads fixes|\n|`newCachedThreadPool()`|Cr√©e des threads √† la demande|\n|`newSingleThreadExecutor()`|1 seul thread (ex√©cution s√©quentielle)|\n\n---\n\n### **2. `ForkJoinPool` : Ex√©cution de t√¢ches r√©cursives**\n\nUtilis√© pour **diviser une t√¢che complexe** en sous-t√¢ches ex√©cut√©es en parall√®le.\n\n```java\nimport java.util.concurrent.*;\n\nclass TacheRecursive extends RecursiveTask<Integer> {\n    int n;\n    TacheRecursive(int n) { this.n = n; }\n\n    protected Integer compute() {\n        if (n <= 1) return n;\n        TacheRecursive t1 = new TacheRecursive(n - 1);\n        TacheRecursive t2 = new TacheRecursive(n - 2);\n        t1.fork();\n        return t2.compute() + t1.join();\n    }\n}\n\npublic class Exemple {\n    public static void main(String[] args) {\n        ForkJoinPool pool = new ForkJoinPool();\n        int result = pool.invoke(new TacheRecursive(10));\n        System.out.println(result);\n    }\n}\n```\n\nüìå **Optimis√© pour les calculs r√©cursifs lourds (`divide & conquer`).**\n\n---\n\n## **9.3. Threads Virtuels (`Virtual Threads`, `Thread.ofVirtual()`)**\n\nIntroduits en **Java 21**, les **Virtual Threads** permettent d‚Äôex√©cuter **des millions de t√¢ches concurrentes** avec peu de threads physiques.\n\n```java\nThread.startVirtualThread(() -> {\n    System.out.println(\"Thread virtuel lanc√© !\");\n});\n```\n\nüìå **Avantages :**\n\n- Tr√®s l√©ger (pas li√© √† un thread syst√®me).\n- Optimis√© pour des t√¢ches bloquantes (I/O, bases de donn√©es).\n\n---\n\n### **Cr√©ation d‚Äôun `Virtual Thread` avec un `Executor`**\n\n```java\nExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\nexecutor.submit(() -> System.out.println(\"T√¢che ex√©cut√©e\"));\nexecutor.shutdown();\n```\n\nüìå **Chaque t√¢che a son propre thread virtuel sans surcharger le CPU.**\n\n---\n\n## **9.4. Verrous (`synchronized`, `Lock`, `ReadWriteLock`)**\n\n### **1. `synchronized` : Verrouillage automatique**\n\n```java\nclass Compteur {\n    private int valeur = 0;\n\n    public synchronized void incrementer() {\n        valeur++;\n    }\n}\n```\n\nüìå **Seul un thread peut ex√©cuter `incrementer()` √† la fois.**\n\n---\n\n### **2. `Lock` : Gestion manuelle des verrous**\n\n```java\nimport java.util.concurrent.locks.*;\n\nclass Ressource {\n    private final Lock lock = new ReentrantLock();\n\n    public void acces() {\n        lock.lock();\n        try {\n            System.out.println(\"Acc√®s s√©curis√©\");\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n```\n\nüìå **`ReentrantLock` offre plus de contr√¥le que `synchronized`.**\n\n---\n\n### **3. `ReadWriteLock` : Optimisation des acc√®s concurrents**\n\n- Plusieurs lectures simultan√©es.\n- √âcriture exclusive.\n\n```java\nimport java.util.concurrent.locks.*;\n\nclass Cache {\n    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n    private int valeur = 0;\n\n    public int lire() {\n        lock.readLock().lock();\n        try { return valeur; }\n        finally { lock.readLock().unlock(); }\n    }\n\n    public void ecrire(int nouvelleValeur) {\n        lock.writeLock().lock();\n        try { valeur = nouvelleValeur; }\n        finally { lock.writeLock().unlock(); }\n    }\n}\n```\n\nüìå **Optimise les lectures fr√©quentes avec peu d‚Äô√©critures.**\n\n---\n\n## **9.5. Collections Concurrentes et Streams Parall√®les**\n\n### **1. Collections Concurrentes**\n\n|**Classe**|**Description**|\n|---|---|\n|`ConcurrentHashMap`|`HashMap` thread-safe|\n|`CopyOnWriteArrayList`|`ArrayList` modifiable sans verrou|\n|`BlockingQueue`|File d‚Äôattente bloquante|\n\n**Exemple avec `ConcurrentHashMap` :**\n\n```java\nimport java.util.concurrent.*;\n\nMap<String, Integer> map = new ConcurrentHashMap<>();\nmap.put(\"A\", 1);\nSystem.out.println(map.get(\"A\"));\n```\n\n---\n\n### **2. `Stream` Parall√®le (`parallelStream()`)**\n\nTransforme un `Stream` en version parall√®le.\n\n```java\nList<Integer> nombres = List.of(1, 2, 3, 4, 5);\nint somme = nombres.parallelStream()\n    .mapToInt(Integer::intValue)\n    .sum();\nSystem.out.println(somme);\n```\n\nüìå **Am√©liore les performances pour les grandes collections.**\n\n‚ö† **Attention :**\n\n- Un `Stream` parall√®le ne garantit pas l‚Äôordre des r√©sultats.\n- Peut √™tre moins performant pour des petites collections.\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Threads (`Runnable`, `Callable`)** : Ex√©cuter des t√¢ches en parall√®le.  \n‚úÖ **`ExecutorService`, `ForkJoinPool`** : Gestion optimis√©e des threads.  \n‚úÖ **Threads Virtuels (`VirtualThread`)** : Tr√®s l√©gers, optimis√©s pour I/O.  \n‚úÖ **Verrous (`synchronized`, `Lock`, `ReadWriteLock`)** : Gestion des acc√®s concurrents.  \n‚úÖ **Collections Concurrentes et Streams Parall√®les** : `ConcurrentHashMap`, `parallelStream()`."
    },
    {
        "id": "fae7c92e-e8a3-454a-b8d9-7c971756468c",
        "title": "Certification Java 17 - Programmation Orient√©e Objet (OOP)",
        "description": "---\nid: df0b5c7d-a921-49b3-8778-71e5ae745df5\n---\n## **2.1. D√©claration et instanciation d‚Äôobjets**\n\nEn Java, tout repose sur les **objets** et les **classes**.\n\n### **D√©finition d‚Äôune classe et cr√©ation d‚Äôobjets**\n\n```java\nclass Voiture {\n    String marque;\n    \n    Voiture(String marque) {\n        this.marque = marque;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Voiture v1 = new Voiture(\"Toyota\");  // Instanciation d‚Äôun objet\n        System.out.println(v1.marque); // Toyota\n    }\n}\n```\n\nüìå **`new` alloue de la m√©moire et retourne une r√©f√©rence √† l'objet.**\n\n### **Diff√©rences entre `new` et `newInstance()`**\n\n- `new` est utilis√© directement.\n- `Class.forName(\"NomDeClasse\").newInstance();` permet une instanciation dynamique.\n\n---\n\n## **2.2. Cycle de vie des objets**\n\nLe **cycle de vie** d‚Äôun objet comprend :\n\n1. **Cr√©ation** (`new`)\n2. **Utilisation** (modifications, appels de m√©thodes)\n3. **Perte de r√©f√©rence** (`null` ou sortie du scope)\n4. **Garbage Collection** (ramasse-miettes)\n\n**Exemple de perte de r√©f√©rence :**\n\n```java\nVoiture v1 = new Voiture(\"Renault\");\nv1 = null; // L'objet devient √©ligible au Garbage Collector\n```\n\n### **Garbage Collector (GC)**\n\nLe **GC** lib√®re la m√©moire des objets **inaccessibles**.\n\n- `System.gc();` demande un ramassage (sans garantie).\n- `finalize()` (d√©pr√©ci√©) √©tait invoqu√© avant suppression d‚Äôun objet.\n\n---\n\n## **2.3. Encapsulation et immutabilit√©**\n\n### **Encapsulation (getter/setter)**\n\nPrincipe : **cacher les champs** et y acc√©der via **des m√©thodes publiques**.\n\n```java\nclass CompteBancaire {\n    private double solde;\n\n    public double getSolde() { return solde; }\n    public void deposer(double montant) { solde += montant; }\n}\n```\n\n‚úÖ **S√©curise les donn√©es**  \n‚úÖ **Permet des r√®gles m√©tier (ex: solde min.)**\n\n### **Immutabilit√©**\n\nUn objet **immuable** ne peut pas √™tre modifi√© apr√®s cr√©ation.  \n**Bonne pratique :** D√©clarer les champs `private final` et ne fournir aucun setter.\n\n```java\nclass Client {\n    private final String nom;\n\n    Client(String nom) { this.nom = nom; }\n    public String getNom() { return nom; }\n}\n```\n\n---\n\n## **2.4. H√©ritage, classes abstraites et classes scell√©es (sealed)**\n\n### **H√©ritage (`extends`)**\n\nPermet de r√©utiliser le code d'une classe m√®re.\n\n```java\nclass Animal {\n    String type = \"Mammif√®re\";\n}\n\nclass Chien extends Animal {\n    String race = \"Labrador\";\n}\n```\n\nüìå **Un objet `Chien` poss√®de aussi `type`.**\n\n### **Classes Abstraites (`abstract`)**\n\nImpossible √† instancier, sert de mod√®le.\n\n```java\nabstract class Animal {\n    abstract void faireDuBruit();  // M√©thode abstraite\n}\nclass Chien extends Animal {\n    void faireDuBruit() { System.out.println(\"Woof!\"); }\n}\n```\n\n### **Classes Sealed (`sealed`)** _(Java 17)_\n\nRestreint l‚Äôh√©ritage √† des classes pr√©cises.\n\n```java\nsealed class Animal permits Chien, Chat {}\nfinal class Chien extends Animal {}  // Pas d‚Äôh√©ritage possible\nnon-sealed class Chat extends Animal {}  // H√©ritage permis\n```\n\n---\n\n## **2.5. Polymorphisme, type objet vs type r√©f√©rence**\n\n**Polymorphisme** : une m√©thode peut se comporter diff√©remment selon l‚Äôobjet.\n\n```java\nclass Animal {\n    void faireDuBruit() { System.out.println(\"Bruit d‚Äôanimal\"); }\n}\nclass Chien extends Animal {\n    void faireDuBruit() { System.out.println(\"Woof!\"); }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Animal a = new Chien();  // Type r√©f√©rence : Animal, type objet : Chien\n        a.faireDuBruit();  // Woof! (m√©thode de Chien)\n    }\n}\n```\n\nüìå **Le type objet d√©termine la m√©thode ex√©cut√©e.**\n\n---\n\n## **2.6. Op√©rateur `instanceof` et Pattern Matching**\n\n### **Op√©rateur `instanceof`** _(avant Java 16)_\n\n```java\nif (obj instanceof Chien) {\n    Chien c = (Chien) obj;\n    c.aboyer();\n}\n```\n\n### **Pattern Matching (`instanceof`)** _(Java 16+)_\n\n```java\nif (obj instanceof Chien c) {\n    c.aboyer();  // Plus besoin de caster !\n}\n```\n\n---\n\n## **2.7. Interfaces : m√©thodes `default`, `static`, priv√©es**\n\nUne **interface** d√©finit un **contrat** que les classes doivent respecter.\n\n```java\ninterface Animal {\n    void faireDuBruit();\n}\nclass Chien implements Animal {\n    public void faireDuBruit() { System.out.println(\"Woof!\"); }\n}\n```\n\n### **M√©thodes `default`**\n\nPermet d‚Äôajouter une m√©thode sans casser les impl√©mentations existantes.\n\n```java\ninterface Animal {\n    default void dormir() { System.out.println(\"Je dors\"); }\n}\n```\n\n### **M√©thodes `static`**\n\nUne m√©thode statique appartient √† l'interface et ne peut pas √™tre red√©finie.\n\n```java\ninterface Utilitaire {\n    static void afficherMessage() { System.out.println(\"Message statique\"); }\n}\n```\n\n### **M√©thodes priv√©es** _(Java 9+)_\n\nPermet d'√©viter la duplication de code dans une interface.\n\n```java\ninterface Animal {\n    default void action() {\n        preparer();\n        System.out.println(\"Faire une action\");\n    }\n    private void preparer() {\n        System.out.println(\"Pr√©paration...\");\n    }\n}\n```\n\n---\n\n## **2.8. Enums avec champs, m√©thodes et constructeurs**\n\nUn **enum** repr√©sente un ensemble **fixe** de valeurs.\n\n```java\nenum Jour {\n    LUNDI, MARDI, MERCREDI;\n}\n```\n\n### **Enum avec champs et m√©thodes**\n\n```java\nenum Statut {\n    EN_COURS(1), TERMINE(2);\n\n    private final int code;\n    \n    Statut(int code) { this.code = code; }\n    public int getCode() { return code; }\n}\n```\n\nüìå **Les `enum` peuvent avoir des m√©thodes et des constructeurs priv√©s.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Encapsulation** avec `private` et `getter/setter`  \n‚úÖ **Immutabilit√©** : `final` et pas de setter  \n‚úÖ **H√©ritage** : `extends` pour sp√©cialiser une classe  \n‚úÖ **Classes abstraites** : mod√®le de base √† impl√©menter  \n‚úÖ **Classes `sealed`** : restreint l'h√©ritage (Java 17)  \n‚úÖ **Polymorphisme** : le type objet dicte le comportement  \n‚úÖ **`instanceof` avec Pattern Matching** : simplifie les cast  \n‚úÖ **Interfaces avec m√©thodes `default`, `static`, priv√©es`** ‚úÖ **`enum` avec m√©thodes et champs priv√©s**\n\n---\n\n[[Java]] [[Certification Java 17]]"
    },
    {
        "id": "37d4edee-5398-4339-b662-b16aff7c6389",
        "title": "Prometheus",
        "description": "---\nid: ec08a5df-a7b8-4dd1-bbca-5109de9470bd\n---\n# Rapidement c'est quoi‚ùì\n\nPrometheus est un syst√®me de [[Monitoring]] et d'alerte [[Open-source]] qui stocke les donn√©es sous forme de s√©ries temporelles.  Il r√©cup√®re des m√©triques et les affiche via un tableau de bord.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nPrometheus est un syst√®me de surveillance et d'alerte open source bas√© sur une architecture de pull (contrairement √† une architecture de push).  Il fonctionne en interrogeant r√©guli√®rement (par d√©faut toutes les 15 secondes) des targets (applications, serveurs, etc.) exposant des m√©triques via une interface [[HTTP]] (g√©n√©ralement le port 9100).  Ces m√©triques sont des s√©ries temporelles, c'est-√†-dire des donn√©es associ√©es √† un timestamp.  Chaque m√©trique est identifi√©e par un nom et un ensemble d'√©tiquettes (labels) qui permettent de filtrer et agr√©ger les donn√©es.\n\nPrometheus stocke ces donn√©es dans une [[Base de donn√©e]] interne et les expose via une interface utilisateur web.  Il permet de cr√©er des alertes bas√©es sur des r√®gles d√©finies sur les m√©triques (ex:  si la latence d√©passe 500ms, envoyer une alerte).  L'outil offre des fonctionnalit√©s de visualisation des donn√©es et de cr√©ation de dashboards pour suivre l'√©tat de son infrastructure.  Il peut √™tre √©tendu via des exporters (pour collecter des m√©triques de diff√©rents syst√®mes) et des librairies clientes pour exposer des m√©triques personnalis√©es.  Contrairement √† certains syst√®mes de monitoring qui utilisent une architecture de push (o√π les targets envoient les m√©triques √† un serveur central), Prometheus utilise une architecture de pull, ce qui simplifie la configuration et am√©liore la fiabilit√©.  Cependant, cela n√©cessite que les targets soient toujours accessibles √† Prometheus.  Son stockage interne est bas√© sur un mod√®le de donn√©es temps-s√©rie optimis√© pour les requ√™tes de donn√©es et la performance des requ√™tes.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open source et gratuit:**  Large communaut√©, documentation abondante et contributions constantes.\n* **Architecture robuste et scalable:**  Capable de g√©rer un grand nombre de m√©triques et de targets.\n* **Flexibilit√© et extensibilit√©:**  Large choix d'exporters et de librairies clientes.\n* **Syst√®me d'alertes puissant:**  Cr√©ation facile de r√®gles d'alerte complexes.\n* **Interface utilisateur intuitive:**  Visualisation et exploration des donn√©es simples et efficaces.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Architecture de pull:**  N√©cessite que les targets soient toujours disponibles et accessibles.  Les targets inaccessibles ne sont pas monitor√©es.\n* **Stockage interne limit√©:**  Pour de tr√®s grands volumes de donn√©es, une solution de stockage externe est n√©cessaire (comme [[Thanos]], par exemple).\n* **Courbe d'apprentissage:**  La configuration et l'utilisation peuvent n√©cessiter une certaine expertise pour tirer pleinement parti de ses fonctionnalit√©s avanc√©es.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "ba0218cf-bb84-4722-9d0a-517f4c6f82be",
        "title": "Raison d‚Äôune bonne architecture d‚Äôun SI",
        "description": "---\nid: ce97e1da-3b18-44bc-a286-a42fc3195261\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nUne bonne architecture d'un Syst√®me d'Information (SI) est une structure flexible, √©volutive et adapt√©e aux besoins actuels et futurs de l'organisation. Elle doit √™tre con√ßue pour faciliter le changement sans sacrifier la stabilit√©.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUne bonne architecture d‚Äôun SI permet de r√©pondre efficacement aux besoins imm√©diats tout en restant ouverte aux √©volutions futures. Elle doit √™tre :\n\n- **Adapt√©e au besoin** : Chaque architecture doit √™tre align√©e avec les objectifs m√©tiers et les contraintes techniques sp√©cifiques √† l'organisation.\n- **Flexible** : Elle doit permettre des changements rapides sans compromettre la performance ou la stabilit√© du syst√®me.\n- **Minimiser les anticipations excessives** : Une architecture trop rigide, construite autour de changements futurs incertains, peut devenir obsol√®te rapidement. Il est souvent plus facile de modifier une architecture au fil de l‚Äôeau plut√¥t que de tenter de tout pr√©voir.\n- **Architecture continue** : Elle √©volue de mani√®re incr√©mentale, en r√©pondant aux besoins imm√©diats et en int√©grant progressivement les changements sans s‚Äôimposer des mod√®les rigides.\n\nL'id√©e est d'√©viter le \"gros DAT\" ([[Document d'Architecture Technique]]) fig√© qui restreint l'innovation et de favoriser une approche agile et √©volutive, o√π l'architecture peut se r√©ajuster au fur et √† mesure des besoins.\n\n# Qu'est ce qui est top ? üëç\n\n- **Flexibilit√©** : Permet de s'adapter rapidement aux √©volutions du march√© et aux besoins changeants des utilisateurs.\n- **√âvolutivit√©** : L'architecture est construite pour int√©grer facilement de nouveaux composants ou de nouvelles fonctionnalit√©s.\n- **R√©activit√©** : Une architecture continue facilite la gestion des impr√©vus sans perturber l‚Äôensemble du syst√®me.\n- **Optimisation des co√ªts** : En adaptant les ressources en fonction des besoins r√©els et non des projections, l‚Äôarchitecture √©vite le gaspillage.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© √† court terme** : Lors de la mise en place d‚Äôune architecture flexible, il peut √™tre difficile de g√©rer une transition en douceur avec les syst√®mes existants.\n- **Risque d'it√©ration non ma√Ætris√©e** : Une trop grande flexibilit√© peut mener √† des ajustements constants et √† une incoh√©rence entre les diff√©rentes parties du syst√®me.\n- **Gestion de la dette technique** : Sans une vision claire, l'architecture continue peut accumuler de la dette technique au fil des ajustements successifs.\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "3f37d305-6168-491b-8487-7d9c7316354c",
        "title": "Redis Sentinel",
        "description": "---\nid: 7c33ceca-69d3-469a-9986-edcee3a042f4\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nRedis Sentinel est un outil de haute disponibilit√© pour [[Redis]], permettant de surveiller un serveur Redis principal (master) et ses r√©pliques (slaves), et de promouvoir automatiquement un slave en master en cas de d√©faillance du master actuel.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nRedis Sentinel est con√ßu pour assurer la disponibilit√© et la r√©silience des instances Redis. Il surveille le serveur [[Redis]] master et ses r√©pliques (slaves) pour d√©tecter toute panne. En cas de d√©faillance du master, Sentinel s√©lectionne un slave (celui ayant la derni√®re mise √† jour) pour le promouvoir en master et ainsi maintenir la disponibilit√© du service Redis.\n\n- **Architecture** : Un master [[Redis]] avec plusieurs r√©pliques (slaves) synchronis√©es.\n- **R√¥le des Sentinels** : Surveiller l'√©tat du master et des slaves, d√©tecter les pannes, et effectuer un basculement automatique (failover) en cas de d√©faillance.\n- **Crit√®res de promotion** : Le slave avec la derni√®re mise √† jour devient le nouveau master.\n- **Limitation** : Redis Sentinel ne constitue pas un cluster Redis distribu√© complet, car il ne g√®re pas la r√©partition des donn√©es entre plusieurs instances. Il se concentre uniquement sur la haute disponibilit√©.\n\n# Qu'est ce qui est top ? üëç\n\n- **Haute disponibilit√©** : En cas de panne du master, un slave est automatiquement promu pour minimiser les interruptions de service.\n- **Surveillance continue** : Sentinel surveille en permanence l'√©tat des instances [[Redis]], garantissant une d√©tection rapide des probl√®mes.\n- **Failover automatique** : Pas besoin d'intervention manuelle pour promouvoir un nouveau master, ce qui r√©duit le risque d'erreur et am√©liore la r√©activit√©.\n- **Simplicit√©** : Configuration relativement simple pour g√©rer la [[Haute disponibilit√©]] avec Redis.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Pas un cluster Redis complet** : Redis Sentinel ne g√®re pas la distribution des donn√©es ou le partitionnement, contrairement √† un cluster Redis distribu√©.\n- **D√©pendance au r√©seau** : Si Sentinel et les instances Redis sont mal configur√©s ou s'il y a des probl√®mes r√©seau, le failover peut √©chouer.\n- **S√©lection du nouveau master** : Le processus de promotion d'un slave peut parfois √™tre lent si les instances Redis ne sont pas bien synchronis√©es.\n- **Limit√© √† la [Haute disponibilit√©]]** : Redis Sentinel ne prend pas en charge d'autres fonctionnalit√©s avanc√©es comme la gestion automatique des partitions ou des volumes de donn√©es.\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "6b6bd7b1-3d82-4f65-be46-aa30c20f278f",
        "title": "Redis",
        "description": "---\nid: c3202556-f6cf-4e20-b7e8-09270e6ab143\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Redis** est une [[Base de donn√©e NoSQL]] , utilis√©e comme cache et store de structures de donn√©es telles que des cha√Ænes de caract√®res, des listes, des ensembles, etc. Elle est populaire pour sa rapidit√© et sa simplicit√© d‚Äôutilisation, particuli√®rement pour la gestion de donn√©es temporaires.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nRedis offre des fonctionnalit√©s diverses comme le caching, la gestion de sessions et le stockage temporaire de donn√©es, gr√¢ce √† sa capacit√© √† stocker des donn√©es en m√©moire et √† les manipuler tr√®s rapidement.\n\nAvec [[Java]], Redis peut √™tre int√©gr√© via plusieurs m√©canismes :\n\n1. **Redis Template** :  \n    Permet d'interagir avec Redis √† un niveau bas, proche de la ligne de commande. Il est flexible mais n√©cessite plus de gestion manuelle des op√©rations Redis.\n    \n2. **[[Spring Data Redis]]** :  \n    Permet d'utiliser Redis avec l'API de [[Spring Data]], offrant une interface plus haut niveau pour interagir avec Redis comme avec une base de donn√©es traditionnelle (similaire √† Spring [[Data JPA]]). Cependant, pour des objets complexes, cette approche peut mener √† des requ√™tes excessives, impactant ainsi la performance.\n    \n3. **[[Spring Cache]]** :  \n    Permet une gestion de cache plus simple en annotant les m√©thodes avec `@Cacheable`, ce qui permet de stocker et de r√©cup√©rer les r√©sultats des m√©thodes dans Redis sans code suppl√©mentaire complexe.\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **[[Redis Template]]** :\n    - Permet une gestion fine des interactions avec Redis.\n    - Offre plus de flexibilit√© pour des cas d‚Äôusage sp√©cifiques.\n\n- **[[Spring Data Redis]]** :    \n    - Permet une int√©gration transparente avec [[Spring Framework]].\n    - Facile √† utiliser pour les utilisateurs d√©j√† familiers avec Spring Data.\n\n- **[[Spring Cache]]** :\n    - Tr√®s simple √† impl√©menter pour la mise en cache des r√©sultats de m√©thodes.\n    - Automatisation des processus de cache sans complexit√© suppl√©mentaire.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Redis Template** :\n    - N√©cessite de g√©rer soi-m√™me les interactions avec Redis, ce qui peut augmenter la complexit√© du code.\n- **Spring Data Redis** :\n    - Peut entra√Æner des probl√®mes de performance pour des objets complexes en raison du nombre √©lev√© de requ√™tes n√©cessaires pour r√©cup√©rer un objet complet.\n- **Spring Cache** :\n    - Peut √™tre limit√© en termes de contr√¥le pr√©cis sur les strat√©gies de cache et la gestion des donn√©es en m√©moire.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "86b2d35e-3053-4031-ad65-92db698ddade",
        "title": "Renovate_Bot",
        "description": "---\nid: 98f7085c-54d4-4d54-a6ba-7512a4ffaed8\n---\n# Rapidement c'est quoi‚ùì\n\nRenovate Bot est un outil automatis√© qui analyse les d√©pendances de vos projets [[Git]]  et cr√©e des pull/merge requests pour mettre √† jour ces d√©pendances vers leurs derni√®res versions stables ou sp√©cifiques.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nRenovate Bot est un outil d'automatisation de la gestion des d√©pendances logicielles. Il fonctionne en analysant le fichier de configuration de votre projet (ex: `package.json` pour [[Node.js]], `pom.xml` pour [[Maven]] ...) afin d'identifier toutes les d√©pendances utilis√©es.  Il compare ensuite les versions actuelles avec les derni√®res versions disponibles sur les registres de paquets (ex: [[npm]], [[Maven Central]]).  Pour chaque d√©pendance obsol√®te, Renovate Bot cr√©e une pull request s√©par√©e contenant les mises √† jour n√©cessaires.  L'utilisateur peut ensuite examiner et fusionner ces pull requests, automatisant ainsi le processus fastidieux et potentiellement risqu√© de mise √† jour manuelle des d√©pendances.  L'outil est configurable pour d√©finir des r√®gles de mise √† jour (ex:  mise √† jour majeure, mineure, patch, fr√©quence de scan, branches cibles, etc.).  Il prend en charge un large √©ventail de gestionnaires de paquets et de langages de programmation.  Renovate Bot peut √™tre int√©gr√© √† des [[pipelines CI/CD]] comme [[GitHub Action]] ou [[GitLab CI]].  Il permet √©galement la gestion de configurations complexes en utilisant des fichiers de configuration YAML ou JSON.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Automatisation:**  √âlimine le besoin de mises √† jour manuelles chronophages et sujettes aux erreurs.\n* **S√©curit√©:**  Aide √† maintenir les d√©pendances √† jour, r√©duisant les risques de vuln√©rabilit√©s.\n* **Flexibilit√©:**  Configuration personnalis√©e pour contr√¥ler le processus de mise √† jour (fr√©quence, versions cibles, etc.).\n* **Support multi-langage et multi-gestionnaire de paquets:** Couverture large des √©cosyst√®mes de d√©veloppement.\n* **Int√©gration facile:**  Int√©gration avec les plateformes [[Git]] les plus populaires.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:**  La configuration peut √™tre complexe pour des projets avec des d√©pendances nombreuses ou des exigences sp√©cifiques.\n* **D√©pendance √† un service tiers:**  La fonctionnalit√© d√©pend d'une connexion stable √† l'infrastructure de Renovate Bot.\n* **Potentiel de conflits de fusion:**  Les mises √† jour automatiques peuvent parfois cr√©er des conflits avec d'autres modifications, n√©cessitant une intervention manuelle.\n* **Surveillance n√©cessaire:**  Bien que automatis√©, il est toujours n√©cessaire de surveiller les pull requests g√©n√©r√©es pour √©viter les probl√®mes.\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension des gestionnaires de paquets et des principes de gestion des d√©pendances.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "e8412082-486c-4479-8ffb-666b4cc1ff5f",
        "title": "Responsive des images html css",
        "description": "---\nid: 7822de72-7567-4eb4-9a12-3980e4e48032\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe responsive des images [[HTML]]/[[CSS]] permet de charger des images diff√©rentes en fonction de la taille de l'√©cran, de l'orientation ou d'autres crit√®res. Cela permet d'optimiser le temps de chargement et la performance d'un site web.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe balisage `<picture>` et les √©l√©ments `<source>` dans HTML permettent de d√©finir des images sp√©cifiques √† afficher selon des conditions pr√©cises, comme la taille de l'√©cran ou l'orientation du dispositif. Chaque `<source>` peut contenir une condition via l'attribut `media` et d√©finir la source de l'image avec `srcset`. Le navigateur choisira automatiquement l'image la plus adapt√©e.\n\nExemple :\n\n```html\n<picture>\n  <source media=\"(orientation: portrait) and (max-width: 700px)\" srcset=\"https://url_image\" sizes=\"100vw\" />\n  <source media=\"(orientation: portrait)\" srcset=\"https://url_image\" sizes=\"100vw\" />\n</picture>\n```\n\nCela permet de ne charger que l'image n√©cessaire, en fonction de la configuration du p√©riph√©rique, r√©duisant ainsi la consommation de bande passante et am√©liorant la performance du site.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Optimisation des performances** : Le navigateur choisit l'image la plus appropri√©e en fonction des conditions d√©finies, ce qui r√©duit la taille des fichiers t√©l√©charg√©s.\n- **R√©duction du temps de chargement** : En ne chargeant que l'image n√©cessaire selon la taille d'√©cran ou l'orientation, on √©vite de t√©l√©charger des images inutiles.\n- **Flexibilit√©** : Permet d'utiliser plusieurs images avec des tailles et r√©solutions diff√©rentes selon le contexte (ex : mobile vs desktop).\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© accrue** : La gestion des multiples sources d'image peut devenir complexe avec plusieurs conditions √† g√©rer.\n- **Compatibilit√© limit√©e** : Tous les navigateurs ne supportent pas parfaitement la balise `<picture>`, bien que la prise en charge soit d√©sormais largement r√©pandue.\n- **Charge serveur** : Bien qu'il y ait une optimisation c√¥t√© client, le serveur doit g√©rer plusieurs versions d'images, augmentant la gestion c√¥t√© backend.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Responsive en CSS]]"
    },
    {
        "id": "9591fb64-906a-4a68-9998-f99e437f7581",
        "title": "Responsive en CSS",
        "description": "---\nid: 4797285a-dc72-4c05-a1d0-75bf11fb9382\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe responsive design en [[CSS]] permet d'adapter l'apparence d'une page web √† diff√©rentes tailles d'√©crans et r√©solutions, en utilisant des unit√©s flexibles et des techniques comme les media queries pour offrir une exp√©rience optimale sur mobile, tablette et desktop.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe responsive design en [[CSS]] repose sur plusieurs concepts permettant d'adapter le contenu d'une page web en fonction des caract√©ristiques de l'√©cran (taille, orientation, r√©solution) :\n\n- **Unit√©s dynamiques** : Des unit√©s comme `vw` (viewport width), `vh` (viewport height), et `vmin` (la plus petite valeur entre `vh` et `vw`) permettent de cr√©er des √©l√©ments qui s'ajustent √† la taille de l'√©cran de mani√®re fluide.\n- **Media Queries** : Ces r√®gles permettent de sp√©cifier diff√©rents styles CSS en fonction de crit√®res comme la taille de l'√©cran, l'orientation ou la r√©solution.\n- **Element `<picture>`** : Utilis√© pour charger des images diff√©rentes selon les conditions d√©finies (par exemple, orientation ou taille d'√©cran). Cela optimise le temps de chargement et am√©liore la performance, en ne chargeant que l'image la plus appropri√©e pour l'affichage.\n\n# Qu'est ce qui est top ? üëç\n\n- **Adaptabilit√©** : Le design r√©actif garantit une exp√©rience utilisateur optimale, quelle que soit la taille de l'√©cran.\n- **Performance** : L‚Äôutilisation du `<picture>` pour les images et des unit√©s dynamiques r√©duit la quantit√© d‚Äôimages ou de ressources inutiles √† charger, am√©liorant ainsi la vitesse de chargement.\n- **Facilit√© d‚Äôimpl√©mentation** : L‚Äôutilisation des media queries permet de faire √©voluer l‚Äôaffichage de mani√®re fluide sans n√©cessiter de red√©veloppement complet pour chaque taille d‚Äô√©cran.\n- **Mobile-first** : Cette approche assure que le site est toujours fonctionnel sur les appareils mobiles, qui sont souvent les plus contraints en termes de taille d'√©cran et de performance.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© accrue** : G√©rer de multiples tailles d‚Äô√©cran et orientations peut compliquer le processus de d√©veloppement et de maintenance.\n- **D√©bogage difficile** : Tester sur tous les types d'√©crans et simulateurs peut √™tre long et fastidieux, surtout lorsque les styles ne sont pas coh√©rents entre diff√©rents appareils.\n- **Temps de chargement** : Bien que l'utilisation du `<picture>` soit performante, si mal configur√©e, cela peut entra√Æner des d√©lais de chargement en fonction de la taille des images et du nombre de sources utilis√©es.\n\n# A quoi c'est li√© ? ü™¢\n[[Mobile First]]"
    },
    {
        "id": "42c711ee-117b-417a-8c6e-9b684a10120c",
        "title": "R√©activit√©",
        "description": "---\nid: 4094d186-18e0-4673-a238-ad66d828c305\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLa **programmation r√©active** est une approche qui permet aux programmes de r√©agir de mani√®re asynchrone et dynamique aux changements d'√©tat dans leur environnement. Cela permet d'am√©liorer la r√©activit√© des applications, en particulier dans des contextes interactifs et temps r√©el.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLa programmation r√©active se base sur l'id√©e que les applications doivent √™tre capables de r√©agir √† des changements en temps r√©el, comme les √©v√©nements utilisateur ou les mises √† jour de donn√©es. Diff√©rentes biblioth√®ques et frameworks utilisent cette approche pour g√©rer l'√©tat et les interactions de mani√®re plus fluide et r√©active.\n\n### Types de r√©activit√© :\n\n1. **Value-based** (ex : [[Angular]], [[React]]) :  \n    Les anciennes valeurs sont compar√©es aux nouvelles, et si elles diff√®rent, l'application met √† jour l'√©tat. Ce mod√®le est simple √† impl√©menter mais peut √™tre inefficace pour les grandes applications car il n√©cessite une comparaison exhaustive des valeurs √† chaque changement.\n    \n2. **Observable-based** (ex : [[Svelte]], [[RxJS]]) :  \n    L'application s'abonne √† des **Observables** (flux de donn√©es) et r√©agit aux changements de mani√®re asynchrone. Cela permet d‚Äôoptimiser la performance, mais rend le code plus complexe et sujet √† des probl√®mes comme les fuites de m√©moire si l'abonnement n'est pas correctement g√©r√©.\n    \n3. **Signal-based** (ex : [[Vue]],[[ Solid]], et [[Angular]]) :  \n    Les variables sont stock√©es avec des r√©f√©rences uniques et chaque acc√®s passe par une gestion centralis√©e des r√©f√©rences. Ce mod√®le est performant et synchrone, mais il peut √™tre plus contraignant en termes de structure du code. [[Angular]], par exemple, exp√©rimente cette approche mais rencontre des difficult√©s dans son adoption.\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Observable-based** :\n    - Tr√®s performant pour les applications complexes et r√©actives.\n    - Permet de g√©rer des flux de donn√©es en temps r√©el avec une gestion fine des mises √† jour.\n\n- **Signal-based** :\n    - Offre une r√©activit√© plus synchrone, ce qui r√©duit les risques d'incoh√©rences de donn√©es.\n    - Optimisation de la gestion des acc√®s √† des variables partag√©es.\n\n- **Value-based** :\n    - Facile √† comprendre et √† mettre en place, id√©al pour des applications plus simples.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Observable-based** :\n    - Peut devenir difficile √† g√©rer, surtout avec les abonnements et d√©sabonnements, ce qui peut conduire √† des fuites m√©moire si mal g√©r√©.\n    - Asynchrone, ce qui complique la gestion du flux d'ex√©cution et du d√©bogage.\n\n- **Signal-based** :    \n    - Le mod√®le strict peut rendre le code moins flexible et plus difficile √† maintenir.\n    - Angular a des difficult√©s √† impl√©menter cette approche de mani√®re fluide et standardis√©e.\n\n- **Value-based** :    \n    - Moins performant √† grande √©chelle, n√©cessite de comparer chaque changement, ce qui peut ralentir les applications avec de nombreux √©l√©ments √† surveiller.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "8a8d58b5-9071-4444-8711-dd893676ac39",
        "title": "R√¥les dans l‚Äôarchitecture d‚Äôun SI",
        "description": "---\nid: b5e075e4-d8ca-4274-997f-ec7a18462829\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes r√¥les dans l‚Äôarchitecture d‚Äôun Syst√®me d'Information (SI) d√©finissent les responsabilit√©s et la gestion des pratiques techniques, allant de la d√©finition des grandes lignes architecturales √† l'impl√©mentation technique dans les applications.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **Architecte d'entreprise** : D√©finit les directives et normes architecturales √† l'√©chelle globale du SI. Il s'assure de l'harmonisation des pratiques et de la coh√©rence entre les diff√©rents syst√®mes.\n    \n- **Architecte solution** : Applique les directives de l'architecte d'entreprise au niveau des applications sp√©cifiques. Il s‚Äôassure que chaque solution r√©ponde aux normes architecturales globales tout en r√©pondant aux besoins des projets.\n    \n- **Architecte technique / Lead dev** : G√®re les choix techniques et les d√©cisions micro-niveau au sein des projets. Il assure la coh√©rence technique des solutions et prend des d√©cisions d√©taill√©es pour r√©soudre des probl√®mes sp√©cifiques dans le code.\n    \n- **Equipe de d√©veloppement** : Suit les directives d‚Äôarchitecture et contribue aux discussions techniques. Les d√©veloppeurs mettent en ≈ìuvre les choix d√©cid√©s par les architectes dans le cadre des projets.\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Clart√© des r√¥les** : Chaque acteur a une vision claire de ses responsabilit√©s, ce qui permet une gestion structur√©e du SI.\n- **Harmonisation des pratiques** : Les d√©cisions sont prises √† diff√©rents niveaux, ce qui permet de respecter des standards tout en √©tant agile dans les projets.\n- **Collaboration entre les r√¥les** : Les architectes travaillent en √©troite collaboration avec l‚Äô√©quipe de d√©veloppement, assurant la mise en ≈ìuvre des directives avec une bonne prise en compte des r√©alit√©s du terrain.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© hi√©rarchique** : Avec plusieurs niveaux d'architecture, la communication peut devenir plus complexe et les d√©cisions peuvent √™tre retard√©es.\n- **Risque de d√©connexion entre les niveaux** : Si les architectes d‚Äôentreprise ne sont pas bien align√©s avec les architectes solution, ou si les d√©veloppeurs ne comprennent pas les directives, cela peut cr√©er des incoh√©rences dans l'impl√©mentation.\n- **Charge de gestion** : Les architectes, notamment d'entreprise et solution, peuvent √™tre submerg√©s par des t√¢ches de coordination et de contr√¥le, ce qui peut ralentir les processus.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "c6cf519c-fd09-44ee-a12a-bbef14ae767c",
        "title": "Server Side Generation (SSG)",
        "description": "---\nid: cb7dd7c1-468d-46c0-8bc8-7bc4fc778f04\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLa **Server Side Generation (SSG)** consiste √† g√©n√©rer des pages web statiques au moment de la compilation du projet, avant m√™me le lancement du serveur. Les pages sont rendues sous forme de fichiers [[HTML]] pr√™ts √† √™tre servis.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe processus de SSG consiste √† pr√©-g√©n√©rer toutes les pages d'un site pendant le processus de build, ce qui permet de les servir directement sous forme de fichiers statiques au moment de la demande de l'utilisateur. Le serveur ne fait plus que renvoyer ces fichiers [[HTML]] statiques, sans avoir besoin de calculer ou d'interagir avec une base de donn√©es √† chaque requ√™te.\n\n- **G√©n√©ration statique** : Les pages sont rendues √† la compilation du projet, ce qui acc√©l√®re le temps de r√©ponse du serveur.\n- **Pas d'interaction serveur** : Une fois les pages g√©n√©r√©es, le serveur sert directement les fichiers [[HTML]], ce qui r√©duit la charge c√¥t√© serveur.\n- **[[SEO]] optimis√©** : Puisque les pages sont d√©j√† pr√™tes, les moteurs de recherche peuvent facilement les indexer.\n\n# Qu'est ce qui est top ? üëç\n\n- **Performance rapide** : Les pages sont statiques, ce qui signifie que le serveur a juste √† envoyer le fichier [[HTML]] sans traitement suppl√©mentaire.\n- **[[SEO]] optimis√©** : Le contenu statique est id√©al pour l‚Äôindexation par les moteurs de recherche, augmentant ainsi la visibilit√© du site.\n- **Simplicit√© du serveur** : Aucune logique c√¥t√© serveur, ce qui simplifie l‚Äôarchitecture du backend.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Temps de compilation long** : Si le site poss√®de de nombreuses pages, la g√©n√©ration statique peut √™tre lente et consommer des ressources.\n- **Pas adapt√© au contenu dynamique** : Pour des sites n√©cessitant une mise √† jour constante de contenu (par exemple des blogs ou des plateformes sociales), le SSG peut devenir peu pratique, car il faut recompiler les pages √† chaque changement.\n- **Gestion des donn√©es** : Le contenu dynamique doit √™tre g√©r√© avant la compilation, ce qui peut limiter l'interactivit√© des pages.\n\n# A quoi c'est li√© ? ü™¢\n[[Server Side Rendering (SSR)]] [[Incremental Static Regeneration (ISR)]] "
    },
    {
        "id": "3a646b78-b3e7-42f5-a4d1-7963e2b48a0e",
        "title": "Server Side Rendering (SSR)",
        "description": "---\nid: 3d88ac3a-ed12-451b-972e-c306b861b37d\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe Server Side Rendering (SSR) est une technique o√π le serveur g√©n√®re et envoie une page [[HTML]] presque compl√®te au navigateur. Contrairement √† du rendu c√¥t√© client, c'est le serveur qui ex√©cute le [[JavaScript]] et construit la page avant de l'envoyer au client.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe SSR permet de pr√©-rendre une page [[HTML]] compl√®te c√¥t√© serveur, incluant les ressources n√©cessaires (images, scripts, etc.), avant de la renvoyer au client. Le [[JavaScript]] c√¥t√© client prend ensuite le relais pour l'[[hydratation]], c'est-√†-dire pour rendre la page interactive. Cette approche am√©liore les performances initiales du chargement, car le navigateur n‚Äôa qu'√† afficher la page g√©n√©r√©e, sans avoir √† attendre que le [[JavaScript]] s'ex√©cute pour cr√©er le contenu.\n\nLe SSR est souvent utilis√© avec des frameworks comme [[Next.js]] pour [[React]], [[Nuxt.js]] pour [[Vue.js]] ou [[Analog.js]] pour [[Angular]]\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Am√©lioration des performances initiales** : Le contenu est d√©j√† pr√©-rendu, ce qui permet un affichage plus rapide.\n- **[[SEO]] optimis√©** : Comme le contenu est disponible d√®s le chargement de la page, les moteurs de recherche peuvent mieux l'indexer.\n- **Exp√©rience utilisateur am√©lior√©e** : Le temps jusqu'√† l'affichage est plus court, surtout pour les utilisateurs ayant des connexions lentes.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© c√¥t√© serveur** : La gestion des sessions, du cache et du rendu dynamique est plus complexe √† impl√©menter.\n- **[[Hydratation]]** : Apr√®s le rendu initial, le [[JavaScript]] c√¥t√© client doit \"prendre le relais\" pour rendre la page interactive, ce qui peut entra√Æner un d√©lai suppl√©mentaire.\n- **Ressources serveur** : Plus de travail est effectu√© sur le serveur pour g√©n√©rer chaque page, ce qui peut augmenter la charge serveur et les co√ªts.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Server Side Generation (SSG)]][[Incremental Static Regeneration (ISR)]]\n"
    },
    {
        "id": "8c1b08b7-54d7-41a2-82f9-2f07277a619e",
        "title": "Signal (Angular)",
        "description": "---\nid: 1b418003-bf67-4b2a-9a0f-955a4f39a7ad\n---\n# Rapidement c'est quoi‚ùì\n\nSignal est un m√©canisme de [[R√©activit√©]] int√©gr√© √† [[Angular]] depuis la version 14, offrant une alternative plus simple et parfois plus performante √† [[RxJS]] pour g√©rer les changements de donn√©es et d√©clencher des mises √† jour d'interface.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAngular Signals fournit une nouvelle approche pour la gestion de la r√©activit√© dans les applications Angular.  Au lieu de s'appuyer sur les Observables de [[RxJS]], il utilise un syst√®me plus l√©ger et plus intuitif bas√© sur des \"signals\". Un signal est une r√©f√©rence √† une valeur qui peut changer au cours du temps.  Lorsqu'une valeur de signal change, Angular d√©tecte automatiquement cette modification et met √† jour le DOM en cons√©quence.  Ceci permet de simplifier le code et d'am√©liorer les performances dans certains cas d'utilisation, notamment pour les mises √† jour simples et fr√©quentes de donn√©es.\n\nLes composants cl√©s sont :\n\n* **`signal()`:**  Fonction qui cr√©e un signal √† partir d'une valeur initiale.  Cette fonction retourne un objet poss√©dant deux propri√©t√©s : `.value` (pour acc√©der √† la valeur actuelle) et `.subscribe()` (pour s'abonner aux changements de valeur, similaire aux observables [[RxJS]] mais plus l√©ger).\n* **`computed()`:** Fonction qui permet de cr√©er des signals d√©riv√©s √† partir d'autres signals.  La valeur d'un signal `computed` est recalcul√©e automatiquement chaque fois qu'un des signals dont il d√©pend est mis √† jour. Ceci est similaire aux op√©rateurs [[RxJS]] comme `map` ou `combineLatest` mais avec une syntaxe plus concise.\n* **`effect()`:** Fonction qui ex√©cute une fonction chaque fois qu'un ou plusieurs signals dont elle d√©pend changent. Ceci permet de r√©agir aux changements de donn√©es et d'effectuer des actions secondaires, comme des appels API ou des navigations.\n\n\nL'utilisation de Signals est souvent plus concise et lisible que [[RxJS]] pour les cas simples de gestion de la r√©activit√©.  Il est cependant important de comprendre que Signals ne remplacent pas compl√®tement [[RxJS]], mais offrent une alternative int√©ressante pour certains types de probl√®mes.  [[RxJS]] reste pertinent pour les cas d'utilisation plus complexes n√©cessitant des op√©rations avanc√©es de transformation et de gestion des flux d'√©v√©nements asynchrones.\n\nLes signaux sont aussi utilis√©s par [[Vue.js]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplicit√© et lisibilit√©:** La syntaxe des Signals est plus concise et plus facile √† comprendre que [[RxJS]], facilitant le d√©veloppement et la maintenance.\n* **Performances:** Dans certains cas, les Signals peuvent offrir de meilleures performances que [[RxJS]], notamment pour les mises √† jour fr√©quentes de donn√©es simples.\n* **Int√©gration native dans Angular:**  L'int√©gration transparente avec le framework Angular simplifie l'utilisation et √©vite les probl√®mes de compatibilit√©.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Moins puissant que [[RxJS]]:** Les Signals ne poss√®dent pas la m√™me richesse fonctionnelle que RxJS.  Pour des sc√©narios complexes de manipulation de flux d'√©v√©nements asynchrones, RxJS reste n√©cessaire.\n* **Relatif manque de maturit√©:**  √âtant une fonctionnalit√© plus r√©cente, la communaut√© et la documentation autour des Signals sont moins √©tendues que pour RxJS.\n* **Courbe d'apprentissage (m√™me si faible) :**  Il faut un temps d'adaptation m√™me si la syntaxe est plus simple.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "928cc68c-9624-4fe4-b1a1-69ee470283f5",
        "title": "Slim Faas",
        "description": "---\nid: 8b302316-614f-4cea-af00-28858b4f0603\n---\n# Rapidement c'est quoi‚ùì\n\nSlim Faas est une plateforme [[Function as a Service (FaaS)]] l√©g√®re, alternative √† [[OpenFaaS]], d√©velopp√©e et utilis√©e en interne par AXA.  Elle se concentre sur la simplicit√© et l'efficacit√©.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nSlim Faas est une impl√©mentation simplifi√©e et optimis√©e de la plateforme serverless [[OpenFaaS]].  Contrairement √† [[OpenFaaS]] qui offre une large gamme de fonctionnalit√©s et de complexit√©, Slim Faas se concentre sur l'essentiel: le d√©ploiement et l'ex√©cution de fonctions sans serveur.  Elle est con√ßue pour √™tre l√©g√®re, facile √† d√©ployer et √† maintenir, et particuli√®rement adapt√©e aux environnements o√π les ressources sont limit√©es ou o√π une configuration minimale est souhaitable.  Son architecture simplifi√©e r√©duit la surface d'attaque et la complexit√© de gestion.  Elle repose g√©n√©ralement sur des technologies conteneuris√©es (comme [[Docker]]) et un [[Orchestrateur de conteneur]] (comme [[Nomad]] ou [[Kubernetes]], bien que son architecture permette une plus grande flexibilit√©).  L'objectif principal est de fournir une solution serverless performante et facile √† utiliser, sans les surcharges li√©es aux fonctionnalit√©s plus avanc√©es d'[[OpenFaaS]].  AXA l'utilise en interne, ce qui sugg√®re une adoption pour des cas d'usage sp√©cifiques n√©cessitant une solution plus l√©g√®re et plus contr√¥l√©e.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **L√©g√®ret√© et simplicit√©:**  Sa conception minimaliste facilite le d√©ploiement, la maintenance et la gestion.\n* **Efficacit√©:**  Optimis√©e pour les ressources limit√©es, elle consomme moins de ressources que les solutions plus compl√®tes.\n* **S√©curit√©:**  La surface d'attaque r√©duite am√©liore la s√©curit√© globale.\n* **Contr√¥le:**  AXA ayant d√©velopp√© la solution, le contr√¥le et l'adaptation √† ses besoins sp√©cifiques sont facilit√©s.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Manque de fonctionnalit√©s:**  Son approche minimaliste signifie l'absence de certaines fonctionnalit√©s avanc√©es pr√©sentes dans [[OpenFaaS]] (monitoring sophistiqu√©, gestion d'√©v√©nements complexes, etc.).\n* **Documentation limit√©e:**  √âtant une solution interne √† AXA, la documentation publique est probablement limit√©e ou inexistante.\n* **Adoption limit√©e:**  Le manque de large adoption limite la communaut√© et le support disponible.\n* **D√©pendance √† AXA:**  Le futur et le maintien de la solution d√©pendent des priorit√©s d'AXA.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "0158b215-3c8b-4d22-b80a-0dbae9306a1c",
        "title": "Spring AOP",
        "description": "---\nid: d1d0d5d0-ec94-4cb7-8dac-7b39d73a115b\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nSpring AOP ([[Aspect Oriented Programming (AOP)]]) est un framework [[Java]], bas√© sur [[Spring Framework]] qui permet d'ajouter des fonctionnalit√©s transversales √† une application sans modifier le code source principal.  Il permet de modulariser le code qui g√®re des pr√©occupations comme la journalisation, la s√©curit√©, ou la gestion des transactions, en les s√©parant du code m√©tier principal.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring AOP utilise un m√©canisme de *[[Proxy]]* pour intercepter les appels de m√©thodes et ex√©cuter du code additionnel avant, apr√®s, ou autour de l'appel de la m√©thode cibl√©e.  Ces morceaux de code additionnels sont appel√©s *aspects*.  Un aspect est d√©fini par un ensemble de *conseils* (*advice*), qui sp√©cifient quand et comment le code additionnel doit √™tre ex√©cut√©.  Les points d'ex√©cution de ces conseils sont d√©finis par des *points de jonction* (*join points*), qui repr√©sentent des points sp√©cifiques dans l'ex√©cution du programme (par exemple, l'appel d'une m√©thode, la manipulation d'une exception).\n\nSpring AOP supporte diff√©rents types de conseils :\n\n* **Avant (Before):** Le code s'ex√©cute avant l'appel de la m√©thode cibl√©e.\n* **Apr√®s (After):** Le code s'ex√©cute apr√®s l'appel de la m√©thode cibl√©e, que celle-ci r√©ussisse ou √©choue.\n* **Apr√®s retour (After returning):** Le code s'ex√©cute apr√®s l'appel de la m√©thode cibl√©e si celle-ci retourne une valeur avec succ√®s.\n* **Apr√®s lancement d'exception (After throwing):** Le code s'ex√©cute apr√®s l'appel de la m√©thode cibl√©e si celle-ci lance une exception.\n* **Autour (Around):** Le code s'ex√©cute avant et apr√®s l'appel de la m√©thode cibl√©e, et permet de contr√¥ler compl√®tement l'ex√©cution de la m√©thode.\n\n**Exemple utilisant annotations:**\n\n```java\nimport org.aspectj.lang.annotation.*;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\npublic class LoggingAspect {\n\n    @Before(\"execution(* com.example.service.*.*(..))\")\n    public void beforeMethodExecution(JoinPoint joinPoint) {\n        System.out.println(\"Avant l'ex√©cution de : \" + joinPoint.getSignature());\n    }\n\n    @AfterReturning(pointcut = \"execution(* com.example.service.*.*(..))\", returning = \"result\")\n    public void afterMethodExecution(JoinPoint joinPoint, Object result) {\n        System.out.println(\"Apr√®s l'ex√©cution de : \" + joinPoint.getSignature() + \" - R√©sultat : \" + result);\n    }\n\n    @AfterThrowing(pointcut = \"execution(* com.example.service.*.*(..))\", throwing = \"exception\")\n    public void afterThrowing(JoinPoint joinPoint, Throwable exception) {\n        System.out.println(\"Exception lev√©e lors de l'ex√©cution de : \" + joinPoint.getSignature() + \" - Exception : \" + exception.getMessage());\n    }\n}\n```\n\nCet exemple utilise des expressions pointcut pour d√©finir les m√©thodes √† intercepter.  `execution(* com.example.service.*.*(..))` intercepte toutes les m√©thodes de tous les classes dans le package `com.example.service`.\n\nA la diff√©rence de [[AspectJ]], Spring AOP cr√©er des proxy autour des objets afin d'ajouter les comportements voulu. Quand √† lui [[AspectJ]], vient modifier directement les objets au d√©marrage de l'application. Le code est concret.\nLa diff√©rence se fait donc dans la port√© offerte par les deux frameworks. [[AspectJ]] permet de toucher tout les fichiers (m√™me ceux des librairies), tandis que Spring AOP va se restreindre aux beans (m√™me port√© que [[Spring Framework]]).\n\n## Qu'est-ce qui est top ? üëç\n\n* **Modularit√©:** S√©pare les pr√©occupations transversales du code m√©tier, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application.\n* **Simplicit√©:**  L'int√©gration avec [[Spring Framework]] est simple et bien document√©e.\n* **Pouvoir d'expression:** Les expressions Pointcut permettent de cibler pr√©cis√©ment les m√©thodes √† intercepter.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:**  Pour des applications complexes, la configuration et la gestion des aspects peuvent devenir difficiles.\n* **D√©bogage:**  Le d√©bogage peut √™tre plus complexe en raison de l'utilisation des [[Proxy]].\n* **Performances:** L'utilisation des [[Proxy]] peut avoir un l√©ger impact sur les performances, bien que g√©n√©ralement n√©gligeable.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n(Laisser vide)\n"
    },
    {
        "id": "9e434a98-3fa9-48e3-9369-8abea2e18897",
        "title": "Spring Boot Actuator",
        "description": "---\nid: d8c7dbd9-13a6-477b-b02b-4905b243151c\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Spring Boot Actuator** est un module de [[Spring Boot]] qui permet d'ajouter des fonctionnalit√©s de gestion et de surveillance √† une application, en exposant des **endpoints** pour r√©cup√©rer des informations sur son √©tat, ses m√©triques, sa sant√©, etc.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nSpring Boot Actuator offre un ensemble d'**endpoints** accessibles via HTTP qui fournissent des informations sur la sant√©, les performances et la configuration de l‚Äôapplication en temps r√©el. Ces endpoints sont principalement utilis√©s pour :\n\n- **Surveillance** : Permet de suivre l'√©tat de sant√© de l'application, ses m√©triques de performance, et la configuration environnementale.\n- **Gestion des logs** : Permet d'ajuster dynamiquement les niveaux de logs.\n- **Diagnostics** : Fournit des informations d√©taill√©es sur les threads ou la m√©moire pour d√©tecter des probl√®mes de performance.\n\nQuelques endpoints cl√©s :\n\n- `/actuator/health` : Indique la sant√© de l‚Äôapplication.\n- `/actuator/metrics` : Expose les statistiques de performance (via [[Micrometer]]).\n- `/actuator/info` : Informations g√©n√©rales sur l'application.\n- `/actuator/env` : D√©taille les propri√©t√©s d‚Äôenvironnement.\n- `/actuator/loggers` : Permet de g√©rer les niveaux de logs.\n- `/actuator/threaddump` : Affiche un dump des threads pour aider au diagnostic des probl√®mes de performance.\n- `/actuator/heapdump` : Permet de prendre un dump de la m√©moire Java.\n\n**Important** : En production, il est crucial de s√©curiser ou masquer certains endpoints pour √©viter des risques de s√©curit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Surveillance facilit√©e** : Permet de suivre facilement l'√©tat de l'application et d'effectuer des diagnostics.\n- **Int√©gration avec [[Prometheus]]** : Expose des m√©triques que [[Prometheus]] peut r√©cup√©rer via `/actuator/metrics`, gr√¢ce √† l'int√©gration avec **[[Micrometer]]**.\n- **Gestion dynamique des logs** : Permet de changer les niveaux de logs √† chaud, ce qui facilite le d√©bogage en production.\n- **Large gamme d'endpoints** : Fournit une vari√©t√© d'informations (sant√©, performance, m√©moire, etc.) pour un contr√¥le complet de l'application.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **S√©curit√©** : Par d√©faut, les endpoints peuvent exposer des informations sensibles. Il est essentiel de les s√©curiser en production.\n- **Performance** : L'ajout de plusieurs endpoints peut avoir un impact sur la performance, surtout s'ils sont mal configur√©s ou trop nombreux.\n- **D√©pendance √† [[Micrometer]]** : Pour certaines fonctionnalit√©s comme les m√©triques, il est n√©cessaire d'int√©grer [[Micrometer]], ce qui peut ajouter une couche de complexit√©.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "7e4eec89-9862-487b-add2-797220c08b74",
        "title": "Spring Cloud Config",
        "description": "---\nid: a725a0a3-511b-459b-a1d0-6f946cf0c527\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nSpring Cloud Config est un outil permettant de centraliser la gestion des configurations dans une architecture de [[Micros services]]. Il permet √† tous les services de r√©cup√©rer leurs configurations depuis un serveur centralis√©.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nSpring Cloud Config permet de centraliser les configurations de tous les [[Micros services]] d'une application dans un serveur de configuration. Ce serveur peut r√©cup√©rer les configurations depuis divers fournisseurs (comme [[Git]] ou [[S3]]). Chaque [[Micros services]], √† son d√©marrage, se connecte √† ce serveur pour r√©cup√©rer sa propre configuration, ce qui simplifie la gestion de configurations multiples et complexes dans une architecture distribu√©e.\n\n- Un serveur Spring Cloud Config est mis en place en ajoutant une d√©pendance et en activant `@EnableConfigServer` sur la classe de d√©marrage.\n- Le serveur peut r√©cup√©rer des configurations depuis des sources comme [[Git]], avec un format sp√©cifique de fichiers (`application.yml`, `application.properties`).\n- Chaque [[Micros services]] client r√©cup√®re sa configuration via un URL sp√©cifique en fonction de son nom, de son profil et de son label [[Git]].\n\nLes configurations sont versionn√©es et g√©r√©es comme du code, permettant de b√©n√©ficier d'un suivi et de la r√©versibilit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Centralisation des configurations** : Une seule source pour g√©rer toutes les configurations des [[Micros services]], ce qui simplifie la maintenance.\n- **Versioning** : Utiliser [[Git]] pour stocker les configurations permet de versionner, suivre l'historique et revenir √† des versions pr√©c√©dentes facilement.\n- **Flexibilit√© des sources de configuration** : Supporte divers fournisseurs comme [[Git]], [[S3]], ce qui permet de s‚Äôadapter √† diff√©rents environnements.\n- **Simplicit√© d'int√©gration** : L'int√©gration dans [[Spring Boot]] se fait via de simples d√©pendances et annotations.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance au serveur de configuration** : Si le serveur de configuration tombe, les services ne pourront plus r√©cup√©rer leurs configurations.\n- **Complexit√© de mise en place** : Bien que la configuration de base soit simple, la gestion de multiples profils et labels [[Git]] peut compliquer la configuration des services.\n- **Scalabilit√© du serveur** : Il est important de mettre en place des r√©plicas du serveur pour garantir la disponibilit√©, mais cela peut ajouter de la complexit√©.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "d022bf8a-c96a-4f14-90a3-ae8cb7ad7e26",
        "title": "Certification Java 17 - Streams et Expressions Lambda",
        "description": "---\nid: 4278c6cd-387f-47f0-a011-d5c10f9d1b1c\n---\n## **8.1. Utilisation des `Stream<T>`, `IntStream`, `DoubleStream`**\n\nUn **Stream** est une s√©quence d‚Äô√©l√©ments pouvant √™tre trait√©e de mani√®re d√©clarative et fonctionnelle.\n\n|**Type**|**Description**|\n|---|---|\n|`Stream<T>`|Flux d‚Äôobjets g√©n√©riques|\n|`IntStream`|Flux de `int` (√©vite l‚Äôauto-boxing)|\n|`DoubleStream`|Flux de `double`|\n|`LongStream`|Flux de `long`|\n\n### **Cr√©ation d‚Äôun `Stream`**\n\n```java\nimport java.util.stream.*;\n\nList<String> noms = List.of(\"Alice\", \"Bob\", \"Charlie\");\nStream<String> stream = noms.stream();\nstream.forEach(System.out::println);\n```\n\nüìå **Un `Stream` ne peut √™tre consomm√© qu‚Äôune seule fois.**\n\n---\n\n### **Utilisation des `IntStream`, `DoubleStream`**\n\n```java\nIntStream.range(1, 5).forEach(System.out::print); // 1234\nDoubleStream.of(3.14, 2.71, 1.41).forEach(System.out::println);\n```\n\nüìå **`range(1,5)` g√©n√®re `{1, 2, 3, 4}` (exclut `5`), `rangeClosed(1,5)` inclut `5`.**\n\n---\n\n## **8.2. `filter()`, `map()`, `reduce()`, `collect()`**\n\n### **1. `filter()` : S√©lectionne les √©l√©ments correspondant √† une condition**\n\n```java\nList<String> noms = List.of(\"Alice\", \"Bob\", \"Charlie\");\nList<String> resultat = noms.stream()\n    .filter(n -> n.startsWith(\"A\"))\n    .toList(); // Java 16+\nSystem.out.println(resultat); // [Alice]\n```\n\n---\n\n### **2. `map()` : Transforme les √©l√©ments**\n\n```java\nList<Integer> longueurs = noms.stream()\n    .map(String::length)\n    .toList();\nSystem.out.println(longueurs); // [5, 3, 7]\n```\n\nüìå **`map()` applique une fonction √† chaque √©l√©ment du `Stream`.**\n\n---\n\n### **3. `reduce()` : R√©duction des √©l√©ments √† une seule valeur**\n\n```java\nint somme = IntStream.of(1, 2, 3, 4)\n    .reduce(0, Integer::sum);\nSystem.out.println(somme); // 10\n```\n\nüìå **Permet de combiner les √©l√©ments (somme, multiplication, concat√©nation, etc.).**\n\n---\n\n### **4. `collect()` : Transformer un `Stream` en collection**\n\n```java\nList<String> listeMaj = noms.stream()\n    .map(String::toUpperCase)\n    .collect(Collectors.toList());\nSystem.out.println(listeMaj); // [ALICE, BOB, CHARLIE]\n```\n\nüìå **`collect()` permet de rassembler les √©l√©ments dans une `List`, `Set` ou `Map`.**\n\n---\n\n## **8.3. D√©composition, concat√©nation, partitionnement**\n\n### **1. `flatMap()` : D√©composition d‚Äô√©l√©ments imbriqu√©s**\n\n```java\nList<List<Integer>> listOfLists = List.of(List.of(1, 2), List.of(3, 4));\nList<Integer> flattenedList = listOfLists.stream()\n    .flatMap(List::stream)\n    .toList();\nSystem.out.println(flattenedList); // [1, 2, 3, 4]\n```\n\nüìå **`flatMap()` aplatit plusieurs collections en un seul `Stream`.**\n\n---\n\n### **2. Concat√©nation de `Stream`**\n\n```java\nStream<String> s1 = Stream.of(\"A\", \"B\");\nStream<String> s2 = Stream.of(\"C\", \"D\");\n\nStream<String> concatStream = Stream.concat(s1, s2);\nconcatStream.forEach(System.out::print); // ABCD\n```\n\nüìå **`Stream.concat(s1, s2)` fusionne deux flux.**\n\n---\n\n### **3. Partitionnement (`partitioningBy`)**\n\n```java\nMap<Boolean, List<String>> partition = noms.stream()\n    .collect(Collectors.partitioningBy(n -> n.length() > 3));\n\nSystem.out.println(partition);\n// {false=[Bob], true=[Alice, Charlie]}\n```\n\nüìå **Retourne deux groupes : ceux qui respectent la condition (`true`) et les autres (`false`).**\n\n---\n\n## **8.4. Streams S√©quentiels et Parall√®les**\n\n### **1. `parallelStream()` : Ex√©cution multi-thread**\n\n```java\nList<String> noms = List.of(\"Alice\", \"Bob\", \"Charlie\");\nnoms.parallelStream()\n    .forEach(System.out::println); // Ex√©cution parall√®le\n```\n\nüìå **Peut am√©liorer les performances sur des collections volumineuses.**\n\n### **2. `parallel()` sur un `Stream` existant**\n\n```java\nnoms.stream()\n    .parallel()\n    .forEach(System.out::println);\n```\n\nüìå **Attention aux op√©rations d√©pendant de l‚Äôordre !**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Cr√©ation de `Stream<T>`, `IntStream`, `DoubleStream`**  \n‚úÖ **Op√©rations `filter()`, `map()`, `reduce()`, `collect()`**  \n‚úÖ **D√©composition (`flatMap`), concat√©nation, partitionnement**  \n‚úÖ **Utilisation des `Streams` s√©quentiels et parall√®les**\n\n---"
    },
    {
        "id": "c52446cb-bd97-4c08-a19f-20ea2a450b58",
        "title": "Supprimer des fichiers sensibles pousser sur un repository",
        "description": "---\nid: 80596fd6-1ff6-4512-8919-fe89db6b5c22\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Supprimer des fichiers sensibles pouss√©s sur un repo** consiste √† retirer des fichiers contenant des informations sensibles (comme des mots de passe ou des cl√©s API) qui ont √©t√© accidentellement pouss√©s dans un d√©p√¥t [[Git]]. Pour cela, des outils comme `git-filter-branch` ou `bfg-repo-cleaner` permettent de nettoyer l'historique du d√©p√¥t.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **git-filter-branch** : Outil int√©gr√© √† Git qui permet de r√©√©crire l'historique d'un d√©p√¥t en supprimant des fichiers ou des r√©pertoires sp√©cifiques, ainsi que toutes leurs traces dans l‚Äôhistorique des commits.\n    \n- **bfg-repo-cleaner** : Outil tiers √©crit en Scala, con√ßu sp√©cifiquement pour nettoyer un d√©p√¥t Git en supprimant rapidement des fichiers ou des objets (comme des cl√©s API) qui ne doivent pas √™tre pr√©sents. Il est plus rapide et plus simple que `git-filter-branch` et peut √™tre √©tendu en Scala si n√©cessaire.\n    \n\nExemples de commandes avec BFG :\n\n- `bfg --delete-files id_{dsa,rsa} my-repo.git` : Supprime les fichiers de type id_dsa et id_rsa.\n- `bfg --strip-blobs-bigger-than 50M my-repo.git` : Supprime les fichiers de plus de 50 Mo.\n- `bfg --replace-text passwords.txt my-repo.git` : Remplace les mots contenus dans un fichier texte (par exemple des mots de passe) dans tout l'historique.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **BFG est plus rapide** : Par rapport √† `git-filter-branch`, il est plus rapide et plus efficace, surtout pour les gros d√©p√¥ts.\n- **Simplicit√©** : BFG est con√ßu uniquement pour la suppression de fichiers sensibles, rendant son usage plus direct et moins complexe que `git-filter-branch`.\n- **Extensible** : √âtant √©crit en Scala, il est possible de l‚Äôadapter √† des besoins sp√©cifiques.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **git-filter-branch plus flexible** : Bien que BFG soit plus rapide, `git-filter-branch` reste plus flexible pour les t√¢ches complexes n√©cessitant une r√©√©criture d‚Äôhistorique plus fine.\n- **Pas de protection native contre les fichiers d√©j√† clon√©s** : La suppression dans l'historique ne les retire pas des copies locales d√©j√† clon√©es du d√©p√¥t. Il est donc n√©cessaire d'informer les autres contributeurs pour √©viter qu'ils ne poussent √† nouveau ces fichiers sensibles.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "3926e5c7-d157-433e-b410-32b6cfcc9a63",
        "title": "Test Driven Developpement (TDD)",
        "description": "---\nid: ff0f5989-5d86-4a56-aeed-d3be0809cc54\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi ‚ùì\n\nLe **TDD** (Test Driven Development) est une m√©thode de d√©veloppement (Et pas simplement une strat√©gie de test) o√π les tests sont √©crits avant le code. Contrairement aux m√©thodes classiques o√π les tests viennent apr√®s le d√©veloppement, le TDD place les tests au centre du processus pour garantir un code de meilleure qualit√©.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n## Cycle du TDD\nLe TDD suit un cycle it√©ratif en trois √©tapes :\n\n1. **√âcrire un test qui √©choue** : On commence par cr√©er un test qui v√©rifie un comportement sp√©cifique, sachant qu'il √©chouera au d√©part.\n2. **√âcrire le minimum de code pour faire passer le test** : Ensuite, on r√©dige juste assez de code pour que le test passe, sans chercher √† le rendre complexe.\n\t- C'est super important de faire des baby steps. C'est comme √ßa qu'on arrive √† la meilleure conception. Il faut √©viter de trop anticiper la conception.\n3. **Refactoriser le code** : Une fois que le test passe, on am√©liore et optimise le code tout en s‚Äôassurant qu‚Äôil reste fonctionnel (les tests passent toujours).\n\nLe processus permet d'am√©liorer la qualit√© du code de mani√®re incr√©mentale et de rendre la conception plus simple et fiable.\nOn va clairement moins s'emmerder, et rendre le code plus fiable et plus simple.\nIl est tr√®s important de soigner autant le code de test que le code de prod, si on veut qu'ils puissent √™tre maintenable.\n\n## Ecoles de TDD\n### Chicago/Detroit School :\n- Ces √©coles sont parfois consid√©r√©es comme des variantes de la **TDD classique** mais avec une approche plus stricte et plus disciplin√©e dans l'application du processus.\n- Les partisans de ces √©coles insistent sur l'importance de ne **jamais √©crire de code** qui n‚Äôa pas d'abord √©t√© test√©. Leurs pratiques privil√©gient la simplicit√© et la rigueur dans le respect du cycle TDD (√©crire un test, coder, refactoriser).\n- L'accent est mis sur un **code tr√®s test√©**, mais parfois au prix d'une mise en ≈ìuvre plus rigide de la m√©thode.\n### London School :    \n- La **London School** adopte une approche plus souple et pragmatique du TDD.\n- Elle met l'accent sur l‚Äôimportance d'√©crire des tests qui sont facilement compr√©hensibles et utiles √† long terme. Plut√¥t que de se concentrer strictement sur la couverture de test, cette √©cole encourage √† **distinguer les tests utiles des tests superflus**.\n- L‚Äôid√©e est de faire en sorte que le processus soit **adaptable au projet**, en fonction des besoins r√©els.\n### Le style Ian Cooper :\n- Ian Cooper, un d√©fenseur du **TDD moderne**, met l'accent sur l‚Äôapplication du TDD pour une **architecture propre et √©volutive**.\n- Il insiste sur l'importance de tester des **unit√©s de travail coh√©rentes et isol√©es**, et de se concentrer sur des tests qui correspondent vraiment √† l‚Äôintention et √† la conception du syst√®me.\n- Son style met en avant la pratique de **ne pas tester √† outrance** et de bien d√©finir les limites des tests pour garantir qu'ils aient un impact r√©el sur la qualit√© du code.\n### Diamond TDD :\n- Le **Diamond TDD** est une approche qui introduit une **flexibilit√© dans le cycle TDD** traditionnel, en adoptant une structure en forme de diamant.\n- Ce style combine **refactoring, test et d√©veloppement** en fonction des besoins du projet et du code, plut√¥t que de suivre rigoureusement les √©tapes lin√©aires de TDD classique. L'id√©e est de **r√©√©valuer constamment la conception** et les tests pour trouver un √©quilibre optimal.\n- Il s'agit d'une approche plus dynamique, o√π le d√©veloppement et les tests ne sont pas forc√©ment r√©alis√©s dans un ordre strict, mais peuvent s'adapter en fonction des retours imm√©diats.\n\n## Documentation as code\nIl est possible d'utiliser le TDD comme d'une documentation fonctionnelle. Pour cela on va pouvoir utiliser l'[[Ubiquitous Language]] du projet afin de n'importe qui puisse comprendre les sp√©cificit√©s de la fonctionnalit√©.\n\n---\n# Qu'est ce qui est top ? üëç\n\n- **Documentation vivante** : Les tests servent de documentation dynamique, qui est mise √† jour en fonction des √©volutions du code. Si un test √©choue, cela indique qu‚Äôune modification est n√©cessaire, ce qui aide √† suivre l‚Äô√©volution du code et √† pr√©server les exigences m√©tiers.\n- **S√©curit√© lors du refactoring** : Le TDD offre un filet de s√©curit√©, ce qui permet de modifier le code ou de le refactoriser sans risque de r√©gression, car les tests signalent rapidement les erreurs introduites.\n- Force √† rendre son code testable. On cr√©ant des abstractions sur les d√©pendances afin de les mocker ou de cr√©er des stubs (en fonction de l'√©cole).\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Processus contraignant au d√©part** : L'√©criture des tests avant le code peut sembler difficile et ralentir initialement le d√©veloppement.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "a39dfca8-2229-4e91-90f6-1230c3170a4b",
        "title": "Test de mutation",
        "description": "---\nid: 344bca62-9704-4c85-9b12-7e21128579e2\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe test de mutation est une technique utilis√©e pour √©valuer la qualit√© des [[Test unitaire]]. Il consiste √† introduire des mutations (modifications) dans le code et √† v√©rifier si les tests √©chouent. Si un test passe apr√®s la mutation, cela signifie que le test n'est pas suffisamment pr√©cis pour d√©tecter les erreurs.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **But** : V√©rifier l'efficacit√© des [[Test unitaire]] en s'assurant qu'ils d√©tectent bien les changements dans le code.\n- **Mutations** : Ce sont des modifications syst√©matiques dans le code, comme changer un op√©rateur, inverser une condition, ou supprimer une instruction.\n- **Processus** :\n    1. V√©rification de la validit√© des [[Test unitaire]] existants.\n    2. Application de mutations sur le code.\n    3. Ex√©cution des [[Test unitaire]] sur les mutants g√©n√©r√©s.\n- **Analyse** : Si un test passe malgr√© une mutation, cela indique que le test est incomplet ou trop laxiste. L'objectif est que tous les mutants √©chouent, ce qui montre que le test est robuste.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Am√©liore la couverture des tests** : Permet de s'assurer que les tests couvrent r√©ellement tous les cas possibles.\n- **Identifie les tests inefficaces** : Permet de rep√©rer les tests qui ne d√©tectent pas les erreurs dans le code.\n- **Renforce la qualit√© du code** : En am√©liorant les tests, la qualit√© globale du projet est am√©lior√©e.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Consommation de ressources** : G√©n√©rer et tester des mutants peut √™tre co√ªteux en termes de temps et de ressources.\n- **Peut donner des faux positifs** : Si le pool de mutations est mal con√ßu, certains mutants peuvent passer, faussant ainsi l'√©valuation de la qualit√© des tests.\n- **Complexit√©** : La mise en place d'un test de mutation n√©cessite une bonne configuration et peut √™tre complexe √† int√©grer dans le flux de travail de d√©veloppement.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "66b6af95-a52b-458d-8494-57219fc88ff9",
        "title": "Testinfra",
        "description": "---\nid: 6697390d-2ee4-497d-9f15-9728cd165ca0\n---\n# Rapidement c'est quoi‚ùì\n\nTestinfra est un framework de [[Test d'infrastructure]] bas√© sur [[Python]]. Il permet de v√©rifier l'√©tat de vos serveurs et de votre infrastructure en ex√©cutant des tests √©crits en [[Python]] simple et lisible.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nTestinfra est un outil puissant pour l'automatisation des [[Test d'infrastructure]].  Il fonctionne en se connectant √† des machines distantes (via [[SSH]], [[WinRM]], etc.) et en ex√©cutant des assertions sur l'√©tat du syst√®me.  Au lieu de d√©pendre de commandes sp√©cifiques √† un syst√®me d'exploitation ou √† un outil de provisionnement, Testinfra utilise les modules [[Python]] standard et les modules sp√©cifiques √† l'infrastructure pour interagir avec le syst√®me cible.  Cela assure une grande portabilit√© et une simplification du processus de test.\n\nLes tests sont √©crits en Python et utilisent une syntaxe simple et intuitive.  On peut tester une vari√©t√© de choses, incluant :\n\n* **Pr√©sence de fichiers et de dossiers:** V√©rifier si un fichier existe, s'il est lisible, s'il a les permissions appropri√©es.\n* **Services syst√®me:** V√©rifier si un service est en marche, arr√™t√©, ou en cours de red√©marrage.\n* **Packages logiciels:** V√©rifier si un package est install√©, sa version, etc.\n* **Ports r√©seau:** V√©rifier si un port est ouvert ou ferm√©.\n* **Contenu de fichiers de configuration:** V√©rifier la pr√©sence de lignes sp√©cifiques dans un fichier de configuration.\n* **Commandes syst√®me:** Ex√©cuter des commandes et valider leur sortie.\n* **Utilisateurs et groupes:** V√©rifier l'existence et les permissions des utilisateurs et des groupes.\n\n\nTestinfra s'int√®gre facilement dans les [[pipelines CI/CD]] et permet de valider l'√©tat de votre infrastructure de mani√®re automatis√©e et fiable.  Il est particuli√®rement utile pour le test d'[[Infra as Code (IaC]] en permettant de v√©rifier que l'infrastructure provisionn√©e correspond bien √† la configuration souhait√©e.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplicit√© et lisibilit√©:** Les tests sont √©crits en Python, ce qui les rend faciles √† √©crire, √† lire et √† maintenir.\n* **Portabilit√©:** Fonctionne sur plusieurs syst√®mes d'exploitation ([[Linux]], [[Windows]], [[macOS]]) et utilise un langage de test ind√©pendant des outils de provisionnement.\n* **Int√©gration CI/CD:** S'int√®gre facilement dans les [[pipelines CI/CD]].\n* **Large couverture:** Permet de tester une grande vari√©t√© d'aspects de l'infrastructure.\n* **Bas√© sur [[Python]]:**  Tire parti de l'√©cosyst√®me riche de [[Python]] et de ses librairies.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:** N√©cessite une connaissance de base de [[Python]].\n* **D√©pendance √† [[Python]]:**  Fonctionne uniquement avec [[Python]].\n* **D√©bogage:** Le d√©bogage des tests peut √™tre plus complexe que avec certains outils sp√©cifiques.  (Cependant, les capacit√©s de d√©bogage de [[Python]] restent disponibles)\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "87ba0245-8bf1-4701-ade6-2b36a270bc94",
        "title": "Unit√© responsive css",
        "description": "---\nid: 26571386-fada-49d8-b94c-b71bcd74cc84\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes unit√©s responsive [[CSS]] permettent de d√©finir des tailles relatives en fonction de la taille du viewport, c‚Äôest-√†-dire la fen√™tre d'affichage. Elles sont particuli√®rement utiles pour les designs fluides et adaptatifs sur diff√©rents appareils.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **`vh` (viewport height)** : Repr√©sente 1% de la hauteur du viewport. Par exemple, `100vh` occupe toute la hauteur de l'√©cran.\n- **`vw` (viewport width)** : Repr√©sente 1% de la largeur du viewport. Par exemple, `100vw` occupe toute la largeur de l'√©cran.\n- **`lvh` (large viewport height)** : Unit√© relative √† la hauteur du \"grand viewport\". Elle est stable et ignore les variations dues √† la barre d'adresse des appareils mobiles.\n- **`svh` (small viewport height)** : Repr√©sente la hauteur en excluant les √©l√©ments qui se cachent (comme la barre d'adresse sur mobile), utile pour un redimensionnement plus stable.\n- **`dvh` (dynamic viewport height)** : Similaire √† `lvh` et `svh`, mais prend en compte les changements dynamiques du viewport dus √† l‚Äôorientation ou des √©v√©nements d‚Äôinterface utilisateur.\n- **`vmin` (viewport minimum)** : Repr√©sente la plus petite des valeurs entre `vh` et `vw`, pour maintenir une proportion uniforme entre la largeur et la hauteur du viewport, quel que soit l'orientation de l'appareil.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Adaptabilit√©** : Ces unit√©s permettent de cr√©er des interfaces qui s'ajustent automatiquement √† la taille du viewport, rendant le design plus flexible.\n- **Stabilit√© sur mobile** : Les unit√©s comme `lvh`, `svh`, et `dvh` sont sp√©cialement con√ßues pour g√©rer les variations de taille sur les appareils mobiles, offrant une exp√©rience utilisateur plus pr√©visible.\n- **Proportions coh√©rentes** : `vmin` permet de maintenir des proportions constantes entre la largeur et la hauteur du viewport, quelle que soit l'orientation de l'√©cran.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Probl√®mes de compatibilit√©** : Certaines unit√©s comme `lvh`, `svh`, et `dvh` peuvent ne pas √™tre support√©es de mani√®re uniforme dans tous les navigateurs, surtout dans les versions plus anciennes.\n- **Complexit√© accrue** : Utiliser plusieurs unit√©s responsive dans un m√™me projet peut ajouter de la complexit√©, et il faut tester minutieusement pour s'assurer de la coh√©rence sur tous les appareils.\n- **Incertitude sur les mobiles** : Le comportement de certaines unit√©s (notamment `vh` et `vw`) peut √™tre affect√© par des √©l√©ments de l'interface (barre d‚Äôadresse ou navigation), rendant les tailles moins fiables.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "1ff270c7-4a18-4105-9d25-25da9d598351",
        "title": "VitePress",
        "description": "---\nid: b9f8677a-eceb-429a-8172-e5dea5e9833b\n---\n# Rapidement c'est quoi‚ùì\n\nVitePress est un g√©n√©rateur de site statique [[Server Side Generation (SSG)]] bas√© sur [[Vite]] et [[Vue.js]].  Il permet de cr√©er rapidement et facilement des sites web, notamment des documentations.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nVitePress est un g√©n√©rateur de site statique qui tire parti de la vitesse et des performances de [[Vite]], un serveur de d√©veloppement rapide et un outil de construction.  Il utilise [[Vue.js]] pour le rendu des pages, permettant de cr√©er des sites web dynamiques et interactifs malgr√© la nature statique du r√©sultat final.  Contrairement √† des g√©n√©rateurs de sites statiques plus traditionnels, VitePress offre un processus de d√©veloppement plus rapide gr√¢ce √† l'utilisation de Hot Module Replacement (HMR).  Cela signifie que les modifications de code sont instantan√©ment refl√©t√©es dans le navigateur sans n√©cessiter un rechargement complet de la page.  Il est particuli√®rement bien adapt√© √† la cr√©ation de documentations, car il offre des fonctionnalit√©s int√©gr√©es pour la gestion de la navigation, la recherche, et le d√©ploiement.  Le syst√®me de fichiers est utilis√© pour structurer le contenu, ce qui facilite la gestion et la maintenance du site.  La configuration est minimale, rendant VitePress accessible m√™me aux d√©veloppeurs peu exp√©riment√©s avec [[Vue]].  Il fournit √©galement des th√®mes par d√©faut personnalisables.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Rapidit√© de d√©veloppement:** Le HMR de Vite permet un cycle de d√©veloppement extr√™mement rapide.\n* **Facilit√© d'utilisation:** Configuration simple et intuitive, id√©ale pour les d√©butants en [[Vue.js]].\n* **Int√©gration avec [[Vue.js]]:** Permet de tirer parti de la puissance et de la flexibilit√© de [[Vue.js]].\n* **Performance:** Les sites g√©n√©r√©s sont optimis√©s pour la vitesse de chargement.\n* **Bon pour la documentation:**  Fonctionnalit√©s int√©gr√©es facilitant la cr√©ation de documentations.\n* **Syst√®me de theming:** Permet une personnalisation facile de l'apparence du site.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Moins flexible que des solutions plus complexes:**  Peut manquer de flexibilit√© pour des projets tr√®s sp√©cifiques ou complexes.  Les options de personnalisation, bien que pr√©sentes, sont plus limit√©es que des solutions plus g√©n√©ralistes.\n* **√âcosyst√®me moins large que d'autres [[Server Side Generation (SSG)]]:**  La communaut√© et les plugins disponibles sont moins nombreux que pour des SSG plus matures comme [[Astro]], [[Gatsby]] ou [[Hugo]].\n* **D√©pendance √† Vue.js:**  Si vous n'√™tes pas familier avec Vue.js, il faudra apprendre √† l'utiliser.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "73b8a1b5-01f0-4e3f-a721-f5ba47faef97",
        "title": "pg_vector",
        "description": "---\nid: 77c31383-8845-47ff-89f1-44766cf8f9b3\n---\n# Rapidement c'est quoi‚ùì\n\npg_vector est une extension pour le syst√®me de gestion de base de donn√©es [[PostgreSQL]] permettant d'indexer et de rechercher des vecteurs.  Cela facilite la mise en ≈ìuvre de la recherche s√©mantique et des syst√®mes de recommandation au sein d'une [[Base de donn√©e]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\npg_vector est une extension open-source pour [[PostgreSQL]] qui ajoute la capacit√© de stocker et de rechercher efficacement des vecteurs de donn√©es.  Ces vecteurs, g√©n√©ralement cr√©√©s par des mod√®les d'apprentissage automatique (embeddings), repr√©sentent des informations s√©mantiques (texte, images, audio, etc.).  L'extension fournit un type de donn√©es d√©di√© (`vector`), des op√©rateurs et des index sp√©cifiques pour optimiser les requ√™tes de recherche de similarit√©.\n\nLe c≈ìur de pg_vector r√©side dans ses capacit√©s de recherche par similarit√©.  Au lieu de rechercher des correspondances exactes, il permet de trouver les vecteurs les plus proches d'un vecteur donn√©, en utilisant des m√©triques de distance comme la distance euclidienne ou la distance cosinus.  Cette approche est cruciale pour les applications de recherche s√©mantique, o√π l'objectif est de trouver des √©l√©ments similaires en termes de signification, m√™me si les mots cl√©s ne correspondent pas parfaitement.\n\nL'extension g√®re l'indexation des vecteurs, ce qui permet des recherches rapides et efficaces m√™me sur de grands ensembles de donn√©es.  Les index utilis√©s optimisent la recherche en espace vectoriel, r√©duisant le temps de traitement et am√©liorant les performances.  Elle fournit √©galement des fonctions pour calculer les distances entre les vecteurs et pour effectuer des recherches √† l'aide de ces distances.\nCette extension permet de convertir [[PostgreSQL]] en une [[Base de donn√©e vectorielle]], id√©al pour la cr√©ation de [[RAG]] dans les [[Large Language Model (LLM)]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Int√©gration native avec [[PostgreSQL]]:**  Pas besoin d'une solution externe complexe.  Tout est g√©r√© au sein de la base de donn√©es.\n* **Performances:**  L'utilisation d'index optimis√©s permet des recherches rapides et efficaces, m√™me sur de tr√®s grands ensembles de donn√©es vectoris√©es.\n* **[[Open-source]] et communaut√© active:**  Acc√®s au code source, contribution possible et communaut√© pour le support.\n* **Simplicit√© d'utilisation:**  Relativement facile √† installer et √† utiliser, m√™me pour ceux qui ne sont pas experts en bases de donn√©es.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Limit√© √† [[PostgreSQL]]:**  L'extension ne fonctionne qu'avec PostgreSQL.  L'utilisation avec d'autres bases de donn√©es n√©cessite une solution alternative.\n* **D√©pendance aux mod√®les d'apprentissage automatique:**  N√©cessite de g√©n√©rer des vecteurs √† l'aide de mod√®les externes.  L'extension ne fournit pas de fonctionnalit√© de cr√©ation de vecteurs.\n* **Complexit√© potentielle pour des applications tr√®s sp√©cifiques:**  La configuration optimale des index et le choix de la m√©trique de distance peuvent n√©cessiter une expertise technique.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[Base de donn√©e SQL]]"
    },
    {
        "id": "bc62b3e7-b04a-4d75-8ed7-1d1b2693304f",
        "title": "vLLM",
        "description": "---\nid: fb7bce3a-8584-449e-8086-fa44d07ff590\n---\n# Rapidement c'est quoi‚ùì\n\nvLLM est un outil permettant de d√©ployer rapidement et facilement de grands mod√®les de langage ([[Large Language Model (LLM)]]) sous forme d'API web compatible avec l'API d'[[OpenAI]].  Cela permet d'utiliser les SDK OpenAI existants avec des mod√®les LLM personnalis√©s.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nvLLM est une infrastructure [[Open-source]] con√ßue pour servir des mod√®les de langage volumineux (LLMs) via une API [[RESTful]] imitant celle d'OpenAI.  Au lieu de devoir construire une infrastructure complexe de serveurs et de g√©rer la mise √† l'√©chelle, vLLM permet de d√©ployer un LLM existant (entra√Æn√© pr√©alablement) et de le rendre accessible via une interface simple et standardis√©e.  L'avantage cl√© r√©side dans la compatibilit√© avec les SDK OpenAI : les applications existantes qui utilisent l'API OpenAI peuvent fonctionner sans modification majeure avec un LLM d√©ploy√© via vLLM, simplement en changeant l'URL de l'API.  vLLM g√®re la mise en m√©moire du mod√®le, le parall√©lisme des requ√™tes, et optimise les performances pour servir efficacement des requ√™tes d'inf√©rence (g√©n√©rer du texte, r√©pondre √† des questions, etc.).  Il est g√©n√©ralement utilis√© avec des mod√®les quantifi√©s pour r√©duire la taille m√©moire n√©cessaire et am√©liorer les performances.  Il propose diff√©rents modes de service (ex : serveur unique, serveur distribu√©) pour s'adapter aux besoins en ressources et au volume de requ√™tes.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Compatibilit√© OpenAI:**  Permet une transition facile vers des LLM personnalis√©s sans modifier le code client.\n* **Simplicit√© de d√©ploiement:**  Facilite le processus de mise en production d'un LLM, simplifiant l'infrastructure n√©cessaire.\n* **Performances:** Optimis√© pour g√©rer les requ√™tes d'inf√©rence efficacement, m√™me avec des mod√®les volumineux.\n* **Open-source:** Accessible, modifiable et am√©liorable par la communaut√©.\n* **Scalabilit√©:**  Possibilit√© de d√©ploiement sur des serveurs multiples pour une meilleure gestion des charges importantes.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© initiale (potentielle):** Bien que visant la simplicit√©, la configuration et le d√©ploiement initiaux peuvent n√©cessiter une certaine expertise technique, notamment en ce qui concerne la gestion des mod√®les et des ressources.\n* **D√©pendances:** N√©cessite des biblioth√®ques sp√©cifiques et un environnement d'ex√©cution adapt√©.\n* **Ressources:**  Le d√©ploiement de grands mod√®les n√©cessite des ressources mat√©rielles importantes (RAM, GPU).\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n[[Intelligence Artificielle]]\n"
    },
    {
        "id": "69136136-c910-4337-baa8-695b2bdbcf2e",
        "title": "",
        "description": "# Gestion des Exceptions en Java\n\nCette note d√©taille la gestion des exceptions en Java, un m√©canisme crucial pour la robustesse et la fiabilit√© des applications.  Une bonne gestion des exceptions permet d'anticiper et de traiter les erreurs de mani√®re √©l√©gante, emp√™chant ainsi des plantages inattendus.\n\n## 1. Qu'est-ce qu'une exception ?\n\nUne exception est un √©v√©nement qui interrompt le flux normal d'ex√©cution d'un programme.  Elle survient g√©n√©ralement lorsqu'une erreur se produit, comme une tentative d'acc√®s √† un fichier inexistant, une division par z√©ro, ou une erreur r√©seau.  En Java, les exceptions sont des objets qui h√©ritent de la classe `Throwable`.\n\n## 2. Types d'exceptions\n\nJava distingue deux grands types d'exceptions :\n\n* **Exceptions v√©rifi√©es (checked exceptions):**  Le compilateur Java impose la gestion de ces exceptions.  Si une m√©thode peut lever une exception v√©rifi√©e,  elle doit soit la g√©rer avec un bloc `try-catch`, soit la d√©clarer dans sa signature √† l'aide du mot-cl√© `throws`.  Exemples : `IOException`, `SQLException`.\n\n* **Exceptions non v√©rifi√©es (unchecked exceptions):**  Le compilateur ne force pas leur gestion explicite.  Ce sont g√©n√©ralement des erreurs de programmation (ex: `NullPointerException`, `IndexOutOfBoundsException`, `ArithmeticException`). Elles sont souvent le signe d'un bug dans le code.  [Concepts de Base en Java]\n\n## 3. Gestion des exceptions avec `try-catch`\n\nLe m√©canisme principal pour g√©rer les exceptions est le bloc `try-catch`.  Le code susceptible de lever une exception est plac√© dans le bloc `try`.  Si une exception survient, le programme saute au bloc `catch` correspondant au type d'exception.\n\n```java\ntry {\n    // Code susceptible de lever une exception\n    int result = 10 / 0; // Division par z√©ro\n    System.out.println(\"R√©sultat : \" + result);\n} catch (ArithmeticException e) {\n    // Gestion de l'exception ArithmeticException\n    System.err.println(\"Erreur : Division par z√©ro !\");\n    e.printStackTrace(); // Affiche le d√©tails de l'exception dans la console\n}\n```\n\nDans cet exemple, la division par z√©ro l√®ve une `ArithmeticException`. Le bloc `catch` correspondant intercepte l'exception, affiche un message d'erreur, et utilise `e.printStackTrace()` pour afficher la pile d'appels, utile pour le d√©bogage.\n\n\n## 4.  Gestion de plusieurs exceptions\n\nUn bloc `try` peut √™tre suivi de plusieurs blocs `catch` pour g√©rer diff√©rents types d'exceptions. L'ordre des blocs `catch` est important : les exceptions les plus sp√©cifiques doivent √™tre trait√©es avant les exceptions plus g√©n√©rales (car les classes filles sont trait√©es avant leurs classes m√®res).\n\n```java\ntry {\n    // ...\n} catch (IOException e) {\n    // Gestion d'une IOException\n} catch (SQLException e) {\n    // Gestion d'une SQLException\n} catch (Exception e) { // Exception g√©n√©rale, √† utiliser en dernier recours\n    // Gestion d'autres exceptions\n}\n```\n\n\n## 5. Le bloc `finally`\n\nLe bloc `finally` est optionnel et contient du code qui s'ex√©cute toujours, que l'exception soit lev√©e ou non.  Il est souvent utilis√© pour lib√©rer des ressources (fermer des fichiers, des connexions √† une base de donn√©es, etc.).\n\n```java\ntry {\n    // ...\n} catch (Exception e) {\n    // ...\n} finally {\n    // Code qui s'ex√©cute toujours\n    System.out.println(\"Bloc finally ex√©cut√©\");\n}\n```\n\n\n## 6. Propagation des exceptions\n\nSi une m√©thode ne g√®re pas une exception, elle la propage vers la m√©thode appelante.  Cette propagation continue jusqu'√† ce qu'une m√©thode g√®re l'exception ou que le programme termine son ex√©cution.  Ceci est g√©r√© via le mot-cl√© `throws` dans la signature de la m√©thode.\n\n```java\npublic void maMethode() throws IOException {\n    // Code qui peut lever une IOException\n    throw new IOException(\"Erreur d'entr√©e/sortie\");\n}\n```\n\n## 7.  Exceptions personnalis√©es\n\nIl est possible de cr√©er des exceptions personnalis√©es pour g√©rer des situations sp√©cifiques au sein de l'application.  Cela am√©liore la lisibilit√© et la maintenabilit√© du code.  Il suffit de cr√©er une nouvelle classe qui √©tend `Exception` (ou une de ses sous-classes).  [Gestion des Exceptions]\n\n\n## Conclusion\n\nLa ma√Ætrise de la gestion des exceptions est essentielle pour d√©velopper des applications Java robustes et fiables.  Une gestion appropri√©e des exceptions am√©liore la qualit√© du code, facilite le d√©bogage et permet de fournir une exp√©rience utilisateur plus agr√©able en √©vitant les plantages inattendus.\n"
    },
    {
        "id": "e8e30d2b-96ea-40d6-b6f3-405ab87d1a5d",
        "title": "@MapsId",
        "description": "---\nid: d232d5f0-ad62-4cb1-be4b-eb4682ecb271\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\n`@MapsId` est une annotation de Spring Data JPA utilis√©e dans les relations `@OneToOne` pour partager la cl√© primaire entre une entit√© parent et une entit√© enfant.  Cela √©vite la cr√©ation d'une colonne de cl√© √©trang√®re dans la table enfant.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nDans une relation `@OneToOne`,  Spring Data JPA cr√©e g√©n√©ralement une colonne de cl√© √©trang√®re dans la table de l'entit√© enfant pour faire r√©f√©rence √† l'entit√© parent.  Si la relation est optionnelle (l'enfant peut exister sans le parent), cette colonne est souvent nullable.  `@MapsId` permet de contourner ce comportement.  Au lieu d'une cl√© √©trang√®re, l'entit√© enfant partage la m√™me cl√© primaire que l'entit√© parent.  Cela implique que la cl√© primaire de l'entit√© enfant est identique √† celle du parent.  L'annotation `@MapsId` sp√©cifie le nom du champ de la cl√© primaire de l'entit√© parent qui sera mapp√© √† la cl√© primaire de l'entit√© enfant.\n\n**Exemple:**\n\nSupposons que nous ayons une entit√© `Utilisateur` et une entit√© `Profil` avec une relation `@OneToOne`.\n\n```java\n@Entity\npublic class Utilisateur {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    // ... autres attributs ...\n\n    @OneToOne(mappedBy = \"utilisateur\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    private Profil profil;\n    // ...\n}\n\n@Entity\n@Table(name = \"profil\")\npublic class Profil {\n\n    @Id\n    private Long id; // Cl√© primaire partag√©e\n\n    @MapsId\n    @OneToOne\n    @JoinColumn(name = \"id\") //Optionnel, le nom est deja id de base\n    private Utilisateur utilisateur;\n\n\n    // ... autres attributs ...\n}\n```\n\nDans cet exemple, `@MapsId` dans la classe `Profil` indique que le champ `id` de `Profil` utilise la m√™me cl√© primaire que le champ `id` de `Utilisateur`.  La table `profil` n'aura pas de colonne de cl√© √©trang√®re.  La contrainte d'unicit√© de la cl√© primaire g√®re la relation.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Simplicit√©:**  √âvite la complexit√© d'une cl√© √©trang√®re, surtout dans les relations optionnelles.\n* **Performance:** Peut am√©liorer l√©g√®rement les performances des requ√™tes, car cela √©vite les jointures sur la cl√© √©trang√®re.\n* **Clart√© du sch√©ma de donn√©es:** Le sch√©ma relationnel est plus propre et plus facile √† comprendre.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Contraintes:**  Il est crucial que la cl√© primaire de l'entit√© enfant soit du m√™me type que celle du parent.  Une mauvaise configuration peut conduire √† des erreurs.\n* **Moins flexible:**  `@MapsId` est moins flexible que l'utilisation d'une cl√© √©trang√®re classique, particuli√®rement si vous avez besoin de fonctionnalit√©s avanc√©es de gestion de la relation.\n* **Difficult√© de compr√©hension:**  Pour les d√©veloppeurs non exp√©riment√©s avec JPA, cette annotation peut √™tre moins intuitive qu'une relation avec cl√© √©trang√®re.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "bd6d23da-1d38-4bd8-abca-a651a7fe152a",
        "title": "Akka",
        "description": "---\nid: 3b6dc02c-51c8-42be-85d6-9effe457e5ec\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nAkka est un toolkit open-source et multiplateforme pour construire des applications concurrentes, distribu√©es et r√©silientes bas√©es sur le mod√®le acteur.  Il simplifie le d√©veloppement d'applications hautement parall√®les et tol√©rantes aux pannes.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAkka est bas√© sur le mod√®le acteur, un paradigme de programmation concurrent qui traite les acteurs comme des unit√©s ind√©pendantes de calcul.  Chaque acteur poss√®de sa propre bo√Æte aux lettres pour recevoir des messages, son propre √©tat interne et un thread d√©di√© (ou un pool de threads).  La communication entre les acteurs se fait exclusivement par l'envoi de messages asynchrones.  Cela permet d'√©viter les probl√®mes de concurrence classiques tels que les interblocages et les conditions de course.\n\nAkka offre plusieurs fonctionnalit√©s cl√©s :\n\n* **Mod√®le Acteur:**  Le c≈ìur d'Akka.  Il g√®re la cr√©ation, la surveillance et la communication entre les acteurs.\n* **Supervision:** Akka fournit un m√©canisme de supervision hi√©rarchique permettant de g√©rer les erreurs et les pannes des acteurs.  Si un acteur plante, son superviseur peut d√©cider de le red√©marrer, de le surveiller, ou de le terminer.\n* **R√©silience:** Gr√¢ce √† la supervision et √† la nature asynchrone des messages, Akka permet de construire des syst√®mes r√©silients capables de tol√©rer les pannes.\n* **Distribution:** Akka peut distribuer les acteurs sur plusieurs machines, permettant la cr√©ation d'applications distribu√©es.\n* **Persistance:** Akka permet de persister l'√©tat des acteurs pour garantir la coh√©rence des donn√©es en cas de panne.\n* **Streaming:** Akka Streams offre un cadre puissant pour traiter des flux de donn√©es de mani√®re r√©active et concurrente.\n* **HTTP/WebSockets:**  Akka HTTP fournit des outils pour cr√©er des serveurs et des clients HTTP et WebSockets.\n\n**Exemple (Scala):**\n\n```scala\nimport akka.actor.{Actor, ActorSystem, Props}\n\nclass MyActor extends Actor {\n  def receive: Receive = {\n    case \"hello\" => println(\"Hello from actor!\")\n    case _ => println(\"Unknown message\")\n  }\n}\n\nobject MyAkkaApp extends App {\n  val system = ActorSystem(\"mySystem\")\n  val myActor = system.actorOf(Props[MyActor], \"myActor\")\n  myActor ! \"hello\"\n  Thread.sleep(1000)\n  system.terminate()\n}\n```\n\nCet exemple cr√©e un syst√®me d'acteurs, un acteur `MyActor`, et lui envoie un message \"hello\".\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Concurrence facile:**  Le mod√®le acteur simplifie la gestion de la concurrence.\n* **R√©silience:**  Les syst√®mes Akka sont plus r√©silients gr√¢ce √† la supervision.\n* **Scalabilit√©:**  Akka permet de cr√©er des applications distribu√©es et hautement scalables.\n* **Communaut√© active et documentation compl√®te:** Akka b√©n√©ficie d'une large communaut√© et d'une documentation abondante.\n* **Langages support√©s:** Akka est disponible pour Java, Scala, Kotlin et d'autres langages.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:**  Le mod√®le acteur peut avoir une courbe d'apprentissage plus raide que les approches de programmation concurrentes traditionnelles.\n* **D√©bogage:**  Le d√©bogage des applications Akka peut √™tre plus complexe que celui des applications monothread√©es.\n* **Complexit√© pour les applications simples:**  Pour les applications simples, Akka peut √™tre un sur-ing√©nierie.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "75ef67dd-da48-429a-ab54-af38f2851448",
        "title": "Algorithmes de Garbage Collector",
        "description": "---\nid: 11284ca5-0259-472f-bb46-962fa1f2500d\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nLes garbage collectors (GC) sont des algorithmes qui automatisent la gestion de la m√©moire dans les langages de programmation comme Java.  Ils identifient et r√©cup√®rent la m√©moire qui n'est plus utilis√©e par le programme, emp√™chant les fuites de m√©moire et lib√©rant des ressources pour de nouvelles allocations.  Parallel, G1, et ZGC sont trois algorithmes de GC diff√©rents utilis√©s par la JVM (Java Virtual Machine).\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nCes trois algorithmes diff√®rent principalement dans leur strat√©gie de collecte et leur impact sur les performances de l'application :\n\n**1. Parallel Garbage Collector:**\n\n* **Strat√©gie:**  Un GC \"stop-the-world\" qui utilise plusieurs threads pour collecter les objets inaccessibles. Il effectue une collecte des g√©n√©rations (Young, Old) et utilise un copy collector pour la g√©n√©ration Young (objets jeunes). La g√©n√©ration Old (objets √¢g√©s) utilise un mark-sweep-compact collector.  \n* **Fonctionnement:** Pendant la collecte, tous les autres threads de l'application sont interrompus (stop-the-world). La collecte est rapide pour la g√©n√©ration Young mais peut prendre plus de temps pour la g√©n√©ration Old.\n* **Avantages:**  Performant pour les applications avec un taux de cr√©ation d'objets faible √† moyen.  Le parall√©lisme acc√©l√®re la collecte.\n* **Inconv√©nients:**  Longs temps d'arr√™t (\"pause times\") lors de la collecte de la g√©n√©ration Old.  Non adapt√© aux applications exigeantes en faible latence.\n\n**2. G1 Garbage Collector (Garbage-First):**\n\n* **Strat√©gie:** Un GC concurrent et √† faible pause qui divise le heap en r√©gions. Il priorise la collecte des r√©gions avec le plus de garbage. Il utilise une approche √† plusieurs g√©n√©rations.\n* **Fonctionnement:**  Il effectue des collectes partielles et concurrentes, ce qui signifie qu'il travaille en parall√®le avec l'application, minimisant les temps d'arr√™t.  Il vise √† atteindre un objectif de temps de pause donn√©.\n* **Avantages:**  Meilleur compromis entre temps de pause et d√©bit que le Parallel GC.  Adapt√© aux applications avec des heaps de grande taille.\n* **Inconv√©nients:**  Plus complexe √† configurer que le Parallel GC.  Peut consommer plus de ressources CPU que le Parallel GC.\n\n**3. Z Garbage Collector (ZGC):**\n\n* **Strat√©gie:** Un GC concurrent, √† tr√®s faible pause, et √† haute performance. Il utilise des pointeurs color√©s et un m√©canisme de d√©tection de cycles efficace.\n* **Fonctionnement:**  Le ZGC vise √† atteindre des temps de pause inf√©rieurs √† 10ms, m√™me avec des heaps de plusieurs t√©raoctets. Il est extr√™mement efficace et utilise plusieurs threads pour collecter les objets de mani√®re concurrente.\n* **Avantages:**  Tr√®s faibles pauses, adapt√© aux applications n√©cessitant une faible latence (ex: applications en temps r√©el).  Excellent d√©bit m√™me pour des heaps volumineux.\n* **Inconv√©nients:**  Plus r√©cent que les autres GC, donc moins mature.  Peut consommer plus de ressources CPU que G1 ou Parallel GC. N√©cessite une version Java r√©cente.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **Parallel GC:**  Simple, performant pour les applications √† faible latence tol√©rable.\n* **G1 GC:**  Bon compromis entre d√©bit et temps de pause, adapt√© aux grandes applications.\n* **ZGC:**  Temps de pause extr√™mement faibles, id√©al pour des applications √† faible latence.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Parallel GC:**  Longs temps de pause lors de la collecte de la g√©n√©ration Old.\n* **G1 GC:**  Peut √™tre plus complexe √† configurer et √† ma√Ætriser.\n* **ZGC:**  Plus gourmand en ressources, relativement r√©cent et n√©cessite une version Java r√©cente.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "8b72417a-7de5-4399-b169-e1f5066764f7",
        "title": "Apache CouchDB",
        "description": "---\nid: f21c9312-cb75-458c-bc61-69e46d477f40\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nApache CouchDB est une base de donn√©es NoSQL orient√©e document, open source, qui utilise le protocole HTTP pour acc√©der et manipuler les donn√©es.  Elle se distingue par sa simplicit√©, sa facilit√© de r√©plication et son mod√®le de donn√©es flexible.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nCouchDB stocke les donn√©es sous forme de documents JSON.  Chaque document est identifi√© par un unique ID et poss√®de des r√©visions, permettant le suivi des modifications.  L'acc√®s aux donn√©es se fait via des requ√™tes HTTP (GET, POST, PUT, DELETE) sur des URLs sp√©cifiques.  Elle utilise un m√©canisme de r√©plication facile √† mettre en place, permettant la synchronisation de donn√©es entre plusieurs serveurs.  CouchDB utilise le concept de \"vues\" (views) pour cr√©er des index sur les documents, permettant des requ√™tes plus performantes.  Ces vues sont d√©finies en utilisant une syntaxe MapReduce simplifi√©e, ou bien avec des fonctions √©crites en Javascript.\n\nVoici un exemple d'ajout d'un document en utilisant une requ√™te HTTP POST :\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"John Doe\", \"age\": 30}' http://localhost:5984/mydb/\n```\n\nEt un exemple de requ√™te pour r√©cup√©rer un document sp√©cifique :\n\n```bash\ncurl http://localhost:5984/mydb/doc_id\n```\n\nCouchDB offre un m√©canisme de gestion des conflits lors de la r√©plication.  Le mod√®le de donn√©es flexible permet de stocker des donn√©es structur√©es et non structur√©es facilement.  L'architecture est distribu√©e par nature, favorisant la haute disponibilit√© et la tol√©rance aux pannes.\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Simplicit√© et facilit√© d'utilisation:**  L'API HTTP est intuitive et facile √† comprendre.\n* **R√©plication facile:**  La r√©plication est un processus simple et robuste, permettant une haute disponibilit√© et une distribution g√©ographique des donn√©es.\n* **Mod√®le de donn√©es flexible:**  Le format JSON permet de stocker des donn√©es de diff√©rentes structures.\n* **Open source et communaut√© active:**  B√©n√©ficie d'une grande communaut√© et d'un support important.\n* **Architecture distribu√©e:**  Int√©gr√©e par nature pour une meilleure tol√©rance aux pannes et scalabilit√©.\n\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Performance des requ√™tes complexes:**  Peut √™tre moins performante que d'autres bases de donn√©es pour des requ√™tes complexes n√©cessitant des jointures ou des op√©rations avanc√©es.  La performance d√©pend fortement de la conception des vues.\n* **Manque de fonctionnalit√©s ACID strictes:**  Bien que CouchDB offre des m√©canismes pour la coh√©rence des donn√©es, elle ne fournit pas les garanties ACID compl√®tes comme les bases de donn√©es relationnelles.\n* **Mod√®le de donn√©es moins structur√©:**  L'absence de sch√©ma rigide peut compliquer la gestion des donn√©es pour certaines applications.\n* **La courbe d'apprentissage des vues MapReduce peut √™tre raide** pour les d√©veloppeurs qui ne sont pas familiers avec ce paradigme.\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "b73fab9d-4ae1-42cb-acf8-d6b4ca556589",
        "title": "Apache Pulsar",
        "description": "---\nid: 9058cd6d-9b55-44d4-ac8f-efcfa34393bd\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nApache Pulsar est un syst√®me de messagerie distribu√©, hautement scalable et performant, con√ßu pour g√©rer des flux de donn√©es √† grande √©chelle et √† faible latence.  Il est particuli√®rement adapt√© aux applications n√©cessitant une haute disponibilit√© et une grande capacit√© de traitement de messages.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nApache Pulsar est un syst√®me de messagerie √† publication/abonnement (pub/sub) qui utilise une architecture multi-tenant et g√©r√©e par le cloud.  Il se diff√©rencie des syst√®mes de messagerie traditionnels par plusieurs aspects cl√©s :\n\n* **Architecture en couches:** Pulsar utilise une architecture en trois couches :  brokers, clients et le service de stockage. Les brokers g√®rent les connexions clients et la routage des messages. Le stockage peut √™tre effectu√© dans diff√©rents syst√®mes de stockage persistants (comme BookKeeper ou un syst√®me de fichiers distribu√©), offrant flexibilit√© et haute disponibilit√©.\n\n* **BookKeeper:** Pulsar utilise BookKeeper, un syst√®me de stockage distribu√© hautement performant et fiable, pour la persistance des messages. Ceci assure la durabilit√© des messages m√™me en cas de panne de brokers.\n\n* **Gestion des namespaces et des topics:** Pulsar offre une gestion fine des namespaces et des topics, permettant une s√©paration claire entre les diff√©rents locataires et applications.  Cela facilite la gestion des ressources et l'isolation des applications.\n\n* **Routing flexible:** Pulsar supporte diff√©rents modes de routage, dont le routage g√©om√©trique, permettant une distribution efficace des messages entre les consommateurs.\n\n* **Fonctionnalit√©s avanc√©es:** Pulsar offre des fonctionnalit√©s telles que la segmentation des topics, la r√©plication des messages, la gestion des transactions et l'int√©gration avec des outils de monitoring.\n\n**Exemple (concept):** Imaginons une application de streaming vid√©o.  Pulsar peut √™tre utilis√© pour g√©rer le flux de donn√©es vid√©o en temps r√©el. Les producteurs publient les donn√©es vid√©o sur un topic Pulsar, et les consommateurs les re√ßoivent pour les diffuser aux utilisateurs.  La haute scalabilit√© de Pulsar permet de g√©rer un grand nombre d'utilisateurs simultan√©s.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Haute performance et faible latence:** Pulsar est optimis√© pour une faible latence et un d√©bit √©lev√©.\n* **Scalabilit√© horizontale:** Pulsar peut facilement √™tre √©tendu pour g√©rer des charges de travail de plus en plus importantes.\n* **Haute disponibilit√©:** Gr√¢ce √† la r√©plication et √† BookKeeper, Pulsar offre une haute disponibilit√© des messages.\n* **Multi-tenancy:** Pulsar permet une s√©paration claire des ressources entre les diff√©rents locataires.\n* **Gestion avanc√©e des topics:** La segmentation et la r√©plication des topics offre une grande flexibilit√©.\n* **Support de multiples langages:** Pulsar fournit des clients pour divers langages de programmation.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La configuration et la gestion de Pulsar peuvent √™tre plus complexes que celle de syst√®mes de messagerie plus simples.\n* **Courbe d'apprentissage:**  Il faut du temps pour ma√Ætriser toutes les fonctionnalit√©s et les subtilit√©s de Pulsar.\n* **D√©pendance √† BookKeeper:** La performance et la fiabilit√© de Pulsar d√©pendent en grande partie de BookKeeper.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "f2d08ce3-3069-4de6-998b-85703c531cef",
        "title": "Arch Unit",
        "description": "---\nid: ffaf4087-aebd-46bc-9684-f0d5c8c188bb\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nArchUnit est une librairie Java bas√©e sur JUnit permettant de tester l'architecture d'une application.  Elle v√©rifie les relations entre diff√©rents composants (classes, packages, etc.) et s'assure que l'architecture respecte les r√®gles d√©finies.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nArchUnit permet de d√©finir des r√®gles architecturales et de v√©rifier si le code source les respecte.  Ces r√®gles peuvent porter sur diff√©rents aspects de l'architecture, tels que :\n\n* **D√©pendances entre couches :**  V√©rifier qu'une couche pr√©sentation ne d√©pend pas directement de la couche donn√©es, mais uniquement de la couche service.\n* **Cycles de d√©pendances :** D√©tecter les cycles entre les packages ou les classes, signe d'une architecture complexe et difficile √† maintenir.\n* **Utilisation d'annotations :** S'assurer que toutes les classes annot√©es d'une certaine mani√®re respectent une convention de nommage ou une structure sp√©cifique.\n* **Respect de principes de conception :** V√©rifier le respect de principes tels que la s√©paration des pr√©occupations ou l'inversion des d√©pendances.\n\n\nArchUnit utilise une API fluide et expressive pour d√©finir ces r√®gles.  On d√©crit la structure souhait√©e √† l'aide de conditions sur les classes, les packages et leurs relations.  L'ex√©cution des tests v√©rifie ensuite si le code source correspond √† cette description.  La fonctionnalit√© \"freezing arch rules\" est particuli√®rement utile pour int√©grer ArchUnit dans des projets existants (legacy) en permettant d'appliquer les r√®gles uniquement sur le nouveau code.\n\n\n**Exemple (Illustratif):**\n\nSupposons que l'on veuille v√©rifier qu'aucune classe du package `com.example.presentation` ne d√©pend directement du package `com.example.data`.  Avec ArchUnit, on pourrait √©crire une r√®gle similaire √† :\n\n```java\nimport com.tngtech.archunit.core.importer.ImportOption;\nimport com.tngtech.archunit.lang.syntax.ArchRuleDefinition;\nimport org.junit.jupiter.api.Test;\n\nimport static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;\nimport static com.tngtech.archunit.library.dependencies.SlicesRuleDefinition.slices;\n\npublic class ArchitectureTest {\n\n    @Test\n    void presentationLayerShouldNotDependOnDataLayer() {\n        classes()\n                .that().resideInAPackage(\"com.example.presentation\")\n                .should().onlyDependOnClassesThat().resideInAnyPackage(\"..presentation\", \"..service\");\n\n    }\n      @Test\n    void cyclicDependenciesAreForbidden(){\n        slices().matching(\"com.example.(*)..\").should().beFreeOfCycles();\n    }\n\n}\n```\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Automatisation des v√©rifications architecturales :**  ArchUnit permet d'automatiser le respect des r√®gles architecturales, √©vitant ainsi les r√©gressions et am√©liorant la qualit√© du code.\n* **D√©tection pr√©coce des probl√®mes :**  Les tests d'architecture sont ex√©cut√©s lors des tests unitaires ou d'int√©gration, permettant une d√©tection rapide des violations architecturales.\n* **Am√©lioration de la maintenabilit√© :**  En garantissant le respect de r√®gles architecturales, ArchUnit contribue √† une meilleure maintenabilit√© du code.\n* **Documentation de l'architecture :** Les r√®gles d√©finies avec ArchUnit peuvent servir de documentation de l'architecture du projet.\n* **Int√©gration facile avec JUnit :**  L'int√©gration avec JUnit est simple et transparente.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage :**  Il faut un certain temps pour ma√Ætriser l'API d'ArchUnit et d√©finir des r√®gles complexes.\n* **Maintenance des r√®gles :**  La maintenance des r√®gles architecturales peut devenir co√ªteuse √† mesure que le projet √©volue.\n* **Potentiellement intrusif :** L'ajout de r√®gles ArchUnit peut n√©cessiter des modifications dans le code existant.  \n* **Peut ralentir les tests :**  L'ex√©cution des r√®gles ArchUnit peut ajouter du temps aux tests.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\nJUnit, Architecture logicielle,  tests unitaires,  int√©gration continue.\n"
    },
    {
        "id": "6cdb72d6-e752-4997-ae64-c08258bc90bf",
        "title": "Biscuit authentication authorization token",
        "description": "---\nid: 3bf7e0ea-40ce-415e-8c21-bb28171de774\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nUn Biscuit est un jeton d'authentification et d'autorisation d√©centralis√©, cryptographiquement s√©curis√© et v√©rifiable hors ligne.  Il permet de v√©rifier les autorisations d'un utilisateur sans avoir besoin d'une connexion r√©seau constante √† un serveur central.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nUn Biscuit est un petit fichier de donn√©es contenant des affirmations sur l'identit√© et les autorisations d'un utilisateur.  Ces affirmations sont chiffr√©es et v√©rifi√©es √† l'aide de la cryptographie.  Contrairement aux syst√®mes centralis√©s qui reposent sur un serveur pour v√©rifier les jetons, les Biscuits peuvent √™tre v√©rifi√©s localement par l'application cliente.\n\nUn Biscuit est cr√©√© par un serveur autoris√© (\"issuer\").  Ce serveur inclut des affirmations initiales dans le Biscuit.  Par la suite, des parties tierces peuvent ajouter de nouvelles affirmations au Biscuit, mais seulement si elles ont re√ßu l'autorisation de le faire par le serveur initial.  Ces nouvelles affirmations sont ajout√©es sous forme de \"preuves\" qui sont attach√©es au Biscuit et v√©rifi√©es ult√©rieurement.\n\nLa v√©rification se fait gr√¢ce √† une signature cryptographique int√©gr√©e au Biscuit.  L'application cliente poss√®de une copie de la cl√© publique du serveur qui a √©mis le Biscuit.  Elle peut ainsi v√©rifier l'int√©grit√© et l'authenticit√© du Biscuit, ainsi que la validit√© des affirmations qu'il contient.\n\n**Fonctionnement interne (simplifi√©):**\n\n1. **Cr√©ation:** Le serveur g√©n√®re un Biscuit avec des affirmations initiales (par exemple, \"l'utilisateur est authentifi√©\", \"l'utilisateur a le r√¥le d'administrateur\").\n2. **Extension (optionnel):** Une autre entit√© (avec autorisation) peut ajouter de nouvelles affirmations au Biscuit (par exemple, \"l'utilisateur a acc√®s √† la ressource X\").  Cela se fait par la g√©n√©ration d'une preuve qui est attach√©e au Biscuit.\n3. **V√©rification:** L'application cliente v√©rifie le Biscuit en utilisant la cl√© publique du serveur. Cette v√©rification confirme que le Biscuit n'a pas √©t√© alt√©r√© et que toutes les affirmations sont valides.\n\n**Exemple (conceptuel):**\n\nImaginez une application de partage de fichiers.  Un Biscuit pourrait contenir l'affirmation \"utilisateur A a acc√®s au fichier X\".  Ce Biscuit serait v√©rifi√© localement par l'application avant de permettre l'acc√®s au fichier.  L'ajout d'une nouvelle affirmation, comme \"utilisateur B peut lire le fichier X\", pourrait se faire par une entit√© autoris√©e, ajoutant une preuve au Biscuit existant.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **S√©curit√©:** La cryptographie assure l'int√©grit√© et l'authenticit√© du Biscuit, emp√™chant la falsification.\n- **D√©centralisation:** La v√©rification hors ligne r√©duit la d√©pendance √† un serveur central, am√©liorant la r√©silience et la performance.\n- **Privacy:**  Certaines impl√©mentations permettent de limiter les informations expos√©es lors de la v√©rification.\n- **Flexibilit√©:**  L'ajout de preuves permet une gestion fine des autorisations et une adaptation √† diff√©rents contextes.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Complexit√©:** La mise en ≈ìuvre d'un syst√®me de Biscuits peut √™tre complexe, n√©cessitant une bonne compr√©hension de la cryptographie.\n- **Taille des Biscuits:** Les Biscuits peuvent prendre un certain espace de stockage, bien que leur taille reste g√©n√©ralement raisonnable.\n- **Gestion des cl√©s:** La s√©curit√© du syst√®me d√©pend de la gestion s√©curis√©e des cl√©s publiques et priv√©es.\n- **Adoption limit√©e:**  La technologie des Biscuits est relativement nouvelle et son adoption n'est pas encore aussi r√©pandue que d'autres technologies d'authentification.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "21ec1638-0060-4a17-9b23-f21e76551e13",
        "title": "Blocking Queue (Java)",
        "description": "---\nid: be601ded-fbb0-4d7d-82ba-aed2c27ceaa3\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nUne `BlockingQueue` en Java est une interface qui repr√©sente une file d'attente thread-safe.  Elle bloque les op√©rations d'insertion (ajout d'√©l√©ments) si la file est pleine et les op√©rations de suppression (retrait d'√©l√©ments) si elle est vide.  Cela permet une synchronisation efficace entre les threads producteurs et consommateurs.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nUne `BlockingQueue` est une interface dans le package `java.util.concurrent`.  Elle √©tend l'interface `Queue` et ajoute des m√©thodes sp√©cifiques pour g√©rer le blocage des op√©rations d'ajout et de suppression.  Lorsque la file est pleine, l'insertion d'un nouvel √©l√©ment bloquera le thread producteur jusqu'√† ce qu'un √©l√©ment soit retir√©.  Inversement, si la file est vide, la tentative de suppression bloquera le thread consommateur jusqu'√† ce qu'un √©l√©ment soit ajout√©.\n\nPlusieurs impl√©mentations de `BlockingQueue` existent, chacune avec des caract√©ristiques sp√©cifiques :\n\n* **`ArrayBlockingQueue`**:  Impl√©mente une file d'attente born√©e utilisant un tableau.  Sa taille est fixe lors de la cr√©ation.\n* **`LinkedBlockingQueue`**: Impl√©mente une file d'attente born√©e ou non born√©e (par d√©faut non born√©e) utilisant une liste cha√Æn√©e.  Offre une meilleure performance pour les insertions et suppressions fr√©quentes.\n* **`PriorityBlockingQueue`**:  Impl√©mente une file d'attente non born√©e qui ordonne les √©l√©ments selon leur priorit√© (d√©finie par l'impl√©mentation de `Comparable` ou un `Comparator`).\n* **`DelayQueue`**: Une file d'attente non born√©e qui maintient des √©l√©ments qui ne sont accessibles que lorsqu'un d√©lai sp√©cifi√© est √©coul√©.\n* **`SynchronousQueue`**: Une file d'attente particuli√®re o√π chaque insertion doit attendre une suppression correspondante, et vice-versa.  Elle n'a pas de capacit√© interne.\n\n**Exemple avec `ArrayBlockingQueue`:**\n\n```java\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class BlockingQueueExample {\n\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(5); // File d'attente de taille 5\n\n        // Thread producteur\n        Thread producer = new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    queue.put(i); // Bloquera si la queue est pleine\n                    System.out.println(\"Producer added: \" + i);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        // Thread consommateur\n        Thread consumer = new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    int value = queue.take(); // Bloquera si la queue est vide\n                    System.out.println(\"Consumer consumed: \" + value);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        producer.start();\n        consumer.start();\n    }\n}\n```\n\nCet exemple montre comment les threads producteur et consommateur interagissent avec la `BlockingQueue`. Les m√©thodes `put()` et `take()` g√®rent le blocage et la synchronisation automatiquement.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Thread-safety:**  G√®re la concurrence entre les threads de mani√®re s√©curis√©e et efficace, √©liminant le besoin de m√©canismes de synchronisation manuels.\n* **Blocage automatique:**  Simplifie la gestion de la concurrence en bloquant automatiquement les threads producteurs et consommateurs lorsque n√©cessaire.\n* **Flexibilit√©:**  Diff√©rentes impl√©mentations permettent de choisir la structure de donn√©es la plus appropri√©e √† l'application.\n* **Performance:** Les impl√©mentations optimis√©es offrent une bonne performance dans de nombreux cas d'utilisation.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© potentielle:**  Le choix de l'impl√©mentation appropri√©e peut n√©cessiter une compr√©hension des diff√©rentes caract√©ristiques de chaque type de `BlockingQueue`.\n* **Blocage:**  Bien que le blocage soit une fonctionnalit√© importante, il peut causer des probl√®mes si mal g√©r√©, notamment des deadlocks.\n* **Gestion des exceptions:** Il faut g√©rer les `InterruptedException` lors de l'utilisation des m√©thodes de blocage.\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "ac35e30e-23da-4355-8326-80e45caf7521",
        "title": "Compose-go",
        "description": "---\nid: b977a102-d94a-4a34-97a4-4bf34427ab50\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nCompose-go est une biblioth√®que Go qui simplifie l'interaction avec Docker Compose.  Elle permet de programmer la cr√©ation, la mise √† jour et la destruction de services et de r√©seaux d√©finis dans des fichiers `docker-compose.yml`.  Elle offre une interface plus flexible et programmable que l'utilisation directe de la commande `docker-compose`.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nCompose-go fournit des fonctions Go pour interagir avec l'API Docker Compose.  Au lieu d'utiliser des commandes shell, on peut utiliser le code Go pour effectuer des op√©rations sur les fichiers `docker-compose.yml`.  Cela permet d'int√©grer la gestion de Docker Compose dans des scripts et des applications Go, offrant un meilleur contr√¥le et une meilleure automatisation.  La biblioth√®que g√®re la communication avec le daemon Docker, l'analyse des fichiers `docker-compose.yml`, et la gestion des erreurs.\n\nVoici un exemple simple pour d√©marrer un projet Docker Compose avec Compose-go:\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/compose-spec/compose-go/cli\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tproject, err := cli.ProjectFromOptions(ctx, &cli.ProjectOptions{\n\t\tConfigFiles: []string{\"docker-compose.yml\"}, // Chemin vers votre fichier docker-compose.yml\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error loading project: %v\", err)\n\t}\n\n\terr = project.Up(ctx, cli.UpOptions{\n\t\t// Ajoutez des options ici si n√©cessaire\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error starting project: %v\", err)\n\t}\n\n\tfmt.Println(\"Project started successfully!\")\n\n\t// ... autres interactions avec le projet ...\n\n\t// Arr√™ter le projet √† la fin\n\terr = project.Down(ctx, cli.DownOptions{})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error stopping project: %v\", err)\n\t}\n\tfmt.Println(\"Project stopped successfully!\")\n}\n\n```\n\nCe code charge un fichier `docker-compose.yml`, d√©marre les services d√©finis et les arr√™te ensuite.  Compose-go offre des fonctions pour effectuer d'autres op√©rations, comme `project.Create`, `project.Build`, `project.Start`, `project.Stop`, `project.Restart`, etc.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Automatisation:**  Permet d'int√©grer la gestion de Docker Compose dans des pipelines CI/CD et des scripts Go.\n- **Programmation:** Offre un contr√¥le pr√©cis sur les op√©rations Docker Compose.\n- **Flexibilit√©:**  Permet de personnaliser le comportement de Docker Compose en utilisant le code Go.\n- **Testabilit√©:** Facilite l'√©criture de tests unitaires pour les interactions avec Docker Compose.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Courbe d'apprentissage:**  N√©cessite des connaissances en Go et en Docker Compose.\n- **D√©pendances:**  Ajoute une d√©pendance suppl√©mentaire √† votre projet.\n- **Complexit√©:**  Pour des cas d'utilisation complexes, le code Go peut devenir plus long et difficile √† maintenir qu'une simple commande `docker-compose`.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "a87947c1-5cf5-42e3-9e3f-99787a1a2a04",
        "title": "DSFR (Design System France)",
        "description": "---\nid: 885faf14-e488-4285-bd84-cb9ec7f2f730\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nDSFR (Design System France) est une biblioth√®que de composants d'interface utilisateur et un ensemble de guidelines de design pour la cr√©ation d'applications web et mobiles conformes aux standards d'accessibilit√© fran√ßais.  Elle offre des composants pr√™ts √† l'emploi et des styles coh√©rents pour assurer une exp√©rience utilisateur uniforme et accessible.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nDSFR vise √† standardiser la conception et le d√©veloppement d'interfaces num√©riques pour les services publics fran√ßais.  Il fournit une collection de composants r√©utilisables (boutons, formulaires, menus, etc.)  avec des styles pr√©d√©finis, assurant une coh√©rence visuelle et une meilleure exp√©rience utilisateur.  L'objectif principal est de faciliter le d√©veloppement d'applications accessibles, conformes aux exigences du RGAA (R√©f√©rentiel G√©n√©ral d'Accessibilit√© pour les Administrations).  DSFR propose des impl√©mentations pour divers frameworks (React, Angular, Vue.js, etc.), permettant aux d√©veloppeurs d'int√©grer facilement ces composants dans leurs projets.  Ces impl√©mentations souvent appel√©s \"surcouches\" fournissent des composants sp√©cifiques √† chaque framework mais conservent l'apparence visuelle et l'accessibilit√© d√©finies par le DSFR.\n\nL'utilisation de DSFR permet :\n\n* **Coh√©rence visuelle:**  Toutes les applications utilisant DSFR auront une apparence coh√©rente, am√©liorant l'exp√©rience utilisateur et la reconnaissance de la marque.\n* **Accessibilit√©:**  Les composants sont con√ßus pour respecter les exigences du RGAA, garantissant une accessibilit√© optimale pour les personnes handicap√©es.\n* **Efficacit√© de d√©veloppement:**  R√©utilisation des composants pr√©-construits et styl√©s, acc√©l√©rant le processus de d√©veloppement.\n* **Maintenance simplifi√©e:**  Les mises √† jour et corrections de bugs sont appliqu√©es √† l'ensemble des applications utilisant DSFR.\n\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Accessibilit√©:**  Respect des standards RGAA, essentiel pour les services publics.\n* **Coh√©rence:**  Assure une exp√©rience utilisateur uniforme sur l'ensemble des applications gouvernementales.\n* **R√©utilisabilit√©:**  Composants pr√™ts √† l'emploi, acc√©l√©rant le d√©veloppement.\n* **Support multiple frameworks:**  Disponibilit√© de surcouches pour diff√©rents frameworks populaires.\n* **Documentation:**  Documentation g√©n√©ralement compl√®te et bien maintenue (bien que la qualit√© puisse varier selon les versions et les frameworks).\n\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© d'int√©gration:**  L'int√©gration initiale peut parfois √™tre complexe, n√©cessitant une compr√©hension du fonctionnement du DSFR et de sa surcouche pour le framework utilis√©.\n* **D√©pendance:**  L'application est d√©pendante du DSFR et de ses mises √† jour.  Les changements dans le DSFR peuvent n√©cessiter des adaptations dans les applications qui l'utilisent.\n* **Personnalisation limit√©e:**  Bien que la personnalisation soit possible, elle peut √™tre contraignante pour s'assurer que l'accessibilit√© et la coh√©rence restent intactes.  Un √©cart trop important par rapport aux styles standards peut compromettre l'exp√©rience utilisateur et l'accessibilit√©.\n* **Taille du bundle:** L'inclusion de tous les composants DSFR peut augmenter la taille du bundle final de l'application, impactant le temps de chargement.  Une s√©lection judicieuse des composants est donc n√©cessaire.\n\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "27dc5b58-d4a7-4402-99f8-edf4d383f78c",
        "title": "Doppler",
        "description": "---\nid: 03bc89d4-ca8c-4258-a7fe-ae938a70b0cc\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nDoppler est un gestionnaire de secrets (secret manager) en tant que service (SaaS) qui permet de stocker et de g√©rer en toute s√©curit√© les variables d'environnement et autres informations sensibles utilis√©es par les applications.  Il simplifie la gestion des secrets pour les √©quipes de d√©veloppement et d'exploitation.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nDoppler fournit une interface centralis√©e pour stocker et g√©rer les secrets, √©vitant ainsi de les coder en dur dans les applications ou de les stocker dans des fichiers non s√©curis√©s.  Il fonctionne en permettant aux d√©veloppeurs de d√©finir des \"configurations\" qui contiennent des cl√©s et des valeurs, y compris les secrets. Ces configurations sont ensuite accessibles par les applications via une API ou des outils en ligne de commande.  Doppler se charge de chiffrer et de prot√©ger ces secrets, en utilisant des techniques de chiffrement robustes.\n\nLes principales fonctionnalit√©s incluent :\n\n* **Gestion des variables d'environnement:**  Doppler simplifie la gestion des variables d'environnement sensibles, comme des cl√©s API, des mots de passe de base de donn√©es, et des jetons d'authentification.\n* **Contr√¥le d'acc√®s:**  Il permet de g√©rer les autorisations d'acc√®s aux secrets, permettant de limiter l'acc√®s aux personnes autoris√©es.\n* **Int√©gration CI/CD:** Doppler s'int√®gre facilement avec les pipelines CI/CD, permettant d'injecter automatiquement les secrets dans les environnements de d√©ploiement.\n* **Audit trails:**  Il fournit un historique complet des modifications apport√©es aux secrets, facilitant le suivi et la v√©rification.\n* **Chiffrement:** Les donn√©es sont chiffr√©es √† la fois en transit et au repos.\n* **Support de multiples environnements:**  Permet de g√©rer des configurations s√©par√©es pour diff√©rents environnements (d√©veloppement, test, production).\n\n\n**Exemple (concept):**  Imaginons une application qui n√©cessite une cl√© API pour acc√©der √† un service tiers.  Au lieu de coder en dur cette cl√© API dans le code source, le d√©veloppeur peut la stocker dans Doppler et la r√©cup√©rer au moment de l'ex√©cution de l'application.\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **S√©curit√© am√©lior√©e:**  Le chiffrement et le contr√¥le d'acc√®s robustes garantissent la s√©curit√© des secrets.\n* **Simplicit√© d'utilisation:**  L'interface utilisateur est intuitive et facile √† utiliser, m√™me pour les d√©veloppeurs peu exp√©riment√©s.\n* **Int√©gration facile:**  L'int√©gration avec les pipelines CI/CD simplifie le processus de d√©ploiement.\n* **Collaboration facilit√©e:**  Plusieurs membres de l'√©quipe peuvent acc√©der et g√©rer les secrets de mani√®re contr√¥l√©e.\n* **Auditabilit√©:**  L'historique des modifications permet de suivre facilement les changements.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **D√©pendance √† un service tiers:**  Votre application d√©pend du service Doppler, ce qui introduit un point de d√©faillance potentiel.\n* **Co√ªt:**  L'utilisation de Doppler implique des co√ªts, selon le plan d'abonnement choisi.\n* **Complexit√© pour des configurations tr√®s complexes:**  Pour des environnements avec une multitude de configurations interd√©pendantes, la gestion pourrait devenir complexe.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "613183f4-d4b5-41e0-ab01-8635dd8faa42",
        "title": "Eclipse Mosquitto",
        "description": "---\nid: 34fc0c9b-c544-45c5-bd61-a2199ddf11d0\n---\n# Rapidement c'est quoi‚ùì\n\nEclipse Mosquitto est un serveur MQTT l√©ger, open-source et performant, permettant la publication et la souscription √† des messages. Il est r√©put√© pour sa robustesse et sa facilit√© de d√©ploiement.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nEclipse Mosquitto est une impl√©mentation du protocole MQTT (Message Queuing Telemetry Transport), un protocole de communication machine-√†-machine (M2M) l√©ger et bas√© sur le publish/subscribe.  Il sert de courtier (broker) centralis√©, permettant √† diff√©rents dispositifs (capteurs, actionneurs, applications) d'√©changer des messages de mani√®re asynchrone.  Mosquitto est con√ßu pour √™tre performant, scalable et fiable, capable de g√©rer un grand nombre de clients connect√©s simultan√©ment et un volume important de messages.  Il supporte plusieurs fonctionnalit√©s cl√©s, notamment :\n\n* **Authentification et autorisation:**  Mosquitto permet de contr√¥ler l'acc√®s aux ressources via diff√©rents m√©canismes d'authentification (mot de passe, certificats X.509) et d'autorisation (ACL - Access Control Lists).\n* **QoS (Quality of Service):**  Il g√®re diff√©rents niveaux de qualit√© de service pour garantir la livraison des messages (QoS 0, 1 et 2).\n* **R√©tention de messages:**  Les messages peuvent √™tre retenus par le broker, m√™me si aucun client n'est abonn√©, assurant ainsi que les nouveaux abonn√©s re√ßoivent les messages les plus r√©cents.\n* **Will messages:**  Permet de sp√©cifier un message √† publier lorsque le client se d√©connecte inopin√©ment.\n* **WebSockets:**  Mosquitto supporte les connexions via WebSockets, permettant une int√©gration plus facile avec les applications web.\n* **TLS/SSL:**  Le chiffrement TLS/SSL est support√© pour s√©curiser les communications.\n\nMosquitto est disponible sous forme de binaires pr√©compil√©s pour plusieurs syst√®mes d'exploitation ou en code source pour une compilation personnalis√©e. Sa configuration se fait via un fichier de configuration simple et lisible.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et gratuit:**  Mosquitto est sous licence EPL, ce qui permet une utilisation libre et gratuite, m√™me pour des applications commerciales.\n* **L√©ger et performant:**  Il consomme peu de ressources syst√®me et est capable de g√©rer un grand nombre de clients et de messages.\n* **Facile √† installer et configurer:**  L'installation et la configuration sont relativement simples, m√™me pour les utilisateurs novices.\n* **Documentation compl√®te et active communaut√©:**  Mosquitto b√©n√©ficie d'une documentation compl√®te et d'une communaut√© active et r√©active.\n* **Largement adopt√© et test√©:**  Son utilisation r√©pandue en fait un choix fiable et √©prouv√©.\n* **Support multiplateforme:**  Mosquitto est disponible sur de nombreuses plateformes, facilitant le d√©ploiement sur diff√©rents environnements.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Interface utilisateur limit√©e:**  Mosquitto est principalement un serveur en ligne de commande, ne disposant pas d'interface graphique intuitive pour la gestion.  Des outils tiers peuvent √™tre n√©cessaires pour une gestion plus conviviale.\n* **Fonctionnalit√©s avanc√©es potentiellement complexes √† configurer:**  Certaines fonctionnalit√©s avanc√©es (authentification, QoS, ACL) peuvent n√©cessiter une configuration plus complexe.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "5a3bca99-abe2-4aa0-90de-c31092299dd3",
        "title": "Ember.js",
        "description": "---\nid: cfe3dff1-dabd-489c-95cd-b4bc688004e6\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nEmber.js est un framework JavaScript open-source, ambitieux et mature, con√ßu pour construire des applications web ambitieuses,  scalables et maintenables. Il privil√©gie une architecture conventionnelle sur la configuration, offrant une structure claire et pr√©dictible pour le d√©veloppement.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nEmber.js fournit une structure compl√®te pour d√©velopper des applications web c√¥t√© client, s'appuyant sur le mod√®le MVC (Model-View-Controller) et int√©grant des fonctionnalit√©s avanc√©es telles que :\n\n* **Routage:**  Un syst√®me de routage puissant et d√©claratif permettant de g√©rer facilement les URLs et la navigation au sein de l'application.  Il permet de cr√©er des URLs propres et SEO-friendly.\n\n* **Gestion des donn√©es:**  Ember Data est un ORM (Object-Relational Mapper) int√©gr√© qui facilite l'interaction avec des APIs RESTful ou autres sources de donn√©es. Il g√®re la mise en cache, les requ√™tes et les relations entre les donn√©es.\n\n* **Composants:**  Ember utilise un syst√®me de composants r√©utilisables et encapsul√©s, facilitant l'organisation du code et la maintenance.  Ces composants g√®rent leur propre logique,  template et donn√©es.\n\n* **Templates:**  Les templates Ember utilisent Handlebars, un moteur de templating facile √† utiliser et puissant. Il permet d'int√©grer facilement la logique et les donn√©es dans l'interface utilisateur.\n\n* **Convention over Configuration:**  Ember privil√©gie les conventions, r√©duisant le besoin de configuration manuelle et am√©liorant la coh√©rence du code. Cela rend le d√©veloppement plus rapide et plus pr√©visible.\n\n* **Gestion du cycle de vie des composants:**  Ember g√®re automatiquement le cycle de vie des composants (cr√©ation, mise √† jour, destruction), simplifiant la gestion des √©tats et des √©v√©nements.\n\n\n**Exemple de code (Cr√©ation d'un composant simple):**\n\n```javascript\n// app/components/welcome-message.js\nimport Component from '@glimmer/component';\n\nexport default class WelcomeMessageComponent extends Component {\n  message = \"Bienvenue sur mon application Ember!\";\n}\n\n// app/templates/components/welcome-message.hbs\n<p>{{this.message}}</p>\n```\n\nCe code d√©finit un composant simple affichant un message.  Il est ensuite utilis√© dans les templates de l'application.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Productivit√©:**  L'architecture conventionnelle et les outils int√©gr√©s am√©liorent la productivit√© du d√©veloppeur.\n* **Maintenabilit√©:**  Le code est plus organis√© et facile √† maintenir gr√¢ce √† la structure impos√©e par le framework.\n* **Scalabilit√©:**  Ember est con√ßu pour g√©rer des applications complexes et de grande envergure.\n* **Communaut√© active:**  Une communaut√© forte et active fournit un support et des ressources abondantes.\n* **Tests int√©gr√©s:**  Ember encourage les tests unitaires et d'int√©gration, facilitant la qualit√© du code.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:**  Ember poss√®de une courbe d'apprentissage plus raide que certains frameworks plus simples.\n* **Taille du bundle:**  Les applications Ember peuvent g√©n√©rer des bundles JavaScript importants, impactant le temps de chargement initial.  Des techniques d'optimisation sont n√©cessaires.\n* **Moins flexible que React ou Vue.js:**  La forte conventionnalit√©, bien que b√©n√©fique, peut parfois limiter la flexibilit√© pour des cas d'utilisation tr√®s sp√©cifiques.\n* **Difficult√©s pour les petites applications:**  Pour les applications tr√®s petites et simples, Ember peut √™tre un choix surdimensionn√©.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "8b0d746d-bce7-4c53-8aac-337a36c628f8",
        "title": "Exherbo",
        "description": "---\nid: 50d36a14-2216-4608-bf2e-3ec2ef4d7bca\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nExherbo est un outil de gestion de configurations open-source pour les syst√®mes Linux. Il utilise un langage d√©claratif pour d√©crire l'√©tat souhait√© du syst√®me, puis g√®re les modifications n√©cessaires pour atteindre cet √©tat.  Il se diff√©rencie des autres outils par sa simplicit√©, sa robustesse et sa focalisation sur l'id√©mpotence.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nExherbo utilise un fichier de configuration simple, g√©n√©ralement √©crit en YAML, pour d√©finir l'√©tat souhait√© du syst√®me. Ce fichier d√©crit les paquets logiciels √† installer, les services √† activer, les fichiers de configuration √† modifier, etc.  Exherbo compare ensuite l'√©tat actuel du syst√®me avec l'√©tat d√©crit dans le fichier de configuration et applique les modifications n√©cessaires pour les faire correspondre.  Ce processus est *id√©mpotent*, ce qui signifie qu'ex√©cuter la m√™me commande plusieurs fois aura le m√™me effet que de l'ex√©cuter une seule fois.  Il ne fera pas de changements si le syst√®me est d√©j√† dans l'√©tat souhait√©.\n\nExherbo est bas√© sur une approche d√©clarative, ce qui le rend plus facile √† comprendre et √† maintenir que les approches imp√©ratives.  On d√©crit *ce qu'on veut*, et Exherbo s'occupe de *comment le faire*.  Ceci simplifie la gestion de configurations complexes et permet une meilleure reproductibilit√© des environnements.\n\n**Exemple de fichier de configuration (YAML):**\n\n```yaml\npackages:\n  - vim\n  - git\n\nservices:\n  - sshd\n\nfiles:\n  - source: /etc/exherbo/ssh_config.sample\n    destination: /etc/ssh/sshd_config\n```\n\nCe fichier indique qu'Exherbo doit installer les paquets `vim` et `git`, activer le service `sshd`, et copier le fichier `/etc/exherbo/ssh_config.sample` vers `/etc/ssh/sshd_config`.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Id√©mpotence:**  La plus grande force d'Exherbo.  On peut l'ex√©cuter plusieurs fois sans risque de modifications ind√©sirables.\n- **Simplicit√©:** Le langage de configuration est clair et facile √† apprendre.\n- **Robustesse:**  Exherbo est con√ßu pour √™tre fiable et g√©rer les erreurs de mani√®re robuste.\n- **Open-source:**  Librement disponible et auditable.\n- **Focalisation:**  Contrairement √† certains outils plus vastes, Exherbo se concentre sur la gestion de configurations syst√®me, ce qui le rend efficace et sp√©cialis√©.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Communaut√© plus petite:**  Compar√© √† des outils comme Ansible ou Puppet, Exherbo poss√®de une communaut√© plus restreinte, ce qui peut rendre la recherche de solutions √† des probl√®mes sp√©cifiques plus difficile.\n- **Moins de fonctionnalit√©s avanc√©es:**  Exherbo ne propose pas toutes les fonctionnalit√©s avanc√©es que l'on trouve dans des outils plus complets.  Par exemple, il n'int√®gre pas nativement la gestion de configurations √† distance.\n- **Documentation limit√©e (potentiellement):** La documentation pourrait √™tre plus compl√®te pour certains aspects.  (Ceci d√©pend de l'√©tat actuel du projet).\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "cbf62fa1-f5fb-481f-b040-5e0282fe3793",
        "title": "Gestion des artefacts",
        "description": "---\nid: c71d6e3d-3d47-4940-96b9-6a8aaf0e2a53\n---\n# Rapidement c'est quoi‚ùì\n\nLa gestion des artefacts est le processus de stockage, de r√©cup√©ration et de gestion de fichiers produits lors du cycle de vie du d√©veloppement logiciel.  Cela inclut le code source compil√©, les biblioth√®ques, les packages d'installation, etc.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLa gestion des artefacts est une partie cruciale de la gestion de configuration logicielle et de l'int√©gration continue/livraison continue (CI/CD). Elle assure le suivi des versions de tous les composants logiciels, permettant une tra√ßabilit√© compl√®te et facilitant la reconstruction et le d√©ploiement de logiciels √† partir d'artefacts archiv√©s.  Un artefact est n'importe quel produit tangible du processus de d√©veloppement,  comme un fichier JAR, un WAR, un fichier ex√©cutable, un script d'installation, ou m√™me un document de sp√©cification.\n\nUn syst√®me de gestion d'artefacts efficace doit fournir des fonctionnalit√©s telles que :\n\n* **Stockage:**  Un d√©p√¥t centralis√© pour stocker les artefacts, souvent avec versioning (contr√¥le de version).  Des solutions comme les buckets Amazon S3, des r√©f√©rentiels Maven ou npm, ou des solutions d√©di√©es comme JFrog Artifactory ou Nexus sont couramment utilis√©es.\n* **R√©cup√©ration:**  M√©canismes pour r√©cup√©rer facilement les versions sp√©cifiques d'artefacts.\n* **M√©tadonn√©es:**  Stockage d'informations sur les artefacts (date de cr√©ation, version, auteur, d√©pendances, etc.) pour une meilleure organisation et recherche.\n* **Int√©gration:**  Int√©gration transparente avec les outils CI/CD pour automatiser le d√©ploiement et la gestion des versions.\n* **S√©curit√©:** Contr√¥le d'acc√®s et authentification pour garantir l'int√©grit√© et la s√©curit√© des artefacts.\n\n\nL'exemple `maven-s3-wagon` mentionn√© utilise les buckets S3 d'Amazon comme d√©p√¥t pour les artefacts Maven, d√©montrant comment un syst√®me de stockage cloud peut √™tre utilis√© pour la gestion d'artefacts.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Tra√ßabilit√© am√©lior√©e:**  Permet de suivre facilement l'√©volution du logiciel et de retrouver des versions sp√©cifiques.\n* **R√©duction des erreurs:**  Minimise les risques li√©s √† l'utilisation de versions incorrectes ou incompatibles des composants.\n* **Automatisation:**  Int√©gration facile avec les pipelines CI/CD pour automatiser le processus de construction, de test et de d√©ploiement.\n* **Collaboration am√©lior√©e:**  Facilite le partage des artefacts entre les membres de l'√©quipe de d√©veloppement.\n* **Scalabilit√©:**  Les solutions modernes de gestion d'artefacts peuvent facilement s'adapter √† des projets de grande envergure.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:**  La mise en place et la gestion d'un syst√®me de gestion d'artefacts peuvent √™tre complexes, surtout pour les petits projets.\n* **Co√ªt:**  Certaines solutions (comme les services cloud) peuvent engendrer des co√ªts importants en fonction de l'utilisation.\n* **Surcharge:**  Une mauvaise gestion peut conduire √† une accumulation d'artefacts inutiles, rendant le syst√®me difficile √† g√©rer.\n* **D√©pendances:**  Une d√©pendance forte √† un syst√®me de gestion d'artefacts peut cr√©er un point de d√©faillance unique.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "25a68590-b3ad-459f-8628-f0d9b608d2ce",
        "title": "Gotify",
        "description": "---\nid: 1f7e13b1-9b4b-476d-9712-0229556402bd\n---\n# Gotify: Rapidement c'est quoi‚ùì\n\nUn serveur open-source l√©ger et simple pour envoyer et recevoir des notifications.  Il utilise une API RESTful pour une int√©gration facile avec d'autres applications et services.\n\n---\n# Gotify: Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nGotify est un serveur de notification auto-h√©bergeable, con√ßu pour √™tre simple √† utiliser et √† d√©ployer.  Il fonctionne en recevant des messages de notification via son API REST, puis en les redistribuant aux clients connect√©s.  Ces clients peuvent √™tre des applications mobiles (Android, iOS), des applications de bureau (Windows, macOS, Linux), ou m√™me des scripts personnalis√©s.  Gotify supporte plusieurs m√©thodes d'authentification, incluant des cl√©s API et une authentification par mot de passe, pour s√©curiser l'envoi des notifications.  Le serveur lui-m√™me est tr√®s l√©ger, n√©cessitant peu de ressources et pouvant √™tre facilement d√©ploy√© sur un Raspberry Pi ou un serveur cloud.  Il est √©crit en Go, d'o√π son nom, et propose une interface web simple pour la gestion des utilisateurs, des applications et des messages.  Les notifications peuvent √™tre personnalis√©es avec des titres, des messages, et des priorit√©s.  Gotify ne conserve pas d'historique des notifications par d√©faut, mais des solutions existent pour la journalisation externe si n√©cessaire.\n\n---\n# Gotify: Qu'est ce qui est top ? üëç\n\n* **Simplicit√©:**  Installation, configuration et utilisation extr√™mement faciles.\n* **Flexibilit√©:** API REST compl√®te permettant l'int√©gration avec une grande vari√©t√© d'applications et de services.\n* **L√©ger:**  N√©cessite peu de ressources serveur.\n* **Open-source:**  Code source disponible, permettant une analyse et une adaptation du logiciel.\n* **Auto-h√©bergeable:** Contr√¥le total sur vos donn√©es et votre infrastructure.\n* **Multi-plateforme:** Clients disponibles pour de nombreux syst√®mes d'exploitation.\n\n---\n# Gotify: Qu'est ce qui est pas ouf ? üëé\n\n* **Fonctionnalit√©s limit√©es:**  Par rapport √† des solutions plus compl√®tes, Gotify manque de certaines fonctionnalit√©s avanc√©es comme la planification des notifications ou une int√©gration native avec des services sp√©cifiques.\n* **Gestion de l'historique limit√©e:**  Pas de stockage d'historique des notifications int√©gr√© par d√©faut.  N√©cessite une solution externe pour cette fonctionnalit√©.\n* **D√©pendance √† un serveur:**  N√©cessite le maintien d'un serveur actif pour fonctionner.\n\n\n---\n# Gotify: A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "bf22a8e7-bac3-452e-8c34-a26fdb615473",
        "title": "Gulp",
        "description": "---\nid: 17e65120-21b5-485c-99e6-c77162ee080c\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nGulp est un outil open-source bas√© sur Node.js servant √† automatiser des t√¢ches de d√©veloppement web.  Il permet de simplifier et d'acc√©l√©rer des processus r√©p√©titifs comme la minification de code, la compilation de pr√©processeurs CSS (Sass, Less), la concat√©nation de fichiers, et le rafra√Æchissement automatique du navigateur.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nGulp utilise un syst√®me de flux (streams) pour traiter les fichiers.  Un flux est un ensemble de donn√©es qui traverse une s√©rie de transformations.  Au lieu de lire et d'√©crire des fichiers entiers √† chaque √©tape, Gulp travaille sur des flux, ce qui le rend beaucoup plus performant que les outils concurrents qui traitent les fichiers de mani√®re plus lin√©aire.  L'utilisateur d√©finit une s√©rie de t√¢ches (tasks) dans un fichier `gulpfile.js`. Chaque t√¢che utilise des plugins pour ex√©cuter des op√©rations sp√©cifiques sur les fichiers qui la traversent.\n\n**Exemple concret : Minification de fichiers CSS et JS**\n\nPour minifier les fichiers CSS et JS d'un projet, on pourrait √©crire un `gulpfile.js` comme ceci :\n\n```javascript\nconst gulp = require('gulp');\nconst cssmin = require('gulp-cssmin');\nconst uglify = require('gulp-uglify');\n\n// T√¢che pour minifier les fichiers CSS\ngulp.task('minify-css', () => {\n  return gulp.src('src/css/*.css')\n    .pipe(cssmin())\n    .pipe(gulp.dest('dist/css'));\n});\n\n// T√¢che pour minifier les fichiers JS\ngulp.task('minify-js', () => {\n  return gulp.src('src/js/*.js')\n    .pipe(uglify())\n    .pipe(gulp.dest('dist/js'));\n});\n\n// T√¢che par d√©faut qui ex√©cute les deux t√¢ches pr√©c√©dentes\ngulp.task('default', gulp.parallel('minify-css', 'minify-js'));\n```\n\nCe code utilise les plugins `gulp-cssmin` et `gulp-uglify` pour minifier respectivement les fichiers CSS et JS.  La commande `gulp` dans le terminal ex√©cuterait la t√¢che `default`, qui √† son tour ex√©cuterait `minify-css` et `minify-js`.\n\n**Fonctionnement interne:** Gulp utilise Node.js et le module `vinyl-fs` pour g√©rer les fichiers.  Les plugins Gulp sont des modules Node.js qui interagissent avec les flux de donn√©es et effectuent les transformations souhait√©es.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Performance:** L'utilisation des flux rend Gulp tr√®s rapide et efficace, surtout sur de grands projets.\n* **Modularit√©:** Le syst√®me de plugins permet une grande extensibilit√© et la possibilit√© d'utiliser des outils tiers.\n* **Lisibilit√©:** Le code des `gulpfile.js` est g√©n√©ralement plus clair et plus facile √† maintenir que celui d'autres outils similaires.\n* **Declaratif:** La d√©finition des t√¢ches est simple et intuitive.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** Bien que la syntaxe soit simple, la compr√©hension du syst√®me de flux et l'utilisation des plugins peut n√©cessiter un temps d'apprentissage.\n* **D√©pendances:** Gulp repose sur Node.js et n√©cessite l'installation de plusieurs plugins, ce qui peut complexifier la configuration.\n* **Maintenance:** La communaut√© autour de Gulp est moins active qu'avant, certains plugins peuvent devenir obsol√®tes.\n* **Alternatives:** Des outils comme npm scripts, Parcel et Webpack offrent des fonctionnalit√©s similaires, parfois plus int√©gr√©es et compl√®tes.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "bbad9982-49d3-4aef-93d5-075605177c94",
        "title": "JFrog Artifactory",
        "description": "---\nid: b5d82f2c-3c72-483c-8599-9e87e733a492\n---\n# Rapidement c'est quoi‚ùì\n\nJFrog Artifactory est un gestionnaire universel d'artefacts logiciels.  Il stocke, g√®re et distribue tous types de paquets logiciels, des biblioth√®ques Java aux images Docker.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nJFrog Artifactory est un serveur de gestion d'artefacts (repository manager) qui fournit un r√©f√©rentiel centralis√© pour stocker et g√©rer tous les types d'artefacts logiciels utilis√©s dans un cycle de d√©veloppement DevOps.  Il supporte un large √©ventail de formats de paquets, incluant (mais sans s'y limiter) : Maven, Gradle, npm, NuGet, Python (pip), Docker, Helm, Debian, RPM et bien d'autres.\n\nAu-del√† du simple stockage, Artifactory offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Gestion de versions:**  Suivi des diff√©rentes versions des artefacts, permettant un rollback facile.\n* **Contr√¥le d'acc√®s:**  Gestion fine des permissions pour garantir la s√©curit√© et le contr√¥le des acc√®s aux artefacts.\n* **Int√©gration CI/CD:**  Int√©gration transparente avec les outils d'int√©gration continue et de livraison continue (CI/CD) pour automatiser le d√©ploiement.\n* **R√©plication:**  Possibilit√© de r√©pliquer les r√©f√©rentiels pour une haute disponibilit√© et une meilleure performance.\n* **Recherche et analyse:**  Fonctions de recherche avanc√©es et d'analyse des artefacts pour une meilleure visibilit√©.\n* **Promotion de versions:**  Gestion du cycle de vie des artefacts, de la phase de d√©veloppement √† la production, via un syst√®me de promotion entre les diff√©rents r√©f√©rentiels (par exemple, de \"d√©veloppement\" √† \"staging\" puis √† \"production\").\n* **Virtual Repositories:**  Cr√©ation de r√©f√©rentiels virtuels combinant plusieurs r√©f√©rentiels physiques pour une meilleure organisation et simplification de la configuration client.\n* **Support de plusieurs protocoles:**  Acc√®s aux artefacts via divers protocoles comme HTTP, HTTPS, SFTP, etc.\n\n\nArtifactory permet ainsi d'am√©liorer la collaboration entre les √©quipes de d√©veloppement, de simplifier la gestion des d√©pendances et d'acc√©l√©rer le processus de livraison continue.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Support multi-langages et multi-formats:**  Gestion d'un tr√®s grand nombre de types d'artefacts.\n* **Fonctionnalit√©s avanc√©es:**  Gestion des versions, contr√¥le d'acc√®s fin, int√©gration CI/CD robuste, etc.\n* **Haute disponibilit√© et scalabilit√©:**  Possibilit√© de configuration pour la haute disponibilit√© et la gestion de volumes importants d'artefacts.\n* **Interface utilisateur intuitive:**  L'interface utilisateur est g√©n√©ralement consid√©r√©e comme conviviale et facile √† utiliser.\n* **Int√©gration avec d'autres outils JFrog:**  Synergie avec d'autres outils de l'√©cosyst√®me JFrog, comme Xray (analyse de vuln√©rabilit√©s).\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Prix:**  Artifactory peut √™tre co√ªteux, surtout pour les grandes organisations avec de nombreux utilisateurs et de gros volumes d'artefacts.\n* **Complexit√©:**  La configuration et l'administration d'Artifactory peuvent √™tre complexes pour des utilisateurs moins exp√©riment√©s.\n* **Ressources requises:**  N√©cessite des ressources serveur significatives pour g√©rer de gros volumes d'artefacts.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n# JFrog Artifactory\n\n## Rapidement, c'est quoi ? ü§î\n\nJFrog Artifactory est un gestionnaire universel d'artefacts logiciels.  Imaginez un entrep√¥t centralis√© qui stocke et g√®re tous les composants n√©cessaires √† vos applications, des plus petites librairies aux plus grosses images Docker.\n\n## Plus pr√©cis√©ment, c'est quoi / √ßa fait quoi ? üîç\n\nJFrog Artifactory est un serveur de gestion d'artefacts (repository manager). Il centralise le stockage et la gestion de tous les types d'artefacts logiciels utilis√©s dans un cycle de d√©veloppement DevOps.  Il supporte une multitude de formats, parmi lesquels : Maven, Gradle, npm, NuGet, Python (pip), Docker, Helm, Debian, RPM, et bien d'autres.\n\n**Au-del√† du simple stockage, Artifactory offre des fonctionnalit√©s essentielles pour un workflow DevOps efficace :**\n\n* **Gestion de versions:**  Suivi pr√©cis des versions, facilitant les rollbacks (retour √† une version ant√©rieure).  Imaginez pouvoir facilement revenir √† une version stable de votre application en cas de probl√®me.\n* **Contr√¥le d'acc√®s:**  Permissions granulaires pour s√©curiser l'acc√®s aux artefacts.  Seuls les utilisateurs autoris√©s peuvent acc√©der √† certains composants.\n* **Int√©gration CI/CD:**  Int√©gration fluide avec vos outils CI/CD ([Concept supprim√©]) pour automatiser les d√©ploiements.  Cela acc√©l√®re le cycle de d√©veloppement et r√©duit les erreurs manuelles.\n* **R√©plication:**  R√©plication des r√©f√©rentiels pour haute disponibilit√© et performances accrues.  Vos artefacts sont disponibles m√™me en cas de panne d'un serveur.\n* **Recherche et analyse:**  Recherche puissante et analyse des artefacts pour une meilleure visibilit√© sur votre √©cosyst√®me logiciel.\n* **Promotion de versions:**  Gestion du cycle de vie des artefacts, de d√©veloppement √† production, via un syst√®me de promotion entre r√©f√©rentiels (ex: \"dev\" -> \"staging\" -> \"prod\").  Cela permet un contr√¥le rigoureux des d√©ploiements.\n* **Virtual Repositories:**  Cr√©ation de r√©f√©rentiels virtuels combinant plusieurs r√©f√©rentiels physiques pour simplifier la configuration client.  Cela simplifie grandement l'acc√®s aux artefacts pour les d√©veloppeurs.\n* **Support de plusieurs protocoles:**  Acc√®s aux artefacts via HTTP, HTTPS, SFTP, etc.  Flexibilit√© d'int√©gration avec diff√©rents environnements.\n\n\nEn r√©sum√©, Artifactory am√©liore la collaboration, simplifie la gestion des d√©pendances et acc√©l√®re la livraison continue.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Support multi-langages et multi-formats:**  Gestion d'une large vari√©t√© d'artefacts.\n* **Fonctionnalit√©s avanc√©es:**  Gestion de versions, contr√¥le d'acc√®s fin, int√©gration CI/CD robuste.\n* **Haute disponibilit√© et scalabilit√©:**  Adaptable √† des besoins croissants.\n* **Interface utilisateur intuitive:**  Facile √† prendre en main.\n* **Int√©gration avec d'autres outils JFrog:**  Synergie avec Xray (analyse de vuln√©rabilit√©s) par exemple.\n\n\n## Qu'est-ce qui est moins bien ? üëé\n\n* **Prix:**  Peut √™tre co√ªteux pour les grandes organisations.\n* **Complexit√©:**  Configuration avanc√©e pouvant √™tre complexe.\n* **Ressources requises:**  N√©cessite des ressources serveur importantes pour g√©rer de gros volumes.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n* [Gestion des artefacts]\n* [CI/CD] (Int√©gration Continue / Livraison Continue)\n* [Docker] (Pour la gestion des images conteneuris√©es)\n\n\n## Exemple de configuration d'un r√©f√©rentiel Maven dans Artifactory (snippet):\n\n```yaml\nrepositories:\n  - repoKey: libs-release-local\n    repositoryType: local\n    packageType: maven\n    description: Local Maven repository for releases\n```\n"
    },
    {
        "id": "b54a6baf-dffc-4f42-abf8-54d421bfd881",
        "title": "JMeter",
        "description": "---\nid: 0635b1b3-d5fa-4382-8668-72e0ccd88568\n---\n# Rapidement c'est quoi‚ùì\n\nJMeter est un outil open-source de test de performance et de charge pour des applications web et autres.  Il permet de simuler un grand nombre d'utilisateurs simultan√©s pour mesurer la capacit√© de r√©ponse et la stabilit√© d'un syst√®me.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nJMeter est un outil de test de performance √©crit en Java. Il permet de simuler un important volume de requ√™tes sur un serveur, une application web ou un autre syst√®me afin d'en √©valuer les performances et la robustesse sous forte charge.  Il offre la possibilit√© de cr√©er des sc√©narios de test complexes, incluant des √©l√©ments comme :\n\n* **Requ√™tes HTTP/HTTPS:**  Simuler des navigations web, des appels d'API REST, etc.  Il supporte diff√©rents protocoles et m√©thodes HTTP.\n* **Tests de base de donn√©es:** Tester les performances des requ√™tes SQL sur diff√©rentes bases de donn√©es.\n* **Tests FTP:** Tester les performances des transferts de fichiers FTP.\n* **Tests de performances JMS:** Tester les performances de la messagerie JMS.\n* **Tests LDAP:** Tester les performances des services LDAP.\n* **√âl√©ments de configuration:**  Contr√¥ler les aspects du test, comme les temporisations, les boucles, les assertions, etc.\n* **√âcouteurs:**  Collecter et visualiser les r√©sultats des tests, sous forme de tableaux, de graphiques, et de rapports d√©taill√©s (temps de r√©ponse, nombre d'erreurs, temps d'attente, etc.).\n* **Assertions:** V√©rifier si la r√©ponse du serveur correspond aux attentes (codes de statut HTTP, contenu de la r√©ponse, etc.).\n\nJMeter est tr√®s flexible et extensible gr√¢ce √† ses nombreux plugins et son architecture modulaire.  Il permet d'int√©grer des scripts personnalis√©s et d'automatiser des t√¢ches de test complexes. Les r√©sultats des tests permettent d'identifier les goulots d'√©tranglement et d'optimiser les performances de l'application test√©e.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et gratuit:**  Accessible √† tous sans co√ªt de licence.\n* **Large communaut√© et documentation:**  Facile d'obtenir de l'aide et des ressources en cas de besoin.\n* **Flexible et extensible:**  Adaptable √† une grande vari√©t√© de sc√©narios de test gr√¢ce √† ses plugins et fonctionnalit√©s.\n* **Interface graphique intuitive (pour la cr√©ation des tests):**  Relativement facile √† prendre en main, m√™me pour les d√©butants.\n* **Rapports d√©taill√©s:**  Fournit des informations compl√®tes sur les performances du syst√®me test√©.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Consommation de ressources:**  Peut consommer beaucoup de ressources (m√©moire, CPU) lors de la simulation de charges importantes, surtout sur une seule machine.\n* **Courbe d'apprentissage:**  Bien que l'interface soit intuitive pour les tests simples, la cr√©ation de tests complexes et l'interpr√©tation des r√©sultats avanc√©s peuvent n√©cessiter une certaine expertise.\n* **Interface graphique peu performante pour les gros tests:**  L'interface graphique peut devenir lente et r√©active avec de tr√®s grands tests.  L'utilisation de mode non-GUI est alors conseill√©e.\n* **D√©bogage parfois complexe:**  Identifier la source des erreurs dans des sc√©narios de test complexes peut √™tre difficile.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "304b6f37-1909-4af5-a92b-bc4e62895631",
        "title": "Jaeger",
        "description": "---\nid: dba8623c-06a9-4387-a258-3a4acaaca56f\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nJaeger est un syst√®me de tra√ßage distribu√© open-source qui permet de surveiller et de d√©boguer les applications distribu√©es.  Il collecte et visualise les traces des requ√™tes traversant diff√©rents services, permettant ainsi d'identifier les goulots d'√©tranglement et les erreurs.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nJaeger impl√©mente le standard OpenTracing (maintenant OpenTelemetry) pour le tra√ßage distribu√©.  Il est compos√© de plusieurs composants principaux :\n\n* **Agent:** Un agent l√©ger qui s'ex√©cute sur chaque service et collecte les traces. Il envoie ces traces au collecteur.\n* **Collecteur:** Un service qui re√ßoit les traces de plusieurs agents et les traite.  Il peut √™tre configur√© pour stocker les traces dans une base de donn√©es (ex: Cassandra, Elasticsearch).\n* **Query:** Un service qui permet de rechercher et de visualiser les traces via une interface utilisateur web.\n* **Ingest:** Le composant qui re√ßoit les donn√©es brutes du traceur et les envoie au backend de stockage.\n\nLe fonctionnement se r√©sume ainsi:\n\n1. Une application instrumente son code pour injecter des spans (unit√©s de travail) dans le flux de la requ√™te.  Ces spans contiennent des informations contextuelles comme le nom de l'op√©ration, la dur√©e et des tags.\n2. L'agent Jaeger, en local, collecte ces spans et les envoie au collecteur.\n3. Le collecteur traite les donn√©es et les stocke dans une base de donn√©es.\n4. L'interface utilisateur permet de visualiser les traces, de filtrer par service, par tag, etc.  On peut ainsi suivre le parcours d'une requ√™te √† travers l'ensemble de l'infrastructure.\n\n**Exemple (Python avec opentelemetry):**\n\n```python\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.jaeger.thrift import JaegerExporter\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\n\nresource = Resource.get_empty().merge({SERVICE_NAME: \"my_service\"})\ntrace.set_tracer_provider(TracerProvider(resource=resource))\njaeger_exporter = JaegerExporter(agent_host_name='localhost', agent_port=6831)\nspan_processor = BatchSpanProcessor(jaeger_exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\ntracer = trace.get_tracer(__name__)\nwith tracer.start_as_current_span(\"main_function\"):\n    with tracer.start_as_current_span(\"sub_function\"):\n        # ... code ...\n        pass\n    # ... code ...\n    pass\n```\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Open Source et mature:**  Jaeger est un projet stable et largement adopt√©.\n* **Interface utilisateur intuitive:** La visualisation des traces est facile √† comprendre et √† utiliser.\n* **Int√©gration avec plusieurs technologies:**  Jaeger s'int√®gre facilement avec de nombreux langages de programmation et frameworks.\n* **Scalabilit√©:**  Jaeger est con√ßu pour g√©rer un grand nombre de traces.\n* **Support de diff√©rents backends de stockage:**  On peut choisir le stockage qui convient le mieux √† son infrastructure.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© de configuration:**  La configuration peut √™tre complexe, notamment pour des d√©ploiements √† grande √©chelle.\n* **Surco√ªt de performance:**  L'instrumentation et la collecte des traces peuvent avoir un l√©ger impact sur les performances de l'application.  Une instrumentation mal faite peut amplifier ce probl√®me.\n* **N√©cessite un backend de stockage:**  Jaeger ne fonctionne pas sans un backend de stockage pour les traces.  Ceci ajoute une d√©pendance suppl√©mentaire.\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "6234d20e-2789-4aed-a6a5-ee646881890d",
        "title": "Jitpack",
        "description": "---\nid: f7b3616a-498c-4574-a2d9-4d5a46afee0e\n---\n# Rapidement c'est quoi‚ùì\n\nJitPack est un service d'h√©bergement et de distribution d'artefacts Java et Kotlin.  Il permet d'int√©grer facilement des librairies h√©berg√©es sur des d√©p√¥ts Git (GitHub, GitLab, Bitbucket) directement dans vos projets.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nJitPack est un r√©f√©rentiel Maven et Gradle qui automatise la construction et la publication de biblioth√®ques Java et Kotlin √† partir de d√©p√¥ts Git.  Au lieu de publier vos librairies manuellement sur des r√©f√©rentiels comme Maven Central, vous fournissez simplement JitPack avec l'URL de votre d√©p√¥t Git (public ou priv√©, mais les priv√©s n√©cessitent un abonnement payant). JitPack se charge ensuite de :\n\n1. **Cloner votre d√©p√¥t Git:** Il r√©cup√®re le code source de votre projet.\n2. **Construire votre projet:** Il utilise un environnement de build (Maven ou Gradle) d√©fini dans votre projet pour compiler votre code et g√©n√©rer les artefacts (JAR, AAR, etc.).\n3. **Publier les artefacts:** Il met √† disposition les artefacts compil√©s via son propre r√©f√©rentiel, accessible via des coordonn√©es Maven ou Gradle.\n\nCela permet aux d√©veloppeurs d'int√©grer vos librairies directement dans leurs projets via un simple ajout de d√©pendances dans leur fichier `build.gradle` (ou √©quivalent).  JitPack surveille les modifications dans votre d√©p√¥t Git et met √† jour les artefacts automatiquement, facilitant ainsi la gestion des versions et la mise √† jour des librairies.  L'int√©gration est transparente pour le d√©veloppeur qui n'a pas besoin de g√©rer la publication des artefacts.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplicit√© d'utilisation:**  Int√©gration facile et rapide gr√¢ce √† l'ajout d'une simple d√©pendance dans votre fichier de build.\n* **Automatisation:** JitPack automatise le processus de compilation et de publication, r√©duisant ainsi le temps et l'effort n√©cessaire.\n* **Mise √† jour automatique:** Les mises √† jour du d√©p√¥t Git sont automatiquement refl√©t√©es dans le r√©f√©rentiel JitPack.\n* **Int√©gration avec les d√©p√¥ts Git populaires:**  Fonctionne avec GitHub, GitLab et Bitbucket.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Co√ªt pour les d√©p√¥ts priv√©s:** L'utilisation de d√©p√¥ts Git priv√©s n√©cessite un abonnement payant.\n* **D√©pendance √† JitPack:** Votre projet d√©pend d'un service tiers, ce qui introduit un point de d√©faillance potentiel.\n* **Performances:**  La construction et le d√©ploiement peuvent √™tre plus lents que sur un serveur de build d√©di√©.\n* **Contr√¥le limit√©:** Vous avez moins de contr√¥le sur le processus de build que si vous g√©rez vous-m√™me la publication de vos artefacts.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "39981e27-4afb-40f9-a0b7-7ab17fc52da6",
        "title": "K6",
        "description": "---\nid: 31ca0fd2-70a8-43d5-8c3c-250984ee0d52\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nk6 est un outil open-source de test de charge et de performance √©crit en Go.  Il permet de simuler un grand nombre d'utilisateurs simultan√©s interagissant avec une application web ou un service afin d'√©valuer sa capacit√© √† g√©rer la charge et d'identifier les goulots d'√©tranglement.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nk6 permet de d√©finir des sc√©narios de test en utilisant un langage de script simple et puissant bas√© sur JavaScript.  Ces scripts d√©finissent les actions que les utilisateurs virtuels doivent r√©aliser (requ√™tes HTTP, interactions avec l'interface utilisateur, etc.).  k6 ex√©cute ensuite ces scripts en parall√®le, simulant ainsi une charge importante sur le syst√®me test√©.  L'outil collecte diverses m√©triques de performance (temps de r√©ponse, taux d'erreur, utilisation des ressources serveur, etc.) et les pr√©sente sous forme de rapports et de graphiques.\n\nVoici un exemple simple de script k6:\n\n```javascript\nimport http from 'k6/http';\nimport { sleep } from 'k6';\n\nexport let options = {\n  stages: [\n    { duration: '30s', target: 20 }, // Simuler 20 utilisateurs pendant 30 secondes\n    { duration: '1m', target: 20 }, // Maintenir 20 utilisateurs pendant 1 minute\n    { duration: '30s', target: 0 },  // Ramener le nombre d'utilisateurs √† 0 pendant 30 secondes\n  ],\n};\n\nexport default function () {\n  let res = http.get('https://test-api.com/users');\n  sleep(1); // Attendre 1 seconde avant la prochaine requ√™te\n  check(res, { 'status was 200': (r) => r.status === 200 });\n}\n```\n\nCe script simule 20 utilisateurs effectuant une requ√™te GET sur une API pendant une minute et demie.  `check` permet de valider que la r√©ponse a un code de statut 200.  L'option `stages` d√©finit l'√©volution du nombre d'utilisateurs virtuels au cours du test.\n\nk6 offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Int√©gration avec des outils d'observation:**  k6 peut envoyer des m√©triques vers des syst√®mes de monitoring comme Prometheus, Grafana, InfluxDB.\n* **Scripts modulaires et r√©utilisables:**  Les scripts k6 peuvent √™tre organis√©s en modules pour faciliter la maintenance et le partage de code.\n* **Tests de charge bas√©s sur des sc√©narios r√©alistes:**  Il est possible de simuler des comportements d'utilisateurs plus complexes, en incluant des temps d'attente, des distributions al√©atoires, etc.\n* **Support des protocoles HTTP/1.1, HTTP/2, et WebSocket:**  k6 permet de tester une large gamme d'applications.\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Open-source et gratuit:** k6 est librement disponible et utilisable.\n* **Langage de script simple et puissant:**  Le JavaScript utilis√© est relativement facile √† apprendre et permet de cr√©er des tests complexes.\n* **R√©sultats clairs et concis:**  k6 fournit des rapports d√©taill√©s et des visualisations graphiques des r√©sultats.\n* **Int√©gration facile avec l'√©cosyst√®me DevOps:**  k6 s'int√®gre bien avec d'autres outils populaires.\n* **Performance et stabilit√©:**  k6 est performant et robuste.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:** Bien que le langage de script soit simple, une certaine familiarit√© avec JavaScript est n√©cessaire pour cr√©er des tests sophistiqu√©s.\n* **D√©bogage:** Le d√©bogage des scripts peut √™tre parfois complexe.  Des outils sp√©cifiques sont n√©cessaires pour un d√©bogage efficace.\n* **Limitations pour les tests UI complexes:** Bien que possible,  tester des applications avec de nombreuses interactions UI complexes peut √™tre plus difficile qu'avec d'autres outils sp√©cialis√©s dans les tests d'interface utilisateur.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "ff09cb51-6aea-4704-908c-b252fcebb82b",
        "title": "Karate",
        "description": "---\nid: 1c914381-073b-493f-9b0e-f8c82b8f9e98\n---\n# Rapidement c'est quoi‚ùì\n\nKarate DSL est un framework open-source bas√© sur Cucumber (Gherkin) pour l'automatisation des tests, notamment pour les API, mais aussi pour les applications web et les applications desktop.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nKarate est un framework de test d'int√©gration bas√© sur le langage [[Gherkin]], connu pour sa syntaxe simple et lisible (BDD - Behavior Driven Development).  Il permet de d√©crire les sc√©narios de test de mani√®re concise et compr√©hensible par les √©quipes techniques et non-techniques.  Au lieu d'√©crire du code complexe, on d√©crit le comportement attendu de l'application via des mots cl√©s simples.  Karate s'occupe ensuite de l'ex√©cution et de la validation.\n\nKarate offre une grande flexibilit√© et peut √™tre utilis√© pour tester diff√©rents types d'applications :\n\n* **API REST :** C'est son utilisation principale. Il permet d'envoyer des requ√™tes HTTP (GET, POST, PUT, DELETE, etc.), de valider les r√©ponses (codes de statut, corps JSON, etc.) et de g√©rer l'authentification.\n* **Applications Web :**  Karate peut interagir avec des applications web via son int√©gration avec des outils comme Selenium, permettant de simuler des actions utilisateur.\n* **Applications Desktop :**  Bien que moins courant, Karate peut √™tre utilis√© pour tester des applications desktop gr√¢ce √† son API extensible.\n* **Tests de performance de base :**  Karate permet d‚Äôeffectuer des tests de charge l√©gers, notamment gr√¢ce √† ses capacit√©s de parall√©lisation.\n\nKarate utilise un puissant moteur de matching JSON qui simplifie les validations. Il propose √©galement des fonctionnalit√©s avanc√©es telles que la gestion des donn√©es de test, la g√©n√©ration de rapports et l'int√©gration avec des syst√®mes de CI/CD.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Syntaxe simple et lisible (Gherkin) :** Rend les tests faciles √† comprendre et √† maintenir.\n* **Polyvalence :** Permet de tester des API REST, des applications web et m√™me des applications desktop.\n* **Int√©gration facile :** S'int√®gre bien avec de nombreux outils et technologies.\n* **Gestion avanc√©e des donn√©es de test :** Simplifie la gestion des donn√©es d'entr√©e.\n* **Puissant moteur de matching JSON :** Facilite la validation des r√©ponses API.\n* **Reporting clair et concis :** Facilite l'analyse des r√©sultats.\n* **Communaut√© active et documentation assez compl√®te:** Facilite le d√©marrage et l'apprentissage.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Pour les tests UI complexes, il peut √™tre moins performant que des outils d√©di√©s comme Selenium ou Cypress:** Il est plus adapt√© pour la validation de l'API qui sous-tend l'UI plut√¥t que la validation de l'exp√©rience utilisateur elle-m√™me.\n* **Courbe d'apprentissage l√©g√®rement plus raide que des outils plus simples pour les d√©butants complets en test.**  La ma√Ætrise des expressions r√©guli√®res et des manipulations JSON est un atout.\n* **Moins de plugins disponibles qu'avec des frameworks plus √©tablis** pour les tests UI.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "4f9fb72d-9eb3-4874-b3cf-2aea798c1efa",
        "title": "LowDb",
        "description": "---\nid: 1f2a7d57-7f12-4d6a-8ad5-d1eb8ef07f91\n---\n## **Rapidement, c'est quoi ? ‚ùì**\n\nLowDB est une petite base de donn√©es JavaScript l√©g√®re, bas√©e sur un fichier JSON.  Elle est id√©ale pour les applications qui n'ont pas besoin d'une base de donn√©es relationnelle complexe et qui veulent un stockage persistant simple et rapide.\n\n---\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLowDB est une base de donn√©es NoSQL orient√©e document.  Cela signifie qu'elle stocke les donn√©es sous forme de documents JSON, sans le besoin de sch√©mas rigides.  Elle utilise un seul fichier JSON comme stockage persistant, ce qui la rend facile √† d√©ployer et √† utiliser.  LowDB fournit une API simple et intuitive pour effectuer des op√©rations CRUD (Cr√©er, Lire, Mettre √† jour, Supprimer) sur les donn√©es.  Elle est bas√©e sur Lodash, ce qui facilite l'utilisation de ses fonctions de manipulation de donn√©es.  Elle ne n√©cessite aucune configuration de serveur, ni aucune d√©pendance externe autre que Lodash.\n\nVoici un exemple d'utilisation en JavaScript :\n\n```javascript\nconst low = require('lowdb')\nconst FileSync = require('lowdb/adapters/FileSync')\n\nconst adapter = new FileSync('db.json')\nconst db = low(adapter)\n\n// Set some defaults (optional)\ndb.defaults({ users: [], posts: [] })\n  .write()\n\n// Add a user\ndb.get('users').push({ id: 1, name: 'John' }).write()\n\n// Find a user\nconst john = db.get('users').find({ id: 1 }).value()\n\n// Update a user\ndb.get('users').find({ id: 1 }).assign({ age: 30 }).write()\n\n// Remove a user\ndb.get('users').remove({ id: 1 }).write()\n\n// Read all users\nconst users = db.get('users').value()\n\nconsole.log(users)\n```\n\nCet exemple montre comment cr√©er une base de donn√©es, ajouter, rechercher, mettre √† jour et supprimer des utilisateurs.  La m√©thode `.write()` sauvegarde les modifications dans le fichier `db.json`.\n\n---\n\n# Qu'est-ce qui est top ? üëç\n\n* **Simplicit√©:**  Extr√™mement facile √† installer et √† utiliser, avec une API intuitive.\n* **L√©ger:**  Tr√®s petite taille, ne surcharge pas l'application.\n* **Facile √† d√©ployer:**  Ne n√©cessite aucune configuration de serveur.\n* **Persistant:**  Stocke les donn√©es dans un fichier JSON, garantissant la persistance des donn√©es.\n* **Bas√© sur Lodash:**  B√©n√©ficie de la puissance et de la flexibilit√© de Lodash pour la manipulation des donn√©es.\n\n---\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Scalabilit√© limit√©e:**  N'est pas con√ßue pour les applications √† tr√®s grande √©chelle.  La performance peut d√©grader avec des jeux de donn√©es importants.\n* **Transactions non support√©es:**  Ne supporte pas les transactions, ce qui peut √™tre un probl√®me pour les applications n√©cessitant une coh√©rence forte des donn√©es.\n* **Concurrence limit√©e:**  La gestion de la concurrence n'est pas optimis√©e.  L'utilisation simultan√©e par plusieurs processus peut n√©cessiter des m√©canismes de verrouillage externes.\n* **Fonctionnalit√©s limit√©es:**  Ne propose pas autant de fonctionnalit√©s qu'une base de donn√©es relationnelle ou un syst√®me de base de donn√©es NoSQL plus complet.\n\n---\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "2dd2c605-ae74-4ae6-8c67-dfd4a2df88ec",
        "title": "MQTT",
        "description": "---\nid: 7b1fe336-18e3-4bbc-a2d1-4f869db47e43\n---\n# Rapidement c'est quoi‚ùì\n\nMQTT (Message Queuing Telemetry Transport) est un protocole de messagerie l√©ger, publi√©-abonn√©, utilis√© principalement pour l'Internet des objets (IoT).  Il permet aux appareils de publier des messages sur des sujets sp√©cifiques, et aux autres appareils abonn√©s √† ces sujets de recevoir ces messages.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nMQTT est un protocole de communication machine-√†-machine (M2M) bas√© sur le paradigme de publication-abonnement.  Il fonctionne sur le principe de \"sujets\" (topics) auxquels les clients (publishers et subscribers) s'abonnent.  Un √©diteur (publisher) publie un message sur un sujet sp√©cifique.  Tous les abonn√©s (subscribers) √† ce sujet re√ßoivent alors une copie de ce message.  Ceci permet une communication unidirectionnelle efficace, id√©ale pour les applications √† faible bande passante et √† forte latence comme l'IoT.\n\nContrairement √† d'autres protocoles de messagerie plus lourds, MQTT est con√ßu pour √™tre l√©ger et efficace en termes de bande passante et d'√©nergie.  Il utilise un format de message compact et g√®re les connexions intermittentes et les d√©connexions.  Il offre diff√©rents niveaux de qualit√© de service (QoS) pour garantir la fiabilit√© de la livraison des messages :\n\n* **QoS 0 (At most once):** Le message est envoy√© une seule fois, sans garantie de livraison.\n* **QoS 1 (At least once):** Le message est envoy√© au moins une fois, le serveur envoie un accus√© de r√©ception.  Il est possible de recevoir le message plusieurs fois en cas de perte du message d'accus√© de r√©ception.\n* **QoS 2 (Exactly once):** Le message est envoy√© exactement une fois, garantie de livraison et d'unicit√©.  C'est le niveau le plus robuste, mais aussi le plus co√ªteux en ressources.\n\nUn broker MQTT agit comme un interm√©diaire centralis√©, g√©rant les abonnements et la diffusion des messages entre les √©diteurs et les abonn√©s.  Le publisher peut sp√©cifier s'il attend une confirmation de r√©ception (QoS 1 et 2) ou non (QoS 0).\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **L√©ger et efficace:**  Id√©al pour les appareils √† faible puissance et bande passante limit√©e.\n* **Simple √† impl√©menter:**  Protocole relativement simple √† comprendre et √† utiliser.\n* **Publication-abonnement efficace:**  Permet une communication unidirectionnelle scalable.\n* **Gestion des connexions intermittentes:**  Robuste face aux d√©connexions et aux r√©seaux instables.\n* **Plusieurs niveaux de QoS:**  Offre des options de fiabilit√© pour adapter la communication aux besoins de l'application.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Pas adapt√© √† toutes les applications:**  Moins appropri√© pour les applications n√©cessitant des transactions complexes ou une communication bidirectionnelle tr√®s r√©active.\n* **S√©curit√©:**  N√©cessite une attention particuli√®re √† la s√©curit√©, surtout dans les environnements sensibles.  Des m√©canismes d'authentification et de chiffrement sont importants.\n* **Complexit√© du Broker:** La gestion d'un broker MQTT peut devenir complexe pour un grand nombre d'appareils et de messages.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "2ac4eb26-18a4-4910-80a6-380bdeef9ae0",
        "title": "Macaron",
        "description": "---\nid: 4ca900d5-f49d-4a08-8a97-35a6683ef57f\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nUn macaron est un jeton cryptographique utilis√© pour l'authentification.  Il repr√©sente une alternative aux m√©canismes d'authentification traditionnels, offrant une approche plus s√©curis√©e et flexible.  On peut le voir comme une version plus simple et moins complexe d'un biscuit (d√©velopp√© par Clever Cloud).\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nUn macaron est un jeton num√©rique, g√©n√©ralement encod√© en base64, qui contient des informations chiffr√©es sur l'identit√© d'un utilisateur et ses autorisations.  Contrairement √† un cookie HTTP classique, un macaron n'est pas directement stock√© par le navigateur.  Son utilisation implique g√©n√©ralement un m√©canisme d'√©change entre le client (application, navigateur) et le serveur, souvent via un en-t√™te HTTP.\n\nLe serveur cr√©e le macaron en incluant des donn√©es pertinentes (identifiant utilisateur, timestamp, r√¥les, etc.) et en les chiffrant sym√©triquement avec une cl√© secr√®te connue uniquement du serveur.  Le client re√ßoit et conserve le macaron.  Chaque requ√™te subsequente au serveur inclut le macaron, qui est alors v√©rifi√© et d√©chiffr√© par le serveur pour authentifier l'utilisateur et valider ses autorisations.  Ceci √©vite de devoir transmettre des informations sensibles comme mots de passe √† chaque requ√™te.\n\nL'architecture pr√©cise de l'int√©gration des macarons peut varier, mais le principe central reste la g√©n√©ration, transmission et v√©rification s√©curis√©e du jeton chiffr√©.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **S√©curit√© am√©lior√©e:** Le chiffrement du macaron prot√®ge les informations sensibles de l'utilisateur.  Le caract√®re √©ph√©m√®re du macaron (dur√©e de vie limit√©e) renforce la s√©curit√©.\n* **Simplicit√© (compar√© aux syst√®mes plus complexes):**  Par rapport √† des solutions d'authentification plus sophistiqu√©es, le concept est relativement simple √† mettre en ≈ìuvre.\n* **Flexibilit√©:** Les macarons peuvent √™tre adapt√©s √† divers contextes et protocoles.\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Gestion de la cl√© secr√®te:**  La s√©curit√© du syst√®me d√©pend enti√®rement de la protection de la cl√© secr√®te utilis√©e pour chiffrer/d√©chiffrer les macarons.  Une compromission de cette cl√© compromet la s√©curit√© de tout le syst√®me.\n* **Complexit√© d'impl√©mentation (par rapport aux cookies simples):**  L'impl√©mentation n√©cessite une gestion plus complexe que des cookies HTTP simples.\n* **D√©pendance au serveur:**  La validit√© du macaron d√©pend enti√®rement du serveur.  Des probl√®mes de connectivit√© ou des pannes du serveur peuvent emp√™cher l'acc√®s.\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "31d7445a-110f-47ad-b006-c15034db4caf",
        "title": "Mockoon",
        "description": "---\nid: 6fbdf1a5-224a-40eb-8d39-f3a7b21e6fe8\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nMockoon est une application open-source permettant de cr√©er et de g√©rer facilement des mocks d'API.  Elle permet de simuler des r√©ponses HTTP pour des besoins de test et de d√©veloppement, sans avoir besoin d'un serveur backend fonctionnel.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nMockoon est un outil qui permet de d√©finir des routes API, chacune associ√©e √† une r√©ponse HTTP sp√©cifique.  Ces r√©ponses peuvent √™tre configur√©es pour simuler diff√©rents statuts HTTP (200 OK, 404 Not Found, etc.), des en-t√™tes personnalis√©s, et des corps de r√©ponse au format JSON, XML, ou texte brut.  L'application embarque un serveur qui rend ces mocks accessibles via une URL locale.  Les d√©veloppeurs peuvent ainsi tester leurs applications front-end ou leurs int√©grations sans d√©pendre d'un serveur backend en cours de d√©veloppement ou indisponible.\n\nMockoon offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Gestion des requ√™tes:**  Possibilit√© de d√©finir des requ√™tes sp√©cifiques (m√©thodes HTTP, headers, param√®tres, corps de la requ√™te) pour d√©clencher des r√©ponses diff√©rentes.\n* **Mocks dynamiques:**  Les r√©ponses peuvent √™tre g√©n√©r√©es dynamiquement gr√¢ce √† des fonctionnalit√©s de templating (ex: utilisant des variables).\n* **D√©lai de r√©ponse:**  Simulation de latence r√©seau pour des tests plus r√©alistes.\n* **Import/Export:**  Import et export de configurations au format JSON pour faciliter le partage et la sauvegarde.\n* **Environnements:**  Possibilit√© de g√©rer plusieurs environnements (d√©veloppement, test, production) avec des configurations diff√©rentes.\n\n**Exemple simple (JSON):**\n\nImaginons une route `/users` qui doit retourner une liste d'utilisateurs.  Dans Mockoon, on d√©finirait une route avec la m√©thode `GET`, l'URL `/users`, et un corps de r√©ponse JSON comme suit :\n\n```json\n[\n  {\"id\": 1, \"name\": \"John Doe\"},\n  {\"id\": 2, \"name\": \"Jane Smith\"}\n]\n```\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Facilit√© d'utilisation:**  Interface utilisateur intuitive et facile √† prendre en main.\n* **Open-source:**  Gratuit, et le code source est disponible pour un audit ou des contributions.\n* **Fonctionnalit√©s compl√®tes:**  Offre un ensemble complet de fonctionnalit√©s pour la simulation d'API.\n* **Interface graphique:**  Permet une configuration visuelle et simple des mocks.\n* **Multiplateforme:**  Disponible pour Windows, macOS et Linux.\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Limitations pour les mocks complexes:**  Pour les cas d'utilisation tr√®s complexes n√©cessitant des interactions sophistiqu√©es avec le serveur (authentification avanc√©e, gestion d'√©tat, etc.), Mockoon pourrait s'av√©rer moins adapt√© que des solutions plus sp√©cialis√©es.\n* **D√©pendance √† une application:**  Contrairement √† des solutions bas√©es sur un script ou un fichier de configuration, Mockoon n√©cessite l'ex√©cution de l'application.\n\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "3e904263-df71-47ca-a67f-c0e3adcd11bd",
        "title": "Nexus OSS",
        "description": "---\nid: e34dad01-51d0-4b44-b981-ab5d072436c6\n---\n# Nexus OSS : Rapidement c'est quoi‚ùì\n\nNexus OSS est un gestionnaire d'artefacts open-source.  Il permet de stocker et de g√©rer des paquets logiciels de diff√©rents types (Java, Python, Node.js, Docker, etc.) centralisant ainsi la distribution et la versioning de ces √©l√©ments au sein d'un projet.\n\n---\n# Nexus OSS : Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nNexus OSS est un serveur de gestion d'artefacts qui fournit un r√©f√©rentiel centralis√© pour les d√©pendances de logiciels.  Il prend en charge une large vari√©t√© de formats de paquets, incluant mais sans s'y limiter : Maven, npm, NuGet, Bower, PyPI, Docker, et beaucoup d'autres.  Son r√¥le principal est de faciliter la gestion du cycle de vie des artefacts, de leur cr√©ation √† leur d√©ploiement.\n\nPlus concr√®tement, Nexus OSS permet :\n\n* **Stockage centralis√©:**  Tous les artefacts d'un projet sont stock√©s dans un emplacement unique, facilitant l'acc√®s et la gestion.\n* **Gestion de versions:** Nexus g√®re efficacement les diff√©rentes versions des artefacts, permettant de revenir √† des versions pr√©c√©dentes si n√©cessaire.\n* **Proxy de r√©f√©rentiels:** Il peut agir comme un proxy pour des r√©f√©rentiels externes (comme Maven Central), r√©duisant la charge sur les r√©seaux et am√©liorant les performances.\n* **Cr√©ation de r√©f√©rentiels priv√©s:**  Permet de cr√©er des r√©f√©rentiels priv√©s pour h√©berger des artefacts internes, avant leur √©ventuelle publication publique.\n* **Contr√¥le d'acc√®s:**  Offre des m√©canismes de contr√¥le d'acc√®s pour restreindre l'acc√®s aux artefacts en fonction des r√¥les utilisateurs.\n* **Recherche et navigation:**  Fournit une interface utilisateur intuitive pour rechercher et naviguer parmi les artefacts stock√©s.\n* **Int√©gration CI/CD:**  S'int√®gre facilement aux pipelines CI/CD pour automatiser le processus de d√©ploiement.\n\n\n---\n# Nexus OSS : Qu'est ce qui est top ? üëç\n\n* **Open-source et gratuit:**  Nexus OSS est disponible gratuitement et son code source est accessible.\n* **Large support de formats:**  Il g√®re un tr√®s grand nombre de types d'artefacts.\n* **Interface utilisateur conviviale:**  Navigation et recherche faciles.\n* **Fonctionnalit√©s avanc√©es:**  Gestion des versions, proxy, r√©f√©rentiels priv√©s, contr√¥le d'acc√®s.\n* **Communaut√© active:**  Une communaut√© importante fournit un support et contribue au d√©veloppement.\n\n\n---\n# Nexus OSS : Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:** La configuration initiale peut √™tre complexe pour les utilisateurs d√©butants.\n* **Ressources serveur:**  Peut n√©cessiter des ressources serveur importantes pour g√©rer un grand nombre d'artefacts.\n* **Courbe d'apprentissage:**  N√©cessite une certaine familiarisation avec les concepts de gestion d'artefacts.\n* **D√©pendances Java:** N√©cessite une machine virtuelle Java pour fonctionner.\n\n\n---\n# Nexus OSS : A quoi c'est li√© ? ü™¢\n\n(√† compl√©ter)\n"
    },
    {
        "id": "0e88d3df-da53-4647-8099-8872358acab6",
        "title": "NuxtHub",
        "description": "---\nid: afb4d2a0-248c-4f80-9886-88258531a052\n---\n# Rapidement c'est quoi‚ùì\n\nNuxtHub est une plateforme en ligne qui simplifie la gestion et le d√©ploiement d'applications Nuxt.js sur le cloud Cloudflare.  Elle fournit une interface utilisateur intuitive pour g√©rer les projets, automatisant plusieurs t√¢ches complexes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nNuxtHub est un service de plateforme comme service (PaaS) sp√©cifiquement con√ßu pour les applications web construites avec le framework JavaScript Nuxt.js.  Il offre une interface centralis√©e pour g√©rer tout le cycle de vie d'un projet Nuxt, du d√©veloppement au d√©ploiement.  Les fonctionnalit√©s cl√©s incluent :\n\n* **Gestion de projet:**  Cr√©ation, organisation et suivi de multiples projets Nuxt.js depuis une seule interface.\n* **D√©ploiement automatis√©:**  NuxtHub int√®gre directement le cloud Cloudflare, automatisant le processus de d√©ploiement et rendant la mise en production simple et rapide.  Cela inclut la configuration du serveur, la gestion des certificats SSL et la mise √† jour automatique.\n* **Environnements multiples:**  Possibilit√© de g√©rer diff√©rents environnements (d√©veloppement, staging, production) pour chaque projet.\n* **Collaboration:**  Facilite la collaboration entre d√©veloppeurs gr√¢ce √† un syst√®me de contr√¥le d'acc√®s et de gestion des utilisateurs.\n* **Supervision et monitoring:**  Outils de monitoring permettant de surveiller les performances et la stabilit√© des applications d√©ploy√©es.  (La nature pr√©cise de ces outils d√©pend de l'int√©gration avec Cloudflare.)\n* **Int√©gration CI/CD (potentielle):**  Bien que non explicitement mentionn√©, une plateforme comme NuxtHub est susceptible d'offrir ou de s'int√©grer facilement √† des pipelines CI/CD pour automatiser davantage le processus de d√©veloppement et de d√©ploiement.\n\n\nEn r√©sum√©, NuxtHub vise √† simplifier le workflow des d√©veloppeurs Nuxt.js en centralisant et en automatisant les t√¢ches fastidieuses li√©es √† la gestion et au d√©ploiement d'applications.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplification du d√©ploiement:** Le d√©ploiement sur Cloudflare est grandement simplifi√© gr√¢ce √† l'interface utilisateur intuitive.\n* **Centralisation de la gestion:** Gestion multi-projets facilit√©e.\n* **Automatisation des t√¢ches:**  R√©duction du temps et de l'effort n√©cessaires pour le d√©ploiement et la maintenance.\n* **Int√©gration Cloudflare:** B√©n√©ficie de l'infrastructure robuste et performante de Cloudflare.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **D√©pendance √† Cloudflare:**  Le d√©ploiement est limit√© √† Cloudflare.  Les d√©veloppeurs souhaitant utiliser d'autres fournisseurs de cloud pourraient √™tre limit√©s.\n* **Potentielles limitations des fonctionnalit√©s:** L'√©tendue exacte des fonctionnalit√©s de monitoring et d'int√©gration CI/CD n'est pas toujours clairement d√©finie.  Une √©valuation approfondie est n√©cessaire.\n* **Co√ªt:**  Le mod√®le de tarification peut constituer un inconv√©nient pour certains utilisateurs, n√©cessitant une analyse des co√ªts avant utilisation.\n* **Manque de contr√¥le (potentiel):**  Le niveau de contr√¥le sur l'infrastructure sous-jacente pourrait √™tre inf√©rieur √† une configuration manuelle.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "42b53c23-df81-462b-94cb-78777ddbe672",
        "title": "Objet du testing",
        "description": "---\nid: 2f7853dd-9d03-467b-99ae-804dd65e0865\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nLes objets de test (dummy, stub, mock, fake, spy) sont des outils utilis√©s dans le d√©veloppement logiciel pour simuler le comportement de parties d'un syst√®me lors de tests unitaires ou d'int√©gration.  Ils permettent d'isoler le code test√© et de contr√¥ler son environnement, facilitant ainsi la d√©tection de bugs et la validation du comportement attendu.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nVoici une description plus d√©taill√©e des diff√©rents types d'objets de test :\n\n* **Dummy:** Un objet simple servant √† compl√©ter une liste de param√®tres. Il ne poss√®de g√©n√©ralement aucune impl√©mentation concr√®te et sert principalement √† satisfaire les contraintes de signature d'une fonction ou d'une m√©thode sans avoir d'impact r√©el sur le test.\n\n    * **Exemple:** Un constructeur n√©cessitant trois param√®tres, mais dont un seul est pertinent pour le test.  On utilise un `dummy` pour les deux autres.\n\n* **Stub:** Un objet qui remplace une d√©pendance et renvoie des valeurs pr√©d√©finies.  Il simule un comportement sp√©cifique sans ex√©cuter le code r√©el de la d√©pendance.\n\n    * **Exemple:** Une fonction appelant une base de donn√©es.  Un `stub` simule la r√©ponse de la base de donn√©es sans r√©ellement interagir avec elle.  Cela permet de tester la fonction sans d√©pendre de l'√©tat de la base de donn√©es.\n\n* **Mock:** Un objet plus sophistiqu√© qui v√©rifie non seulement les appels √† des m√©thodes mais aussi leurs arguments.  Il permet de s'assurer que les interactions avec les d√©pendances se produisent comme pr√©vu.  Il est g√©n√©ralement utilis√© pour valider les interactions, pas juste les r√©sultats.\n\n    * **Exemple:** V√©rifier si une m√©thode `envoyerEmail` a √©t√© appel√©e avec les bons param√®tres (adresse email, sujet, corps du message).\n\n* **Fake:** Un objet qui fournit une impl√©mentation simplifi√©e d'une d√©pendance.  Il est souvent plus complet qu'un `stub` car il peut avoir une certaine logique interne, mais cette logique est plus simple et plus rapide que l'impl√©mentation r√©elle.\n\n    * **Exemple:** Utiliser une liste en m√©moire comme `fake` pour une base de donn√©es lors d'un test,  ce qui est plus rapide qu'une v√©ritable connexion √† une base de donn√©es.\n\n\n* **Spy:** Un objet qui enregistre les appels √† une fonction ou une m√©thode sans modifier leur comportement.  Il permet d'observer les appels et de v√©rifier qu'ils ont eu lieu avec les param√®tres attendus, sans influencer le comportement de la fonction espionn√©e.  Il sert souvent de compl√©ment √† un `mock` ou un `stub`.\n\n    * **Exemple:** Utiliser un `spy` pour compter le nombre d'appels √† une m√©thode sp√©cifique.\n\n**Exemple (Python avec `unittest.mock`):**\n\n```python\nimport unittest\nfrom unittest.mock import patch, Mock\n\nclass MyClass:\n    def ma_methode(self, param1, param2):\n        return param1 + param2\n\nclass MyTests(unittest.TestCase):\n    @patch('__main__.MyClass.ma_methode')  # Mock de la m√©thode ma_methode\n    def test_ma_methode(self, mock_ma_methode):\n        mock_ma_methode.return_value = 10  # Stub : retourne une valeur fixe\n        obj = MyClass()\n        resultat = obj.ma_methode(5, 5)  # L'appel r√©el ne se produit pas\n        self.assertEqual(resultat, 10)  # V√©rification du r√©sultat stubb√©\n\n        mock_ma_methode.assert_called_once_with(5, 5) # Mock : v√©rification des arguments\n```\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Isolation:** Permet de tester des unit√©s de code de mani√®re ind√©pendante de leurs d√©pendances.\n* **Fiabilit√©:** R√©duit les erreurs li√©es aux d√©pendances externes (bases de donn√©es, r√©seaux, etc.).\n* **Rapidit√©:** Les tests sont plus rapides car ils n'ont pas √† interagir avec des syst√®mes externes lents.\n* **R√©p√©tabilit√©:**  Les tests sont toujours reproductibles car l'environnement de test est contr√¥l√©.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La mise en place de mocks et stubs peut ajouter de la complexit√© aux tests.\n* **Maintenance:**  Les tests utilisant des mocks et stubs peuvent n√©cessiter une maintenance accrue si l'API des d√©pendances √©volue.\n* **Sur-mocking:** Un exc√®s de mocking peut masquer des probl√®mes d'int√©gration.\n* **Difficult√© de debug:** Des tests trop isol√©s peuvent rendre le debugging plus difficile si le probl√®me vient d'une interaction inattendue entre les diff√©rentes parties du syst√®me.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "e938662b-f332-4f3b-b8fd-b3729a7b352f",
        "title": "Optimisation",
        "description": "---\nid: 3ee82aac-362e-40bd-96ee-8c9734e0d8b9\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nL'optimisation consiste √† am√©liorer les performances d'un syst√®me, dans ce cas pr√©cis, d'une base de donn√©es et de la gestion des logs.  Cela vise √† r√©duire les temps de r√©ponse, √† augmenter le d√©bit et √† am√©liorer l'utilisation des ressources.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nCette note d√©crit deux techniques d'optimisation : l'augmentation de la pool de connexions pour la base de donn√©es et la bufferisation des logs.\n\n**1. Augmentation de la pool de connexions de la base de donn√©es:**\n\nUne pool de connexions est un ensemble de connexions pr√©-√©tablies √† la base de donn√©es.  Au lieu d'√©tablir une nouvelle connexion pour chaque requ√™te, l'application utilise les connexions disponibles dans la pool.  Augmenter la taille de cette pool permet de g√©rer un plus grand nombre de requ√™tes concurrentes, r√©duisant ainsi les temps d'attente et am√©liorant les performances.  Cependant, il est crucial de v√©rifier la configuration du param√®tre `max_connections` (ou un param√®tre √©quivalent) au niveau de la base de donn√©es elle-m√™me.  D√©passer cette limite peut mener √† des erreurs et √† une d√©gradation des performances.\n\n**Exemple (concept, pas de code sp√©cifique √† une base de donn√©es):**\n\nImaginons une application web avec 10 utilisateurs concurrents.  Si la pool de connexions est de taille 5, 5 utilisateurs devront attendre qu'une connexion devienne disponible avant de pouvoir interagir avec la base de donn√©es.  En augmentant la taille de la pool √† 20, plus d'utilisateurs pourront acc√©der simultan√©ment √† la base de donn√©es sans attente.\n\n**2. Bufferisation des logs:**\n\nLa journalisation (logging) peut √™tre une op√©ration co√ªteuse en termes de ressources, surtout avec un volume important de logs.  La bufferisation consiste √† accumuler les logs dans une m√©moire tampon (buffer) avant de les √©crire physiquement sur le disque ou de les envoyer √† un syst√®me de logging distant.  Cela permet de rendre l'√©criture des logs plus asynchrone, √©vitant ainsi de bloquer le thread principal de l'application et de surcharger la sortie standard.  Une fois le buffer plein (ou apr√®s un certain d√©lai), son contenu est √©crit en bloc, ce qui est plus efficace que l'√©criture de chaque log individuellement.\n\n**Exemple (concept):**\n\nAu lieu d'√©crire chaque message de log directement sur le disque, on les accumule dans un buffer de taille 1000 messages.  Une fois le buffer plein, on √©crit les 1000 messages en une seule op√©ration.  Cela r√©duit le nombre d'op√©rations d'√©criture sur le disque, ce qui am√©liore les performances.  Divers frameworks de logging offrent des m√©canismes de bufferisation.\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Augmentation de la pool de connexions:**  Am√©lioration significative des performances pour les applications avec un fort trafic concurrent.\n* **Bufferisation des logs:**  R√©duction de la charge sur le syst√®me et am√©lioration de la r√©activit√© de l'application, en particulier sous forte charge de logging.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Augmentation de la pool de connexions:**  Risque de saturation de la base de donn√©es si la taille de la pool d√©passe la limite `max_connections` d√©finie par le serveur de base de donn√©es.  Cela peut entra√Æner des erreurs et une d√©gradation des performances. N√©cessite une bonne compr√©hension des limites de la base de donn√©es.\n* **Bufferisation des logs:**  Peut introduire une latence dans la journalisation, ce qui peut compliquer le d√©bogage en temps r√©el si un probl√®me survient.  La gestion de la taille du buffer et de la fr√©quence d'√©criture est critique pour trouver le bon √©quilibre entre performance et temps de r√©ponse.  En cas de crash de l'application avant l'√©criture du buffer, les logs seront perdus.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "dda6a9ab-f010-41f6-9158-b779fa0e1bd6",
        "title": "Plugin Oauth2 Proxy Nexus",
        "description": "---\nid: 2fa8fce2-e236-4f36-b969-556a3f001603\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nLe plugin OAuth2Proxy pour Nexus est une extension qui ajoute une couche d'authentification bas√©e sur OAuth 2.0.  Il permet aux utilisateurs de se connecter √† Nexus via un fournisseur d'identit√© (IdP) comme Keycloak, Okta, etc., au lieu d'utiliser les m√©canismes d'authentification int√©gr√©s de Nexus.  Une fois authentifi√©, l'utilisateur re√ßoit un token permettant l'acc√®s aux ressources de Nexus (comme les d√©p√¥ts Maven) sans avoir besoin de fournir de nouveau ses identifiants.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nCe plugin agit comme un proxy inverse devant Nexus.  Au lieu d'acc√©der directement √† Nexus, les requ√™tes passent d'abord par OAuth2Proxy.  OAuth2Proxy intercepte la requ√™te, redirige l'utilisateur vers son IdP pour l'authentification. Une fois l'authentification r√©ussie aupr√®s de l'IdP, OAuth2Proxy v√©rifie le token re√ßu et, s'il est valide, redirige la requ√™te vers Nexus en ajoutant des informations d'authentification au header de la requ√™te (souvent un `Authorization: Bearer <token>`).  Cela permet √† Nexus d'identifier l'utilisateur sans avoir besoin d'une authentification directe.  L'utilisateur peut ainsi acc√©der aux ressources de Nexus uniquement si le token OAuth 2.0 est valide.\n\nLe plugin se configure g√©n√©ralement en d√©finissant l'URL de l'IdP, les identifiants de l'application enregistr√©e dans l'IdP, et les scopes n√©cessaires.  La configuration peut inclure des options avanc√©es comme la gestion des r√¥les et des autorisations.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **S√©curit√© am√©lior√©e:** D√©l√©gue l'authentification √† un syst√®me d'identit√© centralis√© et plus robuste, r√©duisant le risque d'attaques directes sur Nexus.\n* **Centralisation de l'authentification:** Gestion unique des utilisateurs et des mots de passe via l'IdP.\n* **Int√©gration avec diff√©rents IdP:** Compatible avec de nombreux fournisseurs d'identit√© populaires (Keycloak, Okta, Google, etc.).\n* **Acc√®s headless:** Permet aux outils automatis√©s (ex: scripts Maven, CI/CD) d'acc√©der √† Nexus en utilisant le token OAuth 2.0, sans intervention manuelle.\n* **Am√©lioration de l'exp√©rience utilisateur:**  Authentification unique (SSO) possible si l'IdP est d√©j√† utilis√© pour d'autres applications.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:** La configuration initiale peut √™tre complexe, n√©cessitant une bonne compr√©hension d'OAuth 2.0 et de la configuration de l'IdP.\n* **D√©pendance √† un IdP:**  N√©cessite un IdP fonctionnel et correctement configur√©.\n* **Surco√ªt de performance:** L'ajout d'un proxy interm√©diaire peut introduire une l√©g√®re latence.  Cependant, cela est g√©n√©ralement n√©gligeable.\n* **D√©bogage:** Le d√©bogage des probl√®mes d'authentification peut √™tre difficile, n√©cessitant une analyse des logs de l'IdP et d'OAuth2Proxy.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "d3ab7db6-fa95-43cb-acc9-4f7113eadee8",
        "title": "PouchDB",
        "description": "---\nid: 11870a2a-4362-4192-bc6e-f4b4c92ff908\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nPouchDB est une base de donn√©es NoSQL JavaScript open-source qui fonctionne comme une base de donn√©es client-side, imitant l'API de CouchDB.  Elle permet de stocker des donn√©es localement dans le navigateur ou un environnement Node.js, offrant des fonctionnalit√©s de synchronisation avec une base de donn√©es distante (comme CouchDB ou Cloudant).\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nPouchDB est une base de donn√©es JavaScript orient√©e document, ce qui signifie qu'elle stocke les donn√©es sous forme de documents JSON.  Elle impl√©mente une API similaire √† celle de CouchDB, facilitant la migration entre les deux.  Le principal avantage est la capacit√© de fonctionner hors connexion.  Les donn√©es sont stock√©es localement, et une fois la connexion r√©tablie, PouchDB se synchronise avec la base de donn√©es distante en utilisant des m√©canismes de r√©plication bidirectionnelle.  Cela permet aux applications web et mobiles de fonctionner m√™me sans acc√®s √† internet, les modifications √©tant sauvegard√©es localement et synchronis√©es ult√©rieurement.\n\nPouchDB utilise un syst√®me de versionnement des documents pour g√©rer les conflits lors de la synchronisation.  Si des modifications sont effectu√©es √† la fois localement et √† distance sur le m√™me document, PouchDB utilise un algorithme pour r√©soudre les conflits et fusionner les changements.  L'utilisateur peut personnaliser la gestion des conflits.\n\n**Exemple d'utilisation (ajout d'un document):**\n\n```javascript\nconst db = new PouchDB('mydb');\n\ndb.put({\n  _id: 'mydoc',\n  name: 'Example Document'\n}).then(() => {\n  console.log('Document added successfully!');\n}).catch((err) => {\n  console.log('Error adding document:', err);\n});\n```\n\n**Exemple de synchronisation avec une base de donn√©es distante (CouchDB):**\n\n```javascript\nconst remoteCouchDB = 'http://example.com:5984/mydb';\nconst db = new PouchDB('mydb');\n\ndb.sync(remoteCouchDB, {\n  live: true,\n  retry: true\n}).on('change', (info) => {\n    console.log(\"Changes detected, replicating...\");\n}).on('paused', (err) => {\n    console.log('Replication paused.');\n}).on('error', (err) => {\n    console.error('Replication failed.', err);\n});\n\n```\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Fonctionnement hors ligne:**  La principale force de PouchDB est sa capacit√© √† fonctionner sans connexion internet.\n* **Synchronisation facile:**  La r√©plication avec une base de donn√©es distante est simple √† mettre en ≈ìuvre.\n* **API intuitive:** L'API est similaire √† celle de CouchDB, facile √† apprendre et √† utiliser.\n* **Open source et communaut√© active:**  B√©n√©ficie d'une communaut√© active et d'une documentation compl√®te.\n* **L√©ger et performant:**  PouchDB est relativement l√©ger et performant, m√™me sur des appareils mobiles.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Gestion des conflits:** Bien que PouchDB g√®re les conflits,  la r√©solution automatique peut parfois √™tre complexe et n√©cessiter une intervention manuelle.\n* **Limites de taille des donn√©es:**  Pour des applications √† tr√®s grande √©chelle avec des volumes importants de donn√©es, PouchDB peut avoir ses limites.  Il est plus adapt√© aux applications n√©cessitant une persistance locale et une synchronisation r√©guli√®re.\n* **D√©pendance √† JavaScript:**  Son utilisation est intrins√®quement li√©e √† JavaScript et ne peut pas √™tre utilis√©e directement dans d'autres langages.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "a7f557fc-7458-4115-81c0-b3b481a4b64b",
        "title": "R2DBC",
        "description": "---\nid: bfc84f55-fe42-4506-951b-7f9edd1ac060\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nR2DBC (Reactive Relational Database Connectivity) est une sp√©cification pour acc√©der de mani√®re r√©active aux bases de donn√©es relationnelles depuis Java.  Il fournit une API asynchrone et non-bloquante, contrastant avec l'approche synchrone et bloquante de JDBC.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nR2DBC d√©finit une API pour interagir avec les bases de donn√©es relationnelles en utilisant un mod√®le r√©actif.  Au lieu de bloquer le thread d'ex√©cution en attendant la r√©ponse de la base de donn√©es, R2DBC utilise des m√©canismes asynchrones, permettant au thread de continuer √† traiter d'autres t√¢ches pendant que la requ√™te est ex√©cut√©e. Cela am√©liore l'efficacit√© et les performances, surtout dans les applications √† haute concurrence.\n\nContrairement √† JDBC, qui utilise des objets `Statement`, `ResultSet`, etc., R2DBC utilise un mod√®le bas√© sur `Flux` (de la librairie Reactor) pour les requ√™tes et les r√©sultats.  Cela permet de traiter les donn√©es de mani√®re asynchrone et r√©active, en utilisant des op√©rateurs comme `map`, `filter`, `flatMap`, etc.  L'API R2DBC est plus d√©clarative que JDBC, laissant la gestion de la concurrence et de l'asynchronisme au framework.\n\nVoici un exemple simplifi√© d'utilisation de R2DBC avec Spring Data R2DBC (Note:  Ce code est simplifi√© pour illustrer le concept.  Une impl√©mentation r√©elle n√©cessiterait plus de d√©tails):\n\n```kotlin\n@Repository\ninterface UserRepository : ReactiveCrudRepository<User, Long> {\n    // M√©thodes CRUD g√©n√©r√©es automatiquement\n}\n\n//Entit√© User\ndata class User(val id: Long?, val name: String)\n\n//Dans un service\n@Service\nclass UserService(private val userRepository: UserRepository){\n    fun getAllUsers(): Flux<User> = userRepository.findAll()\n}\n```\n\nCet exemple montre comment Spring Data R2DBC simplifie l'interaction avec la base de donn√©es en fournissant une impl√©mentation de `ReactiveCrudRepository`. Les op√©rations CRUD sont effectu√©es de mani√®re r√©active et asynchrone gr√¢ce √† l'utilisation de `Flux`.  Notez qu'il est n√©cessaire de g√©rer soi-m√™me les jointures avec R2DBC, contrairement √† certains ORM qui les g√®rent automatiquement.\n\n# Qu'est-ce qui est top ? üëç\n\n* **Performances:** L'approche asynchrone et non-bloquante am√©liore consid√©rablement les performances, surtout pour les applications √† forte charge.\n* **Scalabilit√©:**  R2DBC est mieux adapt√© √† la gestion de la concurrence et permet une meilleure scalabilit√© que JDBC.\n* **Int√©gration avec Spring:** L'int√©gration avec Spring Data R2DBC simplifie l'utilisation de R2DBC et permet de b√©n√©ficier des fonctionnalit√©s de Spring.\n* **R√©activit√©:** L'utilisation de `Flux` permet un traitement r√©actif des donn√©es.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La programmation r√©active peut √™tre plus complexe que la programmation synchrone traditionnelle.  Comprendre les concepts de `Flux`, `Mono`, et les op√©rateurs r√©actifs est crucial.\n* **Maturation:**  Bien que mature, R2DBC est une technologie plus r√©cente que JDBC, et certaines bases de donn√©es et outils peuvent avoir un support moins complet que pour JDBC.\n* **Gestion des jointures:**  R2DBC ne g√®re pas les jointures automatiquement, demandant une gestion explicite dans le code, ce qui peut complexifier les requ√™tes plus sophistiqu√©es.\n* **Debugging:** Le d√©bogage de code r√©actif peut √™tre plus difficile que le d√©bogage de code synchrone.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\nJDBC, Spring Data R2DBC, Project Reactor, bases de donn√©es relationnelles, programmation r√©active.\n"
    },
    {
        "id": "e0f385b0-ed98-4b3c-a1bf-b859880071c0",
        "title": "RGAA",
        "description": "---\nid: dd5ba0ba-bc56-46d7-8c93-631e4758609a\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nLe RGAA (R√©f√©rentiel G√©n√©ral d'Accessibilit√© pour les Administrations) est un r√©f√©rentiel fran√ßais qui d√©finit les crit√®res d'accessibilit√© num√©rique pour les sites web et applications des administrations publiques. Il s'appuie sur les WCAG (Web Content Accessibility Guidelines) internationales, mais les adapte au contexte fran√ßais et fournit des crit√®res plus pr√©cis et concrets.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLe RGAA vise √† garantir que les services num√©riques publics soient accessibles √† tous, y compris les personnes handicap√©es.  Il d√©finit des crit√®res d'accessibilit√© regroup√©s en quatre principes :\n\n* **Percevable:** L'information et les composants de l'interface utilisateur doivent √™tre pr√©sent√©s aux utilisateurs de mani√®re qu'ils puissent les percevoir.  Cela inclut des aspects comme le contraste des couleurs, les alternatives textuelles aux images, la transcription des contenus audio et vid√©o, etc.\n* **Op√©rable:** L'interface utilisateur doit √™tre op√©rable.  Cela signifie que les utilisateurs doivent pouvoir utiliser l'interface avec une vari√©t√© de dispositifs d'entr√©e, comme une souris, un clavier, un √©cran tactile, etc.  Cela comprend aussi des aspects comme la navigation au clavier, l'√©vitement des pi√®ges √† souris, etc.\n* **Compr√©hensible:** L'information et le fonctionnement de l'interface utilisateur doivent √™tre compr√©hensibles.  Cela implique une r√©daction claire et concise, une navigation intuitive, l'utilisation d'un langage simple, etc.\n* **Robuste:** Le contenu doit √™tre robuste, c'est-√†-dire compatible avec un large √©ventail de technologies d'assistance et d'appareils.\n\nChaque principe est ensuite d√©clin√© en crit√®res plus sp√©cifiques, avec des niveaux de conformit√© (A, AA, AAA).  La version actuelle du RGAA est la version 4.0.  L'√©valuation de la conformit√© au RGAA se fait g√©n√©ralement via des audits, manuels ou automatis√©s, qui permettent d'identifier les points d'am√©lioration pour rendre un site web ou une application plus accessible.\n\n**Exemple concret:** Un crit√®re du RGAA pourrait √™tre \"Le texte doit avoir un contraste suffisant avec l'arri√®re-plan\".  Cela signifie que la diff√©rence de luminosit√© entre le texte et l'arri√®re-plan doit √™tre suffisamment importante pour √™tre per√ßue par les personnes malvoyantes.\n\n# Qu'est-ce qui est top ? üëç\n\n* **Cadre clair et pr√©cis:**  Le RGAA fournit des crit√®res concrets et mesurables pour l'accessibilit√©, ce qui facilite l'√©valuation et l'am√©lioration de l'accessibilit√© des sites web et applications.\n* **Adaptation au contexte fran√ßais:**  Il adapte les WCAG au contexte fran√ßais, ce qui le rend plus pertinent pour les administrations publiques fran√ßaises.\n* **Am√©lioration de l'inclusion:**  Il contribue √† am√©liorer l'inclusion num√©rique et permet √† un plus grand nombre de personnes d'acc√©der aux services en ligne.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:**  Le RGAA est un r√©f√©rentiel complexe avec de nombreux crit√®res et niveaux de conformit√©, ce qui peut rendre sa mise en ≈ìuvre difficile.\n* **Co√ªt:**  L'audit et la mise en conformit√© avec le RGAA peuvent engendrer des co√ªts importants, notamment pour les sites web complexes.\n* **√âvolution constante:**  Les technologies et les besoins des personnes handicap√©es √©voluent, ce qui n√©cessite une mise √† jour r√©guli√®re du RGAA.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n\n(Laisser vide)\n"
    },
    {
        "id": "d460347c-b86a-4170-ad92-1f2f8cf350ab",
        "title": "Resource et RxResource (Angular)",
        "description": "---\nid: 5114a4ec-5c32-4fb5-bfd6-2d475c4cbb42\n---\n# Rapidement c'est quoi‚ùì\n\n`Resource` et `RxResource` (Angular) sont des m√©canismes facilitant la gestion des appels API dans les applications Angular. Ils encapsulent la logique de requ√™te HTTP et fournissent une interface r√©active pour suivre l'√©tat de la requ√™te (chargement, succ√®s, erreur).  `RxResource` utilise RxJS pour une gestion asynchrone plus avanc√©e.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n`Resource` et `RxResource` sont des abstractions con√ßues pour simplifier l'interaction avec des API RESTful dans Angular.  Ils permettent d'√©viter la r√©p√©tition de code pour les appels HTTP courants (GET, POST, PUT, DELETE).  Au lieu d'√©crire manuellement des appels `HttpClient`, vous utilisez une instance `Resource` ou `RxResource` configur√©e avec l'URL de votre API et les m√©thodes HTTP appropri√©es.\n\n**`Resource`:**  Cette approche plus basique utilise les promesses JavaScript pour g√©rer les r√©ponses asynchrones.  Elle fournit des propri√©t√©s pour suivre l'√©tat de la requ√™te (par exemple, `isLoading`, `data`, `error`).  L'acc√®s aux donn√©es se fait via ces propri√©t√©s une fois la promesse r√©solue.\n\n**`RxResource`:**  Cette version plus sophistiqu√©e exploite les observables RxJS.  Elle offre une interface plus r√©active et plus puissante, permettant de g√©rer facilement les flux de donn√©es et les erreurs.  L'√©tat de la requ√™te (chargement, succ√®s, erreur) est √©mis sous forme d'√©v√©nements observables, permettant des mises √† jour dynamiques de l'interface utilisateur et une gestion fine des erreurs.  Ceci est particuli√®rement utile pour les requ√™tes longues ou multiples.\n\nPour les deux, la configuration se fait g√©n√©ralement via la d√©finition d'une classe qui sp√©cifie l'URL de base et les actions (GET, POST, etc.).  Ces actions sont ensuite appel√©es pour d√©clencher les requ√™tes HTTP.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **R√©duction de la Boilerplate:**  R√©duction significative du code n√©cessaire pour g√©rer les appels API.\n* **Gestion centralis√©e des erreurs:**  Facilite la gestion des erreurs r√©seau et des erreurs c√¥t√© serveur.\n* **Am√©lioration de la lisibilit√© du code:**  S√©pare la logique de gestion des requ√™tes HTTP du reste du code applicatif.\n* **`RxResource` et la r√©activit√©:**  Avec `RxResource`, une int√©gration naturelle avec la programmation r√©active d'Angular et RxJS, pour une meilleure gestion des flux de donn√©es asynchrones.\n* **Testabilit√© am√©lior√©e:**  Les classes `Resource` ou `RxResource` sont plus faciles √† tester que des appels `HttpClient` directement int√©gr√©s dans les composants.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension des promesses (pour `Resource`) ou des observables RxJS (pour `RxResource`).\n* **Complexit√© potentielle:**  Pour les applications simples, l'utilisation de `Resource` ou `RxResource` peut ajouter une complexit√© inutile.\n* **D√©pendance:**  Ajoute une d√©pendance suppl√©mentaire au projet.\n* **Maintenance:**  N√©cessite une maintenance √† long terme si l'API √©volue.  Il faut adapter les d√©finitions des `Resource` ou `RxResource`.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "7a750faf-40c3-463b-8bab-e6e1e0be4af2",
        "title": "Rio",
        "description": "---\nid: bd8cfc04-d694-45ba-b346-084595d3ab27\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nRio est une librairie Python permettant de cr√©er des interfaces web directement en Python, sans n√©cessiter de connaissances approfondies en HTML, CSS ou JavaScript.  Elle facilite la cr√©ation d'interfaces utilisateur pour des applications et scripts Python.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nRio utilise un mod√®le d√©claratif pour construire des interfaces utilisateur.  Au lieu d'√©crire du HTML et du CSS, vous d√©crivez la structure et le style de votre page web √† l'aide de fonctions Python. Rio g√®re ensuite la conversion en HTML, CSS et JavaScript n√©cessaires pour afficher la page dans un navigateur.  Cela permet de cr√©er des applications web interactives en exploitant les capacit√©s de Python, notamment pour le traitement de donn√©es et la logique m√©tier.\n\nRio s'appuie sur des composants modulaires et r√©utilisables pour construire des interfaces complexes.  Il permet de g√©rer des √©v√©nements utilisateur (clics, soumissions de formulaires, etc.) directement depuis le code Python.  L'interaction avec le serveur (si n√©cessaire) se fait √©galement via du code Python.\n\n**Exemple (simplifi√©):**\n\n```python\nimport rio\n\napp = rio.App()\n\n@app.route(\"/\")\ndef index():\n  return rio.html.div(\"Hello, world!\")\n\napp.run()\n```\n\nCe code simple cr√©e une page web affichant \"Hello, world!\".  La fonction `index` est d√©cor√©e avec `@app.route(\"/\")` pour indiquer qu'elle g√®re la requ√™te √† la racine du site.  `rio.html.div` cr√©e un √©l√©ment HTML `<div>`.\n\nDes exemples plus complexes pourraient inclure des formulaires, des tableaux, des graphiques, et une interaction plus sophistiqu√©e avec le serveur.\n\n## Qu'est-ce qui est top ? üëç\n\n* **D√©veloppement rapide:**  La programmation en Python permet un d√©veloppement plus rapide et plus efficace que le d√©veloppement web traditionnel avec HTML, CSS et JavaScript.\n* **Int√©gration facile avec les scripts Python:** Rio s'int√®gre facilement aux applications et scripts Python existants.\n* **Mod√®le d√©claratif:** La d√©claration de l'interface utilisateur rend le code plus lisible et plus facile √† maintenir.\n* **Abstraction:** Rio masque la complexit√© sous-jacente du d√©veloppement web, permettant aux d√©veloppeurs Python de se concentrer sur la logique m√©tier.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Communaut√© limit√©e:**  Compar√© √† des frameworks web populaires comme Flask ou Django, Rio a une communaut√© plus petite, ce qui peut impacter le support et la disponibilit√© des ressources.\n* **Performance potentielle:**  L'interpr√©tation Python pourrait engendrer une performance l√©g√®rement inf√©rieure √† celle d'applications web construites avec des technologies compil√©es.  Cependant, pour beaucoup d'applications, cette diff√©rence sera n√©gligeable.\n* **Flexibilit√© limit√©e (potentielle):**  Bien que Rio permette une grande partie des fonctionnalit√©s web, il pourrait manquer certaines fonctionnalit√©s tr√®s sp√©cifiques ou n√©cessiter des solutions de contournement pour des cas d'utilisation avanc√©s.\n* **D√©pendances:** Rio ajoute une d√©pendance suppl√©mentaire √† votre projet.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "7663b49c-a5f3-421b-84ef-262d66c0c6ad",
        "title": "R√©flexion (Java)",
        "description": "---\nid: 16be4a3f-fb5e-4258-b88a-d8f3bd3f5389\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nLa r√©flexion en Java est une fonctionnalit√© puissante qui permet √† un programme de manipuler ses propres structures et comportements √† l'ex√©cution.  Elle permet d'inspecter et de modifier les classes, les m√©thodes, les champs, etc., dynamiquement.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLa r√©flexion en Java s'appuie sur les classes du package `java.lang.reflect`.  Ces classes fournissent des interfaces pour interagir avec les m√©tadonn√©es des classes et des objets √† l'ex√©cution.  On peut, par exemple :\n\n* **Obtenir des informations sur une classe:**  Nom de la classe, ses interfaces impl√©ment√©es, ses constructeurs, ses m√©thodes, ses champs (variables d'instance et statiques).  Cela se fait via la classe `Class`.\n* **Cr√©er des instances de classes dynamiquement:**  Invoquer un constructeur d'une classe dont le nom n'est connu qu'√† l'ex√©cution.\n* **Invoquer des m√©thodes dynamiquement:**  Appeler une m√©thode d'un objet, m√™me si le nom de la m√©thode n'est pas connu √† la compilation.\n* **Acc√©der aux champs dynamiquement:**  Lire ou modifier la valeur d'un champ d'un objet.\n* **Cr√©er des proxies:**  G√©n√©rer dynamiquement des classes qui impl√©mentent des interfaces donn√©es, interceptant les appels de m√©thodes pour ajouter du comportement (AOP).\n\n**Exemple:**\n\n```java\nClass<?> myClass = Class.forName(\"com.example.MyClass\"); // R√©cup√®re la classe MyClass dynamiquement\nMethod myMethod = myClass.getMethod(\"myMethod\", String.class); // R√©cup√®re la m√©thode myMethod\nObject myObject = myClass.getDeclaredConstructor().newInstance(); // Cr√©e une instance de MyClass\nObject result = myMethod.invoke(myObject, \"Hello\"); // Appelle la m√©thode myMethod avec l'argument \"Hello\"\nSystem.out.println(result); // Affiche le r√©sultat de l'appel de m√©thode\n```\n\nCet exemple montre comment r√©cup√©rer une classe, une m√©thode, cr√©er une instance et invoquer la m√©thode dynamiquement.  `Class.forName()` est une m√©thode cl√© pour r√©cup√©rer une r√©f√©rence de classe √† partir d'un nom de classe (String).\n\n## Qu'est-ce qui est top ? üëç\n\n* **Flexibilit√©:** Permet de cr√©er des applications tr√®s dynamiques et configurables, adaptant leur comportement √† l'ex√©cution.\n* **Extension du code:**  Facilite la cr√©ation d'outils de d√©veloppement tels que les frameworks de test, les outils de monitoring ou les debuggers.\n* **Interop√©rabilit√©:**  Permet d'interagir avec des librairies ou des composants dont la structure n'est pas connue √† la compilation.\n* **Frameworks puissants:**  Fondamentale pour des frameworks comme Spring qui utilisent la r√©flexion pour l'injection de d√©pendances et l'AOP.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Performances:**  L'utilisation intensive de la r√©flexion peut impacter les performances, car elle n√©cessite une recherche et une manipulation dynamiques des m√©tadonn√©es.\n* **S√©curit√©:**  Une mauvaise utilisation de la r√©flexion peut exposer √† des failles de s√©curit√©, notamment en permettant l'acc√®s ou la modification non autoris√©e de donn√©es.\n* **Complexit√©:**  Le code utilisant la r√©flexion peut √™tre plus complexe √† lire, √† maintenir et √† d√©boguer que le code traditionnel.\n* **Erreurs √† l'ex√©cution:**  Les erreurs li√©es √† la r√©flexion surviennent souvent √† l'ex√©cution plut√¥t qu'√† la compilation, rendant le debugging plus difficile.\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "a4d130be-3eb5-4ee3-8991-f9ca30af1689",
        "title": "Serialisation-Deserialisation",
        "description": "---\nid: ea084ff5-b622-4420-b2ee-d8a3d6cb1ea5\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nLa s√©rialisation et la d√©s√©rialisation sont des processus qui permettent de convertir un objet en une repr√©sentation lin√©aire (g√©n√©ralement un flux de donn√©es comme un fichier, une cha√Æne de caract√®res ou un flux r√©seau) et inversement. La s√©rialisation transforme l'objet en cette repr√©sentation, tandis que la d√©s√©rialisation reconstitue l'objet √† partir de cette repr√©sentation.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nLa s√©rialisation permet de stocker des objets complexes dans un format persistant ou de les transmettre sur un r√©seau.  Elle implique de convertir l'√©tat d'un objet, incluant ses attributs et √©ventuellement ses relations avec d'autres objets, en une s√©quence de bits.  La d√©s√©rialisation est le processus inverse : √† partir de cette s√©quence de bits, elle reconstitue l'objet dans sa forme originale, avec ses attributs et ses relations.\n\nPlusieurs formats et techniques existent pour la s√©rialisation/d√©s√©rialisation :\n\n* **Formats de donn√©es:** JSON, XML, Protocol Buffers, Avro, etc.  Chaque format a ses avantages et inconv√©nients en termes de lisibilit√©, taille des donn√©es, performance et compatibilit√©.\n* **Techniques de s√©rialisation:**  La s√©rialisation peut √™tre impl√©ment√©e de diff√©rentes mani√®res, notamment via la r√©flexion (Java utilise souvent cette m√©thode avec des biblioth√®ques comme Jackson ou Gson), ou via des techniques de g√©n√©ration de code AOT (Ahead-Of-Time) plus performantes.  La r√©flexion implique d'analyser la structure des classes au runtime, ce qui peut √™tre co√ªteux en termes de performance.  Les approches AOT g√©n√®rent du code sp√©cifique pour chaque classe, optimisant ainsi le processus de s√©rialisation/d√©s√©rialisation.\n\n**Exemple (Java avec Jackson):**\n\n```java\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class User {\n    public String name;\n    public int age;\n\n    public User(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public static void main(String[] args) throws Exception {\n        ObjectMapper mapper = new ObjectMapper();\n        User user = new User(\"John Doe\", 30);\n\n        // S√©rialisation en JSON\n        String jsonString = mapper.writeValueAsString(user);\n        System.out.println(\"JSON: \" + jsonString);\n\n        // D√©s√©rialisation √† partir de JSON\n        User user2 = mapper.readValue(jsonString, User.class);\n        System.out.println(\"Name: \" + user2.name + \", Age: \" + user2.age);\n    }\n}\n```\n\nCet exemple montre comment Jackson s√©rialise un objet `User` en JSON et le d√©s√©rialise ensuite.\n\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Persistance des donn√©es:**  Possibilit√© de sauvegarder l'√©tat d'objets dans un stockage persistant (fichiers, bases de donn√©es).\n* **Communication r√©seau:**  Transmission d'objets complexes sur un r√©seau.\n* **Interop√©rabilit√©:**  Utilisation de formats standardis√©s comme JSON ou XML pour l'√©change de donn√©es entre diff√©rents syst√®mes et langages de programmation.\n* **Approches AOT (pour certaines technologies):**  Performance significativement am√©lior√©e par rapport √† la r√©flexion.\n\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© de l'impl√©mentation:**  La conception d'un syst√®me de s√©rialisation/d√©s√©rialisation robuste et efficace peut √™tre complexe.\n* **S√©curit√©:**  Une s√©rialisation mal con√ßue peut pr√©senter des failles de s√©curit√© (par exemple, des attaques de d√©s√©rialisation).\n* **Performances (r√©flexion):**  L'utilisation de la r√©flexion peut √™tre co√ªteuse en termes de performance, surtout pour des objets complexes ou de grands volumes de donn√©es.\n* **Gestion des versions:**  La compatibilit√© entre diff√©rentes versions des sch√©mas de donn√©es peut √™tre un d√©fi.\n\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "53302f5c-252d-4a66-9511-c7a0262ad123",
        "title": "Spring Batch",
        "description": "---\nid: 2c0ef40f-9587-45c4-bef7-b2db691c9065\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nSpring Batch est un framework l√©ger, puissant et complet de traitement par lots pour Java. Il permet de d√©velopper des applications robustes et performantes pour traiter de grands volumes de donn√©es de mani√®re fiable et efficace. Il s'appuie sur des concepts de base comme la lecture, le traitement et l'√©criture de donn√©es par lots, en utilisant une approche de type pipeline.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring Batch automatise le traitement de grands volumes de donn√©es de fa√ßon fiable et efficace.  Il est con√ßu pour des applications qui requi√®rent des op√©rations r√©p√©titives et volumineuses sur les donn√©es, comme le chargement de donn√©es, la transformation de donn√©es, ou la g√©n√©ration de rapports.  Le framework structurait le processus en **Jobs**, qui sont des t√¢ches globales, divis√©s en **Steps**.  Chaque Step consiste en trois phases principales :\n\n* **Read (Lecture):**  Lit les donn√©es depuis une source (base de donn√©es, fichier plat, etc.).  Plusieurs `ItemReader` impl√©mentent des sources vari√©es, telles que `JdbcCursorItemReader` (pour les requ√™tes SQL), `FlatFileItemReader` (pour les fichiers plats), `RepositoryItemReader` (pour les repositories Spring Data).\n\n* **Process (Traitement):** Transforme les donn√©es lues. Un `ItemProcessor` effectue cette transformation.  On peut utiliser des mappers comme MapStruct pour simplifier cette √©tape.\n\n* **Write (Ecriture):** Enregistre les donn√©es trait√©es dans une destination (base de donn√©es, fichier, etc.).  Divers `ItemWriter` sont disponibles, dont `JdbcBatchItemWriter`, `FlatFileItemWriter`, et `RepositoryItemWriter` (pour les repositories Spring Data).\n\nChaque phase utilise des interfaces pour une grande flexibilit√©.  Spring Batch g√®re √©galement la gestion des erreurs, le commit/rollback des transactions, le restarting des jobs en cas d'erreur, et la surveillance de l'ex√©cution. La gestion du chunk (traitement de donn√©es par blocs) optimise les performances.\n\n**Exemple simplifi√© (sans code complet):**  Imaginons un job qui importe des donn√©es d'un fichier CSV dans une base de donn√©es.\n\n1. **Job:** \"ImporterDonn√©esCSV\"\n2. **Step:** \"ImporterDonn√©es\"\n    * **Read:** `FlatFileItemReader` lit les lignes du fichier CSV.\n    * **Process:** `ItemProcessor` transforme chaque ligne en objet Java.\n    * **Write:** `JdbcBatchItemWriter` ins√®re les objets Java dans la base de donn√©es.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Fiabilit√©:** Gestion robuste des erreurs et reprise sur erreur.\n* **Performance:** Traitement par lots optimis√©, gestion des transactions et du chunking.\n* **Flexibilit√©:** Large gamme de lecteurs, processeurs et √©crivains pour diff√©rentes sources et destinations de donn√©es.\n* **Int√©gration Spring:** S'int√®gre parfaitement avec d'autres composants Spring.\n* **D√©bogage et surveillance:** Facilite le suivi et le d√©bogage des jobs.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** Peut √™tre complexe √† mettre en ≈ìuvre pour des t√¢ches simples. La courbe d'apprentissage est assez raide.\n* **Configuration XML (ancienne version):** Bien que la configuration bas√©e sur annotations soit privil√©gi√©e, la configuration XML peut √™tre complexe √† comprendre.\n* **D√©pendances:** N√©cessite plusieurs d√©pendances Spring.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "67a33c81-2bce-4911-ae4d-3080d557425e",
        "title": "Spring Cloud Open Feign",
        "description": "---\nid: a64c1da0-4ff7-4acc-b305-83aeff5d5079\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nSpring Cloud Open Feign est une librairie Java qui simplifie la cr√©ation de clients HTTP pour consommer des API REST.  Elle s'int√®gre parfaitement √† l'√©cosyst√®me Spring Cloud et permet de d√©clarer des interfaces Java qui sont automatiquement traduites en clients HTTP, √©liminant la n√©cessit√© d'√©crire du code boilerplate pour les appels REST.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring Cloud Open Feign repose sur la librairie Feign, mais l'enrichit avec des fonctionnalit√©s sp√©cifiques √† Spring Cloud, notamment l'int√©gration avec Ribbon pour le load balancing et Hystrix pour la gestion des erreurs et la tol√©rance aux pannes.  Au lieu d'√©crire du code pour chaque appel REST (par exemple, avec RestTemplate), on d√©finit une interface Java annot√©e avec des annotations Feign (comme `@GetMapping`, `@PostMapping`, etc.).  Feign se charge ensuite de cr√©er un proxy qui impl√©mente cette interface et g√®re les appels HTTP sous-jacents.\n\n**Exemple:**\n\nImaginons une API REST qui fournit des informations sur les utilisateurs.  On pourrait d√©finir une interface Feign comme suit :\n\n```java\n@FeignClient(name = \"user-service\")\npublic interface UserService {\n\n    @GetMapping(\"/users/{id}\")\n    User getUser(@PathVariable(\"id\") Long id);\n\n    @PostMapping(\"/users\")\n    User createUser(@RequestBody User user);\n}\n```\n\n`@FeignClient(\"user-service\")` indique que cette interface est un client pour un service nomm√© \"user-service\".  Feign se charge ensuite de trouver ce service (g√©n√©ralement via un registre de services comme Eureka) et de cr√©er un proxy qui impl√©mente `UserService`.  On peut ensuite injecter ce proxy dans d'autres classes et l'utiliser comme n'importe quelle autre classe Java :\n\n```java\n@Autowired\nprivate UserService userService;\n\n// ...\n\nUser user = userService.getUser(1L);\n```\n\nSpring Cloud Open Feign g√®re automatiquement les d√©tails de l'appel HTTP, y compris la construction de l'URL, la gestion des en-t√™tes HTTP, la s√©rialisation/d√©s√©rialisation des donn√©es JSON, et le load balancing si plusieurs instances du \"user-service\" sont disponibles.\n\n# Qu'est-ce qui est top ? üëç\n\n* **Simplicit√© et lisibilit√©:**  Le code est beaucoup plus propre et facile √† lire que lorsqu'on utilise `RestTemplate` directement.\n* **D√©claratif:** On d√©finit les appels REST de mani√®re d√©clarative, ce qui rend le code plus maintenable et moins sujet aux erreurs.\n* **Int√©gration Spring Cloud:** S'int√®gre parfaitement avec d'autres composants Spring Cloud comme Ribbon et Hystrix.\n* **Tests facilit√©s:**  Les interfaces Feign sont facilement testables avec des mocks.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension de base de Feign et des annotations Spring.\n* **D√©bogage:**  Le d√©bogage peut √™tre plus difficile que lorsqu'on utilise `RestTemplate` directement, car la logique HTTP est cach√©e derri√®re le proxy Feign.\n* **Complexit√© pour des cas d'utilisation avanc√©s:** Pour des sc√©narios HTTP complexes (gestion de plusieurs types de r√©ponses,  gestion fine des erreurs HTTP non g√©r√©s par Hystrix, ...), il peut √™tre n√©cessaire de recourir √† des configurations et des intercepteurs plus avanc√©s.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n\n(Laisser vide)\n"
    },
    {
        "id": "06c3248f-0cd0-4455-806d-fbc11f2130ae",
        "title": "Spring Cloud Square",
        "description": "---\nid: fba146b1-f075-4072-9323-b9af98af76bd\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nSpring Cloud Square est une biblioth√®que Java open-source qui simplifie la cr√©ation et la gestion de microservices bas√©s sur Spring Boot.  Elle utilise un registre de services (comme Eureka ou Consul) pour permettre aux services de se d√©couvrir et de communiquer entre eux.  Elle s'appuie sur le pattern \"sidecar\" pour injecter des fonctionnalit√©s suppl√©mentaires sans modifier le code des microservices.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring Cloud Square n'est pas une biblioth√®que existante √† ma connaissance. Le lien fourni pointe vers un article de blog Spring de 2021 qui introduit *Spring Cloud 2021*.  Il n'y a pas de mention de \"Spring Cloud Square\".  L'article discute de nouvelles fonctionnalit√©s et am√©liorations dans Spring Cloud, dont l'am√©lioration de la gestion des microservices.  Il n'y a pas de nouvelle biblioth√®que sp√©cifique nomm√©e \"Spring Cloud Square\".\n\nPour clarifier, Spring Cloud (sans \"Square\") fournit des outils pour construire des applications distribu√©es bas√©es sur des microservices.  Ces outils incluent :\n\n* **D√©couverte de services:**  Permet aux microservices de se trouver les uns les autres via un serveur de registre.\n* **Gestion de la configuration:**  Centralise la gestion des param√®tres de configuration.\n* **Gestion de circuit breakers:**  Prot√®ge les applications contre les pannes de services d√©pendants.\n* **Routage intelligent:**  Distribue le trafic entre les instances d'un service.\n\n\nIl est possible que \"Spring Cloud Square\" soit un nom interne, un projet non-officiel, ou une interpr√©tation erron√©e.  Sans plus d'informations, il est impossible de fournir une description pr√©cise de son fonctionnement.  L'int√©gration avec OkHttp et Retrofit est √©galement impossible √† d√©tailler sans une d√©finition claire de \"Spring Cloud Square\".\n\n## Qu'est-ce qui est top ? üëç\n\n(Impossible √† r√©pondre sans une description claire de \"Spring Cloud Square\")\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n(Impossible √† r√©pondre sans une description claire de \"Spring Cloud Square\")\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Si \"Spring Cloud Square\" existait, il serait probablement li√© √† d'autres projets Spring Cloud comme Spring Boot, Eureka, Consul, Ribbon, Hystrix, etc.)\n"
    },
    {
        "id": "c2ae4899-2bd6-4b4b-ae74-f143bf33dfa6",
        "title": "Spring Cloud Stream",
        "description": "---\nid: f64ebe55-d2d7-479a-b490-91a369e08354\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nSpring Cloud Stream est un framework bas√© sur Spring Boot qui simplifie la cr√©ation d'applications microservices qui communiquent de mani√®re asynchrone via des messages.  Il fournit une abstraction au-dessus de diff√©rentes technologies de messagerie comme Kafka, RabbitMQ, etc., permettant de changer de technologie sans modifier le code applicatif.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nSpring Cloud Stream fournit un mod√®le de programmation bas√© sur des flux de donn√©es (streams) et des liaisons (bindings).  Les applications utilisent des interfaces `@Input` et `@Output` pour d√©finir des points d'entr√©e et de sortie pour les messages.  Spring Cloud Stream g√®re la configuration et la connexion √† la technologie de messagerie sous-jacente.\n\nLe framework s'appuie sur les concepts suivants:\n\n* **Bindings:**  Des liens entre l'application et le broker de messages. Ils d√©finissent comment les messages sont envoy√©s et re√ßus.  On peut les configurer √† l'aide de propri√©t√©s.\n* **Destinations:**  Des files d'attente ou des topics (selon la technologie de messagerie) o√π les messages sont envoy√©s et re√ßus.  Le nom de la destination est configur√© via les propri√©t√©s.\n* **Processors:** Composants qui consomment les messages d'une destination et les envoient vers une autre.\n* **Sources:** Composants qui envoient des messages vers une destination.\n* **Sinks:** Composants qui consomment des messages d'une destination.\n\n**Exemple (Kafka):**\n\n```java\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.annotation.StreamListener;\nimport org.springframework.cloud.stream.messaging.Sink;\nimport org.springframework.messaging.Message;\n\n@EnableBinding(Sink.class) // Utilise l'interface Sink fournie par Spring Cloud Stream\npublic class MessageConsumer {\n\n    @StreamListener(Sink.INPUT) // √âcoute les messages sur la destination \"input\"\n    public void receive(Message<String> message) {\n        String payload = message.getPayload();\n        System.out.println(\"Received message: \" + payload);\n        // Traitement du message...\n    }\n}\n```\n\nCe code d√©finit un consommateur de messages qui √©coute sur la destination `input` (d√©finie par d√©faut par `Sink`).  La configuration de Kafka sera g√©r√©e automatiquement par Spring Cloud Stream via les propri√©t√©s d'application.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Abstraction:**  Simplifie l'interaction avec les brokers de messages. Le changement de technologie est facile gr√¢ce √† la configuration.\n* **Simplicit√©:**  Mod√®le de programmation d√©claratif et facile √† utiliser gr√¢ce aux annotations.\n* **Int√©gration Spring Boot:**  Int√©gration transparente avec l'√©cosyst√®me Spring.\n* **√âvolutivit√©:**  Con√ßu pour des applications distribu√©es et √©volutives.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© (potentielle):** La configuration peut devenir complexe pour des sc√©narios avanc√©s.\n* **D√©pendances:**  N√©cessite des d√©pendances suppl√©mentaires pour les diff√©rentes technologies de messagerie.\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension de base des concepts de messagerie asynchrone.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "14875961-7083-4170-b55a-5fcc5c10d848",
        "title": "Spring_ApplicationEvent",
        "description": "---\nid: 9d4a3b37-f1cd-4e24-a3ea-7c477784e113\n---\n# Spring ApplicationEvent\n\n---\n\n# **Rapidement, c'est quoi ? ‚ùì**\n\nUn `ApplicationEvent` dans Spring est un m√©canisme permettant de publier et de g√©rer des √©v√©nements au sein d'une application.  Il permet de d√©-coupler diff√©rentes parties du code et de r√©agir √† des √©v√©nements sp√©cifiques sans avoir besoin d'une connaissance directe des autres composants.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\n`ApplicationEvent` est une classe abstraite dans Spring qui sert de base pour tous les √©v√©nements de l'application.  Pour cr√©er un √©v√©nement personnalis√©, on h√©rite de cette classe et on fournit les donn√©es n√©cessaires.  Spring fournit un m√©canisme d'√©coute (listeners) bas√© sur le pattern \"Observer\".  Lorsqu'un √©v√©nement est publi√© (`ApplicationEventPublisher.publishEvent()`), tous les listeners enregistr√©s qui s'int√©ressent √† ce type d'√©v√©nement sont notifi√©s et peuvent y r√©agir.\n\nLe fonctionnement repose sur :\n\n* **`ApplicationEvent`:**  Classe abstraite repr√©sentant un √©v√©nement.  Contient un champ `source` qui repr√©sente l'objet qui a d√©clench√© l'√©v√©nement.\n* **`ApplicationEventPublisher`:** Interface permettant de publier des √©v√©nements.  L'impl√©mentation la plus courante est `ApplicationContext`.\n* **`ApplicationListener<T extends ApplicationEvent>`:** Interface pour les listeners.  On impl√©mente la m√©thode `onApplicationEvent(T event)` qui sera appel√©e lorsque l'√©v√©nement est publi√©.  Le param√®tre `T` sp√©cifie le type d'√©v√©nement auquel le listener s'abonne.\n* **`@EventListener` annotation:** An annotation based approach that simplifies the definition of listeners. This approach is preferred over explicitly implementing `ApplicationListener`.\n\n**Exemple concret avec annotation `@EventListener`:**\n\n```java\nimport org.springframework.context.event.EventListener;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class MyEventListener {\n\n    @EventListener\n    public void handleMyEvent(MyCustomEvent event) {\n        System.out.println(\"MyCustomEvent received: \" + event.getMessage());\n    }\n}\n\n// D√©finition d'un √©v√©nement personnalis√©\npublic class MyCustomEvent extends ApplicationEvent {\n    private final String message;\n\n    public MyCustomEvent(Object source, String message) {\n        super(source);\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\n\n//Publication de l'√©v√®nement :\n// ApplicationContext applicationContext;\n// applicationContext.publishEvent(new MyCustomEvent(this, \"Hello from event\"));\n```\n\nCet exemple montre comment cr√©er un listener qui √©coute un √©v√©nement personnalis√© (`MyCustomEvent`).  L'annotation `@EventListener` indique √† Spring qu'il faut l'enregistrer comme listener pour ce type d'√©v√©nement.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **D√©couplage:**  Permet de d√©-coupler les diff√©rents composants de l'application.  Les √©metteurs d'√©v√©nements n'ont pas besoin de conna√Ætre les listeners.\n* **Flexibilit√©:**  Facile √† √©tendre et √† adapter √† de nouveaux types d'√©v√©nements.\n* **Simplicit√©:** L'utilisation de l'annotation `@EventListener` rend la d√©claration des listeners tr√®s concise.\n* **Asynchrone (avec conditions):**  L'utilisation de `@Async` sur la m√©thode de l'√©coute permet un traitement asynchrone.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© potentielle:**  Pour des applications tr√®s complexes avec de nombreux √©v√©nements et listeners, la gestion peut devenir difficile.\n* **D√©bogage:**  Le d√©bogage d'√©v√©nements peut √™tre complexe si les listeners ne sont pas correctement configur√©s.\n* **Ordre de traitement non garanti:** Le traitement des √©v√©nements par les listeners n'est pas garanti dans un ordre pr√©cis, sauf si une strat√©gie particuli√®re est mise en place.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "40cef7bb-7d89-483d-91f3-6beec18bfd04",
        "title": "Streamlit",
        "description": "---\nid: 43c514bb-6740-4553-bb6a-8a2186187deb\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nStreamlit est une librairie Python open-source qui permet de cr√©er rapidement et facilement des applications web interactives pour visualiser et partager des donn√©es.  Elle simplifie le processus de d√©veloppement en r√©duisant le besoin de connaissances approfondies en d√©veloppement web frontal.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nStreamlit fournit un framework permettant de construire des applications web √† partir de code Python.  L'interface utilisateur est g√©n√©r√©e automatiquement √† partir du code Python, qui est ex√©cut√© de mani√®re incr√©mentale.  Chaque modification dans le script Python est instantan√©ment refl√©t√©e dans l'application web, permettant un d√©veloppement it√©ratif rapide.\n\nStreamlit utilise des d√©corateurs pour d√©finir les diff√©rents composants de l'application (ex: `@st.cache_data` pour le cache, `@st.cache_resource` pour les ressources, etc.).  Il offre une large gamme de widgets interactifs (boutons, curseurs, s√©lecteurs, etc.) pour interagir avec les donn√©es et des fonctions pour afficher des donn√©es sous diff√©rentes formes (graphiques, tableaux, cartes, etc.) via des librairies comme Matplotlib, Seaborn, Plotly, etc.\n\nVoici un exemple simple :\n\n```python\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\n\nst.title(\"Mon Application Streamlit\")\n\n# G√©n√©rer des donn√©es al√©atoires\ndata = np.random.randn(20, 3)\ndf = pd.DataFrame(data, columns=['A', 'B', 'C'])\n\n# Afficher le dataframe\nst.dataframe(df)\n\n# Afficher un graphique\nst.line_chart(df)\n\n# Ajouter un curseur\nx = st.slider('S√©lectionner une valeur', 0, 100, 50)\nst.write(f\"La valeur s√©lectionn√©e est : {x}\")\n```\n\nCe code cr√©e une application Streamlit simple avec un titre, un tableau de donn√©es, un graphique lin√©aire et un curseur interactif.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **Rapidit√© de d√©veloppement:** Streamlit permet de cr√©er des applications web fonctionnelles tr√®s rapidement, m√™me sans exp√©rience en d√©veloppement web.\n* **Facilit√© d'utilisation:** La syntaxe est intuitive et simple √† apprendre pour les utilisateurs Python.\n* **Mise √† jour en temps r√©el:** Les modifications de code sont instantan√©ment refl√©t√©es dans l'application web.\n* **Int√©gration avec les librairies de visualisation de donn√©es:** Streamlit s'int√®gre facilement avec des librairies populaires comme Matplotlib, Seaborn, Plotly et Altair.\n* **Partage facile:**  Le d√©ploiement et le partage d'applications sont simplifi√©s gr√¢ce √† Streamlit Cloud.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Moins flexible que les frameworks web complets:** Pour des applications web complexes et personnalis√©es, Streamlit peut avoir des limites par rapport √† des frameworks comme React, Angular ou Vue.js.\n* **Performances potentielles:**  Pour les applications traitant des ensembles de donn√©es tr√®s volumineux, les performances peuvent √™tre un probl√®me. L'utilisation de `@st.cache_data` ou de techniques d'optimisation est alors n√©cessaire.\n* **D√©bogage:** Le d√©bogage peut √™tre plus difficile que dans des frameworks web traditionnels car le code est ex√©cut√© de mani√®re incr√©mentale.\n* **S√©curit√©:** Comme pour toute application web, il faut prendre des pr√©cautions pour s√©curiser l'application, surtout si elle est expos√©e publiquement.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "9c6f2d70-5161-4aff-bcc4-a4e7ff073819",
        "title": "Tanstack",
        "description": "---\nid: 721dcca9-837e-464d-be3d-d7676e23332b\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nTanstack est une collection de biblioth√®ques JavaScript open-source de haute qualit√©, principalement ax√©es sur la cr√©ation d'interfaces utilisateur performantes et robustes.  Elle est connue pour ses performances exceptionnelles, sa facilit√© d'utilisation et son approche ax√©e sur les d√©veloppeurs.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nTanstack n'est pas une seule biblioth√®que, mais plut√¥t un √©cosyst√®me de projets interconnect√©s, dont les plus connus sont :\n\n* **`@tanstack/react-query`:**  Une biblioth√®que pour g√©rer facilement l'√©tat de l'application, notamment la r√©cup√©ration et la mise √† jour des donn√©es provenant d'API. Elle g√®re la mise en cache, la pagination, l'optimisation des requ√™tes, et la gestion des erreurs de mani√®re transparente.  Elle permet de simplifier consid√©rablement le d√©veloppement d'applications qui interagissent avec des sources de donn√©es externes.\n\n* **`@tanstack/react-table`:** Une biblioth√®que pour cr√©er des tableaux de donn√©es interactifs et hautement personnalisables. Elle offre des fonctionnalit√©s avanc√©es de tri, de filtrage, de pagination et d'√©dition, tout en maintenant des performances √©lev√©es, m√™me avec des ensembles de donn√©es volumineux.\n\n* **`@tanstack/virtual`:**  Une solution pour le rendu virtuel de listes et de tableaux, permettant de g√©rer efficacement de tr√®s grands ensembles de donn√©es sans compromettre les performances.  Elle est souvent utilis√©e en conjonction avec `react-table`.\n\n* **`@tanstack/router`:** Un routeur client pour React offrant des performances exceptionnelles et une grande flexibilit√©. Il se caract√©rise par son approche d√©clarative et sa capacit√© √† g√©rer efficacement les transitions et la navigation dans une application complexe.\n\n\nCes biblioth√®ques partagent une philosophie commune de performance, de simplicit√© et d'extensibilit√©. Elles sont con√ßues pour √™tre utilis√©es ensemble, mais peuvent √©galement fonctionner ind√©pendamment.  L'utilisation de TypeScript est omnipr√©sente dans l'√©cosyst√®me Tanstack, ce qui contribue √† la robustesse et √† la maintenabilit√© du code.\n\n\n**Exemple (react-query):**\n\n```javascript\nimport { useQuery } from '@tanstack/react-query';\n\nfunction MyComponent() {\n  const { data, isLoading, error } = useQuery(['todos'], () =>\n    fetch('/api/todos').then((res) => res.json())\n  );\n\n  if (isLoading) return 'Loading...';\n  if (error) return 'Error: ' + error.message;\n\n  return (\n    <ul>\n      {data.map((todo) => (\n        <li key={todo.id}>{todo.text}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Performances exceptionnelles:** Tanstack est r√©put√© pour sa vitesse et son efficacit√©, particuli√®rement pour les applications √† grande √©chelle et celles qui manipulent de grands ensembles de donn√©es.\n* **Facilit√© d'utilisation:** Les API sont g√©n√©ralement intuitives et bien document√©es, ce qui facilite l'apprentissage et l'int√©gration.\n* **Extensibilit√©:** Les biblioth√®ques sont con√ßues pour √™tre facilement personnalis√©es et √©tendues pour r√©pondre aux besoins sp√©cifiques des applications.\n* **Bonne communaut√© et support:**  Une communaut√© active et un support efficace contribuent √† la r√©solution rapide des probl√®mes et √† l'am√©lioration continue des biblioth√®ques.\n* **TypeScript:** L'utilisation intensive de TypeScript am√©liore la qualit√© du code et r√©duit les erreurs.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage (l√©g√®rement plus raide pour certains):** Bien que g√©n√©ralement faciles √† utiliser, certaines fonctionnalit√©s plus avanc√©es de `react-table` ou de `react-query` peuvent n√©cessiter un peu plus d'apprentissage.\n* **√âcosyst√®me sp√©cifique √† React (principalement):** Bien que certaines biblioth√®ques aient des adaptations pour d'autres frameworks, l'√©cosyst√®me Tanstack est principalement centr√© sur React.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "c8e1bc04-e275-4998-8f37-1250113c36a0",
        "title": "Terragrunt",
        "description": "---\nid: 7d944ee8-6e62-4068-a425-0eae01d821c8\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nTerragrunt est un outil open-source qui √©tend Terraform pour g√©rer des infrastructures complexes et r√©p√©titives.  Il simplifie le d√©ploiement et la gestion de plusieurs environnements Terraform en fournissant des fonctionnalit√©s de modularit√©, de r√©utilisation de code et de gestion de configuration plus avanc√©es que Terraform seul.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nTerragrunt n'est pas un remplacement de Terraform, mais un wrapper autour de lui. Il ajoute des fonctionnalit√©s pour :\n\n* **R√©utilisation de code:**  Permet de cr√©er des modules r√©utilisables et de les appliquer √† diff√©rents endroits, √©vitant la duplication de code.  Cela se fait par l'inclusion de modules dans un r√©pertoire centralis√© et leur inclusion dans plusieurs projets.\n* **Gestion de configurations multiples:** Facilite la gestion d'environnements distincts (d√©veloppement, staging, production) en utilisant des configurations distinctes avec des variables appropri√©es pour chaque environnement.\n* **Gestion des d√©pendances:**  Permet de d√©finir et de g√©rer les d√©pendances entre diff√©rents blocs Terraform, assurant que les ressources sont cr√©√©es dans l'ordre correct.\n* **Inclusion de fichiers de configuration externes:**  Permet d'externaliser des parties de la configuration dans des fichiers s√©par√©s, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **Gestion des secrets:**  Int√®gre plus facilement la gestion des secrets en permettant de les importer depuis des sources externes.\n\nTerragrunt utilise des fichiers `.hcl` (HashiCorp Configuration Language) pour d√©finir ses configurations.  Un fichier `terragrunt.hcl` est g√©n√©ralement plac√© √† la racine de chaque projet Terraform. Ce fichier sp√©cifie les param√®tres de configuration de Terragrunt, comme les variables, les modules √† inclure et les options d'ex√©cution.\n\n**Exemple de `terragrunt.hcl`:**\n\n```hcl\nterraform {\n  source = \"github.com/gruntwork-io/terragrunt-example-aws-ecs\"\n}\n\n# Cette ligne inclut une configuration externe\ninclude {\n  path = \"config.hcl\"\n}\n\nlocals {\n  environment = \"dev\"\n}\n```\n\nTerragrunt ex√©cute ensuite Terraform en arri√®re-plan, utilisant les configurations d√©finies dans le fichier `terragrunt.hcl` et les fichiers Terraform standard.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Modularit√© et R√©utilisation du Code:**  Am√©liore consid√©rablement la maintenabilit√© et la coh√©rence des infrastructures Terraform.\n* **Gestion simplifi√©e des environnements multiples:**  Facilite le d√©ploiement dans plusieurs environnements avec des configurations sp√©cifiques √† chaque environnement.\n* **Am√©lioration de la collaboration:**  Permet une meilleure organisation et collaboration pour les √©quipes travaillant sur de grands projets Terraform.\n* **Gestion des d√©pendances:**  Assure l'ex√©cution des ressources dans l'ordre correct, ce qui est crucial pour √©viter les erreurs.\n* **Int√©gration ais√©e avec les pipelines CI/CD:**  Peut √™tre facilement int√©gr√© dans des pipelines CI/CD pour automatiser les d√©ploiements.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  N√©cessite d'apprendre une nouvelle couche d'abstraction au-dessus de Terraform.\n* **Complexit√© additionnelle:**  Pour les projets Terraform simples, l'ajout de Terragrunt peut ajouter une complexit√© inutile.\n* **D√©pendance √† un autre outil:**  Ajoute une d√©pendance √† un autre outil, ce qui peut complexifier le processus de maintenance.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "75b5181a-1176-4e8a-b37e-8e2b57659aaa",
        "title": "TinyDb",
        "description": "---\nid: b7cee06e-93fe-4f42-b117-225f172d8611\n---\n## **Rapidement, c'est quoi ? ‚ùì**\n\nTinyDB est une petite base de donn√©es NoSQL orient√©e document pour Python.  Elle stocke les donn√©es dans un simple fichier JSON, ce qui la rend facile √† utiliser et √† int√©grer dans des projets Python.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nTinyDB est une base de donn√©es embarqu√©e, ce qui signifie qu'elle ne n√©cessite pas de serveur s√©par√©. Elle utilise un fichier JSON pour stocker les donn√©es, ce qui facilite son utilisation et son d√©ploiement.  Elle supporte les op√©rations CRUD (Cr√©er, Lire, Mettre √† jour, Supprimer) sur des documents JSON.  Contrairement aux bases de donn√©es relationnelles, TinyDB ne repose pas sur un sch√©ma fixe ; vous pouvez stocker des documents JSON de structures diff√©rentes dans la m√™me collection.\n\nTinyDB offre des fonctionnalit√©s de requ√™te puissantes via une API intuitive. Vous pouvez effectuer des recherches sur des champs sp√©cifiques, utiliser des op√©rateurs de comparaison (>, <, >=, <=, ==, !=), et combiner plusieurs crit√®res de recherche.\n\n**Exemple:**\n\n```python\nfrom tinydb import TinyDB, Query\n\n# Cr√©er une instance de TinyDB (cr√©e le fichier si inexistant)\ndb = TinyDB('mydb.json')\n\n# Cr√©er une table (collection)\ntable = db.table('users')\n\n# Ins√©rer des donn√©es\ntable.insert({'name': 'Alice', 'age': 30})\ntable.insert({'name': 'Bob', 'age': 25})\n\n# Requ√™te: trouver un utilisateur avec l'age > 25\nUser = Query()\nresult = table.search(User.age > 25)\nprint(result)\n\n# Mettre √† jour un document\ntable.update({'age': 31}, User.name == 'Alice')\n\n# Supprimer un document\ntable.remove(User.name == 'Bob')\n\n# Fermer la connection\ndb.close()\n```\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Simplicit√©:**  Extr√™mement facile √† utiliser et √† apprendre, id√©ale pour les petits projets ou les prototypes.\n* **Lightweight:**  N'a pas besoin d'un serveur, ce qui la rend portable et facile √† d√©ployer.\n* **Int√©gration facile avec Python:** S'int√®gre parfaitement dans les applications Python.\n* **Stockage persistant:**  Les donn√©es sont persist√©es dans un fichier JSON, facile √† sauvegarder et √† restaurer.\n* **API intuitive:** Les requ√™tes sont faciles √† √©crire et √† comprendre.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Performance:**  Peut devenir lente avec de tr√®s grandes quantit√©s de donn√©es car elle est bas√©e sur un fichier JSON.  Non adapt√©e aux applications haute performance ou √† forte charge.\n* **Fonctionnalit√©s limit√©es:**  Ne propose pas toutes les fonctionnalit√©s d'une base de donn√©es NoSQL compl√®te (par exemple, indexation complexe, transactions atomiques robustes).\n* **Scalabilit√©:**  Difficult√© √† g√©rer la croissance importante des donn√©es et des utilisateurs.  Non adapt√©e aux applications distribu√©es.\n* **S√©curit√©:**  La s√©curit√© d√©pend de la s√©curit√© du syst√®me de fichiers.  Pas de m√©canismes de s√©curit√© int√©gr√©s sophistiqu√©s.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "448d0047-a90c-4db7-b45a-835e4bad9237",
        "title": "Uv",
        "description": "---\nid: c1b3650e-bf9c-41f9-9ec6-bde23e8c5732\n---\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nUv est un outil en ligne de commande qui g√®re les d√©pendances des projets Python.  Contrairement √† pip, qui est √©crit en Python, Uv est impl√©ment√© en Rust, ce qui lui conf√®re une vitesse d'ex√©cution et une robustesse accrues. Il utilise un syst√®me de r√©solution de d√©pendances pour identifier et installer les packages n√©cessaires, en tenant compte des versions et des conflits possibles.  Il g√®re √©galement la cr√©ation d'environnements virtuels isol√©s pour chaque projet, permettant ainsi une meilleure gestion des d√©pendances sp√©cifiques √† chaque projet.  L'utilisation d'Uv se fait g√©n√©ralement via des fichiers de configuration (comme `pyproject.toml`), qui sp√©cifient les d√©pendances du projet.  Uv lit ces fichiers, t√©l√©charge les paquets depuis des r√©f√©rentiels (comme PyPI), et les installe dans l'environnement virtuel appropri√©.\n\n\n**Exemple d'utilisation (hypoth√©tique):**\n\nSupposons un `pyproject.toml` contenant :\n\n```toml\n[tool.uv.dependencies]\nrequests = \"2.28.2\"\nnumpy = \">=1.24.0\"\n```\n\nLa commande `uv install` analyserait ce fichier, t√©l√©chargerait `requests` version 2.28.2 et une version compatible de `numpy` (au moins 1.24.0), et les installerait dans l'environnement virtuel actif.\n\n\n---\n\n# Qu'est-ce qui est top ? üëç\n\n* **Rapidit√©:** √âtant √©crit en Rust, Uv est potentiellement beaucoup plus rapide que pip pour l'installation et la r√©solution de d√©pendances.\n* **Fiabilit√©:** Rust offre une meilleure gestion des erreurs et une s√©curit√© m√©moire accrue par rapport √† Python, ce qui peut rendre Uv plus robuste et moins sujet aux plantages.\n* **Gestion des d√©pendances am√©lior√©e:**  Uv pourrait offrir des fonctionnalit√©s de gestion des d√©pendances plus avanc√©es (bien que cela d√©pende de son impl√©mentation).\n* **Int√©gration avec `pyproject.toml`:** L'utilisation de `pyproject.toml` est une pratique courante et permet une meilleure gestion du projet.\n\n\n---\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Maturit√©:**  En tant que nouvel outil, Uv pourrait manquer de fonctionnalit√©s ou de stabilit√© par rapport √† un outil mature comme pip.\n* **Adoption:**  Le manque d'adoption pourrait limiter la communaut√© de soutien et la disponibilit√© des ressources.\n* **Compatibilit√©:** Il pourrait exister des incompatibilit√©s avec certains packages ou outils existants.\n* **D√©pendances:**  Uv lui-m√™me a des d√©pendances, ce qui peut introduire une complexit√© suppl√©mentaire.\n\n\n---\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "e8deee3f-007b-48f4-a9de-78ab0e076b6d",
        "title": "WCAG",
        "description": "---\nid: f10ac51f-8930-4fe5-81f1-99355f3e8d4d\n---\n## **Rapidement, c'est quoi ? ‚ùì**\n\nLes WCAG (Web Content Accessibility Guidelines) sont un ensemble de lignes directrices internationales pour rendre les sites web et le contenu web accessibles √† tous, y compris les personnes handicap√©es.  Elles visent √† assurer que le web soit utilisable par le plus grand nombre possible de personnes, ind√©pendamment de leurs capacit√©s.\n\n---\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLes WCAG d√©finissent des crit√®res de r√©ussite pour l'accessibilit√© web, regroup√©s en quatre principes fondamentaux :\n\n* **Percevable (Perceivable):**  L'information et les composants de l'interface utilisateur doivent √™tre pr√©sent√©s aux utilisateurs de mani√®re qu'ils puissent les percevoir.  Cela inclut des crit√®res sur le texte alternatif pour les images, les l√©gendes pour les vid√©os, le contraste des couleurs, etc.\n\n* **Op√©rable (Operable):** L'interface utilisateur doit √™tre op√©rable.  Cela signifie que les utilisateurs doivent pouvoir utiliser l'interface utilisateur.  Des crit√®res concernent la navigation au clavier, le temps de saisie, les saisies inappropri√©es, etc.\n\n* **Compr√©hensible (Understandable):** L'information et l'utilisation de l'interface utilisateur doivent √™tre compr√©hensibles.  Cela implique des crit√®res sur la lisibilit√©, la pr√©visibilit√© et la coh√©rence du site.\n\n* **Robuste (Robust):** Le contenu doit √™tre robuste, c'est-√†-dire compatible avec une large gamme de technologies d'assistance.\n\nChaque principe est d√©clin√© en plusieurs crit√®res de r√©ussite, class√©s par niveaux de s√©v√©rit√© (A, AA, AAA).  Le niveau AA est g√©n√©ralement consid√©r√© comme le minimum pour une bonne accessibilit√©.\n\n**Exemple concret :** Une image d'un chat sans texte alternatif (\"alt text\") viole le principe de perceptibilit√©. Un utilisateur utilisant un lecteur d'√©cran ne pourra pas comprendre ce que repr√©sente l'image.  L'ajout d'un texte alternatif (\"alt text\" = \"Un chat mignon\") rend l'image accessible.\n\n**Exemple de code (HTML) illustrant un bon contraste:**\n\n```html\n<p style=\"color: white; background-color: #000080;\">Ce texte a un bon contraste.</p>\n```\n\n```html\n<p style=\"color: black; background-color: #FFFFE0;\">Ce texte a un contraste insuffisant</p>\n```\n\nL'utilisation de v√©rificateurs d'accessibilit√© (outils automatis√©s) peut aider √† identifier les probl√®mes d'accessibilit√©. Cependant, ils ne d√©tectent pas tous les probl√®mes, une revue manuelle est essentielle.\n\n\n---\n\n# Qu'est-ce qui est top ? üëç\n\n* **Standard internationalement reconnu:** Les WCAG sont largement accept√©es comme la norme pour l'accessibilit√© web.\n* **Cadre complet:** Elles couvrent un large √©ventail de probl√®mes d'accessibilit√©.\n* **Niveaux de conformit√©:**  Permettent d'adapter le niveau d'accessibilit√© aux ressources disponibles.\n* **Am√©liore l'exp√©rience utilisateur pour tous:**  Un site web accessible est g√©n√©ralement plus facile √† utiliser pour tout le monde, m√™me les utilisateurs sans handicap.\n\n\n---\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La compr√©hension et la mise en ≈ìuvre compl√®te des WCAG peuvent √™tre complexes, n√©cessitant des comp√©tences sp√©cifiques.\n* **Co√ªt:** Rendre un site web pleinement accessible peut n√©cessiter des efforts importants et des co√ªts de d√©veloppement suppl√©mentaires.\n* **Tests manuels n√©cessaires:** Les outils automatis√©s ne suffisent pas √† garantir une accessibilit√© compl√®te. Des tests manuels approfondis sont indispensables.\n* **Evolution constante:** Les WCAG √©voluent r√©guli√®rement, n√©cessitant une mise √† jour continue des connaissances et des pratiques.\n\n\n---\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "6a27445d-5e3c-4435-9e55-9dd9103a5d81",
        "title": "Watch Tower Docker",
        "description": "---\nid: ba859634-f672-4bdf-92fa-d8a6e6ceec08\n---\n# Rapidement c'est quoi‚ùì\n\nWatch Tower est un outil Docker qui automatise les mises √† jour des conteneurs. Il surveille r√©guli√®rement les nouvelles versions d'images sur un registre (Docker Hub par d√©faut, ou un registre priv√©) et met √† jour les conteneurs en cours d'ex√©cution lorsqu'une nouvelle version est disponible.  Id√©al pour les environnements de test et les homelabs.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nWatch Tower est un conteneur Docker l√©ger qui fonctionne comme un agent de surveillance.  Il est configur√© pour surveiller un ou plusieurs autres conteneurs.  Pour chaque conteneur surveill√©, Watch Tower v√©rifie p√©riodiquement la disponibilit√© de nouvelles images sur un registre Docker sp√©cifi√© (Docker Hub par d√©faut, mais configurable pour des registres priv√©s, n√©cessitant alors des identifiants).  Cette v√©rification se fait en comparant l'ID de l'image courante du conteneur avec la derni√®re version disponible sur le registre.\n\nSi une nouvelle version est d√©tect√©e, Watch Tower t√©l√©charge automatiquement la nouvelle image.  Puis, il arr√™te proprement l'ancien conteneur, d√©marre un nouveau conteneur bas√© sur la nouvelle image, et conserve les donn√©es du conteneur pr√©c√©dent gr√¢ce √† des volumes persistants s'ils sont d√©finis.  Le processus est transparent pour l'utilisateur, qui ne devrait pas remarquer d'interruption de service (√† condition d'avoir configur√© correctement les volumes de donn√©es).  La configuration se fait principalement via des variables d'environnement, ce qui simplifie son d√©ploiement et sa customisation.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Automatisation des mises √† jour:** √âlimine le besoin de mises √† jour manuelles des conteneurs, r√©duisant le risque d'erreur et le travail manuel.\n* **Facilit√© d'utilisation:**  Simple √† configurer et √† d√©ployer gr√¢ce √† son architecture en conteneur et √† sa configuration par variables d'environnement.\n* **Support des registres priv√©s:** Permet de g√©rer les mises √† jour d'images h√©berg√©es sur des registres priv√©s, crucial pour les environnements professionnels ou les configurations plus s√©curis√©es.\n* **Mise √† jour transparente (en th√©orie):**  Les mises √† jour se font avec une interruption minimale, gr√¢ce √† l'arr√™t et le red√©marrage automatis√© du conteneur.\n* **L√©ger et peu gourmand en ressources:**  N'affecte pas significativement les performances du syst√®me h√¥te.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **D√©pendances:** N√©cessite Docker et un acc√®s √† un registre Docker (public ou priv√©).\n* **Complexit√© potentielle pour des configurations avanc√©es:** Bien que simple √† utiliser de base, la gestion de sc√©narios complexes (d√©pendances entre conteneurs, configurations de volumes complexes) peut demander plus d'attention.\n* **Potentiel de probl√®mes en cas de mauvaise configuration des volumes:**  Une mauvaise configuration des volumes de donn√©es peut entra√Æner la perte de donn√©es lors d'une mise √† jour.  Il est crucial de bien d√©finir et de tester la persistance des donn√©es.\n* **Pas de gestion des configurations internes du conteneur:**  Watchtower met √† jour uniquement l'image du conteneur.  Les configurations internes au conteneur doivent √™tre g√©r√©es s√©par√©ment (par exemple, via des fichiers de configuration persistants).\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "5ce536ee-9346-4042-888f-3641480236b6",
        "title": "Wiremock",
        "description": "---\nid: 31caea1a-0cb7-434b-89d8-ba31405f704b\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nWireMock est un outil open-source permettant de cr√©er facilement des mocks d'API.  Il simule des services web pour les tests, renvoyant des r√©ponses pr√©-d√©finies √† des requ√™tes sp√©cifiques.  Cela permet de d√©boucler les tests des applications qui d√©pendent d'autres services sans avoir √† les d√©marrer ou √† les utiliser en production.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nWireMock est un serveur ind√©pendant qui √©coute sur un port donn√©.  On le configure pour r√©pondre √† des requ√™tes HTTP (GET, POST, PUT, DELETE, etc.) avec des r√©ponses sp√©cifi√©es.  Ces r√©ponses peuvent √™tre statiques (un fichier JSON, XML, etc.) ou dynamiques (g√©n√©r√©es √† la vol√©e en fonction de la requ√™te).  La configuration se fait g√©n√©ralement via des fichiers JSON ou YAML, d√©finissant des mappings entre des requ√™tes et des r√©ponses.\n\nVoici un exemple de configuration YAML simple :\n\n```yaml\n---\nrequest:\n  method: GET\n  url: /users\nresponse:\n  status: 200\n  body:\n    - id: 1\n      name: John Doe\n    - id: 2\n      name: Jane Doe\n```\n\nCe mapping indique √† WireMock de r√©pondre √† une requ√™te GET sur `/users` avec un code de statut 200 et un corps JSON contenant une liste de deux utilisateurs.\n\nWireMock offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Gestion des retards:** Simuler des temps de r√©ponse lents.\n* **Validation des requ√™tes:** V√©rifier que les requ√™tes envoy√©es par l'application sont conformes aux attentes.\n* **Stubbing:** Fournir des r√©ponses pr√©d√©finies pour des requ√™tes sp√©cifiques.\n* **Mocking:** Simuler le comportement d'un service distant.\n* **Int√©gration avec des frameworks de test:**  WireMock s'int√®gre facilement avec de nombreux frameworks de test (JUnit, pytest, etc.).\n\n## Qu'est-ce qui est top ? üëç\n\n* **Facile √† utiliser:** La configuration est simple et intuitive, m√™me pour des cas d'utilisation complexes.\n* **Flexible:**  Permet de simuler un large √©ventail de sc√©narios de tests.\n* **Open-source:**  Gratuit et la communaut√© contribue √† son am√©lioration constante.\n* **Large choix de langages et d'int√©grations:**  Disponible pour diff√©rents langages et frameworks.\n* **Gestion des d√©pendances:** D√©couple les tests de l'infrastructure et des services externes.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© pour les cas tr√®s complexes:**  Pour des simulations extr√™mement sophistiqu√©es, la configuration peut devenir complexe.\n* **Courbe d'apprentissage l√©g√®re:** Bien que simple √† utiliser de base, la ma√Ætrise de toutes ses fonctionnalit√©s peut demander un certain temps.\n* **Maintenance des mocks:**  Le maintien des mocks √† jour avec l'√©volution de l'API peut demander de l'effort.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "27e9c2f4-bd91-4a4d-be4e-f01ce1f058f8",
        "title": "io_uring",
        "description": "---\nid: 68a5471b-4061-46f5-b990-d0851a73aaf7\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nio_uring est une interface syst√®me Linux permettant d'effectuer des op√©rations d'E/S (entr√©e/sortie) de mani√®re asynchrone et tr√®s performante.  Elle am√©liore consid√©rablement l'efficacit√© du traitement des requ√™tes d'E/S par rapport aux m√©thodes traditionnelles comme les appels syst√®me `read()` et `write()`.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nio_uring est une interface bas√©e sur des anneaux (rings) pour la communication entre l'espace utilisateur et le noyau.  Au lieu d'effectuer des appels syst√®me individuels pour chaque op√©ration d'E/S,  l'application soumet un ensemble de requ√™tes en bloc √† un anneau de soumission (submission queue). Le noyau traite ces requ√™tes et renvoie les r√©sultats dans un anneau de compl√©tion (completion queue). Cette approche r√©duit consid√©rablement le contexte switching et la surcharge li√©e aux appels syst√®me.\n\nio_uring supporte un large √©ventail d'op√©rations, notamment :\n\n* **Op√©rations de fichiers:** `read`, `write`, `open`, `close`, `fsync`, `fdatasync`, etc.\n* **Op√©rations de sockets:** `accept`, `connect`, `recv`, `send`, etc.\n* **Op√©rations de gestion de fichiers:** `stat`, `ftruncate`, `rename`, etc.\n* **Op√©rations de timers:**  Permet de g√©rer des timers de mani√®re asynchrone.\n* **Op√©rations de signalisation:**  Permet de g√©rer les signaux de mani√®re asynchrone.\n\n\n**Fonctionnement interne (simplifi√©):**\n\n1. **Soumission des requ√™tes:** L'application remplit une structure de donn√©es repr√©sentant les requ√™tes d'E/S et les place dans l'anneau de soumission.\n2. **Traitement par le noyau:** Le noyau r√©cup√®re les requ√™tes de l'anneau de soumission et les traite concurremment.\n3. **Compl√©tion des requ√™tes:**  Une fois les requ√™tes trait√©es, le noyau place les r√©sultats (codes de retour, donn√©es, etc.) dans l'anneau de compl√©tion.\n4. **R√©cup√©ration des r√©sultats:** L'application lit l'anneau de compl√©tion pour r√©cup√©rer les r√©sultats des op√©rations d'E/S.\n\n**Exemple (concept simplifi√© en C):**\n\n```c\n// ... (Initialisation io_uring) ...\n\nstruct io_uring_sqe *sqe = io_uring_get_sqe(&ring);\nio_uring_prep_read(sqe, fd, buffer, size, offset);\nio_uring_submit(&ring); // Envoie les requ√™tes au noyau\n\n// ... (Attente de la compl√©tion des requ√™tes via io_uring_wait_cqe) ...\n\n// ... (R√©cup√©ration des r√©sultats depuis l'anneau de compl√©tion) ...\n```\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Performances exceptionnelles:** io_uring offre des performances bien sup√©rieures √† celles des appels syst√®mes traditionnels, notamment pour les applications √† forte intensit√© d'E/S.\n* **Faible latence:** La r√©duction du contexte switching et la gestion asynchrone permettent de r√©duire la latence des op√©rations d'E/S.\n* **Scalabilit√©:** io_uring est con√ßu pour √™tre scalable et capable de g√©rer un grand nombre de requ√™tes simultan√©es.\n* **Flexibilit√©:**  Supporte une grande vari√©t√© d'op√©rations d'E/S.\n* **Efficacit√© √©nerg√©tique:** La r√©duction des appels syst√®me diminue la consommation d'√©nergie.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√©:**  L'impl√©mentation d'applications utilisant io_uring est plus complexe que l'utilisation d'appels syst√®me classiques.  N√©cessite une bonne compr√©hension de la programmation asynchrone.\n* **Sp√©cifique √† Linux:** io_uring est une fonctionnalit√© sp√©cifique au noyau Linux, et n'est donc pas portable vers d'autres syst√®mes d'exploitation.\n* **D√©bogage:** Le d√©bogage des applications utilisant io_uring peut √™tre plus difficile que celui des applications utilisant des appels syst√®me synchrones.\n* **Support limit√© dans certaines biblioth√®ques:**  Certaines biblioth√®ques ne supportent pas encore nativement io_uring, n√©cessitant une impl√©mentation manuelle.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "7c30816c-6780-447e-972e-751ecdd9187d",
        "title": "n8n",
        "description": "---\nid: 97286cb2-9836-4dd2-b5f6-0885a22ca5c7\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nn8n est une plateforme d'automatisation open-source, bas√©e sur le workflow, permettant de connecter diff√©rents services et applications entre eux sans √©crire de code.  Elle fonctionne via une interface visuelle intuitive o√π l'on peut cr√©er des flux de travail (workflows) pour automatiser des t√¢ches r√©p√©titives.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nn8n est un outil de \"low-code/no-code\" qui permet de construire des workflows complexes en connectant divers services web gr√¢ce √† des \"nodes\".  Chaque node repr√©sente une action sp√©cifique, comme envoyer un email, t√©l√©charger un fichier, ou interagir avec une base de donn√©es.  Ces nodes sont connect√©es entre elles pour former un flux de travail.  n8n prend en charge un large √©ventail de protocoles et de services via des int√©grations (connecteurs) pr√©d√©finies, et il est extensible gr√¢ce √† la cr√©ation de nodes personnalis√©es.\n\nLe fonctionnement se base sur un syst√®me d'ex√©cution asynchrone.  Les workflows ne sont pas ex√©cut√©s de mani√®re lin√©aire, mais plut√¥t de mani√®re parall√®le et asynchrone.  Chaque node s'ex√©cute de mani√®re ind√©pendante, ce qui permet une grande flexibilit√© et une meilleure gestion des erreurs.\n\n**Exemple concret : Automatisation de la gestion des leads**\n\nImaginez un workflow n8n qui collecte des leads depuis un formulaire sur un site web (node \"HTTP Request\").  Ces donn√©es sont ensuite envoy√©es √† une base de donn√©es (node \"Database\").  Si le lead correspond √† certains crit√®res, un email est envoy√© √† l'√©quipe de vente (node \"Email\").  En cas d'√©chec, une notification est envoy√©e via Slack (node \"Slack\").  Tout cela sans √©crire une seule ligne de code, en reliant simplement des nodes pr√©existantes.\n\n\n**Fonctionnement interne (simplifi√©):**\n\nn8n est une application Node.js qui utilise une base de donn√©es pour stocker les workflows et leurs ex√©cutions.  L'interface utilisateur est une application web qui permet de cr√©er, √©diter et ex√©cuter les workflows.  L'ex√©cution des nodes est g√©r√©e par un moteur d'ex√©cution interne qui utilise des workers pour traiter les t√¢ches en parall√®le.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Open-source et gratuit:**  n8n est open-source, ce qui permet une grande transparence et une communaut√© active pour le support et le d√©veloppement.  Il est gratuit √† utiliser, m√™me pour les d√©ploiements en production.\n* **Flexibilit√© et extensibilit√©:**  Le large choix de nodes et la possibilit√© de cr√©er des nodes personnalis√©es offrent une grande flexibilit√© pour automatiser presque toutes les t√¢ches.\n* **Interface utilisateur intuitive:** L'interface visuelle facilite la cr√©ation et la gestion des workflows, m√™me pour les utilisateurs sans exp√©rience en programmation.\n* **Scalabilit√©:** n8n peut √™tre d√©ploy√© sur diff√©rentes infrastructures, des machines locales aux solutions cloud, pour g√©rer des workflows de toutes tailles.\n* **Grande vari√©t√© d'int√©grations:**  Une vaste biblioth√®que de nodes permet de se connecter √† de nombreux services populaires.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage initiale (l√©g√®re):**  Bien que l'interface soit intuitive, la compr√©hension du fonctionnement des workflows et des nodes peut prendre un peu de temps au d√©but.\n* **D√©bogage complexe (pour workflows avanc√©s):** Le d√©bogage des workflows complexes peut √™tre difficile, surtout pour les utilisateurs non-familiers avec le concept de workflow asynchrone.\n* **Gestion de la s√©curit√©:**  La s√©curit√© d√©pend de la configuration du serveur et des int√©grations utilis√©es. Une mauvaise configuration peut exposer des donn√©es sensibles.\n* **D√©pendance √† la disponibilit√© d'internet:** n8n n√©cessite une connexion internet pour fonctionner correctement, car la plupart des nodes interagissent avec des services externes.\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "c1ff4ce7-6316-4843-bcbe-8ebfc06c2c34",
        "title": "protobuf",
        "description": "---\nid: 8ef8f16f-6955-49c9-858e-e5c803104b27\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nProtocol Buffers (protobuf) est un syst√®me de s√©rialisation de donn√©es open source d√©velopp√© par Google.  Il permet de d√©finir des structures de donn√©es (messages) dans un langage descriptif simple (`.proto`), puis de g√©n√©rer automatiquement du code dans diff√©rents langages (Java, C++, Python, Go, etc.) pour encoder et d√©coder ces structures.  Cela permet une communication efficace et interop√©rable entre diff√©rents syst√®mes.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nProtobuf d√©finit un langage de description d'interface (IDL) pour sp√©cifier les structures de donn√©es.  Un fichier `.proto` d√©crit les messages, contenant des champs de diff√©rents types (entier, cha√Æne de caract√®res, bool√©en, nombres √† virgule flottante, tableaux, structures imbriqu√©es, etc.).  Le compilateur Protobuf (`protoc`) lit ce fichier et g√©n√®re du code source pour le langage cible. Ce code fournit des fonctions pour:\n\n* **S√©rialiser (encoder):** Convertir une structure de donn√©es en un flux d'octets.  Ce flux est compact et efficace en termes d'espace m√©moire.\n* **D√©s√©rialiser (d√©coder):** Convertir un flux d'octets en une structure de donn√©es.\n\n**Exemple de fichier `.proto`:**\n\n```protobuf\nsyntax = \"proto3\";\n\nmessage Person {\n  string name = 1;\n  int32 id = 2;\n  string email = 3;\n}\n```\n\nCe fichier d√©finit un message `Person` avec trois champs : `name`, `id`, et `email`.  Apr√®s compilation, le code g√©n√©r√© fournira des classes ou des structures pour manipuler des objets `Person` et les encoder/d√©coder en octets.\n\n**Avantages de la s√©rialisation:**\n\n* **Efficacit√©:** Protobuf g√©n√®re des formats binaires compacts, plus petits et plus rapides √† traiter que les formats textuels comme le JSON ou le XML.\n* **Interop√©rabilit√©:** Le m√™me fichier `.proto` peut √™tre utilis√© pour g√©n√©rer du code dans diff√©rents langages, facilitant la communication entre des syst√®mes h√©t√©rog√®nes.\n* **√âvolutivit√©:**  Il est possible d'ajouter de nouveaux champs √† un message sans casser la compatibilit√© avec les anciens clients.  Le syst√®me g√®re les champs inconnus.\n* **Performances:** La s√©rialisation et la d√©s√©rialisation sont rapides et optimis√©es.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Efficacit√© et performance:**  Format compact et rapidit√© de s√©rialisation/d√©s√©rialisation.\n* **Interop√©rabilit√© multi-langage:**  Support d'un large √©ventail de langages de programmation.\n* **√âvolutivit√© et compatibilit√© ascendante:**  Ajout facile de nouveaux champs sans rupture de compatibilit√©.\n* **Bonne documentation et communaut√© active:**  Ressources et support disponibles.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** N√©cessite de comprendre le syst√®me de d√©finition de messages et l'utilisation du compilateur `protoc`.\n* **Format binaire non humainement lisible:**  Le format s√©rialis√© est binaire, rendant le d√©bogage plus difficile que pour les formats textuels.\n* **D√©pendance au compilateur:**  N√©cessite l'utilisation du compilateur `protoc` pour g√©n√©rer le code.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "3cba1234-4473-42ca-81cb-131e4e4bca73",
        "title": "Racine",
        "description": ""
    },
    {
        "id": "8b9b4ca8-2a9a-4af3-96cf-7aabd0fc88ea",
        "title": "Concept supprim√©",
        "description": ""
    },
    {
        "id": "a1786998-f5b9-49ba-95c3-fa9c14e40413",
        "title": "AWS Lambda",
        "description": "---\nid: 574373b1-97bf-4179-87b9-88dc8fc613cf\n---\n# Rapidement c'est quoi‚ùì\n\nAWS Lambda est un service [[Function as a Service (FaaS)]] d'[[AWS]].  Il permet d'ex√©cuter du code sans g√©rer d'infrastructure serveur.  Vous fournissez le code, et [[AWS]] s'occupe du reste.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAWS Lambda est un service de calcul sans serveur qui permet aux d√©veloppeurs d'ex√©cuter du code en r√©ponse √† des √©v√©nements sans provisionner ou g√©rer des serveurs.  Vous √©crivez votre code (fonctions) dans plusieurs langages support√©s ([[Node.js]], [[Python]], [[Java]], [[C#]], [[Go]], [[Ruby]], etc.), le d√©ployez sur [[AWS]], et Lambda s'occupe de l'ex√©cution, du scaling automatique et de la facturation uniquement en fonction de l'utilisation effective.  Chaque fonction est d√©clench√©e par un √©v√©nement, tel qu'une modification dans un [[Bucket S3]] , une requ√™te [[API Gateway]], une entr√©e dans une file [[SQS]], ou un √©v√®nement planifi√© avec [[CloudWatch Events]].\n\nLambda g√®re automatiquement le scaling : si plusieurs √©v√©nements se produisent simultan√©ment, Lambda lance plusieurs instances de votre fonction pour g√©rer la charge.  L'inverse est √©galement vrai : si aucune requ√™te n'est effectu√©e, aucune ressource n'est consomm√©e et vous ne payez rien.  La gestion des ressources (m√©moire, temps d'ex√©cution, etc.) est d√©finie lors de la configuration de la fonction.  Lambda propose √©galement des fonctionnalit√©s avanc√©es comme les versions, les alias, les couches (pour partager du code commun entre plusieurs fonctions) et l'int√©gration avec d'autres services [[AWS]].  Le monitoring et le logging sont int√©gr√©s via [[CloudWatch]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Sans serveur (Serverless):** Pas besoin de g√©rer d'infrastructure, ce qui r√©duit consid√©rablement le co√ªt et la complexit√©.\n* **Scaling automatique:** Lambda s'adapte automatiquement √† la demande, garantissant la disponibilit√© et la performance.\n* **Facturation √† l'utilisation:** Vous ne payez que pour le temps d'ex√©cution effectif de votre code.\n* **Int√©gration avec l'√©cosyst√®me [[AWS]]:**  S'int√®gre facilement avec de nombreux autres services [[AWS]], permettant de cr√©er des applications complexes et robustes.\n* **Langages multiples support√©s:** Large choix de langages de programmation pour d√©velopper vos fonctions.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Dur√©e d'ex√©cution limit√©e:**  Les fonctions Lambda ont une dur√©e d'ex√©cution maximale (variable selon la configuration).  Les t√¢ches longues doivent √™tre trait√©es diff√©remment (par exemple, en utilisant des files d'attente et des fonctions plus courtes).\n* **D√©bogage plus complexe:** Le d√©bogage peut √™tre plus difficile que dans une application traditionnelle, n√©cessitant des outils et des techniques sp√©cifiques.\n* **Cold starts:** La premi√®re ex√©cution d'une fonction peut prendre un peu plus de temps (cold start), ce qui peut affecter les performances pour les requ√™tes occasionnelles.\n* **Verrouillage fournisseur:**  Le code est ex√©cut√© sur l'infrastructure AWS, ce qui cr√©e une d√©pendance envers ce fournisseur.\n* **Gestion des √©tats:** La persistance des donn√©es entre les ex√©cutions de fonctions n√©cessite l'utilisation de services externes comme [[DynamoDB]].\n\n---\n# A quoi c'est li√© ? ü™¢\n\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "f9aee61a-9901-45a2-b522-c3dd3d9f0f52",
        "title": "Certification Java 17 - Acc√®s aux Bases de Donn√©es avec JDBC",
        "description": "---\nid: 8b4f3380-cc59-43fe-baca-4e83b06bb405\n---\n## **11.1. Connexion √† une base de donn√©es (`DriverManager`, `DataSource`)**\n\nJDBC (**Java Database Connectivity**) permet √† une application Java de se connecter √† une base de donn√©es.\n\n### **1. Chargement du driver JDBC**\n\nüìå **Depuis Java 6, le chargement est automatique si le driver est dans le classpath.**\n\n```java\nClass.forName(\"org.postgresql.Driver\"); // PostgreSQL\nClass.forName(\"com.mysql.cj.jdbc.Driver\"); // MySQL\n```\n\nüìå **Plus besoin de `Class.forName()` avec JDBC 4.0+.**\n\n---\n\n### **2. Connexion avec `DriverManager`**\n\n```java\nimport java.sql.*;\n\npublic class ConnexionJDBC {\n    public static void main(String[] args) {\n        String url = \"jdbc:mysql://localhost:3306/ma_base\";\n        String user = \"root\";\n        String password = \"password\";\n\n        try (Connection conn = DriverManager.getConnection(url, user, password)) {\n            System.out.println(\"Connexion r√©ussie !\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\nüìå **Utilisation d‚Äôun `try-with-resources` pour fermer automatiquement la connexion.**\n\n---\n\n### **3. Connexion avec `DataSource` (Meilleure Pratique)**\n\nüìå **`DataSource` permet une gestion optimis√©e des connexions.**\n\n```java\nimport javax.sql.DataSource;\nimport com.mysql.cj.jdbc.MysqlDataSource;\n\npublic class ConnexionDataSource {\n    public static void main(String[] args) throws Exception {\n        MysqlDataSource ds = new MysqlDataSource();\n        ds.setURL(\"jdbc:mysql://localhost:3306/ma_base\");\n        ds.setUser(\"root\");\n        ds.setPassword(\"password\");\n\n        try (Connection conn = ds.getConnection()) {\n            System.out.println(\"Connexion r√©ussie !\");\n        }\n    }\n}\n```\n\nüìå **Utilis√© dans les serveurs d‚Äôapplication avec un pool de connexions.**\n\n---\n\n## **11.2. Ex√©cution de requ√™tes (`Statement`, `PreparedStatement`, `CallableStatement`)**\n\n### **1. Requ√™te avec `Statement` (‚ö† Vuln√©rable aux injections SQL)**\n\n```java\ntry (Connection conn = DriverManager.getConnection(url, user, password);\n     Statement stmt = conn.createStatement()) {\n\n    ResultSet rs = stmt.executeQuery(\"SELECT * FROM utilisateurs\");\n\n    while (rs.next()) {\n        System.out.println(rs.getString(\"nom\"));\n    }\n}\n```\n\nüìå **‚ö† √âviter `Statement` pour les requ√™tes contenant des entr√©es utilisateur (risque d‚Äôinjection SQL).**\n\n---\n\n### **2. Requ√™te s√©curis√©e avec `PreparedStatement`**\n\n```java\nString sql = \"SELECT * FROM utilisateurs WHERE email = ?\";\ntry (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n    pstmt.setString(1, \"user@mail.com\");\n    ResultSet rs = pstmt.executeQuery();\n\n    while (rs.next()) {\n        System.out.println(rs.getString(\"nom\"));\n    }\n}\n```\n\nüìå **S√©curise la requ√™te en emp√™chant les injections SQL.**\n\n---\n\n### **3. Insertion avec `PreparedStatement`**\n\n```java\nString sql = \"INSERT INTO utilisateurs (nom, email) VALUES (?, ?)\";\ntry (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n    pstmt.setString(1, \"Alice\");\n    pstmt.setString(2, \"alice@mail.com\");\n    pstmt.executeUpdate(); // Ex√©cute l‚Äôinsertion\n}\n```\n\nüìå **`executeUpdate()` pour `INSERT`, `UPDATE`, `DELETE`.**\n\n---\n\n### **4. Appel d‚Äôune proc√©dure stock√©e avec `CallableStatement`**\n\n```java\nString sql = \"{call ajouter_utilisateur(?, ?)}\";\ntry (CallableStatement cstmt = conn.prepareCall(sql)) {\n    cstmt.setString(1, \"Alice\");\n    cstmt.setString(2, \"alice@mail.com\");\n    cstmt.execute();\n}\n```\n\nüìå **Utilis√© pour ex√©cuter des proc√©dures stock√©es SQL.**\n\n---\n\n## **11.3. Gestion des transactions (`commit`, `rollback`)**\n\nPar d√©faut, **chaque requ√™te est valid√©e (`commit`) automatiquement**.  \nüìå **Pour g√©rer manuellement une transaction, on d√©sactive l‚Äôauto-commit.**\n\n---\n\n### **1. D√©but d‚Äôune transaction (`setAutoCommit(false)`)**\n\n```java\ntry (Connection conn = DriverManager.getConnection(url, user, password)) {\n    conn.setAutoCommit(false); // D√©sactive l‚Äôauto-commit\n\n    try (PreparedStatement pstmt1 = conn.prepareStatement(\"INSERT INTO comptes VALUES (?, ?)\");\n         PreparedStatement pstmt2 = conn.prepareStatement(\"INSERT INTO transactions VALUES (?, ?)\")) {\n\n        pstmt1.setInt(1, 1);\n        pstmt1.setDouble(2, 1000.00);\n        pstmt1.executeUpdate();\n\n        pstmt2.setInt(1, 1);\n        pstmt2.setDouble(2, -500.00);\n        pstmt2.executeUpdate();\n\n        conn.commit(); // Valide la transaction\n    } catch (SQLException e) {\n        conn.rollback(); // Annule toutes les op√©rations\n        e.printStackTrace();\n    }\n}\n```\n\nüìå **Si une erreur survient, `rollback()` annule les modifications.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Connexion JDBC : `DriverManager` (basique), `DataSource` (optimis√©, recommand√©).**  \n‚úÖ **Ex√©cution de requ√™tes :**\n\n- `Statement` (‚ö† √† √©viter pour les entr√©es utilisateur).\n- `PreparedStatement` (s√©curis√© contre les injections SQL).\n- `CallableStatement` (appelle une proc√©dure stock√©e).  \n    ‚úÖ **Gestion des transactions : `commit`, `rollback`, `setAutoCommit(false)`.**\n"
    },
    {
        "id": "8e5aa410-7105-45e7-b5bc-f1300195e660",
        "title": "Analog.js",
        "description": "---\nid: 4775911f-b142-4a2e-8954-bb74d1475de6\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nAnalogJs est un [[m√©ta-framework]] pour [[Angular]] qui ajoute des fonctionnalit√©s comme le routage automatique, le rendu c√¥t√© serveur, et la g√©n√©ration de sites statiques. Il simplifie le d√©veloppement en int√©grant des outils modernes comme [[Vite]] et [[Vitest]].\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAnalogJs √©tend [[Angular]] avec des fonctionnalit√©s pratiques :\n\n- **Routage bas√© sur le syst√®me de fichiers** : Les routes sont automatiquement g√©n√©r√©es √† partir de la structure des fichiers.\n- **Rendu c√¥t√© serveur ([[Server Side Rendering (SSR)]])** et **g√©n√©ration de sites statiques** ([[Server Side Generation (SSG)]]) : Permet d‚Äôam√©liorer le SEO et la vitesse de chargement.\n- **Support Markdown** : Permet d'utiliser des fichiers Markdown comme contenu.\n- **Routes API int√©gr√©es** : Cr√©e facilement des routes API dans la m√™me application.\n- **Structure simplifi√©e des composants** : Un seul fichier par composant, contrairement √† l'approche Angular traditionnelle avec plusieurs fichiers.\n\nAnalogJs utilise Vite pour la compilation rapide et Vitest pour les tests, offrant une exp√©rience moderne et rapide.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplification du routage** : Gr√¢ce au routage bas√© sur le syst√®me de fichiers.\n- **Rendu c√¥t√© serveur et sites statiques** : Am√©liore la performance et le SEO.\n- **Support Markdown** : Id√©al pour cr√©er du contenu rapidement.\n- **Structure de composants simplifi√©e** : Un fichier par composant pour plus de clart√©.\n- **Int√©gration de [[Vite]] et [[Vitest]]** : D√©veloppement rapide et tests efficaces.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance √† [[Angular]]** : N√©cessite [[Angular]], ce qui peut √™tre contraignant.\n- **Moins mature** : Moins de documentation et de communaut√© par rapport √† [[Nuxt.js]] ou [[Next.js]].\n- **Courbe d'apprentissage** : Complexe pour les d√©butants Angular ou SSR.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[JavaScript]] [[Typescript]]"
    },
    {
        "id": "dd0c0816-84ee-4e93-991a-8f8964cb56ec",
        "title": "Anglais - mot et expression",
        "description": "---\nid: 7d823355-dc92-4f2a-ae2c-e655a70688b1\n---\ngibberish: gibberish\nYou are talking gibberish: Tu dis n'importe quoi\ngrasshopper: sauterelle\nkneehigh to a grasshopper: haut comme trois pomme"
    },
    {
        "id": "56e1c640-ad12-4cc9-8546-43e7a58f1e9a",
        "title": "Annotation (java)",
        "description": "---\nid: 3822ed8e-7f6c-4ff8-a60e-b547afc6523d\n---\n# Rapidement c'est quoi‚ùì\n\nLes annotations [[Java]] sont des m√©tadonn√©es qui fournissent des informations suppl√©mentaires sur le code sans affecter son ex√©cution. Elles sont utilis√©es pour annoter des classes, m√©thodes, champs, etc.,  guidant le compilateur, les outils d'ex√©cution ou d'autres processus, comme [[Aspect Oriented Programming.md]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nEn [[Java]], les annotations sont des balises plac√©es avant les √©l√©ments de code (classes, m√©thodes, champs, etc.). Elles sont d√©finies √† l'aide de l'annotation `@interface`.  Elles ne modifient pas le comportement du code en lui-m√™me, mais fournissent des informations contextuelles pour diff√©rents outils et processus.\n\n**Structure d'une annotation:**\n\nUne annotation est d√©finie avec le mot cl√© `@interface` suivi du nom de l'annotation.  Elle peut contenir des √©l√©ments (attributs) avec des valeurs par d√©faut ou non.  Par exemple :\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface MyAnnotation {\n    String value() default \"default value\";\n    int number() default 0;\n}\n```\n\nDans cet exemple :\n\n* `@Retention(RetentionPolicy.RUNTIME)` sp√©cifie que l'annotation sera disponible au runtime (l'ex√©cution du programme).  Il existe d'autres valeurs possibles: `SOURCE` (disponible uniquement √† la compilation) et `CLASS` (disponible √† la compilation et au chargement de la classe). Il faut savoir qu'il y a tr√®s peu d'int√©r√™t d'utiliser autres chose de RUNTIME car c'est la seule valeur qui conserve l'annotation au runtime, et qui permet donc de faire des traitements.\n* `@Target(ElementType.METHOD)` indique que cette annotation ne peut √™tre appliqu√©e qu'aux m√©thodes.  D'autres valeurs possibles pour `ElementType` incluent `TYPE`, `FIELD`, `CONSTRUCTOR`, `PARAMETER`, etc.\n* `String value() default \"default value\";` d√©finit un attribut `value` de type String avec une valeur par d√©faut.\n* `int number() default 0;` d√©finit un attribut `number` de type int avec une valeur par d√©faut.\n\nL'annotation est ensuite utilis√©e dans le code ainsi :\n\n```java\n@MyAnnotation(value = \"hello\", number = 5)\npublic void myMethod() {\n  // ...\n}\n```\n\nLe compilateur, les outils (frameworks, IDEs) ou le code au runtime peuvent alors interpr√©ter ces informations pour effectuer diff√©rentes actions. Par exemple, un framework pourrait utiliser une annotation pour injecter des d√©pendances ou un outil de test pour identifier les m√©thodes √† tester.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **M√©taprogrammation:** Permet d'ajouter des informations au code sans le modifier directement, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **R√©duction de la redondance:**  Evite la duplication de code en centralisant les informations dans les annotations.\n* **Extensibilit√©:** Facilite l'ajout de fonctionnalit√©s sans modifier le code source existant.\n* **Framework-agnostique:**  Les annotations peuvent √™tre utilis√©es par diff√©rents frameworks et outils.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:** Une sur-utilisation des annotations peut rendre le code difficile √† comprendre.\n* **D√©pendances:**  Le code qui utilise les annotations peut d√©pendre de la pr√©sence de certains outils ou frameworks.\n* **Performances:**  Le traitement des annotations au runtime peut avoir un impact sur les performances, bien que g√©n√©ralement n√©gligeable.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "744b0bb3-e2f9-44bd-badb-57383ee57ed2",
        "title": "Ansible Vault",
        "description": "---\nid: ae62d225-067f-4a01-9d22-52fdabf93106\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nAnsible Vault est un outil d'[[Ansible]] qui permet de chiffrer et prot√©ger des donn√©es sensibles dans des fichiers, comme des mots de passe ou des cl√©s API, afin de les utiliser dans des playbooks Ansible sans exposer ces informations en texte clair\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAnsible Vault chiffre des fichiers ou des cha√Ænes de caract√®res, les rendant illisibles sans un mot de passe sp√©cifique. Les principales commandes sont :\n\n- **`ansible-vault create`** : Cr√©e un fichier chiffr√© √† partir de z√©ro.\n- **`ansible-vault encrypt`** : Chiffre un fichier existant.\n- **`ansible-vault decrypt`** : D√©chiffre un fichier pour le rendre lisible.\n- **`ansible-vault edit`** : Permet de modifier un fichier chiffr√© sans le d√©chiffrer manuellement.\n- **`ansible-vault encrypt_string`** : Chiffre une cha√Æne de caract√®res (ex. un mot de passe) pour l'inclure dans un fichier ou un playbook.\n\nIl est aussi possible de g√©rer plusieurs fichiers Vault avec l'option **`-vault-id`**, permettant de sp√©cifier diff√©rents mots de passe pour diff√©rents environnements. L'option **`-ask-vault-pass`** permet de saisir le mot de passe manuellement √† l'ex√©cution.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **S√©curisation des donn√©es sensibles** : Prot√®ge efficacement les informations sensibles en les chiffrant.\n- **Facilit√© d'int√©gration avec [[Ansible]]** : Fonctionne de mani√®re fluide avec les playbooks Ansible.\n- **Prise en charge de plusieurs fichiers Vault** : Permet de g√©rer diff√©rents environnements de mani√®re s√©curis√©e avec **`-vault-id`**.\n- **Chiffrement granulaire** : Possibilit√© de chiffrer uniquement des valeurs sp√©cifiques avec **`encrypt_string`**.\n- **Interface simple** : Utilisation en ligne de commande intuitive pour cr√©er, modifier ou d√©chiffrer des fichiers.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Gestion des mots de passe** : Si le mot de passe Vault est perdu ou compromis, l'acc√®s aux donn√©es chiffr√©es devient impossible.\n- **D√©pendance aux mots de passe** : Chaque fichier chiffr√© n√©cessite un mot de passe pour y acc√©der, ce qui peut devenir contraignant dans des environnements complexes.\n- **Pas de solution native pour le partage s√©curis√©** : Le partage des fichiers Vault entre plusieurs utilisateurs n√©cessite une gestion manuelle des mots de passe, ce qui peut √™tre source d‚Äôerreurs.\n- **Performance** : Bien que les fichiers chiffr√©s soient l√©gers, l'utilisation r√©p√©t√©e de commandes de chiffrement/d√©chiffrement peut affecter les performances dans des environnements de grande √©chelle.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Python]] [[MOC_DevSecOps]]"
    },
    {
        "id": "d5cddd3c-a911-4b5f-9b0a-1ee9e69b5ae6",
        "title": "Apache Apisix",
        "description": "---\nid: 82d7deb1-0645-4023-8a4c-7c1e96d022f5\n---\n# Rapidement c'est quoi‚ùì\n\nApache APISIX est une [[API Gateway]] open-source, l√©g√®re et performante, con√ßue pour les environnements cloud natifs.  Elle permet de g√©rer, router et s√©curiser le trafic vers vos [[Micros services]] et APIs.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache APISIX est une passerelle d'API dynamique et haute performance, √©crite en [[Lua]] et bas√©e sur [[Nginx]].  Elle se distingue par son architecture enti√®rement bas√©e sur le plugin, ce qui permet une extensibilit√© et une personnalisation exceptionnelles.  Au lieu de reconfigurer le serveur √† chaque changement, APISIX utilise une architecture de donn√©es dynamique,  mettant √† jour ses routes et ses configurations en temps r√©el sans n√©cessiter de red√©marrage.\n\nSes fonctionnalit√©s cl√©s incluent :\n\n* **Routage dynamique et gestion des routes:**  APISIX permet de d√©finir des routes pour diriger le trafic vers diff√©rents services backend en fonction de crit√®res comme l'h√¥te, l'URL, les en-t√™tes HTTP, etc.  Ces routes peuvent √™tre modifi√©es dynamiquement sans interruption de service.\n* **Gestion de la s√©curit√©:**  Int√®gre des m√©canismes de s√©curit√© robustes tels que l'authentification, l'autorisation (via des plugins), le WAF (Web Application Firewall) et la protection contre les DDoS.\n* **Gestion du trafic:**  Offre des fonctionnalit√©s de gestion du trafic avanc√©es comme le [[load balancing]], le [[circuit breaker]] et la limitation de d√©bit.\n* **Plugins extensibles:**  Son architecture plug-in permet d'√©tendre ses fonctionnalit√©s √† l'infini.  Des plugins sont disponibles pour la gestion des logs, la surveillance, l'int√©gration avec des services de monitoring, etc.\n* **Gestion des m√©tadonn√©es:**  Permet de stocker et de g√©rer des m√©tadonn√©es associ√©es aux routes et aux services.\n* **Compatibilit√© [[Kubernetes]]:**  APISIX s'int√®gre bien avec Kubernetes et d'autres orchestrateurs de conteneurs.\n\nContrairement aux passerelles API traditionnelles qui n√©cessitent des red√©marrages pour mettre √† jour la configuration, APISIX offre une gestion dynamique, permettant des mises √† jour en temps r√©el et une haute disponibilit√©.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Haute performance et faible latence:**  APISIX est connu pour sa performance exceptionnelle.\n* **Extensibilit√© gr√¢ce √† l'architecture plug-in:**  Permet d'ajouter facilement de nouvelles fonctionnalit√©s.\n* **Gestion dynamique de la configuration:**  Pas de temps d'arr√™t lors des mises √† jour.\n* **Open-source et communaut√© active:**  B√©n√©ficie d'un support communautaire important.\n* **Int√©gration avec [[Kubernetes]] et d'autres outils cloud natifs.**\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage potentiellement raide:**  La ma√Ætrise compl√®te de l'utilisation des plugins peut demander un certain temps.\n* **D√©pendance √† [[Lua]]:**  N√©cessite une certaine familiarit√© avec le langage Lua pour d√©velopper des plugins personnalis√©s.\n* **La documentation peut parfois manquer de clart√© pour certains aspects avanc√©s.**\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "eb8de89e-4a18-43d3-8bd0-33475992f124",
        "title": "Apache Karaf (OSGi)",
        "description": "---\nid: ef4589e3-be7d-49b4-bb8f-550ea8a049d0\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùìblabla\n\nKaraf est un conteneur d'application l√©ger bas√© sur [[Open Service Gateway initiative (OSGi)]], permettant de d√©ployer, g√©rer et configurer des applications [[Open Service Gateway initiative (OSGi)]] de mani√®re simplifi√©e, avec des fonctionnalit√©s avanc√©es comme la gestion dynamique des configurations, le d√©ploiement √† chaud et l'int√©gration avec divers outils.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache Karaf est un conteneur d'application permettant de g√©rer des applications [[Open Service Gateway initiative (OSGi)]]. Il offre plusieurs fonctionnalit√©s suppl√©mentaires par rapport aux autres impl√©mentations [[Open Service Gateway initiative (OSGi)]], telles que :\n\n- **Console Interactive** : Une interface en ligne de commande pour g√©rer les bundles, services et configurations.\n- **Karaf Features** : Permet l'installation de groupes de bundles et configurations d'un coup.\n- **Support Maven** : D√©ploiement direct de bundles depuis un d√©p√¥t Maven.\n- **Blueprints ([[Apache Aries]])** : Configuration d√©clarative des services [[Open Service Gateway initiative (OSGi)]] via des fichiers XML.\n- **Gestion Dynamique des Configurations** : Permet de modifier les configurations en direct sans red√©marrer l'application.\n- **Hot Deployment** : D√©ploiement et mise √† jour des bundles sans red√©marrage du serveur.\n- **Int√©gration avec des frameworks** : Int√©gration facile avec des outils comme [[Apache Camel]], [[ActiveMQ]] et [[CXF]] pour les services d'int√©gration, la messagerie et les services web.\n- **Gestion de Clusters** : Avec [[Karaf Cellar]], permet de g√©rer et synchroniser des clusters [[Open Service Gateway initiative (OSGi)]].\n- **S√©curisation des configurations** : [[Karaf Vault]] prot√®ge les informations sensibles dans les fichiers de configuration.\n- **[[JMX]] et Monitoring** : Surveillance des services via l'int√©gration avec [[JMX]] et [[Jolokia]].\n- **Commandes Personnalis√©es** : Cr√©ation de commandes personnalis√©es pour automatiser les t√¢ches courantes.\n- **Support [[Java EE]] et [[Micros services]]** : Permet de d√©ployer des applications [[Java EE]] et de supporter des architectures [[Micros services]] gr√¢ce √† son mod√®le modulaire.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Console interactive** : Facilit√© de gestion des applications via une interface simple.\n- **Hot Deployment** : Mise √† jour des applications sans perturber le service, id√©al pour des environnements de production.\n- **Int√©gration avec des outils tiers** : Connexions pr√™tes √† l'emploi avec des technologies comme [[Apache Camel]],[[ ActiveMQ]], et [[CXF]].\n- **Gestion dynamique des configurations** : Modifications √† la vol√©e sans red√©marrage n√©cessaire, simplifiant l'administration.\n- **Blueprints** : Approche d√©clarative facilitant la gestion des services [[Open Service Gateway initiative (OSGi)]], similaire √† [[Spring Framework]].\n- **Support de [[Java EE]] et des [[Micros services]]** : Permet de d√©ployer des applications de grande √©chelle de mani√®re modulaire.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© pour les d√©butants** : L'usage d'[[Open Service Gateway initiative (OSGi)]] et de Karaf peut √™tre d√©routant pour les nouveaux utilisateurs.\n- **Configuration initiale** : La configuration des features et des bundles peut √™tre complexe et n√©cessite une bonne ma√Ætrise de l'environnement.\n- **Performance** : L'usage intensif de bundles et de services peut parfois entra√Æner une surcharge dans des applications tr√®s petites ou simples.\n- **D√©pendance au mod√®le OSGi** : Certains d√©veloppeurs pr√©f√©reront des alternatives plus simples √† OSGi pour des applications ne n√©cessitant pas un mod√®le aussi modulaire.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Java]]"
    },
    {
        "id": "75728b98-3ac9-4c30-b578-92cf0f33c975",
        "title": "Apache Lucene",
        "description": "---\nid: 73e4d839-b181-4a74-b4d5-439c03d44a43\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nApache Lucene est un framework [[Java]] destin√© √† l'indexation et √† la recherche de texte, permettant de g√©rer efficacement de grandes quantit√©s de donn√©es pour cr√©er des moteurs de recherche performants.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nApache Lucene fournit des outils pour indexer des documents et effectuer des recherches rapides sur des grandes bases de donn√©es textuelles. Il permet de cr√©er des moteurs de recherche en offrant des fonctionnalit√©s comme :\n\n- **Indexation** : Cr√©ation d'index invers√©s pour une recherche rapide.\n- **Recherche textuelle** : Recherche bas√©e sur des mots-cl√©s, phrases, ou expressions r√©guli√®res.\n- **Performance** : Optimisation des recherches avec des structures de donn√©es adapt√©es. Des outils comme **[[Elasticsearch]]** et **[[Apache Solr]]** utilisent Lucene pour faciliter l'int√©gration et l'utilisation dans des environnements de production √† grande √©chelle.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Haute performance** : Tr√®s rapide pour la recherche et l'indexation sur de grandes quantit√©s de donn√©es.\n- **Flexibilit√©** : Offre des options avanc√©es pour affiner les recherches (poids, synonymes, requ√™tes bool√©ennes).\n- **√âcosyst√®me riche** : Utilis√© par des outils comme [[Elasticsearch]] et [[Solr]], ce qui le rend encore plus accessible pour des cas d‚Äôusage complexes.\n- **Support de plusieurs formats** : Peut indexer des fichiers texte, XML, JSON, etc.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© d'int√©gration** : Peut √™tre difficile √† configurer et √† int√©grer directement dans des projets sans outils suppl√©mentaires.\n- **Consommation m√©moire** : L'indexation et la recherche sur de tr√®s grandes bases de donn√©es peuvent n√©cessiter des ressources importantes.\n- **Pas de GUI natif** : Ne propose pas d'interface graphique de gestion, n√©cessitant souvent des outils externes comme Solr ou Elasticsearch pour faciliter l'utilisation.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Java]]"
    },
    {
        "id": "555847cc-90e9-4281-9f5f-ca65cb84ef39",
        "title": "ArgoCD",
        "description": "---\nid: fc23560f-daa5-461d-8a6b-7215c2cf2657\n---\n# Rapidement c'est quoi‚ùì\n\nArgo CD est un outil de gestion de configuration [[GitOps]] pour [[Kubernetes]].  Il synchronise l'√©tat d√©clar√© de votre infrastructure dans un d√©p√¥t [[Git]] avec l'√©tat r√©el de votre cluster [[Kubernetes]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nArgo CD est un syst√®me de d√©ploiement et de gestion continue bas√© sur le principe [[GitOps]].  Il fonctionne en surveillant un d√©p√¥t [[Git]] sp√©cifi√© pour les modifications apport√©es √† des manifestes [[Kubernetes]] .  Lorsqu'une modification est d√©tect√©e, Argo CD compare l'√©tat souhait√© (d√©fini dans le d√©p√¥t Git) √† l'√©tat actuel du cluster [[Kubernetes]].  Il effectue ensuite les actions n√©cessaires pour synchroniser ces deux √©tats, en appliquant les modifications, cr√©ant, mettant √† jour ou supprimant les ressources [[Kubernetes]].  Cela permet un d√©ploiement automatis√©, fiable et tra√ßable des applications sur [[Kubernetes]].\n\nArgo CD utilise un \"Declarative Configuration\" : l'√©tat souhait√© du cluster est enti√®rement d√©fini dans des fichiers de configuration versionn√©s dans un d√©p√¥t [[Git]] (g√©n√©ralement avec un syst√®me de branchement [[Git]] pour g√©rer les d√©ploiements et les rollbacks).  Cela facilite le suivi des changements, la collaboration et l'auditabilit√©.  La visualisation de l'√©tat du d√©ploiement, ainsi que l'historique des modifications et des √©ventuels √©checs, est un aspect central de la plateforme.\n\nIl ne se limite pas aux manifestes [[Kubernetes]] ; il peut g√©rer d'autres ressources en utilisant des m√©canismes d'extensions (comme les applications [[Helm]]).  L'automatisation est pouss√©e, avec la possibilit√© de configurer des notifications et des alertes lors des √©v√©nements importants.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* [[**GitOps]]:**  Adopte une approche [[GitOps]], offrant tous les avantages de la gestion de version, de la collaboration et de l'auditabilit√©.\n* **Automatisation:**  Automatise compl√®tement le processus de d√©ploiement et de gestion des applications [[Kubernetes]].\n* **Observabilit√©:**  Fournit une interface utilisateur pour surveiller l'√©tat des d√©ploiements et l'historique des changements.\n* **Fiabilit√©:**  Minimise les risques d'erreurs manuelles et assure la coh√©rence entre l'√©tat souhait√© et l'√©tat r√©el.\n* **Rollbacks faciles:**  Permet de revenir facilement √† des versions pr√©c√©dentes gr√¢ce √† l'historique [[Git]].\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© initiale:**  La configuration et l'int√©gration initiale peuvent √™tre complexes pour les utilisateurs non familiers avec [[Kubernetes]] et [[GitOps]].\n* **D√©pendance √† Git:**  Une d√©pendance totale √† un syst√®me de gestion de versions [[Git]] est n√©cessaire.\n* **Gestion des secrets:**  La gestion des secrets n√©cessite une configuration suppl√©mentaire et une int√©gration avec des solutions de gestion des secrets.\n* **Surveillance accrue n√©cessaire:**  M√™me avec l'automatisation, la surveillance du syst√®me reste cruciale pour identifier et r√©soudre les probl√®mes.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "0e691bd0-f951-4184-b231-57171dea0300",
        "title": "Aspect Oriented Programming (AOP)",
        "description": "---\nid: 648c597b-2bb8-47b8-8dbb-1ea43bf23d4c\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nL'Aspect Oriented Programming (AOP) est une technique de programmation qui permet de s√©parer les pr√©occupations transversales (cross-cutting concerns) du code principal.  Elle vise √† am√©liorer la modularit√© et la maintenabilit√© du code en regroupant des fonctionnalit√©s qui affectent plusieurs parties du programme, mais qui ne sont pas directement li√©es √† la logique m√©tier principale.  Imaginez des aspects comme la journalisation, la s√©curit√© ou la gestion des transactions, qui traversent plusieurs modules.  AOP permet de les g√©rer s√©par√©ment.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAOP introduit le concept d'**aspects**, qui sont des modules contenant du code qui s'ex√©cute √† des points sp√©cifiques du programme, appel√©s **points de jonction** (join points). Ces points de jonction sont g√©n√©ralement des √©v√©nements tels que l'appel d'une m√©thode, la cr√©ation d'un objet ou l'ex√©cution d'une exception.\n\nUn aspect est d√©fini par un ensemble de points de jonction et d'**avis** (advices). Un avis est un bloc de code qui s'ex√©cute avant, apr√®s ou autour d'un point de jonction.  On peut ainsi ajouter des fonctionnalit√©s sans modifier le code principal.\n\n**Exemple concret ([[Java]] avec [[Spring AOP]]):**\n\nImaginons une m√©thode `processOrder()` qui g√®re le traitement d'une commande.  On veut ajouter une journalisation avant et apr√®s son ex√©cution.  Avec AOP, on peut cr√©er un aspect sans modifier `processOrder()` :\n\n```java\n@Aspect\npublic class LoggingAspect {\n\n    @Before(\"execution(* com.example.OrderService.processOrder(..))\")\n    public void beforeProcessOrder(JoinPoint joinPoint) {\n        System.out.println(\"Avant traitement de la commande: \" + joinPoint.getSignature());\n    }\n\n    @After(\"execution(* com.example.OrderService.processOrder(..))\")\n    public void afterProcessOrder(JoinPoint joinPoint) {\n        System.out.println(\"Apr√®s traitement de la commande: \" + joinPoint.getSignature());\n    }\n}\n```\n\nCe code utilise Spring AOP.  `@Aspect` indique qu'il s'agit d'un aspect.  `@Before` et `@After` d√©finissent les avis qui s'ex√©cutent avant et apr√®s l'ex√©cution de `processOrder()`.  `execution(* com.example.OrderService.processOrder(..))` est un pointcut (expression qui d√©finit les points de jonction).\n\nL'impl√©mentation d'AOP varie selon les langages et les frameworks.  Certains langages ont des fonctionnalit√©s int√©gr√©es, tandis que d'autres utilisent des frameworks sp√©cifiques ([[Spring AOP]] en [[Java]], AspectJ, etc.).  Le m√©canisme sous-jacent implique souvent la modification du code bytecode (transformation du code compil√©) pour injecter le code des aspects aux points de jonction.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Modularit√© et maintenabilit√©:** S√©pare les pr√©occupations transversales du code principal, facilitant la maintenance et la compr√©hension du code.\n- **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rents modules.\n- **R√©duction de la duplication de code:** √âvite la redondance de code pour des fonctionnalit√©s transversales.\n- **Am√©lioration de la lisibilit√©:** Le code principal reste focalis√© sur la logique m√©tier.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Complexit√©:**  AOP peut introduire une complexit√© suppl√©mentaire, surtout pour des projets de petite taille.  La compr√©hension du m√©canisme et des points de jonction peut n√©cessiter une courbe d'apprentissage.\n- **D√©bogage:** Le d√©bogage peut √™tre plus difficile car le code est dispers√© entre les aspects et le code principal.\n- **Performances:**  L'ajout d'aspects peut avoir un impact l√©ger sur les performances, bien que souvent n√©gligeable.\n- **Difficult√© de test:** Tester les aspects isol√©ment peut √™tre complexe.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n\n"
    },
    {
        "id": "d7d701db-d6e0-42c9-8931-bdada3b40dda",
        "title": "AspectJ",
        "description": "---\nid: 0a9b351a-7625-4e02-a252-3dff5766d3e2\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nAspectJ est une extension du langage [[Java]] qui permet la [[Aspect Oriented Programming (AOP)]].  Il offre un moyen de modulariser les pr√©occupations transversales (cross-cutting concerns) comme la journalisation, la gestion des transactions, ou la s√©curit√©, en les s√©parant du code principal de l'application.  Cela am√©liore la lisibilit√©, la maintenabilit√© et la r√©utilisabilit√© du code.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAspectJ permet d'ajouter du code (appel√© *aspects*) √† des points sp√©cifiques dans l'ex√©cution d'un programme [[Java]], sans modifier le code source existant.  Ces points sont d√©finis par des *pointcuts*, qui sont des expressions qui s√©lectionnent des joint points (join points).  Un joint point repr√©sente un point d'ex√©cution dans le programme, comme l'appel d'une m√©thode, la cr√©ation d'un objet, ou le lancement d'une exception.\n\nLes aspects sont d√©finis dans des fichiers s√©par√©s et contiennent des *advice*, qui sont des blocs de code ex√©cut√©s avant, apr√®s, ou autour d'un joint point s√©lectionn√© par le pointcut.  AspectJ utilise un processus de compilation s√©par√© pour tisser (weave) les aspects dans le code Java.\n\n**Exemple:** Imaginons que l'on veuille logger chaque appel de m√©thode d'une classe `UserService`.  Avec AspectJ, on pourrait d√©finir un aspect comme suit :\n\n```java\npublic aspect UserServiceLogger {\n    pointcut logMethodCall(): call(* com.example.UserService.*(..));\n\n    before(): logMethodCall() {\n        System.out.println(\"Appel de m√©thode : \" + thisJoinPoint.getSignature());\n    }\n}\n```\n\nCe code d√©finit un pointcut `logMethodCall()` qui s√©lectionne tous les appels de m√©thode de la classe `com.example.UserService`.  L'advice `before()` est ex√©cut√© avant chaque appel de m√©thode s√©lectionn√©, et affiche un message de log dans la console.  `thisJoinPoint` est une variable sp√©ciale qui fournit des informations sur le joint point courant.\n\nAspectJ supporte plusieurs types d'advice : `before`, `after`, `after returning`, `after throwing`, et `around`.  L'advice `around` permet de contr√¥ler enti√®rement l'ex√©cution d'un joint point.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **S√©paration des pr√©occupations:** Am√©liore la modularit√© et la lisibilit√© du code en s√©parant les pr√©occupations transversales du code principal.\n* **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application ou m√™me dans d'autres applications.\n* **Maintenance simplifi√©e:** Les modifications des pr√©occupations transversales n'impliquent pas de modifier le code principal.\n* **Aspect non invasif:**  On peut ajouter des fonctionnalit√©s sans modifier le code source existant.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** La programmation orient√©e aspect peut avoir une courbe d'apprentissage raide, surtout pour les d√©veloppeurs qui ne sont pas familiers avec ce paradigme.\n* **D√©bogage:** Le d√©bogage peut √™tre plus complexe que dans le code [[Java]] standard, car il faut comprendre l'interaction entre les aspects et le code principal.\n* **Performance:** L'ajout d'aspects peut avoir un impact sur les performances, bien que cela soit g√©n√©ralement n√©gligeable.\n* **Complexit√© potentielle:**  Une mauvaise utilisation des aspects peut conduire √† un code plus complexe et difficile √† maintenir.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "314398fc-a56e-435e-b0bd-8438fd066367",
        "title": "Astro Starlight",
        "description": "---\nid: 3076a9fe-0aeb-4998-b3f7-43f4cb759043\n---\n# Rapidement c'est quoi‚ùì\n\nAstro Starlight est un g√©n√©rateur de sites web statiques, sp√©cifiquement con√ßu pour cr√©er des documentations, similaire √† [[VitePress]] ou [[Docusaurus]].  Il utilise [[Astro]], un framework de sites web rapides et performants.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAstro Starlight est un th√®me (ou un ensemble de composants et de configurations) pour le framework [[Astro]]. Il fournit une structure de base et des composants pr√©-construits pour faciliter la cr√©ation de sites de documentation.  Contrairement √† une solution comme [[VitePress]] qui est une application compl√®te, Starlight se base sur la flexibilit√© d'[[Astro]], permettant une plus grande personnalisation tout en conservant une structure claire pour la documentation.  Il g√®re typiquement la navigation, la mise en forme du code, la recherche et d'autres fonctionnalit√©s courantes des sites de documentation.  On √©crit le contenu de la documentation g√©n√©ralement en [[Markdown]], qui est ensuite trait√© par [[Astro]] pour g√©n√©rer le site web statique final.  Cela permet un workflow rapide, une mise √† jour facile et un excellent SEO.  La performance est un point fort gr√¢ce √† l'utilisation d'[[Astro]], qui est connu pour g√©n√©rer des sites l√©gers et rapides √† charger.  L'utilisateur final a la possibilit√© de personnaliser profond√©ment le th√®me en modifiant les fichiers de configuration et les composants int√©gr√©s.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance:**  Gr√¢ce √† [[Astro]], les sites g√©n√©r√©s sont rapides et l√©gers.\n* **Personnalisation:**  Offre une grande flexibilit√© pour adapter le th√®me √† ses propres besoins et design.\n* **Bas√© sur Astro:** B√©n√©ficie de l'√©cosyst√®me et des avantages d'[[Astro]] (performance, simplicit√©).\n* **Int√©gration [[Markdown]]:**  Simple et efficace pour la cr√©ation du contenu.\n* **Structure claire:**  Fournit une base solide et bien organis√©e pour la documentation.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Potentiellement plus complexe √† mettre en place que [[VitePress]]:**  N√©cessite une compr√©hension de base d'[[Astro]].\n* **Moins de fonctionnalit√©s \"out-of-the-box\":** Par rapport √† une solution plus int√©gr√©e comme [[VitePress]], il faut potentiellement plus de configuration pour obtenir des fonctionnalit√©s avanc√©es.\n* **D√©pendance √† [[Astro]]:**  La connaissance d'[[Astro]] est n√©cessaire pour une utilisation et personnalisation efficace.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "5f1e2ec9-364e-4ce4-9afe-b92ff447af3f",
        "title": "Azure Active Directory",
        "description": "---\nid: 90178cba-c2e7-4de7-a92f-4d570dc3b732\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nAzure Active Directory (Azure AD) est le service d'annuaire cloud de Microsoft. Il fournit une identit√© et une [[Identify Access Manager (IAM)]] pour les applications et les ressources cloud, permettant l'authentification et l'autorisation des utilisateurs et des applications.  Il peut √©galement √™tre int√©gr√© avec des annuaires locaux (via Azure AD Connect).\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nAzure AD est un annuaire bas√© sur le cloud qui g√®re les identit√©s d'utilisateurs et d'applications.  Il permet :\n\n* **Authentification unique (SSO):**  Les utilisateurs peuvent acc√©der √† plusieurs applications avec les m√™mes identifiants.\n* **Gestion des acc√®s bas√©e sur les r√¥les [[Role Based Access Control (RBAC)]]:** Contr√¥le fin des permissions pour les utilisateurs et les groupes.\n* **Gestion des identit√©s:** Cr√©ation, modification et suppression de comptes utilisateurs et groupes.\n* **Int√©gration avec des applications SaaS:**  Acc√®s simple aux applications cloud bas√©es sur le cloud.\n* **Int√©gration avec des applications locales:** Via Azure AD Connect, les identit√©s locales peuvent √™tre synchronis√©es avec Azure AD.\n* **Authentification multi-facteur (MFA):**  Am√©liore la s√©curit√© en exigeant plusieurs m√©thodes d'authentification.\n* **Protection contre les menaces:** Surveillance et d√©tection des activit√©s suspectes.\n* **Gestion des appareils:** Contr√¥le et gestion des appareils acc√©dant aux ressources.\n* **Conditionnel Access:**  D√©finit des politiques d'acc√®s bas√©es sur des conditions (emplacement, appareil, etc.).\n\n\n**Exemple d'int√©gration avec une application:** Une application web peut utiliser l'authentification Azure AD pour v√©rifier l'identit√© des utilisateurs avant de leur accorder l'acc√®s.  Cela se fait g√©n√©ralement via les protocoles OAuth 2.0 et OpenID Connect.\n\n**Exemple de configuration (sch√©matique):**  Pour int√©grer une application web avec Azure AD, il faut enregistrer l'application dans Azure AD, obtenir un ID d'application et un secret client, puis configurer l'application pour qu'elle utilise ces informations pour authentifier les utilisateurs via Azure AD.  La configuration pr√©cise d√©pend du type d'application et des biblioth√®ques utilis√©es.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Int√©gration avec l'√©cosyst√®me Microsoft:**  Fonctionne parfaitement avec d'autres services Microsoft cloud.\n* **Fonctionnalit√©s robustes de s√©curit√©:**  Offre des m√©canismes de s√©curit√© avanc√©s.\n* **Scalabilit√© et fiabilit√©:**  Con√ßu pour g√©rer des millions d'utilisateurs et d'applications.\n* **Gestion centralis√©e des identit√©s:**  Simplifie la gestion des utilisateurs et des acc√®s.\n* **Bonne documentation et support:** Microsoft fournit une documentation compl√®te et un support technique.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Co√ªt:** Peut √™tre co√ªteux pour les grandes organisations avec un grand nombre d'utilisateurs.\n* **Complexit√©:**  La configuration et la gestion d'Azure AD peuvent √™tre complexes pour les utilisateurs inexp√©riment√©s.\n* **D√©pendance √† Microsoft:**  Les organisations sont d√©pendantes de Microsoft pour le service.\n* **Probl√®mes de performance possibles:**  Des probl√®mes de performance peuvent survenir en cas de forte demande.\n* **Int√©gration avec des syst√®mes non-Microsoft:**  Peut n√©cessiter des efforts suppl√©mentaires pour int√©grer des syst√®mes non-Microsoft.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]\n\n**Note concernant la proposition initiale de f√©d√©rer avec [[Keycloak]]:**  Bien que possible, f√©d√©rer Azure AD avec Keycloak ajoute une couche de complexit√©.  Cela peut √™tre utile dans certains sc√©narios (par exemple, pour centraliser la gestion des identit√©s pour des applications multiples, ou pour ajouter des fonctionnalit√©s sp√©cifiques offertes par Keycloak), mais il est important de consid√©rer les implications sur la complexit√© de la gestion et la s√©curit√© globale.  Un choix direct d'Azure AD pour l'authentification est souvent plus simple et plus int√©gr√©.\n"
    },
    {
        "id": "78fcdf93-fb9e-4ab7-9121-ad92a35dbae7",
        "title": "Behaviour Driven Developpement (BDD)",
        "description": "---\nid: f580a39e-f8d4-4c10-b007-25b2f99064b9\n---\n# Rapidement c'est quoi‚ùì\n\nLe Behaviour Driven Development (BDD) est une approche de d√©veloppement logiciel qui √©tend le [[Test Driven Developpement (TDD)]] en mettant l'accent sur la collaboration entre les d√©veloppeurs, les testeurs et les clients.  Il se concentre sur le comportement du logiciel du point de vue de l'utilisateur.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe BDD est une technique de d√©veloppement logiciel agile qui utilise des exemples concrets pour d√©finir et v√©rifier le comportement souhait√© du logiciel.  Au lieu de se concentrer uniquement sur des tests unitaires techniques comme le [[Test Driven Developpement (TDD)]], le BDD d√©finit les exigences et les tests √† partir du point de vue de l'utilisateur final ou d'un autre intervenant (par exemple, un analyste m√©tier).  Ces exigences sont exprim√©es sous forme de sc√©narios √©crits dans un langage compr√©hensible par tous (par exemple, Given-When-Then, ([[Gherkin]])), facilitant ainsi la communication et la collaboration entre les parties prenantes.\n\nLe processus BDD implique g√©n√©ralement les √©tapes suivantes :\n\n1. **D√©finir les comportements attendus:**  Les √©quipes identifient les fonctionnalit√©s et les comportements attendus du logiciel √† l'aide d'exemples concrets.  Ces exemples sont souvent √©crits en utilisant le format Given-When-Then (ou un format similaire).  *Given* d√©crit le contexte initial, *When* d√©crit l'action effectu√©e, et *Then* d√©crit le r√©sultat attendu.\n\n2. **Automatiser les tests:**  Les exemples de comportements sont ensuite traduits en tests automatis√©s.  Ces tests v√©rifient que le logiciel se comporte comme attendu.  Des frameworks BDD comme [[Cucumber]], [[SpecFlow]], ou [[Behat]] sont souvent utilis√©s pour faciliter l'automatisation des tests √† partir de la sp√©cification √©crite en langage naturel.\n\n3. **D√©velopper le logiciel:**  Le d√©veloppement du logiciel se fait it√©rativement, en commen√ßant par les fonctionnalit√©s d√©crites par les exemples de comportement.  Les tests automatis√©s servent de guide pour le d√©veloppement et permettent de valider que chaque it√©ration r√©pond aux exigences.\n\nEn essence, le BDD favorise une compr√©hension partag√©e des exigences entre les d√©veloppeurs, les testeurs et les clients, r√©duisant ainsi les malentendus et les erreurs.  Il permet une documentation vivante et ex√©cutable du comportement du logiciel.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Collaboration am√©lior√©e:**  Facilite la communication et la collaboration entre les √©quipes techniques et les clients gr√¢ce √† un langage commun.\n* **Documentation vivante et ex√©cutable:**  Les exemples de comportement servent de documentation claire et concise, qui est automatiquement v√©rifi√©e par les tests.\n* **R√©duction des erreurs:**  La sp√©cification pr√©cise des comportements permet de d√©tecter et de corriger les erreurs plus t√¥t dans le cycle de d√©veloppement.\n* **Tests plus compr√©hensibles:** Les tests sont √©crits dans un langage naturel et facilement compr√©hensibles par tous, pas seulement les d√©veloppeurs.\n* **Am√©lioration de la qualit√© du logiciel:**  Les tests automatis√©s assurent une meilleure qualit√© du logiciel.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  La mise en place de BDD peut n√©cessiter une courbe d'apprentissage pour les √©quipes non familiaris√©es avec cette approche.\n* **Surco√ªt potentiel:**  L'√©criture des exemples de comportement et l'automatisation des tests peuvent prendre du temps et n√©cessiter des ressources suppl√©mentaires, surtout au d√©but.\n* **Maintenance des tests:**  La maintenance des tests automatis√©s peut √™tre chronophage si le logiciel √©volue rapidement.\n* **D√©pendance aux frameworks:**  Le choix et la ma√Ætrise d'un framework BDD sont essentiels pour une impl√©mentation r√©ussie.\n* **Peut √™tre inad√©quat pour certains projets:**  Le BDD n'est pas toujours la meilleure approche pour tous les projets, notamment les projets tr√®s petits ou ceux avec des exigences tr√®s fluctuantes.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "7e46e637-b644-45d4-887e-b929589b9fa3",
        "title": "Bento grid",
        "description": "---\nid: 1734446d-b56f-421d-847e-74616d8b5715\n---\n# Rapidement c'est quoi‚ùì\n\nBento est une m√©thode de conception d'interface utilisateur (UI) bas√©e sur un syst√®me de grille flexible et adaptable, facilitant la cr√©ation de mises en page r√©actives et modulaires.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nBento est une approche de conception UI qui se diff√©rencie des syst√®mes de grille traditionnels en proposant une plus grande flexibilit√© et modularit√©.  Au lieu d'une grille fixe et pr√©-d√©finie, Bento utilise un syst√®me de conteneurs \"bentos\" qui peuvent contenir diff√©rents √©l√©ments UI, et s'adaptent dynamiquement √† la taille de l'√©cran et au contenu.  Chaque bento est un composant ind√©pendant qui peut √™tre r√©utilis√© et combin√© avec d'autres pour cr√©er des mises en page complexes.  Le principe repose sur l'utilisation de plusieurs conteneurs (les bentos) de tailles variables, dispos√©s les uns √† c√¥t√© des autres ou les uns au-dessus des autres, en fonction des besoins.  Cela permet de cr√©er des layouts facilement adaptables aux diff√©rents appareils (tablettes, smartphones, ordinateurs) sans avoir √† √©crire du code sp√©cifique pour chaque r√©solution.  L'avantage cl√© est la facilit√© de maintenance et d'√©volution du design, car les modifications apport√©es √† un bento impactent uniquement ce dernier, sans n√©cessiter de r√©ajustement global de la mise en page.  La flexibilit√© permet aussi de r√©pondre √† des changements de contenu sans perturber l'ensemble de l'interface.  Il est souvent impl√©ment√© via des frameworks [[CSS]], permettant un contr√¥le pr√©cis du [[Responsive en CSS]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Flexibilit√© et modularit√©:**  Facilement adaptable aux diff√©rents √©crans et contenus.  Les modifications sont localis√©es.\n* **R√©utilisabilit√© des composants:**  Les bentos peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application, r√©duisant la redondance de code et am√©liorant la coh√©rence visuelle.\n* **Maintenance simplifi√©e:**  Les changements sont moins susceptibles d'avoir des effets inattendus sur le reste de l'interface.\n* **Responsive design facilit√©:** L'adaptation aux diff√©rentes tailles d'√©cran est int√©gr√©e au c≈ìur du syst√®me.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:** La mise en place peut √™tre plus complexe que des syst√®mes de grille plus simples, n√©cessitant une bonne compr√©hension des concepts.\n* **Courbe d'apprentissage:**  N√©cessite de ma√Ætriser les concepts de base de la conception UI et des syst√®mes de grille avant de pouvoir l'utiliser efficacement.\n* **Manque de standardisation:**  Bento n'est pas un standard officiel, la mise en ≈ìuvre peut varier selon les frameworks et les d√©veloppeurs.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "ca2e037c-2ea7-453f-8814-c90ca0fb317d",
        "title": "Bonne pratiques Astuces Infos SQL",
        "description": "---\nid: 9598b636-e6c7-433c-9c84-8d2be81bae62\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_Dev]][[MOC_DevSecOps]]\n\n**Plusieurs bonnes pratiques √† mettre en place sur des [[Base de donn√©e SQL]] :** \n\n- Mettre des [[Index]] sur les [[Primary Key]] et les [[Foreign Key]] & sur les colonnes les plus utilis√©s (en terme de comparaison m√©moire on devrait atteindre une part 40% [[Index]] / 60% data)\n- Eviter au max l'utilisation de fonction dans les requ√™tes car elles emp√™chent l'utilisation des index.\n- Regarder les index les moins utilis√©s = Ils ralentissent l‚Äô√©criture\n- En fonction du m√©tier, il peut √™tre pertinent de cr√©er des vues ou des partitions pour optimiser les requ√™tes redondante"
    },
    {
        "id": "44c07912-e569-4ffd-afe8-ba9f66a366bb",
        "title": "Bonne pratiques Astuces Infos code",
        "description": "---\nid: 25d1a09d-2ccd-4cd5-a763-aa65e2c63372\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_Dev]]\n\n# [[Java]] - Comparaison BigDecimal.\n**Si je veux faire des comparaisons avec des `BigDecimal`.**\n\nOn va pr√©f√©rer cette comparaison : \n\n```java\nsipa2ElementFournisseur.getTauxTva().stripTrailingZeros().equals(fournisseurJSON.getTauxTva())\n```\n\n√† celle-ci : \n\n```java\nObjects.equals(sipa2ElementFournisseur.getMontantTtc(), fournisseurJSON.getMontantTtc());\nsipa2ElementFournisseur.getMontantTtc().equals(fournisseurJSON.getMontantTtc()));\n```\n\nParce qu‚Äôon peut avoir des probl√®mes d‚Äôarrondis (si j‚Äôai 0 et 0.0 le `Objects.equals()` renvoie faux).\n\nA noter que `stripTrailingZeros()` renvoi la notation scientifique de la valeur en string. Donc avec la pr√©cision sur les chiffres apr√®s la virgules.\n\n# [[Java]] - Activer les asserts\nPour pouvoir activer les asserts en java, il faut passer en argument de la JVM **-ea** (Enable Assert)\n\n# Appel en [[Base de donn√©e]]\n\nFaire tr√®s attention aux requ√™tes qu‚Äôon va faire en base.\n\nOn va pr√©f√©rer r√©cup√©rer toutes les infos dont on a besoin une fois, pour ensuite les passer en param√®tre de nos m√©thodes.\n\nDans des structures imbriqu√©es on peut se retrouver √† aller chercher 6 fois la m√™me chose.\n\n# Comparaison de valeur\nToujours mettre en premier dans une comparaison la valeur dont on est s√ªr !\n```java\n# Mauvais exemple\nexception.getEnumCode().equals(ExceptionTechniqueEnum.CONCEPT_NOT_FOUND.getCode())\n\n# Bon Exemple\nExceptionTechniqueEnum.CONCEPT_NOT_FOUND.getCode().equals(exception.getEnumCode())\n```\nCar dans ce cas exception.getEnumCode() peut √™tre null, ou produire null. "
    },
    {
        "id": "afd4c958-e250-4085-aa53-067aafec3f01",
        "title": "Bonne pratiques Astuces Infos ops",
        "description": "---\nid: ddeca416-e229-43bd-9ff3-cf790d5c7db6\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n[[MOC_DevSecOps]]\n# Installation [[WSL]] sans acc√®s au Microsoft Store\n> Si par exemple, il est bloqu√© par l‚Äôordinateur de la soci√©t√©.\n> \n\n```java\nwsl --update\n// Recherche de mises √† jour en cours... Veuillez patienter\n// Erreur : 0x8024500c\n\nwsl --update --web-download\n```"
    },
    {
        "id": "c8431349-aa03-4939-8097-d26735b0555d",
        "title": "Capture Data Change (CDC)",
        "description": "---\nid: 88fa46d4-2deb-41b1-9694-46a255156d83\n---\n# Rapidement c'est quoi‚ùì\n\nCapture Data Change (CDC) est une technique permettant de d√©tecter et de capturer les modifications de donn√©es dans une [[Base de donn√©e]].  Elle est souvent utilis√©e pour la r√©plication de donn√©es et la synchronisation entre [[Base de donn√©e]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCapture Data Change (CDC) est un m√©canisme qui identifie et enregistre les modifications apport√©es aux donn√©es d'une [[Base de donn√©e]].  Au lieu de copier l'int√©gralit√© de la base de donn√©es √† chaque synchronisation, le CDC ne capture que les changements (insertions, mises √† jour, suppressions) survenus depuis la derni√®re synchronisation.  Ceci am√©liore consid√©rablement l'efficacit√© et la performance, notamment pour les bases de donn√©es volumineuses.\n\nPlusieurs m√©thodes existent pour impl√©menter le CDC :\n\n* **Triggers:** Des d√©clencheurs (triggers) sont d√©finis sur les tables pour enregistrer chaque modification dans une table de journalisation (log table).  Cette m√©thode est relativement simple √† impl√©menter mais peut impacter les performances si mal configur√©e.\n\n* **Log Mining:**  L'extraction d'informations directement depuis les logs de la base de donn√©es.  Cette approche est g√©n√©ralement plus performante que les triggers mais plus complexe √† mettre en ≈ìuvre et d√©pend fortement du syst√®me de gestion de base de donn√©es (SGBD).\n\n* **Change Data Capture tools:** Des outils sp√©cialis√©s (ex: [[Debezium]], [[Maxwell]]) offrent des fonctionnalit√©s avanc√©es de CDC, g√©rant la complexit√© de l'extraction et de la transformation des donn√©es.  Ils permettent souvent une int√©gration plus simple avec diff√©rents SGBD et technologies.\n\nLes donn√©es captur√©es par le CDC sont g√©n√©ralement stock√©es dans une table de journalisation ou transmises √† un syst√®me de traitement en temps r√©el (streaming) pour diverses applications, comme la r√©plication vers une base de donn√©es secondaire, l'int√©gration avec des [[Date Warehouse]], la fourniture de donn√©es en temps r√©el pour les applications, etc.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance am√©lior√©e:** Seules les modifications sont trait√©es, ce qui rend le processus de synchronisation beaucoup plus rapide et moins gourmand en ressources.\n* **Efficacit√© accrue:** R√©duction du volume de donn√©es transf√©r√©es et trait√©es.\n* **Scalabilit√©:**  Adaptable √† des bases de donn√©es de grandes tailles.\n* **Faible latence:**  Permet de fournir des donn√©es presque en temps r√©el.\n* **Flexibilit√©:**  Compatible avec diverses technologies et syst√®mes de bases de donn√©es.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© d'impl√©mentation:**  La mise en ≈ìuvre peut √™tre complexe, en particulier pour les solutions bas√©es sur le *log mining* ou n√©cessitant une int√©gration personnalis√©e.\n* **Gestion des erreurs:**  Il est crucial de mettre en place une gestion robuste des erreurs pour garantir l'int√©grit√© des donn√©es.\n* **Co√ªt:** Les outils CDC commerciaux peuvent engendrer des co√ªts suppl√©mentaires.\n* **Maintenance:**  N√©cessite une maintenance r√©guli√®re pour garantir la fiabilit√© et la performance du syst√®me.\n* **D√©pendance au SGBD:**  La m√©thode d'impl√©mentation d√©pend fortement du SGBD utilis√©.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "f9bb1ea6-0be5-467a-86e9-1317b9f9e255",
        "title": "Certification Java 17",
        "description": "---\nid: cdc0b331-bbe5-4556-ad81-10811ff4073c\n---\nSource de la formation : https://r331.github.io/OCP-Oracle-Certified-Professional-Java-SE-21-1Z0-839-Open-Study-Guide/\n### 1. **[[Certification Java 17 - Concepts de Base en Java]]**\n\n- Types primitifs et classes enveloppes (Wrapper)\n- Op√©rations arithm√©tiques et bool√©ennes (promotion de type, casting)\n- Pr√©c√©dence des op√©rateurs\n- Utilisation de `var` pour l‚Äôinf√©rence de type\n\n### 2. **[[Certification Java 17 - Programmation Orient√©e Objet (OOP)]]**\n\n- D√©claration et instanciation d‚Äôobjets\n- Cycle de vie des objets (cr√©ation, r√©f√©rences, garbage collection)\n- Encapsulation, immutabilit√©\n- H√©ritage, classes abstraites et classes scell√©es (`sealed`)\n- Polymorphisme, type objet vs type r√©f√©rence\n- Op√©rateur `instanceof` et pattern matching\n- Interfaces : m√©thodes `default`, `static`, priv√©es\n- Enums avec champs, m√©thodes et constructeurs\n\n### 3. **[[Certification Java 17 - Packages et Modules]]**\n\n- Organisation des classes en packages\n- Java Platform Module System (JPMS) : d√©finition de modules, d√©pendances, services\n\n### 4. **[[Certification Java 17 - Gestion des types Date, Temps, Texte et Num√©rique]]**\n\n- API `Date-Time` : `LocalDate`, `LocalTime`, `LocalDateTime`, `ZonedDateTime`\n- `Period`, `Duration`, `Instant` pour la gestion des intervalles de temps\n- Classes `String`, `StringBuilder`, `Text Blocks`\n- API Math et `BigDecimal`\n\n### 5. **[[Certification Java 17 - Contr√¥le du Flux d'Ex√©cution]]**\n\n- Structures de contr√¥le (`if/else`, `switch`, `while`, `for`, `do-while`)\n- Expressions `switch` et pattern matching\n- Instructions `break`, `continue`\n\n### 6. **[[Certification Java 17 - Gestion des Exceptions]]**\n\n- Utilisation de `try/catch/finally`\n- `try-with-resources`\n- Multi-catch (`catch` de plusieurs exceptions en une seule clause)\n- Exceptions personnalis√©es (`extends Exception` ou `extends RuntimeException`)\n\n### 7. **[[Certification Java 17 - Collections et Tableaux]]**\n\n- Tableaux (`int[]`, `String[]`)\n- Collections (`List`, `Set`, `Map`, `Deque`)\n- API `SequencedCollection`, `SequencedSet`, `SequencedMap` (Java 21)\n- Manipulations : ajout, suppression, tri\n\n### 8. **[[Certification Java 17 - Streams et Expressions Lambda]]**\n\n- Utilisation des `Stream<T>` et `IntStream`, `DoubleStream`\n- `filter()`, `map()`, `reduce()`, `collect()`\n- D√©composition, concat√©nation, partitionnement\n- Streams s√©quentiels et parall√®les\n\n### 9. **[[Certification Java 17 - Programmation Concurrente]]**\n\n- Threads (`Runnable`, `Callable`)\n- `ExecutorService`, `ForkJoinPool`\n- Threads virtuels (`Virtual Threads`, `Thread.ofVirtual()`)\n- Verrous (`synchronized`, `Lock`, `ReadWriteLock`)\n- Collections concurrentes et streams parall√®les\n\n### 10. **[[Certification Java 17 - Sorties et Fichiers]]**\n\n- Flux (`InputStream`, `OutputStream`, `Reader`, `Writer`)\n- S√©rialisation/d√©s√©rialisation d‚Äôobjets (`Serializable`)\n- API `java.nio.file` pour la manipulation des fichiers et r√©pertoires\n\n### 11. **[[Certification Java 17 - Acc√®s aux Bases de Donn√©es avec JDBC]]**\n\n- Connexion √† une base de donn√©es (`DriverManager`, `DataSource`)\n- Ex√©cution de requ√™tes (`Statement`, `PreparedStatement`, `CallableStatement`)\n- Gestion des transactions (`commit`, `rollback`)\n\n### 12. **[[Certification Java 17 - D√©ploiement et Modules Java]]**\n\n- Compilation et cr√©ation de JARs (`modulaires` et `non-modulaires`)\n- Images d‚Äôex√©cution (`jlink`)\n- Migration avec modules anonymes et automatiques\n\n### 13. **[[Certification Java 17 - Internationalisation et Localisation]]**\n\n- Locales (`Locale`)\n- `ResourceBundle` pour la gestion des ressources multilingues\n- Formatage des dates, nombres et devises (`NumberFormat`, `DateTimeFormatter`)\n\n[[Java]]"
    },
    {
        "id": "e5648766-c198-4852-8a19-a50320131cca",
        "title": "ChromaDB",
        "description": "---\nid: 501b3586-143e-448a-bae9-4ff77f3a5793\n---\n# Rapidement c'est quoi‚ùì\n\nChromaDB est une [[Base de donn√©e]] vectorielle open-source permettant de stocker et de rechercher des vecteurs de plongement (embeddings).  Elle est con√ßue pour √™tre facile √† utiliser et √† int√©grer dans des applications de recherche s√©mantique.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nChromaDB est une base de donn√©es qui stocke et recherche des donn√©es non structur√©es en utilisant des embeddings.  Un embedding est une repr√©sentation vectorielle d'un morceau de texte, d'une image, ou d'un autre type de donn√©es.  Au lieu de chercher des donn√©es par mots cl√©s exacts, ChromaDB permet de rechercher des donn√©es similaires en fonction de la similarit√© vectorielle des embeddings.  Cela permet de r√©aliser des recherches s√©mantiques, c'est-√†-dire de trouver des √©l√©ments dont le sens est proche de la requ√™te, m√™me si les mots utilis√©s sont diff√©rents.\n\nChromaDB utilise une architecture client-serveur. Le client envoie des requ√™tes √† un serveur qui contient la base de donn√©es.  Il supporte plusieurs types de stockage persistant, permettant ainsi une grande flexibilit√©.  Il offre des fonctionnalit√©s comme l'ajout, la mise √† jour et la suppression de donn√©es, ainsi que des m√©thodes de recherche bas√©es sur la similarit√© cosinus ou d'autres m√©triques.  L'API est simple et intuitive, facilitant son int√©gration dans divers projets.  ChromaDB est particuli√®rement bien adapt√© aux applications de recherche s√©mantique, de recommandation, et de clustering.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et facile √† utiliser:**  Le code source est disponible publiquement, facilitant l'audit et la contribution.  Son API est simple √† prendre en main.\n* **Flexibilit√©:** Supporte plusieurs types de stockage persistant (en m√©moire, disque, etc.).\n* **Performance:**  Optimis√© pour la recherche de similarit√© vectorielle √† grande √©chelle.\n* **Recherche s√©mantique:** Permet de trouver des donn√©es similaires en fonction du sens, et non seulement des mots cl√©s.\n* **Int√©gration facile:** API simple et bien document√©e pour une int√©gration ais√©e dans diff√©rents projets.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Maturit√© relative:**  Compar√© √† des bases de donn√©es vectorielles plus √©tablies, ChromaDB est relativement jeune et pourrait pr√©senter des imperfections.\n* **Scalabilit√©:** Bien que performant, sa scalabilit√© √† tr√®s grande √©chelle pourrait n√©cessiter une configuration et une optimisation avanc√©es.\n* **D√©pendances:**  N√©cessite des biblioth√®ques sp√©cifiques pour fonctionner, ce qui peut ajouter de la complexit√© √† l'installation et √† la configuration.\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "643b7d68-8af3-4764-8cab-279e51c9bb42",
        "title": "Client Side Rendering (CSR)",
        "description": "---\nid: f0414542-a158-439d-9e1b-0113e950e207\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe **Client Side Rendering (CSR)** est une m√©thode de rendu des pages [[Web]] o√π le navigateur charge une page [[HTML]] basique et ex√©cute ensuite du [[JavaScript]] pour g√©n√©rer dynamiquement le contenu de la page.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe CSR repose sur le principe que le code [[JavaScript]] du c√¥t√© client (navigateur) est responsable de la construction de la page. Lorsqu'un utilisateur acc√®de √† une page, le navigateur charge un fichier [[HTML]] minimal, puis t√©l√©charge et ex√©cute du [[JavaScript]] pour r√©cup√©rer et afficher les donn√©es, souvent via des appels API. Cela permet un rendu dynamique et interactif sans avoir besoin d'un serveur pour g√©n√©rer la page √† chaque requ√™te.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Rapidit√© de compilation** : Seulement un transfert de fichiers est n√©cessaire, ce qui rend le processus de chargement initial rapide.\n- **Adapt√© au contenu dynamique** : Id√©al pour des sites interactifs o√π le contenu change souvent, comme des applications web ou des plateformes sociales.\n- **Exp√©rience utilisateur fluide** : Une fois la page rendue, l'interaction avec la page est rapide et r√©active.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **[[SEO]] limit√©** : Le contenu n'est pas visible pour les moteurs de recherche avant l'ex√©cution du [[JavaScript]], rendant l'indexation difficile pour le r√©f√©rencement.\n- **Temps de chargement initial** : Le navigateur doit ex√©cuter tout le [[JavaScript]] avant d'afficher la page, ce qui peut entra√Æner des d√©lais d'affichage significatifs, notamment sur des appareils peu puissants.\n- **D√©pendance au [[JavaScript]]** : Les utilisateurs avec des configurations de navigateur non optimis√©es ou des d√©sactivations de [[JavaScript]] ne verront pas correctement la page.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "450fc502-04e9-4dd5-bb5d-41d5be4cf560",
        "title": "Certification Java 17 - Collections et Tableaux",
        "description": "---\nid: 205a0c04-b33c-475b-9a7f-cc1720da1bdb\n---\n## **7.1. Tableaux (`int[]`, `String[]`)**\n\n### **D√©claration et initialisation**\n\n```java\nint[] nombres = {1, 2, 3, 4, 5}; // D√©claration et affectation\nString[] noms = new String[3]; // Tableau de taille fixe (valeurs nulles)\n```\n\n### **Acc√®s aux √©l√©ments**\n\n```java\nSystem.out.println(nombres[0]); // Affiche 1\nnoms[0] = \"Alice\";\n```\n\n### **Boucle `for` pour parcourir un tableau**\n\n```java\nfor (int i = 0; i < nombres.length; i++) {\n    System.out.println(nombres[i]);\n}\n```\n\n### **Boucle `for-each` (simplifi√©e)**\n\n```java\nfor (int nombre : nombres) {\n    System.out.println(nombre);\n}\n```\n\n### **Tri avec `Arrays.sort()`**\n\n```java\nimport java.util.Arrays;\n\nArrays.sort(nombres); // Trie le tableau en ordre croissant\nSystem.out.println(Arrays.toString(nombres));\n```\n\nüìå **Un tableau a une taille fixe et ne peut pas √™tre redimensionn√©.**\n\n---\n\n## **7.2. Collections (`List`, `Set`, `Map`, `Deque`)**\n\nüìå **Les collections sont dynamiques**, contrairement aux tableaux.\n\n|**Interface**|**Impl√©mentations courantes**|**Caract√©ristiques**|\n|---|---|---|\n|`List`|`ArrayList`, `LinkedList`|Ordonn√©e, doublons autoris√©s|\n|`Set`|`HashSet`, `LinkedHashSet`, `TreeSet`|Uniques, non ordonn√©es (`HashSet`), tri√©es (`TreeSet`)|\n|`Map`|`HashMap`, `LinkedHashMap`, `TreeMap`|Cl√©/valeur, unique par cl√©|\n|`Deque`|`ArrayDeque`, `LinkedList`|Double-ended queue (FIFO/LIFO)|\n\n---\n\n### **`List` : Tableau dynamique (ArrayList, LinkedList)**\n\n```java\nimport java.util.*;\n\nList<String> liste = new ArrayList<>();\nliste.add(\"Java\");\nliste.add(\"Python\");\nliste.add(\"C++\");\n\nSystem.out.println(liste.get(1)); // Python\nliste.remove(\"C++\"); // Supprime C++\n```\n\nüìå **`ArrayList` est optimis√© pour l‚Äôacc√®s rapide, `LinkedList` pour l‚Äôinsertion/suppression.**\n\n---\n\n### **`Set` : Ensemble d‚Äô√©l√©ments uniques**\n\n```java\nSet<String> set = new HashSet<>();\nset.add(\"Java\");\nset.add(\"Python\");\nset.add(\"Java\"); // Ignor√© (pas de doublons)\nSystem.out.println(set);\n```\n\nüìå **`HashSet` (d√©sordonn√©), `TreeSet` (tri√©), `LinkedHashSet` (ordre d‚Äôinsertion).**\n\n---\n\n### **`Map` : Association cl√©/valeur**\n\n```java\nMap<String, Integer> map = new HashMap<>();\nmap.put(\"Alice\", 25);\nmap.put(\"Bob\", 30);\nSystem.out.println(map.get(\"Alice\")); // 25\n```\n\nüìå **`TreeMap` trie par cl√©, `LinkedHashMap` conserve l‚Äôordre d‚Äôinsertion.**\n\n---\n\n### **`Deque` : File d‚Äôattente double**\n\n```java\nDeque<String> deque = new ArrayDeque<>();\ndeque.addFirst(\"Premier\");\ndeque.addLast(\"Dernier\");\n\nSystem.out.println(deque.pollFirst()); // \"Premier\"\nSystem.out.println(deque.pollLast());  // \"Dernier\"\n```\n\nüìå **`Deque` peut √™tre utilis√© comme une pile (`Stack`) ou une file (`Queue`).**\n\n---\n\n## **7.3. API `SequencedCollection`, `SequencedSet`, `SequencedMap` (Java 21)**\n\nüìå **Ajout√© en Java 21 pour g√©rer l‚Äôordre des √©l√©ments de fa√ßon plus coh√©rente.**\n\n### **`SequencedCollection` : Collection ordonn√©e**\n\n```java\nSequencedCollection<String> list = new LinkedList<>();\nlist.addFirst(\"D√©but\");\nlist.addLast(\"Fin\");\n\nSystem.out.println(list.getFirst()); // D√©but\nSystem.out.println(list.getLast());  // Fin\n```\n\nüìå **Am√©liore `List`, `Deque` et `SortedSet` en offrant des m√©thodes `getFirst()`, `getLast()` et `reversed()`.**\n\n---\n\n### **`SequencedSet` : Ensemble ordonn√©**\n\n```java\nSequencedSet<String> set = new LinkedHashSet<>();\nset.add(\"Java\");\nset.add(\"Python\");\nSystem.out.println(set.getFirst()); // Java\nSystem.out.println(set.getLast());  // Python\n```\n\nüìå **Permet de r√©cup√©rer le premier et le dernier √©l√©ment d‚Äôun `Set`.**\n\n---\n\n### **`SequencedMap` : `Map` ordonn√©e**\n\n```java\nSequencedMap<String, Integer> map = new LinkedHashMap<>();\nmap.put(\"Alice\", 25);\nmap.put(\"Bob\", 30);\nSystem.out.println(map.firstEntry()); // Alice=25\nSystem.out.println(map.lastEntry());  // Bob=30\n```\n\nüìå **Ajoute `firstEntry()`, `lastEntry()` et `reversed()`.**\n\n---\n\n## **7.4. Manipulations des collections (ajout, suppression, tri)**\n\n### **Ajout et suppression**\n\n```java\nList<String> list = new ArrayList<>(List.of(\"Java\", \"Python\", \"C++\"));\nlist.add(\"JavaScript\"); // Ajout\nlist.remove(\"Python\");  // Suppression\nSystem.out.println(list);\n```\n\n### **Tri d‚Äôune `List` avec `Collections.sort()`**\n\n```java\nList<Integer> nombres = Arrays.asList(3, 1, 4, 1, 5);\nCollections.sort(nombres); // Tri croissant\nSystem.out.println(nombres);\n```\n\n### **Tri d‚Äôune `List` avec un comparateur personnalis√©**\n\n```java\nList<String> mots = Arrays.asList(\"Banane\", \"Pomme\", \"Orange\");\nmots.sort(Comparator.reverseOrder()); // Tri d√©croissant\nSystem.out.println(mots);\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Tableaux (`int[]`, `String[]`)** : Taille fixe, rapide mais rigide.  \n‚úÖ **`List`, `Set`, `Map`, `Deque`** : Collections dynamiques et flexibles.  \n‚úÖ **`SequencedCollection` (Java 21)** : Meilleure gestion de l‚Äôordre des √©l√©ments.  \n‚úÖ **Manipulations : ajout, suppression, tri avec `Collections.sort()`.**\n\n---"
    },
    {
        "id": "a1ac1cfe-c0dc-436c-83ca-f17362f54d14",
        "title": "Common Vulnerabilities and Exposures (CVE)",
        "description": "---\nid: 2411dd03-b943-417a-93c1-64d9ff895771\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **CVE (Common Vulnerabilities and Exposures)** sont des identifiants uniques attribu√©s aux vuln√©rabilit√©s de s√©curit√© dans les logiciels et syst√®mes, permettant de les r√©f√©rencer de mani√®re standardis√©e pour faciliter leur gestion et leur correction.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn CVE est un identifiant unique attribu√© √† une vuln√©rabilit√© ou exposition de s√©curit√©. Chaque CVE contient :\n\n- **Un identifiant unique** : Exemple : **CVE-2021-34527**.\n- **Une description de la vuln√©rabilit√©** : Explication du probl√®me de s√©curit√©.\n- **Des r√©f√©rences externes** : Liens vers des d√©tails, solutions ou correctifs pour la vuln√©rabilit√©.\n\nLes CVE sont utilis√©s par les chercheurs en s√©curit√©, les entreprises, et les administrateurs syst√®mes pour suivre et r√©soudre rapidement les failles de s√©curit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Standardisation** : Offre un syst√®me commun pour identifier et discuter des vuln√©rabilit√©s, facilitant la collaboration entre les professionnels de la s√©curit√©.\n- **Accessibilit√©** : Des bases de donn√©es publiques permettent de rechercher rapidement des informations sur les vuln√©rabilit√©s.\n- **Gestion des risques** : Permet une gestion rapide des risques et l'application de correctifs cibl√©s.\n- **Suivi des mises √† jour** : Aide √† suivre l'√©volution des vuln√©rabilit√©s et des correctifs disponibles.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Manque de d√©tails techniques** : Les CVE ne contiennent souvent pas suffisamment d'informations techniques pour comprendre en profondeur la vuln√©rabilit√© sans recherches suppl√©mentaires.\n- **D√©lais de mise √† jour** : Parfois, les vuln√©rabilit√©s peuvent √™tre r√©f√©renc√©es apr√®s une p√©riode de retard, laissant du temps aux attaquants pour les exploiter avant qu'un patch ne soit disponible.\n- **Pas de solutions int√©gr√©es** : Le CVE fournit une identification, mais il appartient aux entreprises de mettre en place des mesures pour corriger les vuln√©rabilit√©s.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "099be107-e1d0-4ad3-93d9-53376662611b",
        "title": "Certification Java 17 - Concepts de Base en Java",
        "description": "---\nid: f00b7523-614f-46cb-81f9-3a5e4acdd35b\n---\n## **1.1. Types primitifs et classes enveloppes (Wrapper)**\n\n### **Types primitifs en Java**\n\nJava propose **8 types primitifs** pour stocker des valeurs en m√©moire de mani√®re efficace. Ces types sont stock√©s directement en **m√©moire stack**, ce qui les rend plus rapides et moins gourmands en m√©moire que les objets.\n\n|Type|Bits|Valeur min|Valeur max|Valeur par d√©faut|\n|---|---|---|---|---|\n|`boolean`|8|`false`|`true`|`false`|\n|`byte`|8|-128|127|`0`|\n|`short`|16|-32 768|32 767|`0`|\n|`int`|32|-2^31|2^31 - 1|`0`|\n|`long`|64|-2^63|2^63 - 1|`0L`|\n|`float`|32|-|-|`0.0f`|\n|`double`|64|-|-|`0.0d`|\n|`char`|16|0 (`\\u0000`)|65 535|`\\u0000`|\n\n**Exemples d‚Äôutilisation des types primitifs :**\n\n```java\nboolean isActive = true;\nint age = 25;\ndouble price = 19.99;\nchar grade = 'A';\n```\n\n### **Classes Enveloppes (Wrappers)**\n\nJava offre des **classes enveloppes (Wrapper Classes)** pour permettre aux types primitifs d‚Äô√™tre trait√©s comme des objets. Cela est utile notamment pour travailler avec des collections (`List`, `Set`, `Map`), qui ne peuvent contenir que des objets.\n\n|Primitif|Classe Wrapper|\n|---|---|\n|`boolean`|`Boolean`|\n|`byte`|`Byte`|\n|`short`|`Short`|\n|`int`|`Integer`|\n|`long`|`Long`|\n|`float`|`Float`|\n|`double`|`Double`|\n|`char`|`Character`|\n\n**Exemple : Auto-boxing et Unboxing**\n\n```java\nInteger obj = 10;  // Auto-boxing (int -> Integer)\nint num = obj;     // Unboxing (Integer -> int)\n```\n\n- **Auto-boxing** : Conversion automatique d‚Äôun type primitif en objet wrapper.\n- **Unboxing** : Conversion automatique d‚Äôun objet wrapper en type primitif.\n\n---\n\n## **1.2. Op√©rations arithm√©tiques et bool√©ennes**\n\n### **Promotion de type (Type Promotion)**\n\nLorsqu‚Äôune op√©ration est r√©alis√©e entre diff√©rents types, **Java effectue une promotion automatique** :\n\n1. **Si un des op√©randes est `double`**, le r√©sultat est `double`.\n2. **Si un des op√©randes est `float`**, le r√©sultat est `float`.\n3. **Si un des op√©randes est `long`**, le r√©sultat est `long`.\n4. **Sinon, le r√©sultat est `int`** (m√™me si les op√©randes sont `byte` ou `short`).\n\n**Exemples :**\n\n```java\nint a = 10;\ndouble b = 2.5;\ndouble result = a + b;  // a est promu en double => 10.0 + 2.5 = 12.5\n\nbyte x = 5;\nshort y = 10;\nint z = x + y;  // x et y sont promus en int => 5 + 10 = 15\n```\n\n### **Casting explicite**\n\nLorsque la promotion automatique ne convient pas, on utilise **le casting explicite** pour convertir manuellement un type.\n\n```java\ndouble d = 9.7;\nint i = (int) d;  // 9 (la partie d√©cimale est tronqu√©e)\n\nlong bigValue = 100000L;\nint smallValue = (int) bigValue;  // Attention : peut causer une perte de donn√©es si la valeur d√©passe la capacit√© d‚Äôun int\n```\n\n### **Op√©rateurs arithm√©tiques**\n\n|Op√©rateur|Description|Exemple|\n|---|---|---|\n|`+`|Addition|`5 + 3 // 8`|\n|`-`|Soustraction|`9 - 2 // 7`|\n|`*`|Multiplication|`4 * 6 // 24`|\n|`/`|Division enti√®re|`10 / 3 // 3`|\n|`%`|Modulo (reste)|`10 % 3 // 1`|\n\n**Attention : Division entre entiers**\n\n```java\nint result = 5 / 2;  // 2 (car division enti√®re)\ndouble correctResult = 5 / 2.0;  // 2.5\n```\n\n### **Op√©rateurs bool√©ens**\n\n| Op√©rateur | Description       | Exemple                  |\n| --------- | ----------------- | ------------------------ |\n| ==        | √âgalit√©           | `a == b`                 |\n| `!=`      | Diff√©rent         | `a != b`                 |\n| `>`       | Sup√©rieur         | `a > b`                  |\n| `<`       | Inf√©rieur         | `a < b`                  |\n| `>=`      | Sup√©rieur ou √©gal | `a >= b`                 |\n| `<=`      | Inf√©rieur ou √©gal | `a <= b`                 |\n| `&&`      | ET logique        | `true && false // false` |\n| `         |                   | `                        |\n| `!`       | NON logique       | `!true // false`         |\n\n---\n\n## **1.3. Pr√©c√©dence des op√©rateurs**\n\nJava √©value les expressions en fonction de la priorit√© des op√©rateurs.  \n**Ordre de priorit√© (du plus √©lev√© au plus faible) :**\n\n1. `++`, `--` (postfix√©s)\n2. `++`, `--`, `!`, `~` (pr√©fix√©s)\n3. `*`, `/`, `%`\n4. `+`, `-`\n5. `<<`, `>>`, `>>>`\n6. `<`, `<=`, `>`, `>=`\n7. \"==\", \"!=\"\n8. `&`\n9. `^`\n10. `|`\n11. `&&`\n12. `||`\n13. `? :` (ternaire)\n14. `=`, `+=`, `-=`, `*=`, `/=`, etc.\n\n**Exemples :**\n\n```java\nint result = 5 + 2 * 3;  // 5 + (2 * 3) = 11\nboolean test = true || false && false; // true || (false && false) = true\n```\n\n**Bonnes pratiques :**\n\n- **Toujours utiliser des parenth√®ses** pour √©viter les ambigu√Øt√©s.\n\n```java\nint result = (5 + 2) * 3;  // 21\n```\n\n---\n\n## **1.4. Inf√©rence de Type avec `var`**\n\nIntroduit en Java 10, `var` permet √† Java de **d√©duire le type d'une variable lors de l'initialisation**.\n\n```java\nvar x = 10;  // int\nvar text = \"Java\";  // String\nvar list = List.of(1, 2, 3);  // List<Integer>\n```\n\n**Limitations de `var` :**\n\n- **Doit √™tre initialis√© imm√©diatement** (`var x;` ne compile pas).\n- **Uniquement utilisable en local** (pas pour les champs de classe ni les param√®tres de m√©thode).\n- **Ne peut pas √™tre utilis√© avec `null` sans type explicite**.\n\n```java\nvar value = null; // ERREUR, type ind√©fini\n```\n\n**Cas d‚Äôutilisation typique :**\n\n```java\nfor (var entry : map.entrySet()) {\n    System.out.println(entry.getKey() + \" -> \" + entry.getValue());\n}\n```\n\n---\n\n### **R√©sum√©**\n\n‚úÖ **Types primitifs vs Wrappers** (Auto-boxing, Unboxing)  \n‚úÖ **Promotion de type & casting explicite**  \n‚úÖ **Op√©rations arithm√©tiques et bool√©ennes**  \n‚úÖ **Pr√©c√©dence des op√©rateurs**  \n‚úÖ **Inf√©rence de type avec `var`**\n\n---\n[[Java]] [[Certification Java 17]]"
    },
    {
        "id": "d27e1fa6-a6f5-4430-ae47-04f0792380f4",
        "title": "Certification Java 17 - Contr√¥le du Flux d'Ex√©cution",
        "description": "---\nid: 6e8b33a4-8d4c-4291-b3eb-f221452b3430\n---\n## **5.1. Structures de contr√¥le (`if/else`, `switch`, `while`, `for`, `do-while`)**\n\n### **`if/else` : Condition simple**\n\n```java\nint age = 20;\nif (age >= 18) {\n    System.out.println(\"Majeur\");\n} else {\n    System.out.println(\"Mineur\");\n}\n```\n\nüìå **Les blocs `{}` sont obligatoires si plusieurs instructions sont pr√©sentes.**\n\n### **Op√©rateur ternaire (`? :`)**\n\n```java\nString statut = (age >= 18) ? \"Majeur\" : \"Mineur\";\nSystem.out.println(statut);\n```\n\n---\n\n### **`switch` : Remplace plusieurs `if/else`**\n\n```java\nint jour = 3;\nswitch (jour) {\n    case 1 -> System.out.println(\"Lundi\");\n    case 2 -> System.out.println(\"Mardi\");\n    case 3 -> System.out.println(\"Mercredi\");\n    default -> System.out.println(\"Jour inconnu\");\n}\n```\n\nüìå **Depuis Java 12**, `switch` retourne une **valeur** directement :\n\n```java\nString jourNom = switch (jour) {\n    case 1 -> \"Lundi\";\n    case 2 -> \"Mardi\";\n    case 3 -> \"Mercredi\";\n    default -> \"Jour inconnu\";\n};\nSystem.out.println(jourNom);\n```\n\n---\n\n### **`while` : Ex√©cution tant que la condition est vraie**\n\n```java\nint i = 0;\nwhile (i < 3) {\n    System.out.println(i);\n    i++;\n}\n```\n\nüìå **Utile quand on ne sait pas √† l'avance combien d'it√©rations seront n√©cessaires.**\n\n---\n\n### **`do-while` : Ex√©cute **au moins une fois** avant de tester la condition**\n\n```java\nint i = 0;\ndo {\n    System.out.println(i);\n    i++;\n} while (i < 3);\n```\n\n---\n\n### **`for` : Boucle avec un compteur**\n\n```java\nfor (int i = 0; i < 3; i++) {\n    System.out.println(i);\n}\n```\n\n### **`for-each` : Parcourir une collection**\n\n```java\nList<String> fruits = List.of(\"Pomme\", \"Banane\", \"Orange\");\nfor (String fruit : fruits) {\n    System.out.println(fruit);\n}\n```\n\nüìå **Plus lisible que `for (int i = 0; i < list.size(); i++)`**\n\n---\n\n## **5.2. Expressions `switch` et Pattern Matching**\n\nDepuis **Java 16+, `switch` permet du Pattern Matching**, √©vitant les conversions manuelles.\n\n### **Pattern Matching (`instanceof`)**\n\n**Avant Java 16**\n\n```java\nObject obj = \"Bonjour\";\nif (obj instanceof String) {\n    String s = (String) obj;  // Cast manuel obligatoire\n    System.out.println(s.length());\n}\n```\n\nüìå **Avec Java 16+, pas besoin de cast explicite :**\n\n```java\nif (obj instanceof String s) {\n    System.out.println(s.length()); // Automatique !\n}\n```\n\n---\n\n### **Pattern Matching avec `switch`** _(Java 17)_\n\nüìå **Permet d'√©viter des `if/else` imbriqu√©s**\n\n```java\nObject obj = 42;\n\nString resultat = switch (obj) {\n    case Integer i -> \"C'est un entier : \" + i;\n    case String s -> \"C'est une cha√Æne : \" + s;\n    default -> \"Type inconnu\";\n};\nSystem.out.println(resultat);\n```\n\nüìå **Ajout de conditions (`when`)**\n\n```java\nObject obj = 50;\nswitch (obj) {\n    case Integer i when i > 10 -> System.out.println(\"Nombre sup√©rieur √† 10\");\n    case Integer i -> System.out.println(\"Nombre inf√©rieur ou √©gal √† 10\");\n    default -> System.out.println(\"Autre type\");\n}\n```\n\n---\n\n## **5.3. Instructions `break` et `continue`**\n\n### **`break` : Sortie imm√©diate d'une boucle**\n\n```java\nfor (int i = 0; i < 5; i++) {\n    if (i == 3) break;  // Arr√™te la boucle d√®s que i == 3\n    System.out.println(i);\n}\n```\n\n**Sortie :**\n\n```\n0\n1\n2\n```\n\n### **`continue` : Passe directement √† l‚Äôit√©ration suivante**\n\n```java\nfor (int i = 0; i < 5; i++) {\n    if (i == 3) continue;  // Ignore l'affichage du 3\n    System.out.println(i);\n}\n```\n\n**Sortie :**\n\n```\n0\n1\n2\n4\n```\n\nüìå **Utilisation dans `while`**\n\n```java\nint i = 0;\nwhile (i < 5) {\n    i++;\n    if (i % 2 == 0) continue; // Ignore les nombres pairs\n    System.out.println(i);\n}\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Structures de contr√¥le :** `if/else`, `switch`, `while`, `for`, `do-while`  \n‚úÖ **`switch` moderne avec pattern matching** (Java 17)  \n‚úÖ **Pattern Matching (`instanceof` avec variables)**  \n‚úÖ **`break` pour arr√™ter une boucle**  \n‚úÖ **`continue` pour passer √† l‚Äôit√©ration suivante**\n\n---\n"
    },
    {
        "id": "1d5c0267-8703-4ef6-9e3d-2c9bc2f4fba4",
        "title": "Cucumber",
        "description": "---\nid: 03afbb9c-cf5e-4cd9-8c81-db00cb35b56b\n---\n# Rapidement c'est quoi‚ùì\n\nCucumber est un outil de test d'automatisation bas√© sur le langage [[Gherkin]]. Il permet aux non-d√©veloppeurs (ex: testeurs, analystes fonctionnels) de d√©crire des sc√©narios de test de mani√®re claire et concise, facilitant la collaboration entre les √©quipes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCucumber utilise le langage [[Gherkin]], un langage simple et lisible par tous, bas√© sur des mots cl√©s comme \"Given\", \"When\", et \"Then\".  Ces mots cl√©s structurent les sc√©narios de test en d√©crivant l'√©tat initial (Given), l'action effectu√©e (When), et le r√©sultat attendu (Then).  Un exemple simple:\n\n```gherkin\nFeature: Withdrawing cash\n  Scenario: Successful withdrawal within balance\n    Given Alice has $234.56 in their account\n    When Alice tries to withdraw $200.00\n    Then the withdrawal is successful\n\n  Scenario: Declined withdrawal in excess of balance\n    Given Hamza has $198.76 in their account\n    When Hamza tries to withdraw $200.00\n    Then the withdrawal is declined\n```\n\nLes d√©veloppeurs impl√©mentent ensuite le code qui correspond √† chaque √©tape (\"Given\", \"When\", \"Then\").  Cette s√©paration des pr√©occupations (s√©paration entre la sp√©cification du test et son impl√©mentation) am√©liore la collaboration, la lisibilit√© et la maintenabilit√© des tests.  Cucumber peut √™tre int√©gr√© √† de nombreux frameworks de test (comme [[Selenium]], [[Cypress]] via `cypress-cucumber-preprocessor`), permettant ainsi d'automatiser l'ex√©cution des sc√©narios.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Collaboration am√©lior√©e:**  Permet une communication plus claire entre les √©quipes techniques et non-techniques. Les tests sont √©crits dans un langage compr√©hensible par tous.\n* **Maintenance facilit√©e:**  La s√©paration des sp√©cifications et de l'impl√©mentation rend les tests plus faciles √† maintenir et √† mettre √† jour.\n* **Tests plus lisibles:** Le format [[Gherkin]] rend les tests plus clairs et plus faciles √† comprendre, m√™me pour les personnes non impliqu√©es dans leur d√©veloppement.\n* **Documentation vivante:** Les sc√©narios [[Gherkin]] servent √©galement de documentation ex√©cutable du syst√®me.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  La mise en place et l'utilisation efficace de Cucumber peuvent n√©cessiter un certain temps d'apprentissage, notamment pour d√©finir des conventions claires et coh√©rentes.\n* **N√©cessite une bonne collaboration:**  Le succ√®s de Cucumber d√©pend fortement de la collaboration entre les √©quipes et d'une bonne compr√©hension des conventions utilis√©es.  Des d√©finitions ambig√ºes des \"Given\", \"When\" et \"Then\" peuvent rendre les tests difficiles √† maintenir.\n* **Peut √™tre verbeux:** Pour des tests complexes, la description [[Gherkin]] peut devenir assez longue et d√©taill√©e.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "7ec4ed2f-43a1-4eb2-a1aa-108cb2b03985",
        "title": "Cypress",
        "description": "---\nid: 80fa04db-9979-4f13-ae6a-087b96aa069b\n---\n# Rapidement c'est quoi‚ùì\n\nCypress est un framework de test [[JavaScript]] populaire pour les applications web. Il permet de r√©aliser des [[Test End2End (E2E)]] et des [[Test unitaire (TU)]] de composants.  Il se distingue par sa facilit√© d'utilisation et son approche int√©gr√©e.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nCypress est un outil complet pour le test d'applications web.  Il offre une approche bas√©e sur le [[Document Object Model (DOM)]], ex√©cutant les tests directement dans le navigateur.  Cela permet une interaction plus naturelle et intuitive avec l'application test√©e, contrairement √† des solutions qui interagissent de mani√®re distante.\n\nCypress propose deux types de tests principaux :\n\n* **[[Test End2End (E2E)]]:**  Ces tests simulent le comportement d'un utilisateur r√©el, interagissant avec l'interface utilisateur de bout en bout.  Ils v√©rifient le flux complet d'une action, de l'interaction de l'utilisateur √† la r√©ponse du serveur.\n\n* **[[Test de Composant]]:**  Ces tests permettent de tester des composants individuels de l'interface utilisateur isol√©ment, sans d√©pendance √† l'application compl√®te. Ceci permet des tests unitaires plus rapides et cibl√©s.\n\nL'ex√©cution des tests se fait directement dans le navigateur, offrant un d√©bogage facile et une meilleure visibilit√© sur le d√©roulement des tests.  Cypress propose une API intuitive et chainable, facilitant la cr√©ation et la maintenance des tests.  Les fonctions principales incluent la s√©lection d'√©l√©ments (ex: `cy.get()`, `cy.contains()`), l'interaction avec les √©l√©ments (ex: `cy.click()`, `cy.type()`), et les assertions (ex: `cy.should()`).  Des fonctionnalit√©s avanc√©es comme l'interception des requ√™tes r√©seau (`cy.intercept()`), l'ex√©cution de t√¢ches personnalis√©es (`cy.task()`), et la g√©n√©ration de rapports avec captures d'√©cran sont √©galement disponibles.  La prise en charge de la couverture de code est possible via des plugins tiers.\n\nLa configuration est relativement simple, n√©cessitant un fichier `cypress.config.js` (ou `cypress.config.ts`) pour sp√©cifier les param√®tres de configuration, tels que l'URL de l'application et le navigateur √† utiliser.  La gestion des donn√©es de test peut √™tre r√©alis√©e via des dumps de base de donn√©es ou d'autres techniques.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Facilit√© d'utilisation et d'apprentissage:** L'API intuitive et la documentation claire rendent Cypress accessible aux d√©butants.\n* **D√©bogage simplifi√©:** L'ex√©cution dans le navigateur permet un d√©bogage facile et visuel.\n* **Tests rapides et fiables:**  L'ex√©cution directe dans le navigateur assure des tests rapides et stables.\n* **API chainable:** La possibilit√© d'encha√Æner les commandes facilite la cr√©ation de tests lisibles et maintenables.\n* **Fonctionnalit√©s compl√®tes:** Cypress offre un ensemble complet de fonctionnalit√©s, incluant la g√©n√©ration de rapports, les captures d'√©cran, et l'interception des requ√™tes r√©seau.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Support limit√© de Safari:** Le support de [[Safari]] est moins complet que pour d'autres navigateurs.\n* **Gestion limit√©e des onglets multiples:** La gestion des tests sur plusieurs onglets est limit√©e.\n* **Pas de support natif pour les tests mobiles:** Bien qu'il soit possible d'utiliser des solutions alternatives, il n'y a pas de support natif pour les tests sur des appareils mobiles.\n* **Prise en charge limit√©e des applications non-web:**  Son utilisation principale se concentre sur le web; l'adaptation √† d'autres types d'applications (ex: [[Electron]]) peut n√©cessiter des solutions sp√©cifiques.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]\n"
    },
    {
        "id": "9d6e109e-a4f3-49f9-a5b4-83691dd4497a",
        "title": "Debezium",
        "description": "---\nid: 1f2f593a-0a66-4f5d-860c-1677d5949620\n---\n# Rapidement c'est quoi‚ùì\n\nDebezium est un outil open-source qui capture et diffuse en temps r√©el les modifications de donn√©es ([[Capture Data Change (CDC)]]) dans les [[Base de donn√©e]].  Il permet de traiter ces changements de mani√®re fiable et efficace.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nDebezium est un middleware de [[Capture Data Change (CDC)]] qui s'int√®gre √† diff√©rentes [[Base de donn√©e]] ([[MySQL]], [[PostgreSQL]], [[MongoDB]], [[Oracle]], etc.) pour capturer les modifications de donn√©es (insertions, mises √† jour, suppressions) de mani√®re transparente.  Il utilise des m√©canismes sp√©cifiques √† chaque syst√®me de gestion de bases de donn√©es (SGBD) pour surveiller les logs de transactions (binlogs, WAL, oplogs, etc.) et extraire les √©v√©nements de changement.  Ces √©v√©nements sont ensuite format√©s en JSON et diffus√©s via diff√©rents connecteurs ([[Apache Kafka]], etc.).  La diffusion des donn√©es est effectu√©e de mani√®re incr√©mentale, envoyant uniquement les modifications, ce qui rend le processus efficient et √©vite la duplication massive de donn√©es.  \n\nDebezium offre des fonctionnalit√©s avanc√©es comme :\n\n* **Filtrage des donn√©es:**  Possibilit√© de filtrer les donn√©es captur√©es en fonction de tables, de colonnes ou de crit√®res sp√©cifiques.\n* **Transformation des donn√©es:**  Les donn√©es peuvent √™tre transform√©es avant d'√™tre diffus√©es, par exemple pour normaliser les formats ou enrichir les √©v√©nements avec des informations contextuelles.\n* **Gestion des erreurs et de la reprise:**  Debezium int√®gre des m√©canismes pour g√©rer les erreurs et assurer la reprise sur panne.\n* **Haute disponibilit√©:**  La conception du syst√®me permet une haute disponibilit√© gr√¢ce √† l'utilisation de technologies distribu√©es.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et communautaire:**  B√©n√©ficie d'un grand support communautaire et d'une maintenance active.\n* **Support de multiples SGBD:**  Permet de capturer les modifications de donn√©es dans une vari√©t√© de bases de donn√©es.\n* **Performances et scalabilit√©:**  Con√ßu pour g√©rer de grands volumes de donn√©es et s'adapter √† des besoins croissants.\n* **Flexibilit√©:**  Offre des options de configuration et de personnalisation √©tendues.\n* **Int√©gration avec [[Apache Kafka]]:**  S'int√®gre facilement avec [[Apache Kafka]] pour une diffusion robuste et distribu√©e des donn√©es.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:**  La configuration initiale peut √™tre complexe, surtout pour des environnements h√©t√©rog√®nes.\n* **Courbe d'apprentissage:**  N√©cessite une certaine expertise en mati√®re de [[Base de donn√©e]], de [[Data Streaming]] et de [[Capture Data Change (CDC)]].\n* **D√©pendances:**  D√©pend de diff√©rentes technologies ([[Apache Kafka]], par exemple), ajoutant une couche de complexit√© √† la mise en place.\n* **Gestion des sch√©mas:**  La gestion des √©volutions de sch√©mas de donn√©es peut n√©cessiter une attention particuli√®re.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "103bec1a-cef0-45fb-8eb1-c13ed1074984",
        "title": "Docker Swarm",
        "description": "---\nid: 3c134b45-51a4-4e25-9876-82facf350999\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Docker Swarm** est un outil d'orchestration de containers int√©gr√© √† [[Docker]]. Il permet de g√©rer un cluster de machines pour d√©ployer et orchestrer des applications conteneuris√©es de mani√®re simple et scalable.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nDocker Swarm permet de cr√©er un cluster de machines (n≈ìuds) et de d√©ployer des containers sur ces n≈ìuds. Il utilise un algorithme de consensus appel√© **[[Raft]]** pour √©lire un leader et g√©rer l'√©tat du cluster. Swarm facilite la gestion des services distribu√©s, la mise √† l'√©chelle automatique et la tol√©rance aux pannes. La configuration est simplifi√©e et ressemble √† un **[[Docker Compose]]** am√©lior√©.\n\n- **N≈ìuds** : Au moins 3 (id√©alement 5) n≈ìuds sont n√©cessaires pour garantir la r√©silience du cluster.\n- **Int√©gration avec Docker** : Swarm est inclus avec Docker, donc aucune installation suppl√©mentaire n'est n√©cessaire.\n- **Interface graphique** : Des outils comme **[[Portainer]]** peuvent √™tre utilis√©s pour g√©rer visuellement le cluster Docker Swarm.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Facilit√© d'int√©gration** : D√©j√† inclus avec [[Docker]], pas besoin d'installation suppl√©mentaire.\n- **Simplicit√© de configuration** : La configuration des services se fait via un fichier similaire √† Docker Compose.\n- **Haute disponibilit√©** : Gr√¢ce √† [[Raft]], le leader du cluster est √©lu et le consensus est maintenu, ce qui garantit la r√©silience.\n- **Mise √† l'√©chelle automatique** : Permet d'ajuster automatiquement le nombre de r√©plicas des services selon la charge.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Moins de fonctionnalit√©s avanc√©es** : Par rapport √† [[Kubernetes]], Swarm propose moins de fonctionnalit√©s avanc√©es pour la gestion complexe des clusters.\n- **Scalabilit√© limit√©e** : Bien que Swarm soit bien adapt√© pour des petits √† moyens clusters, il n'est pas aussi performant que [[Kubernetes]] pour des environnements de tr√®s grande √©chelle.\n- **Communaut√© plus petite** : La communaut√© et les ressources sont plus limit√©es compar√©es √† des solutions comme [[Kubernetes]].\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "23f53224-8522-45d1-b851-4fff726a77a5",
        "title": "Certification Java 17 - D√©ploiement et Modules Java",
        "description": "---\nid: e04928bd-dd1d-411a-a12e-6760db620a4c\n---\n## **12.1. Compilation et cr√©ation de JARs (modulaires et non-modulaires)**\n\nJava permet de compiler et de regrouper les classes dans des fichiers **JAR** (`Java Archive`). Avec **Java 9+, le syst√®me de modules (`JPMS`)** permet de mieux organiser les d√©pendances.\n\n---\n\n### **1. Compilation et ex√©cution d‚Äôun projet classique (non modulaire)**\n\nüìå **Un projet classique n‚Äôutilise pas `module-info.java`**\n\n**Compilation** :\n\n```sh\njavac -d out src/com/exemple/Main.java\n```\n\n**Cr√©ation du JAR :**\n\n```sh\njar --create --file monApp.jar -C out .\n```\n\n**Ex√©cution :**\n\n```sh\njava -jar monApp.jar\n```\n\n---\n\n### **2. Compilation et ex√©cution d‚Äôun projet modulaire**\n\nüìå **Un projet modulaire utilise `module-info.java`.**\n\nüìÇ **Structure :**\n\n```\n/mon-projet\n  /src\n    /com.exemple.main\n      module-info.java\n      Main.java\n```\n\nüìÑ **`module-info.java`**\n\n```java\nmodule com.exemple.main {\n    requires com.exemple.util;\n}\n```\n\n**Compilation** :\n\n```sh\njavac -d out --module-source-path src $(find src -name \"*.java\")\n```\n\n**Cr√©ation du JAR modulaire :**\n\n```sh\njar --create --file mods/com.exemple.main.jar --module-version=1.0 -C out/com.exemple.main .\n```\n\n**Ex√©cution du module :**\n\n```sh\njava --module-path mods -m com.exemple.main/com.exemple.Main\n```\n\nüìå **Avantages des JARs modulaires :**\n\n- Encapsulation des modules.\n- R√©duction des conflits de d√©pendances.\n\n---\n\n## **12.2. Cr√©ation d‚Äôimages d‚Äôex√©cution avec `jlink`**\n\nüìå **Depuis Java 9, `jlink` permet de cr√©er une image d‚Äôex√©cution sans installer une JDK compl√®te.**\n\n### **1. G√©n√©ration d‚Äôune image compacte**\n\n```sh\njlink --module-path $JAVA_HOME/jmods:mods \\\n      --add-modules com.exemple.main \\\n      --output monApp-image\n```\n\nüìå **Cela cr√©e un dossier `monApp-image` contenant une JRE minimale avec uniquement les modules n√©cessaires.**\n\n**Ex√©cution de l‚Äôapplication sans JDK install√© :**\n\n```sh\nmonApp-image/bin/java -m com.exemple.main/com.exemple.Main\n```\n\nüìå **Avantages de `jlink` :**\n\n- R√©duction de la taille de l‚Äôapplication.\n- Pas besoin d‚Äôune installation Java sur l‚Äôenvironnement cible.\n\n---\n\n## **12.3. Migration avec modules anonymes et automatiques**\n\nüìå **Lors de la migration d‚Äôun projet Java classique vers un projet modulaire, il existe trois types de modules :**\n\n|**Type de module**|**D√©finition**|\n|---|---|\n|**Module Explicite**|D√©fini avec `module-info.java`|\n|**Module Automatique**|Un JAR classique dans `module-path` devient un module|\n|**Module Anonyme**|Un JAR non modulaire plac√© dans `classpath`|\n\n---\n\n### **1. Modules automatiques**\n\nüìå **Un JAR non modulaire devient un module s‚Äôil est plac√© dans `--module-path`.**\n\nExemple :\n\n```sh\njava --module-path lib --add-modules nom.du.module -m com.exemple.main/com.exemple.Main\n```\n\nüìå **Son nom est d√©riv√© du fichier JAR (`lib/monJAR.jar` devient `monJAR`).**\n\n---\n\n### **2. Modules anonymes**\n\nüìå **Si un JAR est laiss√© dans le `classpath`, il fonctionne comme un module anonyme.**\n\nExemple :\n\n```sh\njava -classpath lib/monJAR.jar com.exemple.Main\n```\n\nüìå **Mais il ne peut pas √™tre r√©f√©renc√© par un module explicite.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **JARs : Compilation et cr√©ation de JARs modulaires et non-modulaires.**  \n‚úÖ **`jlink` : Cr√©ation d‚Äôune image d‚Äôex√©cution sans JDK complet.**  \n‚úÖ **Migration vers Java 9+ : Modules anonymes et automatiques pour compatibilit√©.**\n"
    },
    {
        "id": "0720059e-55bb-4a4b-bb8d-75fd23d0c0df",
        "title": "Elastic Search",
        "description": "---\nid: 694568ef-b128-4cdb-bc87-67ae174314f9\n---\n# Rapidement c'est quoi‚ùì\n\nElasticsearch est un moteur de recherche et une [[Base de donn√©e NoSQL]] distribu√©e, open source, permettant des recherches complexes et rapides sur de grands volumes de donn√©es.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nElasticsearch est un syst√®me de recherche et d'analyse de donn√©es bas√© sur le moteur de recherche [[Apache Lucene]]. Il utilise une architecture distribu√©e, permettant de r√©partir les donn√©es sur plusieurs serveurs pour am√©liorer les performances et la scalabilit√©.  Il indexe les donn√©es (les transforme en un format optimis√© pour la recherche) et les stocke dans une structure invers√©e, permettant des recherches rapides m√™me sur des ensembles de donn√©es tr√®s volumineux.  Contrairement aux bases de donn√©es relationnelles, Elasticsearch n'utilise pas de sch√©mas fixes, offrant une grande flexibilit√©.  Il supporte de nombreux types de donn√©es (texte, num√©rique, g√©ographique, etc.) et permet de r√©aliser des requ√™tes complexes avec des filtres, des agr√©gations, et des fonctionnalit√©s de scoring pour classer les r√©sultats.  Il est souvent utilis√© pour la recherche en temps r√©el, l'analyse de logs, la surveillance, et bien d'autres applications n√©cessitant des recherches performantes sur des donn√©es non-structur√©es ou semi-structur√©es.  Son API RESTful facilite son int√©gration avec d'autres applications.  La gestion de clusters permet une haute disponibilit√© et une tol√©rance aux pannes.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance de recherche:**  Extr√™mement rapide, m√™me sur des index gigantesques.\n* **Scalabilit√©:** Facilement extensible pour g√©rer des volumes de donn√©es croissants.\n* **Flexibilit√©:**  Supporte diff√©rents types de donn√©es et permet des requ√™tes complexes.\n* **Open source:** Communaut√© active et large choix d'outils et de plugins.\n* **API RESTful simple et intuitive:**  Facilite l'int√©gration avec d'autres syst√®mes.\n* **Haute disponibilit√©:**  Architecture distribu√©e permettant une tol√©rance aux pannes.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:**  La configuration et la gestion d'un cluster Elasticsearch peuvent √™tre complexes pour les d√©butants.\n* **Consommation de ressources:**  N√©cessite des ressources mat√©rielles importantes pour g√©rer de grands volumes de donn√©es.\n* **Gestion des transactions:**  Pas aussi robuste que les bases de donn√©es relationnelles pour les transactions ACID.\n* **D√©pendance aux plugins:** Certaines fonctionnalit√©s avanc√©es n√©cessitent l'installation de plugins.\n* **Courbe d'apprentissage:** Peut n√©cessiter un temps d'apprentissage cons√©quent pour ma√Ætriser toutes ses fonctionnalit√©s.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "d7d2e235-de41-4429-8cc3-2048f7ea0f17",
        "title": "Feature Flag",
        "description": "---\nid: 5c3b2bc6-21b3-493c-8658-e5078738ffc5\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **feature flags** sont des m√©canismes permettant d'activer ou de d√©sactiver des fonctionnalit√©s dans une application sans avoir √† red√©ployer le code. Elles permettent de contr√¥ler l'acc√®s √† certaines parties du logiciel en temps r√©el.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn **feature flag** (ou _switch_) est un contr√¥le qui permet de g√©rer dynamiquement l'activation d'une fonctionnalit√© dans une application. Cela permet de :\n\n- **D√©sactiver rapidement** une fonctionnalit√© en cas de bugs ou de probl√®me de performance.\n- **Restreindre l'acc√®s** √† certaines fonctionnalit√©s en fonction de crit√®res (utilisateur, r√©gion, version, etc.).\n- **Tester des fonctionnalit√©s** (A/B testing) et exp√©rimenter des √©volutions avant de les d√©ployer √† tous les utilisateurs.\n\nLes **feature flags** doivent √™tre utilis√©s temporairement. Une fois qu'une fonctionnalit√© est stable et valid√©e, le flag devient inutile et doit √™tre retir√©.\n\nLes **paradigmes** de gestion des flags sont les suivants :\n\n- **√âvaluation c√¥t√© serveur** : Le serveur v√©rifie le statut du flag √† chaque appel.\n- **√âvaluation c√¥t√© client** : Le flag est mis √† jour dans le navigateur et peut imm√©diatement changer l'√©tat de la page.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Flexibilit√©** : Permet d'activer ou d√©sactiver des fonctionnalit√©s sans red√©ployer, facilitant les corrections rapides.\n- **Contr√¥le en temps r√©el** : Offre un contr√¥le granulaire sur la disponibilit√© des fonctionnalit√©s.\n- **Am√©lioration de la gestion des risques** : Id√©al pour tester des nouvelles fonctionnalit√©s sans impacter tous les utilisateurs.\n- **Exp√©rimentation** : Pratique pour effectuer des tests A/B et valider des changements avant leur d√©ploiement complet.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© de gestion** : Si trop de flags sont laiss√©s en place, cela peut rendre le code plus complexe √† maintenir.\n- **Risques de d√©pendances** : L'activation ou la d√©sactivation des flags peut introduire des comportements inattendus si mal g√©r√©s.\n- **Dettes techniques** : Les flags doivent √™tre supprim√©s d√®s qu'ils ne sont plus n√©cessaires, sinon ils peuvent s'accumuler et encombrer le code.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "dae92eec-24b8-41c0-9323-03f55e0f261f",
        "title": "Feign",
        "description": "---\nid: e2c9e1f7-64bc-479b-b312-977feb4a83ec\n---\n# Rapidement c'est quoi‚ùì\n\nFeign est une biblioth√®que [[Java]] qui simplifie la cr√©ation d'interfaces clientes pour communiquer avec des services web [[RESTful]].  Elle permet de d√©finir des interfaces Java qui sont ensuite traduites en appels [[HTTP]] par Feign.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nFeign est une biblioth√®que client [[HTTP]] d√©clarative pour [[Java]].  Au lieu d'√©crire du code HTTP verbeux (gestion des connexions, envoi des requ√™tes, parsing des r√©ponses...), vous d√©clarez une interface Java annot√©e avec des annotations sp√©cifiques (comme `@RequestMapping` de Spring MVC) pour d√©finir les endpoints des services web. Feign se charge ensuite de g√©n√©rer le code n√©cessaire pour effectuer les appels HTTP et de g√©rer les d√©tails de bas niveau.  L'interface d√©crit simplement la m√©thode HTTP (GET, POST, etc.), l'URL, les param√®tres d'entr√©e et la structure des donn√©es de sortie.\n\nFeign s'int√®gre particuli√®rement bien avec [[Spring Boot]], offrant un starter qui simplifie encore plus son int√©gration et sa configuration.  Il est souvent utilis√© dans les [[Micros services]] pour communiquer entre eux, facilitant la gestion des appels inter-services et am√©liorant la maintenabilit√© du code.  Il supporte diff√©rents codecs (pour la s√©rialisation/d√©s√©rialisation des donn√©es) comme [[Jackson]] et [[Gson]].  L'int√©gration avec des m√©canismes de gestion des erreurs et de retries est √©galement possible.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **D√©claratif et concis:**  Le code est plus lisible et plus facile √† maintenir gr√¢ce √† l'approche d√©clarative.  On se concentre sur la logique m√©tier plut√¥t que sur les d√©tails [[HTTP]].\n* **Int√©gration [[Spring Boot]]:**  Le starter [[Spring Boot]] simplifie consid√©rablement la configuration et l'int√©gration avec l'√©cosyst√®me Spring.\n* **Support de plusieurs codecs:**  La flexibilit√© de choisir son codec ([[Jackson]], [[Gson]], etc.) permet de s'adapter √† diff√©rents besoins de s√©rialisation/d√©s√©rialisation.\n* **Am√©lioration de la maintenabilit√©:**  Le code est plus propre et plus facile √† comprendre, ce qui facilite la maintenance et les modifications futures.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage initiale:**  Bien que d√©claratif, il faut comprendre les annotations et les m√©canismes de Feign pour l'utiliser efficacement.\n* **D√©bogage:**  Le d√©bogage peut √™tre plus complexe car les appels HTTP sont g√©r√©s en interne par Feign.  Un bon logging est essentiel.\n* **Complexit√© potentielle pour des sc√©narios avanc√©s:**  Pour des sc√©narios complexes de gestion des erreurs, d'authentification ou de proxies, une configuration plus avanc√©e peut √™tre n√©cessaire.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "811981f6-bf27-4a66-b238-b039f2f14b3e",
        "title": "Firecracker",
        "description": "---\nid: 77d3c304-e73a-4cb4-b3b3-3a683e1ce849\n---\n# Rapidement c'est quoi‚ùì\n\nFirecracker est une technologie de [[Virtualisation]] l√©g√®re, permettant de lancer des micro-machines virtuelles (micro [[VM]]) isol√©es. [[AWS]] l'utilise notamment pour son service Lambda.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nFirecracker est un hyperviseur open source d√©velopp√© par Amazon Web Services ([[AWS]]).  Son objectif principal est de fournir un environnement d'ex√©cution s√©curis√© et performant pour les fonctions sans serveur.  Au lieu d'utiliser des conteneurs ou des processus partag√©s, Firecracker cr√©e une microVM pour chaque fonction. Cela signifie que chaque fonction s'ex√©cute dans son propre espace d'adressage isol√©, avec son propre noyau l√©ger.  Ce niveau d'isolation am√©liore la s√©curit√© en emp√™chant une fonction compromise d'affecter les autres.  Les microVM Firecracker sont con√ßues pour d√©marrer tr√®s rapidement (millisecondes) et utiliser des ressources minimales, ce qui est crucial pour les architectures [[Function as a Service (FaaS)]] o√π de nombreuses fonctions peuvent √™tre ex√©cut√©es simultan√©ment.  Son architecture repose sur un hyperviseur bas√© sur [[Kernel-based Virtual Machine (KVM)]],  mais avec une surface d'attaque significativement r√©duite gr√¢ce √† un design minimaliste et une gestion fine des ressources.  Cela assure une meilleure performance et une plus grande fiabilit√© compar√© √† des solutions de virtualisation plus lourdes.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **S√©curit√© accrue:** L'isolation au niveau de la [[microVM]] offre une s√©curit√© significativement am√©lior√©e par rapport aux conteneurs, limitant l'impact d'une compromission.\n* **D√©marrage rapide:** Les [[microVM]] Firecracker d√©marrent tr√®s rapidement, optimisant l'efficacit√© des architectures [[Function as a Service (FaaS)]].\n* **Ressources l√©g√®res:** Elles utilisent peu de ressources syst√®me, permettant un meilleur rapport co√ªt-performance.\n* **Open source:** La nature open source permet l'auditabilit√© du code et la contribution de la communaut√©.\n* **Int√©gration avec les outils existants:**  Firecracker peut s'int√©grer facilement avec des syst√®mes existants pour la gestion et le provisionnement des machines virtuelles.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La gestion de nombreuses [[microVM]] peut complexifier l'infrastructure par rapport √† des solutions bas√©es sur des conteneurs.\n* **Surco√ªt potentiel:**  Bien que l√©ger, le surco√ªt de la virtualisation reste pr√©sent compar√© √† l'ex√©cution directe de fonctions dans un environnement non virtualis√©.  Toutefois, ce surco√ªt est souvent compens√© par les gains en s√©curit√© et isolation.\n* **N√©cessite un hyperviseur compatible:** Le fonctionnement repose sur un hyperviseur compatible, comme [[Kernel-based Virtual Machine (KVM)]].\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "336c3829-0dde-46ae-ad99-313b5adff93d",
        "title": "Flintlock",
        "description": "---\nid: 84fd28c0-e6a9-44a2-adec-e0a23bf37653\n---\n# Rapidement c'est quoi‚ùì\n\nFlintlock est un gestionnaire de paquets pour [[Firecracker]].  Il simplifie le d√©ploiement et la gestion de microservices bas√©s sur [[Firecracker]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nFlintlock est un outil en ligne de commande qui permet de g√©rer le cycle de vie complet des [[microVM]] bas√©es sur [[Firecracker]].  Il automatise des t√¢ches telles que la cr√©ation, le d√©marrage, l'arr√™t et la suppression de [[microVM]], ainsi que la gestion des images de d√©marrage et des ressources associ√©es.  Flintlock g√®re la configuration des [[microVM]], y compris l'allocation de ressources CPU, m√©moire et stockage. Il permet √©galement de g√©rer le r√©seautage des [[microVM]], en les connectant √† des r√©seaux virtuels ou physiques.  L'objectif principal de Flintlock est de simplifier le processus de d√©ploiement et de gestion d'applications conteneuris√©es ou sans serveur, ex√©cut√©es dans des environnements isol√©s et s√©curis√©s gr√¢ce √† [[Firecracker]]. Il agit comme une couche d'abstraction, cachant la complexit√© de la gestion directe de Firecracker.  Flintlock utilise des fichiers de configuration (g√©n√©ralement au format YAML) pour d√©finir les param√®tres des [[microVM]].  Ces configurations d√©crivent les ressources allou√©es, les images √† utiliser, les r√©seaux et autres aspects du d√©ploiement.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Automatisation:**  Flintlock automatise les t√¢ches r√©p√©titives, simplifiant consid√©rablement la gestion des [[microVM]].\n* **Simplification:**  Il masque la complexit√© de [[Firecracker]], le rendant plus accessible aux d√©veloppeurs.\n* **Gestion de cycle de vie complet:**  Il g√®re la cr√©ation, le d√©marrage, l'arr√™t et la suppression des [[microVM]].\n* **Gestion des ressources:**  Il permet un contr√¥le pr√©cis de l'allocation des ressources (CPU, m√©moire, stockage).\n* **Int√©gration facile (potentielle):**  Son interface en ligne de commande facilite l'int√©gration dans des pipelines [[CI/CD]].\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Maturit√©:**  En tant que projet relativement r√©cent, Flintlock pourrait pr√©senter des bugs ou des fonctionnalit√©s manquantes.\n* **Documentation:** La documentation pourrait √™tre plus compl√®te et d√©taill√©e pour certains aspects.\n* **D√©pendance √† Firecracker:** Flintlock est intrins√®quement li√© √† [[Firecracker]], limitant son usage aux environnements utilisant ce hyperviseur.\n* **Communaut√©:** La communaut√© autour de Flintlock pourrait √™tre moins active que pour des projets plus √©tablis.\n\n\n---\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "ea91c790-320f-495e-9b38-8c6c3795e063",
        "title": "Function as a Service (FaaS)",
        "description": "---\nid: 549b4aed-718c-4342-8b40-b3a1f957ef81\n---\n# Rapidement c'est quoi‚ùì\n\nFonction as a Service (FaaS) : Ex√©cution de code sans gestion d'infrastructures.  Vous envoyez du code, il s'ex√©cute, puis les ressources sont lib√©r√©es.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe Function as a Service (FaaS) est un mod√®le de cloud computing o√π le fournisseur de cloud g√®re l'infrastructure et vous fournissez uniquement le code de votre fonction.  Cette fonction est un petit morceau de code, g√©n√©ralement sans √©tat (stateless), qui s'ex√©cute en r√©ponse √† un √©v√©nement sp√©cifique.  Cet √©v√©nement peut √™tre une requ√™te [[HTTP]], un message dans une file d'attente, un changement de donn√©es dans une base de donn√©es, etc.\n\nUne fois l'√©v√©nement d√©clencheur trait√©, la fonction s'ex√©cute, effectue son traitement (par exemple, le traitement d'une image, l'envoi d'un email, la mise √† jour d'une base de donn√©es), puis se termine.  Le fournisseur de cloud g√®re automatiquement le scaling (mise √† l'√©chelle) : il peut ex√©cuter plusieurs instances de votre fonction simultan√©ment pour g√©rer les pics de demande, et r√©duire le nombre d'instances lorsque la demande diminue.  Vous ne payez que pour la dur√©e d'ex√©cution de votre fonction, ce qui permet une tarification tr√®s avantageuse pour les charges de travail sporadiques ou impr√©visibles.\n\nLes plateformes FaaS populaires incluent [[AWS Lambda]], [[Google Cloud Functions]], [[Azure Functions]], etc.  Elles offrent des fonctionnalit√©s suppl√©mentaires comme le monitoring, le logging, et l'int√©gration avec d'autres services cloud.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Tarification √©conomique:** Payez uniquement pour le temps d'ex√©cution, id√©al pour les applications √©v√©nementielles et les [[Micros services]].\n* **Scalabilit√© automatique:** Le fournisseur de cloud g√®re la mise √† l'√©chelle, vous n'avez pas √† vous soucier des ressources.\n* **Simplicit√© de d√©ploiement:** D√©ployez facilement votre code sans g√©rer d'infrastructures.\n* **Maintenance r√©duite:** Le fournisseur de cloud g√®re la maintenance et les mises √† jour.\n* **Int√©gration facile:** S'int√®gre souvent avec d'autres services cloud.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Cold starts:** Le premier appel √† une fonction peut prendre plus de temps car elle doit √™tre initialis√©e.\n* **Limitations de ressources:** Les fonctions ont des limitations de ressources (m√©moire, temps d'ex√©cution).\n* **D√©bogage plus complexe:** Le d√©bogage peut √™tre plus complexe que dans une application traditionnelle.\n* **Mod√®le √©v√©nementiel:**  Ne convient pas √† toutes les applications, notamment celles n√©cessitant des connexions persistantes ou un √©tat stable.\n* **Verrouillage fournisseur:** Migration potentiellement difficile entre diff√©rents fournisseurs de FaaS.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "eaaa031f-71c3-45df-9287-a65bff77495b",
        "title": "Certification Java 17 - Gestion des Exceptions",
        "description": "---\nid: 92360517-fdbe-479f-bdfb-06c5d02db86f\n---\n## **6.1. Utilisation de `try/catch/finally`**\n\nEn Java, une **exception** est une erreur qui interrompt le programme. Elle peut √™tre **g√©r√©e** avec `try/catch/finally`.\n\n### **Structure d‚Äôun bloc `try/catch/finally`**\n\n```java\ntry {\n    int result = 10 / 0;  // Provoque une ArithmeticException\n    System.out.println(result);\n} catch (ArithmeticException e) {\n    System.out.println(\"Erreur : division par z√©ro !\");\n} finally {\n    System.out.println(\"Ce bloc s‚Äôex√©cute toujours !\");\n}\n```\n\nüìå **Le `finally` est toujours ex√©cut√©**, m√™me en cas d‚Äôexception. Il sert g√©n√©ralement √† **fermer des ressources** (fichiers, connexions).\n\n---\n\n## **6.2. `try-with-resources` : Gestion automatique des ressources**\n\nIntroduit en **Java 7**, ce bloc permet de fermer automatiquement les ressources impl√©mentant **`AutoCloseable`**.\n\n### **Exemple avec `try-with-resources`**\n\n```java\nimport java.io.*;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"fichier.txt\"))) {\n            System.out.println(br.readLine()); // Lit la premi√®re ligne\n        } catch (IOException e) {\n            System.out.println(\"Erreur d'E/S : \" + e.getMessage());\n        }\n    }\n}\n```\n\nüìå **Pas besoin de fermer `BufferedReader` manuellement**, il est automatiquement ferm√© √† la fin du bloc.\n\n---\n\n## **6.3. Multi-catch : Attraper plusieurs exceptions**\n\nDepuis **Java 7**, on peut attraper plusieurs exceptions dans un seul `catch`, avec `|`.\n\n```java\ntry {\n    int[] tab = {1, 2, 3};\n    System.out.println(tab[5]);  // Provoque une ArrayIndexOutOfBoundsException\n} catch (ArithmeticException | ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Erreur : \" + e.getClass().getSimpleName());\n}\n```\n\nüìå **Avantages :**\n\n- Simplifie le code en regroupant des exceptions similaires.\n- √âvite les blocs `catch` redondants.\n\nüìå **Restrictions :**\n\n- Les exceptions ne doivent **pas avoir de relation d‚Äôh√©ritage** (ex: `IOException` et `FileNotFoundException` sont invalides ensemble, car `FileNotFoundException` h√©rite de `IOException`).\n\n---\n\n## **6.4. Exceptions personnalis√©es (`extends Exception` ou `extends RuntimeException`)**\n\n### **1. Exceptions contr√¥l√©es (`extends Exception`)**\n\nüîπ **Obligation** de les g√©rer avec `try/catch` ou `throws`.  \nüîπ Utilis√©es pour les erreurs pr√©visibles (ex : erreurs m√©tier).\n\n```java\nclass MonException extends Exception {\n    public MonException(String message) {\n        super(message);\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        try {\n            verifier(15);\n        } catch (MonException e) {\n            System.out.println(\"Erreur captur√©e : \" + e.getMessage());\n        }\n    }\n\n    static void verifier(int valeur) throws MonException {\n        if (valeur < 18) {\n            throw new MonException(\"√Çge insuffisant !\");\n        }\n    }\n}\n```\n\nüìå **`throws` indique qu‚Äôune m√©thode peut lever une exception.**\n\n---\n\n### **2. Exceptions non contr√¥l√©es (`extends RuntimeException`)**\n\nüîπ **Pas besoin** de `try/catch`, elles interrompent le programme.  \nüîπ Utilis√©es pour des erreurs de programmation (ex : `NullPointerException`).\n\n```java\nclass MonRuntimeException extends RuntimeException {\n    public MonRuntimeException(String message) {\n        super(message);\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        calculer(0);\n    }\n\n    static void calculer(int valeur) {\n        if (valeur == 0) {\n            throw new MonRuntimeException(\"Division par z√©ro interdite !\");\n        }\n    }\n}\n```\n\nüìå **Diff√©rence avec `Exception`** : pas d'obligation de gestion avec `try/catch`.\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **`try/catch/finally`** : G√®re les erreurs, `finally` s'ex√©cute toujours.  \n‚úÖ **`try-with-resources`** : Ferme automatiquement les ressources (`AutoCloseable`).  \n‚úÖ **Multi-catch (`catch` multiple)** : Regroupe plusieurs exceptions en une seule clause.  \n‚úÖ **Exceptions personnalis√©es** :\n\n- `extends Exception` (**contr√¥l√©es**) ‚Üí Doit √™tre g√©r√©e (`throws` ou `try/catch`).\n- `extends RuntimeException` (**non contr√¥l√©es**) ‚Üí Pas d‚Äôobligation de gestion.\n\n---"
    },
    {
        "id": "f750c1bb-d1a8-4f7f-b3d5-2dc4dfab5455",
        "title": "Certification Java 17 - Gestion des types Date, Temps, Texte et Num√©rique",
        "description": "---\nid: 8ed7f80e-caff-443e-8f21-ac0ffb429bec\n---\n## **4.1. API Date-Time : `LocalDate`, `LocalTime`, `LocalDateTime`, `ZonedDateTime`**\n\nDepuis **Java 8**, la gestion des dates et heures se fait via l‚Äô**API `java.time`**, qui remplace `java.util.Date` et `java.util.Calendar`.\n\n|**Classe**|**Description**|\n|---|---|\n|`LocalDate`|Date sans heure ni fuseau horaire|\n|`LocalTime`|Heure sans date ni fuseau horaire|\n|`LocalDateTime`|Date et heure sans fuseau horaire|\n|`ZonedDateTime`|Date, heure et fuseau horaire|\n\n### **Exemples : Cr√©ation et manipulation**\n\n```java\nimport java.time.*;\n\npublic class DateTimeDemo {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.now();  // Date actuelle\n        LocalTime time = LocalTime.now();  // Heure actuelle\n        LocalDateTime dateTime = LocalDateTime.now();  // Date et heure actuelle\n        ZonedDateTime zonedDateTime = ZonedDateTime.now();  // Avec fuseau horaire\n\n        System.out.println(date);         // 2025-03-05\n        System.out.println(time);         // 14:30:45.123\n        System.out.println(dateTime);     // 2025-03-05T14:30:45.123\n        System.out.println(zonedDateTime);// 2025-03-05T14:30:45.123+01:00[Europe/Paris]\n    }\n}\n```\n\n### **Manipulation des dates et heures**\n\nLes objets `java.time` sont **immuables**, donc chaque modification retourne une nouvelle instance.\n\n```java\nLocalDate date = LocalDate.of(2025, 3, 5);\nLocalDate newDate = date.plusDays(10).minusMonths(1);  // 2025-02-15\nLocalTime newTime = LocalTime.of(10, 30).plusHours(2); // 12:30\n```\n\n### **Formatage des dates**\n\n```java\nimport java.time.format.DateTimeFormatter;\n\nLocalDate date = LocalDate.now();\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\nSystem.out.println(date.format(formatter)); // 05/03/2025\n```\n\n---\n\n## **4.2. `Period`, `Duration`, `Instant` pour les intervalles de temps**\n\n|**Classe**|**Utilisation**|\n|---|---|\n|`Period`|Repr√©sente une diff√©rence en **jours, mois ou ann√©es**|\n|`Duration`|Repr√©sente une diff√©rence en **heures, minutes, secondes**|\n|`Instant`|Un point pr√©cis dans le temps (timestamp)|\n\n### **Exemples : `Period`**\n\n```java\nPeriod period = Period.of(1, 2, 3); // 1 an, 2 mois, 3 jours\nLocalDate date = LocalDate.now().plus(period);\nSystem.out.println(date);\n```\n\n### **Exemples : `Duration`**\n\n```java\nDuration duration = Duration.ofHours(5);\nLocalTime time = LocalTime.now().plus(duration);\nSystem.out.println(time);\n```\n\n### **Exemples : `Instant` (Timestamp)**\n\n```java\nInstant instant = Instant.now();\nSystem.out.println(instant); // 2025-03-05T13:15:30.123Z\n```\n\n---\n\n## **4.3. Manipulation de texte : `String`, `StringBuilder`, Text Blocks**\n\n### **`String` : immutable**\n\nüìå **Chaque modification cr√©e un nouvel objet.**\n\n```java\nString s = \"Java\";\ns = s.concat(\" 21\"); // Nouvelle instance\nSystem.out.println(s); // Java 21\n```\n\n### **`StringBuilder` : mutable et performant**\n\nüìå **Utilis√© pour √©viter la cr√©ation excessive d‚Äôobjets.**\n\n```java\nStringBuilder sb = new StringBuilder(\"Java\");\nsb.append(\" 21\");\nSystem.out.println(sb); // Java 21\n```\n\n|**Classe**|**Immutable ?**|**Thread-safe ?**|**Performance**|\n|---|---|---|---|\n|`String`|‚úÖ Oui|‚úÖ Oui|üö´ Lent (cr√©ation d‚Äôobjets)|\n|`StringBuilder`|üö´ Non|üö´ Non|‚úÖ Rapide|\n|`StringBuffer`|üö´ Non|‚úÖ Oui|‚úÖ Rapide (mais synchronis√©)|\n\n### **Principales m√©thodes**\n\n```java\nString s = \"  Java 21  \";\nSystem.out.println(s.trim()); // Supprime espaces : \"Java 21\"\nSystem.out.println(s.toUpperCase()); // \"JAVA 21\"\nSystem.out.println(s.replace(\" \", \"-\")); // \"-Java-21-\"\n```\n\n### **Text Blocks (`\"\"\"`) - Java 13**\n\nPermet d‚Äô√©crire du texte multilignes plus lisible.\n\n```java\nString json = \"\"\"\n    {\n        \"name\": \"Java\",\n        \"version\": 21\n    }\n    \"\"\";\nSystem.out.println(json);\n```\n\n---\n\n## **4.4. API Math et `BigDecimal`**\n\n### **üìå Math API : Calculs avanc√©s**\n\n```java\nSystem.out.println(Math.abs(-10));    // 10\nSystem.out.println(Math.pow(2, 3));   // 8.0\nSystem.out.println(Math.sqrt(16));    // 4.0\nSystem.out.println(Math.random());    // [0.0, 1.0[\n```\n\n### **üìå `BigDecimal` : pr√©cision pour les calculs financiers**\n\nüìå **`double` peut entra√Æner des erreurs d‚Äôarrondi !**\n\n```java\ndouble a = 0.1;\ndouble b = 0.2;\nSystem.out.println(a + b); // 0.30000000000000004 (erreur)\n\nBigDecimal x = new BigDecimal(\"0.1\");\nBigDecimal y = new BigDecimal(\"0.2\");\nSystem.out.println(x.add(y)); // 0.3 (pr√©cis)\n```\n\n|**Type**|**Pr√©cision**|**M√©moire**|**Utilisation**|\n|---|---|---|---|\n|`float`|32 bits|Faible|Calculs approximatifs|\n|`double`|64 bits|Moyenne|Calculs scientifiques|\n|`BigDecimal`|Illimit√©e|Plus lourd|Calculs pr√©cis (monnaie)|\n\n### **Op√©rations avec `BigDecimal`**\n\n```java\nBigDecimal valeur = new BigDecimal(\"10.50\");\nBigDecimal taxe = new BigDecimal(\"1.20\");\nBigDecimal total = valeur.multiply(taxe);\n\nSystem.out.println(total); // 12.60\n```\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **API Date-Time (`LocalDate`, `LocalTime`, etc.)**  \n‚úÖ **Gestion des intervalles avec `Period`, `Duration`, `Instant`**  \n‚úÖ **Manipulation de texte avec `String`, `StringBuilder`, `Text Blocks`**  \n‚úÖ **Math avanc√© (`Math.pow`, `Math.random`) et calculs pr√©cis avec `BigDecimal`**\n\n---\n"
    },
    {
        "id": "c074a5cf-bcf9-464c-90cd-87b69b5095f6",
        "title": "Git Hook",
        "description": "---\nid: 65c4da6e-82ad-454b-b55b-ff45a6462d19\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **[[Git]] Hooks** sont des scripts ex√©cutables permettant d‚Äôautomatiser certaines actions pendant le cycle de vie d'un d√©p√¥t [[Git]], comme avant ou apr√®s un commit, push, ou merge.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLes **Git Hooks** sont des scripts qui s'ex√©cutent √† des moments sp√©cifiques dans le flux de travail de Git. Ils permettent d'ajouter des comportements personnalis√©s et d‚Äôautomatiser des t√¢ches comme des v√©rifications, des validations ou des notifications. Ces hooks sont configur√©s directement dans le r√©pertoire `.git/hooks` du projet. Chaque hook est associ√© √† un √©v√©nement pr√©cis :\n\n1. **`pre-commit`** : Avant qu'un commit soit effectu√©. Utilis√© pour des v√©rifications comme les tests unitaires ou le formatage du code.\n2. **`commit-msg`** : Apr√®s un commit mais avant la validation du message. Permet de valider ou modifier le message de commit.\n3. **`post-commit`** : Apr√®s un commit. Souvent utilis√© pour envoyer des notifications ou effectuer des suivis.\n4. **`pre-push`** : Avant un push vers un d√©p√¥t distant. Permet de v√©rifier la qualit√© du code avant de le partager.\n5. **`post-merge`** : Apr√®s un merge. Souvent utilis√© pour r√©organiser l‚Äôespace de travail ou nettoyer l'environnement.\n6. **`pre-receive` et `update`** : Sur le serveur distant, valident les changements avant qu'ils ne soient re√ßus.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Automatisation** : Facilite l'automatisation de processus tels que les tests, le formatage de code, ou l'envoi de notifications.\n- **Validation** : Permet de valider ou modifier des actions avant qu‚Äôelles ne soient ex√©cut√©es (commit, push).\n- **Personnalisation** : Offre une grande flexibilit√© pour personnaliser le flux de travail de chaque √©quipe ou projet.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Performance** : Trop de hooks ou des v√©rifications lourdes peuvent ralentir le workflow, notamment lors des commits fr√©quents.\n- **Complexit√©** : La gestion de hooks dans un projet peut ajouter de la complexit√©, surtout si chaque d√©veloppeur a une configuration diff√©rente.\n- **D√©pendance locale** : Les hooks sont locaux au d√©p√¥t, ce qui peut poser probl√®me si l'√©quipe utilise des configurations diff√©rentes.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "329a8a5d-8878-414f-996c-fb91884b6abd",
        "title": "Git leaks",
        "description": "---\nid: d24393e4-da90-46f9-98e7-8f2025603958\n---\n# Rapidement c'est quoi‚ùì\n\nGit Leaks est un outil permettant de d√©tecter les fuites d'informations sensibles (mots de passe, cl√©s API, etc.) dans un d√©p√¥t [[Git]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nGit Leaks est un outil de s√©curit√© qui analyse le contenu d'un d√©p√¥t [[Git]] √† la recherche de patterns correspondant √† des informations sensibles.  Il fonctionne en scannant l'historique du d√©p√¥t, incluant les commits pass√©s et les fichiers supprim√©s.  L'objectif est d'identifier et de signaler la pr√©sence accidentelle de donn√©es confidentielles qui auraient pu √™tre commises par erreur.  Ces informations sensibles peuvent inclure :\n\n* **Mots de passe:**  En clair ou hach√©s (m√™me si hach√©s, certains algorithmes faibles peuvent √™tre d√©tect√©s).\n* **Cl√©s API:**  Pour divers services cloud, bases de donn√©es, etc.\n* **Jetons d'authentification:**  Utilis√©s pour l'acc√®s √† des applications ou services.\n* **Num√©ros de cartes de cr√©dit:**  Respectant les formats standards.\n* **Informations personnelles sensibles:**  Num√©ros de s√©curit√© sociale, adresses, etc. (d√©pend des r√©glages et des patterns utilis√©s).\n\nGit Leaks peut √™tre int√©gr√© comme un [[Git Hook]] (ex√©cut√© avant chaque commit) ou dans un [[pipeline CI/CD]] (ex: [[GitLab CI]], [[GitHub Actions]], [[Jenkins]]), permettant une d√©tection proactive des fuites avant qu'elles ne soient publiques.  L'int√©gration permet une automatisation de la s√©curit√© et une meilleure pr√©vention des incidents.  Il existe diff√©rentes impl√©mentations et configurations possibles, modifiant la sensibilit√© de la d√©tection (faible, moyen, fort).\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **D√©tection proactive:** Identifie les fuites avant leur publication publique.\n* **Int√©gration facile:**  Peut √™tre int√©gr√© facilement dans les workflows existants via des hooks ou des [[pipelines CI/CD]].\n* **Automatisation:**  R√©duit le risque d'erreur humaine et acc√©l√®re le processus de s√©curit√©.\n* **Couverture large:**  Peut d√©tecter diff√©rents types d'informations sensibles.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Faux positifs possibles:**  Peut g√©n√©rer des faux positifs en fonction de la configuration et de la complexit√© du code.  Un ajustement fin des r√©glages est souvent n√©cessaire.\n* **D√©pendance aux patterns:**  La d√©tection repose sur des patterns pr√©d√©finis, ce qui signifie qu'il peut manquer des types d'informations sensibles non couverts par ces patterns.\n* **Ne remplace pas une revue de code compl√®te:**  Doit √™tre consid√©r√© comme un outil compl√©mentaire √† une bonne pratique de revue de code.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "e4cdf907-2f2b-4a47-ab7b-735192fb7394",
        "title": "Grafana",
        "description": "---\nid: 73f08fc3-729a-40a2-8abd-96cbe6ca9970\n---\n# Rapidement c'est quoi‚ùì\n\nGrafana est un outil open-source de visualisation et d'analyse de donn√©es. Il permet de cr√©er des dashboards interactifs et personnalisables √† partir de nombreuses sources de donn√©es diff√©rentes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nGrafana est une plateforme d'analyse de donn√©es qui permet de visualiser et d'interroger des donn√©es provenant de diverses sources, telles que des [[Base de donn√©e]] ([[PostgreSQL]], [[MySQL]], [[MongoDB]], etc.), des m√©triques syst√®me ([[Prometheus]], [[Graphite]]), des logs ([[Elasticsearch]], [[Loki]]), des clouds ([[AWS]], [[Azure]], [[GCP]]) et bien d'autres.  Il offre une interface utilisateur intuitive pour cr√©er des dashboards personnalis√©s avec des graphiques, des tableaux, des cartes et autres visualisations.  Ces dashboards peuvent √™tre partag√©s et collaboratifs.  Grafana poss√®de un syst√®me de plugins extensif permettant d'ajouter des fonctionnalit√©s et de supporter de nouvelles sources de donn√©es.  L'utilisateur peut effectuer des requ√™tes directement sur les donn√©es, d√©finir des alertes bas√©es sur des seuils et int√©grer des fonctionnalit√©s d'exploration de donn√©es.  Au-del√† de la visualisation, Grafana permet une analyse temporelle des donn√©es, indispensable pour le monitoring et l'investigation d'incidents.  Il offre √©galement des fonctionnalit√©s d'annotation pour enrichir les donn√©es avec des informations contextuelles.  Enfin, Grafana est disponible en version open-source et en version entreprise avec des fonctionnalit√©s additionnelles.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Interface utilisateur intuitive et conviviale:** La cr√©ation et la personnalisation de dashboards est relativement facile, m√™me pour les utilisateurs non-experts.\n* **Support d'un large √©ventail de sources de donn√©es:** Grafana s'int√®gre avec de nombreux outils et technologies, ce qui en fait une solution polyvalente.\n* **Fonctionnalit√©s avanc√©es d'analyse et d'exploration:**  Au-del√† de la simple visualisation, Grafana permet une analyse approfondie des donn√©es.\n* **Communaut√© active et support important:** La communaut√© open-source est vaste et active, assurant un bon support et une disponibilit√© de ressources.\n* **Extensible gr√¢ce aux plugins:**  L'ajout de nouvelles fonctionnalit√©s et sources de donn√©es se fait facilement via les plugins.\n* **Open-source (avec une version entreprise):**  Offre un bon √©quilibre entre gratuit√© et fonctionnalit√©s avanc√©es.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© pour des configurations avanc√©es:**  La personnalisation pouss√©e et la gestion de sources de donn√©es complexes peuvent devenir difficiles.\n* **Performances potentiellement limit√©es pour des volumes de donn√©es tr√®s importants:**  Les performances peuvent √™tre affect√©es par la taille et la complexit√© des dashboards et des requ√™tes.\n* **Courbe d'apprentissage pour ma√Ætriser toutes les fonctionnalit√©s:** Bien que l'interface soit intuitive, ma√Ætriser toutes les fonctionnalit√©s avanc√©es demande du temps et de l'apprentissage.\n* **D√©pendance aux plugins pour certaines sources de donn√©es:** L'int√©gration avec certaines sources de donn√©es peut n√©cessiter l'installation et la configuration de plugins sp√©cifiques.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "447992ea-077d-4520-a2ce-324d10237189",
        "title": "Harbor",
        "description": "---\nid: 98410515-bfb3-4709-982f-a9c8134b68d5\n---\n# Rapidement c'est quoi‚ùì\n\nHarbor est un registre de conteneurs [[Open-source]], s√©curis√© et de niveau entreprise,  qui √©tend les fonctionnalit√©s de base de [[Registry Docker]].  Il ajoute des fonctionnalit√©s de gestion d'acc√®s, de scan de vuln√©rabilit√©s et de gestion de cycle de vie des images.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nHarbor est une solution de registre de conteneurs qui s'appuie sur le registre Docker standard mais y ajoute des fonctionnalit√©s cruciales pour les d√©ploiements en production.  Il permet de stocker, g√©rer et s√©curiser les images de conteneurs.  Plus pr√©cis√©ment, il offre :\n\n* **Gestion d'acc√®s robuste:**  Contr√¥le d'acc√®s bas√© sur les r√¥les ([[Role Based Access Control (RBAC]]) pour une gestion fine des permissions sur les images, permettant de d√©finir des politiques d'acc√®s granulaires pour les diff√©rents utilisateurs et √©quipes.  L'int√©gration avec des syst√®mes d'authentification existants ([[LDAP]], [[Active Directory]]) est possible.\n\n* **Scan de vuln√©rabilit√©s:** Int√©gration avec des outils de scan de vuln√©rabilit√©s (comme [[Clair]]) pour analyser les images √† la recherche de failles de s√©curit√© connues avant leur d√©ploiement.  Cela permet de d√©tecter et de corriger les vuln√©rabilit√©s potentielles d√®s la phase de d√©veloppement.\n\n* **Gestion du cycle de vie des images:**  Harbor offre des fonctionnalit√©s pour g√©rer le cycle de vie complet des images, de leur cr√©ation √† leur suppression.  Ceci inclut la gestion des versions, la promotion d'images entre diff√©rents environnements (d√©veloppement, test, production), et la gestion des politiques de r√©tention.\n\n* **R√©plication:**  Possibilit√© de r√©pliquer les images de conteneurs vers d'autres registres Harbor, permettant la cr√©ation de registres miroirs pour la haute disponibilit√© et la r√©duction de la latence.\n\n* **Audit:**  Suivi complet des actions effectu√©es sur le registre, fournissant un historique auditable pour des raisons de conformit√© et de s√©curit√©.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **S√©curit√© renforc√©e:**  Le contr√¥le d'acc√®s fin et la fonctionnalit√© de scan de vuln√©rabilit√©s contribuent grandement √† la s√©curit√© des images de conteneurs.\n* **Gestion compl√®te du cycle de vie:**  Simplifie les op√©rations et am√©liore l'efficacit√© en centralisant la gestion des images.\n* **Open source et extensible:**  Permet une grande flexibilit√© et permet des int√©grations personnalis√©es.\n* **Haute disponibilit√© et r√©plication:**  Assure la fiabilit√© et la disponibilit√© du registre.\n* **Interface utilisateur intuitive:**  Facilite la gestion et le suivi des images.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:**  La configuration initiale peut √™tre complexe pour les utilisateurs novices.\n* **Ressources n√©cessaires:**  N√©cessite des ressources serveur pour fonctionner, ce qui peut √™tre un inconv√©nient pour les petites infrastructures.\n* **D√©pendances:**  D√©pend de plusieurs composants et outils, ce qui peut compliquer la maintenance et le d√©pannage.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "15291a12-30f8-4a45-9154-edc382fca715",
        "title": "Htmx",
        "description": "---\nid: 5d0f7309-8e45-4091-b0fe-c2d1f341b3a5\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nHTMX est une biblioth√®que qui permet d'√©viter d'√©crire du [[JavaScript]] pour g√©rer les interactions sur une page web, en utilisant uniquement des attributs HTML pour g√©rer des requ√™tes [[HTTP]] dynamiques.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nHTMX simplifie l'interactivit√© web en permettant de d√©finir des comportements de requ√™tes [[HTTP]] directement via des attributs `hx-` sur les balises HTML. Il permet de :\n\n- Effectuer des requ√™tes HTTP sans JavaScript (ex : `hx-get`, `hx-post`).\n- Traiter et manipuler les r√©ponses avant et apr√®s leur insertion dans le [[DOM]].\n- G√©rer des actions comme le rafra√Æchissement de parties sp√©cifiques d'une page sans recharger la page enti√®re.\n\nCela fonctionne sur n'importe quel serveur g√©n√©rant du HTML, comme ceux en [[Go]], [[Rust]], ou [[JTE]].\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplicit√©** : Remplace une grande partie de [[JavaScript]] pour des interactions simples avec des formulaires et des requ√™tes.\n- **Adapt√© aux petits projets** : Id√©al pour les applications [[backend]] simples sans n√©cessiter de frameworks [[JavaScript]] lourds.\n- **Moins de [[JavaScript]] √† maintenir** : La logique d'interaction est d√©finie dans le [[HTML]], ce qui simplifie la gestion du code.\n- **Compatibilit√© avec n'importe quel backend** : Fonctionne avec n'importe quel serveur g√©n√©rant du [[HTML]].\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Limit√© pour des interactions complexes** : D√®s qu'il y a des traitements complexes ou des manipulations de donn√©es avant l'envoi, HTMX devient difficile √† utiliser.\n- **D√©pendance au HTML** : N√©cessite que les endpoints retournent du HTML, ce qui peut ne pas √™tre adapt√© pour des applications plus modernes qui n√©cessitent du [[JSON]].\n- **Moins flexible que le [[JavaScript]] natif** : Certaines interactions complexes peuvent √™tre plus facilement r√©alis√©es avec JavaScript plut√¥t qu'avec HTMX.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "b40bc9b4-b756-4136-9af1-c2a7fff4d923",
        "title": "Http 103 Early Hints",
        "description": "---\nid: 5bae96ff-d0fa-4198-b12f-edab95488e95\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n[[HTTP]] 103 \"Early Hints\" est un code de statut HTTP qui permet d'indiquer au client, avant la r√©ponse finale du serveur, quelles ressources pr√©charger pour am√©liorer la vitesse de rendu de la page web.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe code HTTP 103 est envoy√© par le serveur avant la r√©ponse finale √† une requ√™te [[HTTP]]. Il informe le client des ressources √† pr√©charger (comme des fichiers [[CSS]], [[JavaScript]] ou des images). Cela permet au navigateur de commencer √† charger ces ressources pendant que le serveur g√©n√®re la r√©ponse principale, r√©duisant ainsi le temps n√©cessaire pour afficher la page.\n\nLe processus fonctionne ainsi :\n\n1. Le client envoie une requ√™te au serveur.\n2. Le serveur r√©pond avec un code 103 et une liste de ressources √† pr√©charger.\n3. Le client commence √† charger ces ressources imm√©diatement.\n4. Le serveur termine le traitement et envoie la page finale, qui peut √™tre affich√©e plus rapidement puisque les ressources ont d√©j√† √©t√© pr√©charg√©es.\n\nCe m√©canisme am√©liore le temps de chargement des pages, en particulier pour les sites avec beaucoup de ressources externes.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Am√©lioration du temps de chargement** : R√©duit de mani√®re significative le temps n√©cessaire pour afficher la page (environ 30% de gain).\n- **Simplicit√© de mise en ≈ìuvre** : Facile √† configurer avec des serveurs comme [[Caddy]] et [[Apache]], en particulier avec HTTP/2.\n- **Exp√©rience utilisateur am√©lior√©e** : Le contenu de la page se charge plus rapidement gr√¢ce au pr√©chargement des ressources.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Support limit√©** : Ne fonctionne pas avec [[HTTP/1]] et n'est pas support√© par [[Nginx]].\n- **Gestion des ressources** : La gestion des ressources √† pr√©charger peut √™tre d√©licate, il faut bien s'assurer qu'elles sont n√©cessaires et g√©r√©es correctement.\n- **D√©pendance au serveur et au client** : N√©cessite un serveur compatible et un client capable de g√©rer le code 103, ce qui limite son adoption imm√©diate.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "64dc974d-6ff7-4106-b3ef-ca7485f6ddec",
        "title": "Husky",
        "description": "---\nid: fe07726f-b2ce-4806-bbe0-a77bc3cd9da7\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nHusky est un outil permettant d'ajouter et de g√©rer des [[Git Hook]] (scripts ex√©cut√©s √† des moments cl√©s du cycle de vie d'un d√©p√¥t [[Git]], comme avant un commit) pour automatiser des t√¢ches comme des tests ou des v√©rifications de code.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nHusky simplifie l'int√©gration des [[Git Hook]] dans un projet [[JavaScript]]. En l'installant dans un projet, il cr√©e un r√©pertoire `.husky` qui contient les scripts des hooks (comme `pre-commit`, `pre-push`). Ces hooks permettent d'automatiser des processus, tels que :\n\n- Lancer des tests avant de valider un commit (`pre-commit`).\n- V√©rifier le format du code (`commit-msg`).\n- Bloquer un push si certaines conditions ne sont pas remplies (`pre-push`).\n\nHusky s'installe via npm et est facile √† configurer avec des commandes simples. Il permet aussi de d√©sactiver des hooks temporairement en ajoutant des arguments ou des variables d'environnement.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Automatisation facile** : Int√©gration simple des hooks Git dans les projets.\n- **Gestion des erreurs** : Permet d‚Äôemp√™cher des commits ou des pushs si des conditions ne sont pas remplies (tests √©chou√©s, mauvaise convention de commit, etc.).\n- **Souplesse** : Facile √† activer ou d√©sactiver via des variables d‚Äôenvironnement ou des arguments Git.\n- **Large compatibilit√©** : Fonctionne avec la plupart des projets [[Git]], quel que soit le framework ou l'outil utilis√©.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance au projet** : N√©cessite un environnement [[Node.js]] et l'installation via [[npm]] pour fonctionner.\n- **Peut ralentir le d√©veloppement** : Les hooks mal configur√©s ou trop nombreux peuvent freiner le d√©veloppement, surtout avec des v√©rifications de tests lourdes.\n- **Gestion des d√©sactivations** : Bien que possible, la d√©sactivation des hooks peut ne pas √™tre triviale dans certains contextes (par exemple dans [[CI/CD]]).\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "a28276a6-3156-4612-a0cf-64eb71fe9552",
        "title": "ImportMap (JS)",
        "description": "---\nid: 302b5d4b-497b-48db-b249-9fa80b82c068\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nUn ImportMap en [[JavaScript]] est un objet [[JSON]] qui permet de simplifier et g√©rer les imports dans une application en cr√©ant des alias pour les modules. Cela facilite la gestion des d√©pendances en permettant de d√©finir des chemins d'acc√®s personnalis√©s pour les imports.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn ImportMap est utilis√© pour d√©finir des correspondances entre les cl√©s d'import (les noms des modules) et leurs chemins r√©els (URLs ou fichiers locaux). Cela permet de contr√¥ler o√π un module est charg√©, simplifiant ainsi la gestion des d√©pendances dans un projet.\n\nExemple : au lieu d'importer directement un fichier via un long chemin, vous pouvez d√©finir un alias comme \"my-component\" dans l'ImportMap et l'utiliser ensuite dans les imports de vos modules.\n\n- **D√©ploiement [[Micros Frontends]]** : Changez dynamiquement les versions de vos composants sans modifier le code, en mettant √† jour uniquement l'ImportMap.\n- **Revue de code** : Permet de rediriger facilement les imports vers des versions sp√©cifiques pour tester des modifications en direct sans toucher au code source.\n\n```html\n<script type=\"importmap\">\n\t{\n\t\t\"imports\" : {\n\t\t\t\"my-component\": \"http://localhost:8080/src/my-component.js\"\n\t\t}\n\t}\n</script>\n\n<script type=\"module\">\n\timport { MyComponent } from \"my-component\"; // L'alias d√©fini dans l'ImportMap\n</script>\n```\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Simplification des imports** : Les alias permettent d'√©viter des chemins d'import longs et complexes.\n- **Flexibilit√©** : Possibilit√© de modifier les sources des modules sans toucher au code, utile pour le d√©ploiement de micro frontends et le rollback.\n- **Am√©lioration de la revue de code** : Permet de tester et valider rapidement des modifications dans des environnements sans modifier le code source.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Compatibilit√© limit√©e** : L'usage des ImportMaps est encore relativement nouveau et n'est pas pris en charge par tous les navigateurs (n√©cessite des fonctionnalit√©s modernes du navigateur).\n- **Gestion des versions** : Lors de l'utilisation avec des syst√®mes complexes, le suivi et la mise √† jour des versions des modules peuvent devenir difficiles si l'ImportMap n'est pas bien g√©r√©.\n- **Pas de support pour les outils de bundling** : L'ImportMap fonctionne c√¥t√© client mais ne remplace pas les outils de bundling comme [[Webpack]] pour une gestion avanc√©e des modules.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "56274708-5613-4cbd-9d09-78bd95f972b7",
        "title": "Incremental Static Regeneration (ISR)",
        "description": "---\nid: 29cf6b6a-38cb-4f64-9238-309f5dfb2bed\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nIncremental Static Regeneration (ISR) est une am√©lioration du processus de g√©n√©ration statique des pages ([[Server Side Generation (SSG)]]), permettant de mettre √† jour les pages statiques d√©j√† g√©n√©r√©es sans n√©cessiter une reconstruction compl√®te du site. ISR permet de r√©g√©n√©rer des pages statiques de mani√®re incr√©mentielle √† chaque requ√™te, tout en pr√©servant les performances.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nISR permet de g√©n√©rer des pages statiques de mani√®re classique, mais avec la possibilit√© de r√©g√©n√©rer et mettre √† jour ces pages √† la demande (en fonction du temps ou de l'action de l'utilisateur) sans recompiler l'ensemble du site. Cela permet une mise √† jour progressive du contenu sans impact sur la performance globale.\n\nLe processus fonctionne ainsi :\n\n1. Lorsqu'une page est demand√©e, elle est servie statiquement si elle a d√©j√† √©t√© g√©n√©r√©e.\n2. Si la page doit √™tre mise √† jour, le serveur la r√©g√©n√®re en arri√®re-plan tout en servant l'ancienne version.\n3. Une fois la r√©g√©n√©ration termin√©e, la nouvelle version est disponible pour les requ√™tes suivantes.\n\nCela est utile dans les cas o√π les pages doivent √™tre r√©guli√®rement mises √† jour mais sans sacrifier les avantages du contenu statique.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Performance rapide** : Le contenu statique est servi tr√®s rapidement sans travail c√¥t√© serveur.\n- **SEO optimis√©** : Le contenu est index√© par les moteurs de recherche comme du contenu statique, ce qui est id√©al pour le r√©f√©rencement.\n- **Mise √† jour incr√©mentielle** : Permet de mettre √† jour des pages sp√©cifiques sans recompilation compl√®te du site.\n- **Scalabilit√©** : Id√©al pour des sites avec beaucoup de pages ou du contenu qui change r√©guli√®rement.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Temps de compilation** : Le processus de g√©n√©ration initiale des pages peut √™tre long, surtout pour les grands sites.\n- **Non adapt√© au contenu dynamique** : Pas efficace pour les pages qui changent fr√©quemment ou qui n√©cessitent une interaction en temps r√©el.\n- **Complexit√© de gestion des mises √† jour** : Suivre quelles pages doivent √™tre r√©g√©n√©r√©es et quand peut devenir difficile √† g√©rer √† grande √©chelle.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "bedba0c6-f509-4e04-b2f4-feb4b460971d",
        "title": "Interface fonctionnelle",
        "description": "---\nid: 1dc25831-3209-4d96-aa65-41a3b48815c0\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nUne interface fonctionnelle en [[Java]] est une interface qui ne poss√®de qu'une seule m√©thode abstraite.  Elle sert principalement √† cr√©er des expressions lambda et des r√©f√©rences √† des m√©thodes.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nEn [[Java]], une interface est un type qui d√©finit un contrat pour les classes qui l'impl√©mentent.  Une interface fonctionnelle simplifie ce contrat en exigeant la d√©finition d'une seule m√©thode.  Cela permet d'utiliser des expressions lambda (une forme concise d'√©crire des objets impl√©mentant une interface fonctionnelle) et des r√©f√©rences de m√©thodes (une mani√®re compacte de passer une m√©thode existante comme argument).  L'annotation `@FunctionalInterface` est utilis√©e pour indiquer qu'une interface est con√ßue comme une interface fonctionnelle.  Si une interface annot√©e avec `@FunctionalInterface` d√©finit plus d'une m√©thode abstraite, une erreur de compilation se produira.  Cependant, elle peut contenir des m√©thodes de d√©faut (avec une impl√©mentation par d√©faut), des m√©thodes statiques, et des m√©thodes priv√©es.\n\n**Exemple:**\n\n```java\n@FunctionalInterface\ninterface Print {\n    void execute(String label);\n}\n\nclass UseCase {\n    Print print;\n\n    void printAll(List<String> labels) {\n        labels.forEach(label -> print.execute(label)); // Utilisation d'une expression lambda\n    }\n\n    public static void main(String[] args) {\n        UseCase useCase = new UseCase();\n        useCase.print = label -> System.out.println(\"Label: \" + label); // affectation d'une lambda expression √† print\n\n        List<String> labels = List.of(\"Label 1\", \"Label 2\", \"Label 3\");\n        useCase.printAll(labels);\n    }\n}\n```\n\nDans cet exemple, `Print` est une interface fonctionnelle avec une seule m√©thode abstraite `execute`.  La m√©thode `printAll` utilise une expression lambda `label -> System.out.println(\"Label: \" + label)` pour fournir une impl√©mentation de `Print` directement dans l'appel de `forEach`.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Concision du code:** Les expressions lambda rendent le code plus concis et plus lisible que les classes anonymes traditionnelles.\n* **Fonctionnalit√© expressive:**  Permet d'exprimer des concepts fonctionnels (comme le passage de fonctions comme arguments) de mani√®re √©l√©gante et naturelle en [[Java]].\n* **Am√©lioration de la lisibilit√©:** Le code utilisant les interfaces fonctionnelles est g√©n√©ralement plus facile √† lire et √† comprendre.\n* **Interop√©rabilit√©:**  Facilite l'utilisation de biblioth√®ques fonctionnelles et de concepts fonctionnels dans les applications [[Java]].\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle pour les d√©butants:**  La compr√©hension des concepts fonctionnels peut prendre du temps pour les programmeurs habitu√©s √† la programmation imp√©rative.\n* **D√©bogage:** Le d√©bogage des expressions lambda peut √™tre l√©g√®rement plus complexe qu'avec des m√©thodes classiques.  Le nom de la m√©thode √©tant implicite, l‚Äôidentification de la source d‚Äôun bug peut prendre plus de temps.\n* **Surutilisation potentielle:** Une surutilisation des interfaces fonctionnelles peut rendre le code moins lisible si les expressions lambda deviennent trop complexes ou si l'intention du code n'est pas claire.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "be6a1edb-d8a6-44c7-a730-c2b2b95faaa2",
        "title": "Certification Java 17 - Internationalisation et Localisation",
        "description": "---\nid: 2726c3d7-2090-4f23-99f6-b0b1ea5a3ff1\n---\nL‚Äô**internationalisation (i18n)** et la **localisation (l10n)** permettent d‚Äôadapter une application Java √† diff√©rentes langues et r√©gions.\n\n## **13.1. `Locale` : D√©finition de la langue et du pays**\n\n### **1. Cr√©ation d‚Äôun `Locale`**\n\n```java\nimport java.util.Locale;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        Locale fr = new Locale(\"fr\", \"FR\"); // Fran√ßais (France)\n        Locale us = new Locale(\"en\", \"US\"); // Anglais (√âtats-Unis)\n\n        System.out.println(fr.getDisplayLanguage()); // Fran√ßais\n        System.out.println(us.getDisplayCountry());  // United States\n    }\n}\n```\n\nüìå **`Locale(language, country)` : d√©finit une langue et un pays.**\n\n---\n\n### **2. `Locale.getDefault()` : D√©tecter la langue du syst√®me**\n\n```java\nLocale localeParDefaut = Locale.getDefault();\nSystem.out.println(localeParDefaut); // Ex : fr_FR ou en_US\n```\n\nüìå **On peut aussi changer la locale par d√©faut :**\n\n```java\nLocale.setDefault(new Locale(\"es\", \"ES\")); // Espagnol (Espagne)\n```\n\n---\n\n## **13.2. `ResourceBundle` : Chargement de textes multilingues**\n\nüìå **Les fichiers de ressources (`.properties`) permettent de stocker les traductions.**\n\n### **1. Cr√©ation des fichiers `messages.properties`**\n\nüìÇ **Structure du projet :**\n\n```\n/src\n  /messages_fr.properties\n  /messages_en.properties\n```\n\nüìÑ **messages_fr.properties**\n\n```\nsalutation=Bonjour !\n```\n\nüìÑ **messages_en.properties**\n\n```\nsalutation=Hello!\n```\n\n### **2. Chargement des ressources avec `ResourceBundle`**\n\n```java\nimport java.util.*;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        Locale locale = new Locale(\"fr\", \"FR\"); // Changez en \"en\", \"US\" pour tester\n        ResourceBundle bundle = ResourceBundle.getBundle(\"messages\", locale);\n\n        System.out.println(bundle.getString(\"salutation\")); // Affiche \"Bonjour !\" ou \"Hello!\"\n    }\n}\n```\n\nüìå **Le fichier correspondant √† la `Locale` est automatiquement s√©lectionn√©.**\n\n---\n\n## **13.3. Formatage des Dates, Nombres et Devises**\n\n### **1. `NumberFormat` : Formatage des nombres et devises**\n\n```java\nimport java.text.NumberFormat;\nimport java.util.Locale;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        double montant = 1234.56;\n\n        NumberFormat formatFr = NumberFormat.getCurrencyInstance(Locale.FRANCE);\n        NumberFormat formatUs = NumberFormat.getCurrencyInstance(Locale.US);\n\n        System.out.println(formatFr.format(montant)); // 1 234,56 ‚Ç¨\n        System.out.println(formatUs.format(montant)); // $1,234.56\n    }\n}\n```\n\nüìå **`getCurrencyInstance(Locale)` formate selon la devise locale.**\n\n---\n\n### **2. `DateTimeFormatter` : Formatage des dates**\n\n```java\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.now();\n\n        DateTimeFormatter formatterFr = DateTimeFormatter.ofPattern(\"EEEE dd MMMM yyyy\", Locale.FRANCE);\n        DateTimeFormatter formatterUs = DateTimeFormatter.ofPattern(\"EEEE, MMMM dd, yyyy\", Locale.US);\n\n        System.out.println(date.format(formatterFr)); // Ex : mercredi 06 mars 2025\n        System.out.println(date.format(formatterUs)); // Ex : Wednesday, March 06, 2025\n    }\n}\n```\n\nüìå **`ofPattern(\"EEEE dd MMMM yyyy\", Locale)` formate la date selon la langue.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **`Locale` : D√©finit la langue et le pays (`Locale(\"fr\", \"FR\")`).**  \n‚úÖ **`ResourceBundle` : Charge des fichiers `.properties` pour les traductions.**  \n‚úÖ **`NumberFormat` : Formate les nombres et devises selon la locale.**  \n‚úÖ **`DateTimeFormatter` : Affiche les dates dans le format localis√©.**"
    },
    {
        "id": "a6594301-4ed1-451d-b843-a3e8c5e95706",
        "title": "Jpa Specification",
        "description": "---\nid: ec614572-79e3-4b20-bd55-75d790f3a468\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes **JPA Specifications** permettent de cr√©er des requ√™tes dynamiques en utilisant l'API **[[Criteria]]** de [[Spring Data ]]. Elles sont utiles pour filtrer ou rechercher des entit√©s en fonction de crit√®res variables et complexes sans avoir √† √©crire des requ√™tes [[SQL]] statiques.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLes JPA Specifications sont des interfaces permettant de d√©finir des crit√®res de recherche dynamiques avec **[[Spring Data JPA]]**. Elles utilisent l'API **[[Criteria]]** pour cr√©er des requ√™tes complexes, notamment des filtres dynamiques bas√©s sur des conditions `WHERE`. Les crit√®res sont repr√©sent√©s par des **Predicates**, qui combinent des conditions logiques et des expressions de filtrage.\n\nUne Specification est construite √† partir d'un `Predicate`, qui est une condition logique sur les donn√©es, comme un test d'√©galit√©, de comparaison ou une recherche de texte. Vous pouvez combiner plusieurs Specifications avec des m√©thodes comme `and()`, `or()`, et `not()` pour cr√©er des requ√™tes complexes.\n\nExemple de Specification :\n\n```java\npublic static Specification<User> firstNameLike(String firstName) {\n    return (root, criteriaQuery, criteriaBuilder) -> criteriaBuilder.like(root.get(\"firstName\"), \"%\" + firstName + \"%\");\n}\n```\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Flexibilit√©** : Cr√©er des requ√™tes dynamiques et personnalis√©es en fonction des besoins de l'utilisateur.\n- **R√©utilisabilit√©** : Les Specifications peuvent √™tre combin√©es et r√©utilis√©es dans diff√©rentes parties du projet.\n- **Lisibilit√©** : Permet de garder un code propre et lisible en √©vitant des requ√™tes [[SQL]] complexes int√©gr√©es directement dans le code.\n- **Int√©gration avec [[Spring Data JPA]]** : Facile √† utiliser avec des repositories Spring en √©tendant `JpaSpecificationExecutor`.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© des requ√™tes** : Lorsque les crit√®res deviennent trop complexes, la lecture et la compr√©hension des Specifications peuvent devenir difficiles.\n- **Performance** : Les requ√™tes g√©n√©r√©es peuvent √™tre lentes pour des bases de donn√©es volumineuses, n√©cessitant une surveillance attentive de la performance.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Base de donn√©e SQL]]"
    },
    {
        "id": "08fad616-b3cf-4f10-88ee-af456f64777e",
        "title": "Kibana",
        "description": "---\nid: d9182905-f3b8-4196-9a7a-a168a04da247\n---\n# Rapidement c'est quoi‚ùì\n\nKibana est une plateforme d'analyse et de visualisation de donn√©es open-source, principalement utilis√©e pour explorer et interagir avec des donn√©es index√©es par [[Elasticsearch]].  Elle permet de cr√©er des tableaux de bord, des graphiques et des visualisations interactives.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nKibana est une application web qui se connecte √† un cluster [[Elasticsearch]].  Elle utilise les donn√©es index√©es dans [[Elasticsearch]] pour g√©n√©rer des visualisations personnalis√©es.  Elle offre un large √©ventail de fonctionnalit√©s, notamment :\n\n* **Visualisation de donn√©es:** Cr√©ation de diff√©rents types de graphiques (barres, lignes, camemberts, cartes, etc.), de tableaux et d'autres repr√©sentations visuelles des donn√©es.  Ces visualisations peuvent √™tre interactives, permettant aux utilisateurs de filtrer, d'explorer et d'analyser les donn√©es de mani√®re dynamique.\n* **Exploration de donn√©es:**  Kibana permet une exploration ad-hoc des donn√©es via une interface intuitive de recherche et de filtrage.  L'utilisateur peut poser des questions aux donn√©es et obtenir des r√©ponses instantan√©ment gr√¢ce √† des requ√™tes [[Elasticsearch]].\n* **Cr√©ation de tableaux de bord:**  Agr√©gation de plusieurs visualisations en un seul tableau de bord personnalisable, offrant une vue d'ensemble des donn√©es importantes.  Ces tableaux de bord peuvent √™tre partag√©s avec d'autres utilisateurs.\n* **Monitoring:**  Surveillance des performances d'[[Elasticsearch]] et des applications qui s'y connectent.\n* **Alerting:**  Mise en place de notifications bas√©es sur des conditions sp√©cifiques d√©finies sur les donn√©es.\n* **Machine Learning:**  Int√©gration avec les capacit√©s de machine learning d'[[Elasticsearch]] pour la d√©tection d'anomalies et la pr√©diction.\n* **Gestion des utilisateurs et des r√¥les:**  Contr√¥le d'acc√®s aux donn√©es et aux fonctionnalit√©s de Kibana.\n\nKibana est con√ßu pour √™tre flexible et extensible, permettant aux utilisateurs de cr√©er des visualisations personnalis√©es et d'int√©grer des donn√©es provenant de diff√©rentes sources.  Son interface utilisateur est intuitive et conviviale, facilitant l'analyse de donn√©es m√™me pour des utilisateurs sans expertise technique approfondie.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Interface utilisateur intuitive et conviviale:**  Facile √† apprendre et √† utiliser, m√™me pour les utilisateurs moins exp√©riment√©s.\n* **Large vari√©t√© de visualisations:**  Offre un large choix de graphiques et de tableaux pour repr√©senter les donn√©es de mani√®re efficace.\n* **Flexibilit√© et extensibilit√©:**  Permet de cr√©er des visualisations personnalis√©es et de s'int√©grer √† d'autres syst√®mes.\n* **[[Open-source]]:**  Gratuit et accessible √† tous.\n* **Int√©gration avec [[Elasticsearch]]:**  Synergie parfaite avec [[Elasticsearch]] pour une exploration et une visualisation des donn√©es optimis√©es.\n* **Fonctionnalit√©s avanc√©es:**  Offre des fonctionnalit√©s puissantes comme l'alerte, le monitoring et le machine learning.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Performances pour de tr√®s gros volumes de donn√©es:**  Peut devenir lent avec des ensembles de donn√©es extr√™mement volumineux.  Une optimisation de l'indexation et de la requ√™te Elasticsearch est alors n√©cessaire.\n* **Courbe d'apprentissage pour les fonctionnalit√©s avanc√©es:**  Certaines fonctionnalit√©s plus techniques (comme le scripting ou les requ√™tes complexes) peuvent n√©cessiter une expertise plus pouss√©e.\n* **D√©pendance √† [[Elasticsearch]]:**  N√©cessite un cluster [[Elasticsearch]] fonctionnel pour fonctionner.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "5ffac79c-2a16-420e-a848-17e8e04395ba",
        "title": "Logstash",
        "description": "---\nid: 6dd4b62f-dfea-48d8-bc6d-31eb62dd914d\n---\n# Rapidement c'est quoi‚ùì\n\nLogstash est un outil open source de traitement de donn√©es en temps r√©el. Il collecte, traite et exp√©die des donn√©es provenant de diverses sources.  On parle d'[[ETL]] (Extraction, Transformation, Loading).\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLogstash est une application √©crite en [[Ruby]], con√ßue pour collecter des donn√©es de multiples sources (logs, bases de donn√©es, applications, etc.), les transformer selon des r√®gles d√©finies par l'utilisateur (filtrage, enrichissement, agr√©gation, etc.) et les envoyer vers des destinations vari√©es (bases de donn√©es, syst√®mes de stockage cloud, syst√®mes de visualisation de donn√©es, etc.).  Il fonctionne comme un pipeline modulaire, o√π chaque √©tape est d√©finie par un plugin.  Ces plugins permettent une grande flexibilit√© et une int√©gration avec un vaste √©cosyst√®me d'outils.  \n\nLe processus se d√©compose en trois phases :\n\n* **Extraction (Input):**  Logstash r√©cup√®re les donn√©es depuis les sources d√©finies.  Les plugins d'entr√©e sont nombreux et permettent de se connecter √† des sources vari√©es (filesystems, r√©seaux, bases de donn√©es, APIs, etc.).\n\n* **Transformation (Filter):**  Logstash manipule les donn√©es.  Les plugins de filtres permettent de r√©aliser des op√©rations telles que le parsing de logs, la modification de champs, l'ajout de nouveaux champs bas√©s sur des calculs, la suppression de donn√©es sensibles, etc.  Ces transformations sont d√©finies via des configurations en langage [[JSON]].\n\n* **Chargement (Output):**  Logstash envoie les donn√©es transform√©es vers les destinations sp√©cifi√©es.  Les plugins de sortie permettent d'envoyer les donn√©es vers [[Elasticsearch]], des [[Base de donn√©e]], des filesystems, des messageries ([[Apache Kafka]], [[RabbitMQ]]), etc.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Flexibilit√© et extensibilit√©:** Gr√¢ce √† son architecture modulaire bas√©e sur les plugins, Logstash s'adapte facilement √† de nombreux cas d'utilisation et s'int√®gre √† une large vari√©t√© d'outils.\n* **Open source:**  Gratuit et accessible √† tous, avec une large communaut√© contribuant √† son d√©veloppement et √† son support.\n* **Traitement en temps r√©el:**  Permet de traiter les donn√©es au fur et √† mesure de leur arriv√©e, ce qui est crucial pour certaines applications.\n* **Configuration d√©clarative:**  La configuration se fait via des fichiers JSON, facilitant la gestion et le partage des configurations.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La configuration peut devenir complexe pour des pipelines sophistiqu√©s, n√©cessitant une bonne compr√©hension de son fonctionnement et des plugins utilis√©s.\n* **Performances:**  Pour des volumes de donn√©es tr√®s importants, les performances de Logstash peuvent √™tre un point de blocage, n√©cessitant l'optimisation de la configuration et potentiellement l'utilisation de solutions plus performantes.\n* **D√©pendance √† Ruby:**  Bien que performant, [[Ruby]] peut √™tre un frein pour certains d√©veloppeurs.\n* **Maintenance et mises √† jour:**  Comme tout logiciel, Logstash n√©cessite une maintenance r√©guli√®re et la prise en compte des mises √† jour de s√©curit√©.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "e7d73c5a-a571-452f-af78-02a88e191259",
        "title": "Micrometer",
        "description": "---\nid: cab051d2-e62d-413b-acab-5c1c7aefa9de\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Micrometer** est une biblioth√®que [[Java]] qui permet de collecter et exporter des m√©triques de performance d'applications vers diff√©rents syst√®mes de monitoring tels que [[Prometheus]], [[Graphite]], [[Datadog]], et [[InfluxDB]]. Elle est souvent utilis√©e avec [[Spring Boot]].\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nMicrometer fournit une API unifi√©e pour int√©grer des m√©triques dans vos applications [[Java]]. Elle supporte plusieurs types de m√©triques, telles que les compteurs, jauges, histogrammes et timers. Ces m√©triques peuvent √™tre envoy√©es vers des syst√®mes de monitoring via des `exporters`.\n\n**Types de m√©triques :**\n\n- **Compteurs** : Compte des √©v√©nements (ex : nombre de requ√™tes HTTP).\n- **Jauges** : Mesure un √©tat variable (ex : taille d‚Äôun cache).\n- **Histogrammes** : Collecte des donn√©es statistiques (ex : latence des requ√™tes).\n- **Timers** : Mesure la dur√©e d‚Äôun √©v√©nement (ex : temps de r√©ponse d‚Äôune requ√™te HTTP).\n\n**Tags** : Vous pouvez ajouter des √©tiquettes (tags) aux m√©triques pour les diff√©rencier par exemple par type de requ√™tes ou r√©gion g√©ographique.\n\nAvec [[Spring Boot]], Micrometer s'int√®gre facilement via le module **[[Spring Boot Actuator]]**, et expose les m√©triques via des endpoints comme `/actuator/prometheus`.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Int√©gration facile avec [[Spring Boot]]** : Micrometer fonctionne bien avec [[Spring Boot]], surtout avec [[Spring Boot Actuator]].\n- **Support multiple pour les syst√®mes de monitoring** : Vous pouvez exporter les m√©triques vers de nombreux backends comme [[Prometheus]], [[Datadog]], [[Graphite]], etc.\n- **Flexibilit√© avec les tags** : Les tags permettent de filtrer et analyser les m√©triques selon plusieurs crit√®res (ex : type de requ√™tes, zones g√©ographiques).\n- **Types de m√©triques vari√©s** : Compteurs, jauges, histogrammes et timers couvrent tous les besoins courants de collecte de m√©triques.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© avec des configurations avanc√©es** : Pour des cas complexes de m√©triques personnalis√©es ou des syst√®mes de monitoring moins communs, la configuration peut devenir d√©licate.\n- **D√©pendance √† des backends externes** : La collecte et l'exportation des m√©triques n√©cessitent une configuration des syst√®mes de monitoring externes.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "fefe5553-dc94-4de2-9dd2-0288dca655c3",
        "title": "Mobile First",
        "description": "---\nid: d7eada46-6aee-42e1-8e29-8aaf4ff9526f\n---\n# Rapidement c'est quoi‚ùì\n\nUne m√©thode de conception web consistant √† prioriser l'exp√©rience utilisateur sur les petits √©crans (mobiles) avant de l'adapter aux plus grands (tablettes, ordinateurs).\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe principe \"mobile-first\" est une approche de d√©veloppement web qui place l'exp√©rience utilisateur mobile au c≈ìur du processus de conception.  Au lieu de concevoir d'abord pour les ordinateurs de bureau et ensuite de r√©duire l'interface pour les mobiles (approche \"desktop-first\"), le mobile-first commence par cr√©er une version optimis√©e pour les petits √©crans.  Cette version inclut uniquement les √©l√©ments essentiels et les fonctionnalit√©s cl√©s.  Ensuite, on ajoute progressivement des fonctionnalit√©s et du contenu pour les √©crans plus grands (tablettes et ordinateurs), en utilisant des requ√™tes [[CSS]] media pour adapter l'affichage.  L'objectif est de garantir que le site web fonctionne correctement et offre une bonne exp√©rience utilisateur, m√™me sur des appareils avec des ressources limit√©es (bande passante, puissance de calcul). Cela implique de prioriser la vitesse de chargement, la lisibilit√© et la simplicit√© de navigation sur mobile.  L'adaptation pour les √©crans plus grands se fait ensuite par ajout de contenu, d'√©l√©ments visuels, et d'une meilleure organisation de l'information, plut√¥t que par une simple mise √† l'√©chelle.  Cette approche am√©liore l'accessibilit√© et l'exp√©rience utilisateur sur tous les appareils.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Exp√©rience utilisateur optimis√©e sur mobile:**  Priorise l'exp√©rience sur les appareils les plus utilis√©s aujourd'hui.\n* **Vitesse de chargement plus rapide:**  Version all√©g√©e initialement con√ßue pour les appareils avec une bande passante limit√©e.\n* **Meilleure accessibilit√©:**  Conception plus simple et plus intuitive, facilitant la navigation pour tous les utilisateurs.\n* **Maintenance simplifi√©e:**  Un code plus propre et plus organis√©, facilitant les mises √† jour et les corrections de bogues.\n* **Adaptabilit√© et flexibilit√©:**  La conception r√©pond naturellement aux diff√©rentes tailles d'√©cran.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Potentiellement plus de travail initial:** Bien que simplifiant la maintenance √† long terme, la conception initiale peut n√©cessiter une r√©flexion plus approfondie pour adapter le contenu aux diff√©rents niveaux d'affichage.\n* **N√©cessite une bonne ma√Ætrise du [[CSS]]:** L'utilisation efficace des requ√™tes media est indispensable pour une bonne adaptation.\n* **Peut √™tre moins intuitif pour les d√©veloppeurs habitu√©s √† la m√©thode \"desktop-first\".**  Un changement de paradigme est n√©cessaire.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "27b397ff-ecad-4089-bd0d-8b2ff8680213",
        "title": "Mol√©cule",
        "description": "---\nid: bf25037e-5dd1-4369-a7aa-d581e9371615\n---\n# Rapidement c'est quoi‚ùì\n\nMol√©cule est un outil [[Python]] qui utilise [[Ansible]] et [[Testinfra]] pour tester l'infrastructure en provisionnant des environnements avec [[Docker]].  Il permet de r√©aliser des [[Test d'int√©gration]] plus rapidement qu'avec des [[VM]].\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nMol√©cule est un framework de [[Test d'infrastructure]] bas√© sur [[Python]]. Il permet de d√©finir, provisionner et tester des environnements d'infrastructure de mani√®re automatis√©e. Il s'appuie sur [[Ansible]] pour la configuration et le d√©ploiement de l'infrastructure, et sur [[Testinfra]] pour la validation et la v√©rification de l'√©tat de l'infrastructure apr√®s d√©ploiement.  L'utilisation de [[Docker]] permet de cr√©er et de d√©truire rapidement des environnements de test, acc√©l√©rant ainsi le cycle de d√©veloppement et de test.  Le principe est de d√©finir la configuration de l'infrastructure souhait√© dans un fichier de configuration (g√©n√©ralement YAML), puis Mol√©cule se charge de la cr√©ation de l'environnement [[Docker]], du d√©ploiement via [[Ansible]] et enfin de l'ex√©cution des tests [[Testinfra]] pour v√©rifier que l'infrastructure d√©ploy√©e correspond √† la configuration attendue.  Ce processus permet de tester l'infrastructure de mani√®re reproductible et fiable.\n\nCet outil rend possible le [[Test Driven Developpement (TDD)]] sur de l'[[Infra as Code (IaC]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Rapidit√©:** L'utilisation de [[Docker]] permet un provisionnement et un nettoyage rapides des environnements de test, comparativement √† l'utilisation de machines virtuelles.\n* **Reproductibilit√©:** Les tests sont ex√©cut√©s dans un environnement contr√¥l√© et reproductible, garantissant la coh√©rence des r√©sultats.\n* **Int√©gration avec [[Ansible]] et [[Testinfra]]:** Mol√©cule tire parti de la puissance d'[[Ansible]] pour le d√©ploiement et de [[Testinfra]] pour la v√©rification de l'√©tat de l'infrastructure, cr√©ant une synergie efficace.\n* **Automatisation:** L'ensemble du processus de test est automatis√©, r√©duisant le temps et l'effort manuel n√©cessaires.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Diff√©rences entre conteneurs et machines virtuelles:** Les conteneurs [[Docker]] ne reproduisent pas parfaitement l'environnement d'une machine virtuelle.  Certaines particularit√©s de fonctionnement peuvent entra√Æner des diff√©rences de comportement et des √©checs de test, n√©cessitant une adaptation des tests et des configurations.\n* **Mocking des services externes:**  Le mocking de services externes peut √™tre complexe et n√©cessiter des solutions sp√©cifiques, selon la d√©pendance du syst√®me test√©.\n* **Courbe d'apprentissage:**  La ma√Ætrise d'[[Ansible]] et de [[Testinfra]] est n√©cessaire pour utiliser efficacement Mol√©cule.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]][[MOC_Testing]]"
    },
    {
        "id": "ca07ae2e-28ac-4040-b12c-3318f0c63df4",
        "title": "Nitro",
        "description": "---\nid: 87c37a5c-546e-4b54-a1f1-db9d7e9b3d00\n---\n# Rapidement c'est quoi‚ùì\n\nNitro est le moteur [[HTTP]] de [[Nuxt.js]] 3, permettant un rendu [[Server Side Rendering (SSR)]] performant et la [[Server Side Generation (SSG)]] de sites web.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nNitro est le runtime de [[Nuxt.js]] 3, un framework [[Vue.js]].  Il remplace le pr√©c√©dent syst√®me bas√© sur [[koa.js]] et offre des am√©liorations significatives en termes de performance et de flexibilit√©.  Son c≈ìur de m√©tier est la gestion des requ√™tes [[HTTP]], permettant √† Nuxt de servir des pages web dynamiques ou pr√©-rendues.  Il g√®re :\n\n* **[[Server Side Rendering (SSR)]]:**  Le code [[Vue.js]] est ex√©cut√© sur le serveur, et le [[HTML]] r√©sultant est envoy√© au navigateur.  Cela permet un meilleur r√©f√©rencement [[SEO]] et une exp√©rience utilisateur plus rapide dans certains cas.\n* **[[Server Side Generation (SSG)]]:**  Nitro permet de g√©n√©rer des pages HTML statiques au moment du build, optimisant le temps de chargement et la performance.  Id√©al pour des sites web √† contenu statique ou peu variable.\n* **API routes:**  Permet de cr√©er facilement des API [[RESTful]].\n* **Int√©gration avec des services [[Function as a Service (FaaS)]]:**  Nitro peut d√©ployer vos applications sur des plateformes serverless comme [[AWS Lambda]], [[Netlify Functions]], etc.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Performance:** Nitro est significativement plus rapide que le moteur [[HTTP]] de Nuxt 2.\n* **Flexibilit√©:**  Il offre une grande vari√©t√© d'options de d√©ploiement et de configuration.\n* **Int√©gration Serverless:** Simplifie le d√©ploiement sur des plateformes cloud sans serveur.\n* **Maintenance et Am√©lioration:** √âtant le moteur de la nouvelle version de Nuxt, il b√©n√©ficie d'une maintenance active et d'am√©liorations r√©guli√®res.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  Pour les d√©veloppeurs habitu√©s √† Nuxt 2, l'adaptation √† Nitro peut n√©cessiter un certain temps d'apprentissage.\n* **Complexit√©:**  La configuration de Nitro peut √™tre complexe pour des applications tr√®s vastes et complexes.\n* **D√©pendances:**  La bonne performance de Nitro d√©pend fortement de la configuration et des optimisations mises en place.  Une mauvaise configuration peut d√©grader les performances.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]][[MOC_DevSecOps]]"
    },
    {
        "id": "c0d70da5-2d60-4fd4-8d80-22d7bbc471db",
        "title": "Open Feature",
        "description": "---\nid: ac13e1c4-96e2-4632-b280-c159bdad84c8\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nOpenFeature est un framework qui permet de g√©rer de mani√®re centralis√©e l‚Äôutilisation de [[Feature Flag]] dans une application. Il offre une abstraction qui permet de d√©finir des r√®gles pour activer ou d√©sactiver des fonctionnalit√©s en fonction de crit√®res d√©finis.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOpenFeature permet d‚Äôint√©grer des [[Feature Flag]] dans des applications pour activer ou d√©sactiver certaines fonctionnalit√©s √† la vol√©e. Cela permet de tester des nouvelles fonctionnalit√©s sans modifier le code ou d√©ployer une nouvelle version.\n\n- Il supporte l'utilisation de _providers_, tels que [[Flagd]], pour g√©rer les √©tats des [[Feature Flag]].\n- Chaque [[Feature Flag]] peut avoir plusieurs variantes (par exemple, activer une fonctionnalit√© √† 20% des utilisateurs).\n- Avec un provider comme [[Flagd]], la configuration des [[Feature Flag]] peut √™tre d√©finie dans un fichier [[JSON]].\n- L'int√©gration avec des frameworks comme [[Spring Boot]] permet de conditionner des comportements selon l‚Äô√©tat d‚Äôun [[Feature Flag]] dans le code, offrant ainsi un contr√¥le granulaire sur les fonctionnalit√©s activ√©es.\n\nUn exemple d‚Äôutilisation est de configurer un flag pour activer un message de bienvenue uniquement pour certains utilisateurs.\n\n# Qu'est ce qui est top ? üëç\n\n- **Abstraction simple** : OpenFeature fournit une abstraction standard pour g√©rer les [[Feature Flag]], ce qui permet de les int√©grer facilement dans diff√©rentes applications sans d√©pendre d‚Äôune impl√©mentation sp√©cifique.\n- **Flexibilit√©** : Il permet de tester des fonctionnalit√©s en production sans risque, en activant des flags pour une fraction des utilisateurs.\n- **Int√©gration fluide avec [[Spring Boot]]** : OpenFeature peut √™tre facilement int√©gr√© avec des frameworks populaires comme [[Spring Boot]] pour g√©rer dynamiquement l‚Äôactivation des fonctionnalit√©s via des flags.\n- **Support des providers multiples** : OpenFeature peut se connecter √† diff√©rents _providers_ comme [[Flagd]], offrant ainsi un large √©ventail d‚Äôoptions pour g√©rer les [[Feature Flag]].\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **N√©cessit√© d'un provider** : Pour une utilisation compl√®te, il est n√©cessaire de configurer un provider externe (comme [[Flagd]]), ce qui peut √™tre un surco√ªt de gestion pour de petites applications.\n- **Configuration suppl√©mentaire** : La configuration des [[Feature Flag]] et de leur provider n√©cessite une gestion suppl√©mentaire, notamment au niveau de l‚Äôenvironnement (ex. fichiers JSON et lancement de services).\n- **Complexit√© pour les petites applications** : Pour des projets simples, l‚Äôint√©gration d‚ÄôOpenFeature avec un provider externe peut ajouter une complexit√© inutile par rapport √† une gestion manuelle des [[Feature Flag]].\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "b32b473f-a83e-4228-b69a-812ac8669528",
        "title": "Open Service Gateway initiative (OSGi)",
        "description": "---\nid: 0fa947ed-276d-411b-9b71-cc251c56f62d\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**OSGi (Open Service Gateway Initiative)** est un framework [[Java]] qui permet de cr√©er des applications modulaires, o√π des composants appel√©s **bundles** peuvent √™tre install√©s, mis √† jour ou supprim√©s dynamiquement sans red√©marrer l'application.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOSGi facilite la cr√©ation d'applications modulaires en permettant aux composants de s'ajouter, se mettre √† jour ou se retirer √† la vol√©e. Les applications sont constitu√©es de **bundles** (fichiers JAR) qui exposent des **services**. Ces services peuvent √™tre consomm√©s par d'autres bundles de mani√®re dynamique gr√¢ce √† un syst√®me de gestion des d√©pendances et de la d√©couverte de services.\n\n**Principaux concepts :**\n\n- **Bundle** : Un module autonome contenant des services, souvent sous forme de JAR.\n- **Service** : Fonctionnalit√© offerte par un bundle, accessible √† d'autres bundles.\n- **Framework OSGi** : G√®re l'installation, la mise √† jour, la suppression et la r√©solution des d√©pendances des bundles.\n\nLes bundles peuvent interagir dynamiquement via des **r√©f√©rences de services**, permettant une communication fluide sans d√©pendances statiques.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Modularit√©** : Permet de structurer des applications complexes en modules autonomes.\n- **Dynamisme** : Ajout, mise √† jour ou retrait de modules sans interruption du service global.\n- **Flexibilit√©** : La communication entre les bundles via des services est dynamique et d√©coupl√©e.\n- **Gestion des d√©pendances** : OSGi r√©sout automatiquement les d√©pendances entre les modules.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√©** : La configuration et gestion de l'OSGi peut devenir complexe, surtout dans les applications tr√®s grandes ou avec de multiples d√©pendances.\n- **Performance** : L'overhead de gestion dynamique des bundles peut affecter les performances dans des syst√®mes tr√®s sollicit√©s.\n- **√âcosyst√®me limit√©** : Moins d'adoption dans l'√©cosyst√®me [[Java]] moderne compar√© √† d'autres solutions comme les conteneurs ou les [[Micros services]].\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "2bc77698-0a7d-453d-9044-0f6a151c7a02",
        "title": "OpenAPI",
        "description": "---\nid: d256da53-27ac-4a9e-a46c-98cea1cd5d5c\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nOpenAPI est une sp√©cification standardis√©e qui permet de d√©crire les interfaces d'API de mani√®re structur√©e, g√©n√©ralement en format YAML ou JSON. Elle permet de documenter, interagir et g√©n√©rer du code pour une API de fa√ßon automatis√©e.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOpenAPI est une sp√©cification qui standardise la description des API REST. Elle permet de d√©finir de mani√®re pr√©cise les routes, les param√®tres d'entr√©e, les types de r√©ponse, et d'autres aspects d'une API, tout en facilitant l'automatisation du d√©veloppement et de la documentation.\n\n- **Swagger vs OpenAPI** : Swagger √©tait le nom original de la sp√©cification avant son acquisition par SmartBear, qui a transf√©r√© la gestion de la sp√©cification √† l'OpenAPI Initiative. Swagger est d√©sormais utilis√© pour les outils li√©s √† cette sp√©cification.\n- **Documentation API** : La sp√©cification d√©crit les endpoints d'une API, leur m√©thode (GET, POST, etc.), les param√®tres attendus et les r√©ponses, avec des exemples et des codes de statut.\n- **G√©n√©ration de code** : En utilisant la sp√©cification OpenAPI, des outils peuvent g√©n√©rer automatiquement des clients API, des serveurs, ou des SDKs dans diff√©rents langages.\n- **Exemple** : Un fichier YAML peut d√©crire un endpoint API comme `/users`, les param√®tres qu'il accepte, et la structure de la r√©ponse (par exemple, une liste d'utilisateurs au format JSON).\n\n# Qu'est ce qui est top ? üëç\n\n- **Standardisation** : OpenAPI offre un format standard qui est largement adopt√©, ce qui simplifie l‚Äôinterop√©rabilit√© entre syst√®mes.\n- **G√©n√©ration automatique** : Outils comme Swagger peuvent g√©n√©rer automatiquement des clients et serveurs √† partir de la sp√©cification, r√©duisant le besoin de coder manuellement.\n- **Documentation interactive** : Gr√¢ce √† des outils comme Swagger UI, la documentation devient interactive, permettant aux d√©veloppeurs de tester directement les API via une interface web.\n- **Support √©tendu** : OpenAPI est bien support√© par de nombreux outils et langages, ce qui permet de l‚Äôint√©grer facilement dans des projets existants.\n- **Validation et autocompl√©tion** : Les outils peuvent valider les requ√™tes envoy√©es √† l‚ÄôAPI et offrir de l‚Äôautocompl√©tion dans les IDE pour simplifier le d√©veloppement.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© pour les petites API** : Pour de simples API, l'utilisation d'OpenAPI peut sembler un peu trop lourde, avec la n√©cessit√© de maintenir un fichier de sp√©cification.\n- **Peu adapt√© aux APIs non-REST** : Bien que l'OpenAPI soit con√ßu pour les API REST, il n‚Äôest pas aussi adapt√© pour d'autres architectures d‚ÄôAPI, comme GraphQL.\n- **N√©cessite un bon maintien de la sp√©cification** : Pour que la sp√©cification OpenAPI soit r√©ellement utile, elle doit √™tre mise √† jour √† chaque modification de l'API, ce qui demande une discipline de maintenance continue.\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "6ed60fdf-ad49-47cb-9abd-f529c1b03e76",
        "title": "OpenFaas",
        "description": "---\nid: 6e46487a-240e-46da-8086-578df2c86d75\n---\n# Rapidement c'est quoi‚ùì\n\nOpenFaaS est une plateforme serverless open source permettant de d√©ployer et g√©rer des fonctions sans serveur ([[Function as a Service (FaaS)]]). Elle est con√ßue pour la production et int√®gre des outils de monitoring.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nOpenFaaS est une plateforme de fonctions-as-a-service ([[Function as a Service (FaaS)]]) open source qui simplifie le d√©ploiement et la gestion de [[Micros services]] encapsul√©s sous forme de fonctions.  Elle utilise des conteneurs [[Docker]] pour encapsuler chaque fonction, ce qui permet une isolation et une portabilit√© √©lev√©es. OpenFaaS fournit une interface utilisateur et une API pour g√©rer le cycle de vie complet des fonctions : d√©ploiement, mise √† jour, scaling et monitoring.  Elle supporte plusieurs langages de programmation ([[Go]], [[Node.js]], [[Python]], etc.) sous la forme de template et offre une int√©gration avec des outils d'orchestration de conteneurs comme [[Kubernetes]].  Le monitoring int√©gr√© permet de surveiller les performances et l'√©tat de sant√© des fonctions d√©ploy√©es, fournissant des m√©triques cruciales pour la gestion et le d√©bogage.  La plateforme est con√ßue pour la production,  garantissant une haute disponibilit√© et une scalabilit√©.  Le \"lourd\" mentionn√© initialement se r√©f√®re probablement √† la complexit√© de la plateforme par rapport √† des solutions plus l√©g√®res, mais cette complexit√© est compens√©e par ses fonctionnalit√©s avanc√©es et sa robustesse pour les environnements de production.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open Source et communautaire:**  B√©n√©ficie d'une communaut√© active et d'un code source librement accessible, favorisant la transparence et la collaboration.\n* **Production-ready:**  Con√ßu pour des environnements de production exigeants, avec une forte attention port√©e √† la stabilit√© et √† la scalabilit√©.\n* **Int√©gration avec [[Kubernetes]]:**  Permet un d√©ploiement facile et une gestion efficace des fonctions dans des clusters Kubernetes.\n* **Monitoring int√©gr√©:**  Fournit des outils de monitoring complets pour surveiller les performances et l'√©tat de sant√© des fonctions.\n* **Support de multiples langages:**  Permet d'utiliser le langage de programmation le plus adapt√© √† chaque fonction.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La configuration et la gestion d'OpenFaaS peuvent √™tre plus complexes que des solutions FaaS plus simplifi√©es.  La courbe d'apprentissage est plus raide.\n* **Ressources:**  N√©cessite des ressources plus importantes que les solutions plus l√©g√®res, surtout pour les environnements √† forte charge.\n* **Monitoring int√©gr√©** : Il peut ne pas √™tre √©vident de brancher OpenFaaS √† son propre syst√®me de monitoring\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]][[MOC_DevSecOps]]\n\n"
    },
    {
        "id": "e09a057d-c675-4911-9715-4d9703cdac1c",
        "title": "Certification Java 17 - Packages et Modules",
        "description": "---\nid: cb5d98b8-992b-410a-94cd-54c70b45c82a\n---\n## **3.1. Organisation des classes en packages**\n\nEn Java, un **package** est un regroupement logique de classes permettant d‚Äôorganiser le code et d'√©viter les conflits de noms.\n\n### **D√©claration d‚Äôun package**\n\nChaque classe Java peut appartenir √† un package d√©fini en haut du fichier source :\n\n```java\npackage com.exemple.util;\n\npublic class Outil {\n    public static void afficherMessage() {\n        System.out.println(\"Message d'un outil\");\n    }\n}\n```\n\nüìå **Le package doit correspondre √† l‚Äôarborescence des fichiers :**  \nüìÇ `com/exemple/util/Outil.java`\n\n### **Utilisation d‚Äôun package (`import`)**\n\nDans une autre classe, on importe la classe `Outil` :\n\n```java\nimport com.exemple.util.Outil;\n\npublic class Main {\n    public static void main(String[] args) {\n        Outil.afficherMessage();\n    }\n}\n```\n\nüìå **Sans `import`**, on doit utiliser le nom complet :\n\n```java\ncom.exemple.util.Outil.afficherMessage();\n```\n\n### **Types d‚Äôacc√®s dans un package**\n\n|Modificateur|M√™me classe|M√™me package|H√©ritage|Autres classes|\n|---|---|---|---|---|\n|`public`|‚úÖ|‚úÖ|‚úÖ|‚úÖ|\n|_(default)_|‚úÖ|‚úÖ|‚ùå|‚ùå|\n|`protected`|‚úÖ|‚úÖ|‚úÖ|‚ùå|\n|`private`|‚úÖ|‚ùå|‚ùå|‚ùå|\n\nüìå **Les classes d‚Äôun m√™me package ont acc√®s aux membres `default` et `protected`.**\n\n---\n\n## **3.2. Java Platform Module System (JPMS)** _(Depuis Java 9)_\n\nJPMS permet d‚Äôorganiser le code en **modules** pour am√©liorer la maintenance et la s√©curit√©.\n\n### **Qu‚Äôest-ce qu‚Äôun module ?**\n\nUn module est un **groupe de packages** d√©clar√©s dans un fichier sp√©cial `module-info.java`.\n\nüìÇ **Structure d‚Äôun projet modulaire :**\n\n```\n/mon-projet\n  /src\n    /com.exemple.util\n      Outil.java\n    /com.exemple.app\n      Main.java\n    module-info.java\n```\n\n---\n\n## **3.3. D√©finition d‚Äôun module**\n\nChaque module a un fichier `module-info.java` d√©finissant ses **d√©pendances** et les packages qu‚Äôil expose.\n\n### **Cr√©er un module `com.exemple.util`**\n\nüìÑ `module-info.java`\n\n```java\nmodule com.exemple.util {\n    exports com.exemple.util;  // Exporte le package pour qu‚Äôil soit utilisable ailleurs\n}\n```\n\nüìÑ `Outil.java`\n\n```java\npackage com.exemple.util;\n\npublic class Outil {\n    public static void afficherMessage() {\n        System.out.println(\"Message du module util\");\n    }\n}\n```\n\n### **Utiliser un module dans un autre (`com.exemple.app`)**\n\nüìÑ `module-info.java`\n\n```java\nmodule com.exemple.app {\n    requires com.exemple.util;  // D√©pendance au module util\n}\n```\n\nüìÑ `Main.java`\n\n```java\npackage com.exemple.app;\n\nimport com.exemple.util.Outil;\n\npublic class Main {\n    public static void main(String[] args) {\n        Outil.afficherMessage();\n    }\n}\n```\n\nüìå **Sans `exports` dans `com.exemple.util`, `Outil` ne serait pas accessible !**\n\n---\n\n## **3.4. D√©pendances entre modules**\n\nUn module peut d√©pendre d‚Äôun autre gr√¢ce √† `requires`.\n\n```java\nmodule com.exemple.app {\n    requires com.exemple.util;  // D√©pend de ce module\n}\n```\n\n### **Types de `requires`**\n\n|Directive|Description|\n|---|---|\n|`requires`|D√©pendance obligatoire|\n|`requires transitive`|Propag√© aux modules d√©pendants|\n|`requires static`|D√©pendance uniquement √† la compilation|\n\nüìå **Exemple de `requires transitive`**  \nSi `com.exemple.ui` d√©pend de `com.exemple.util`, on peut propager la d√©pendance :\n\n```java\nmodule com.exemple.ui {\n    requires transitive com.exemple.util;\n}\n```\n\nMaintenant, tout module **utilisant `com.exemple.ui` aura aussi acc√®s √† `com.exemple.util`**.\n\n---\n\n## **3.5. Services dans JPMS**\n\nLe JPMS introduit un syst√®me de **services** pour **d√©finir et charger dynamiquement des impl√©mentations**.\n\n### **D√©finition d‚Äôun service**\n\nüìÑ `Service.java`\n\n```java\npackage com.exemple.service;\n\npublic interface Service {\n    void executer();\n}\n```\n\n### **Impl√©mentation du service**\n\nüìÑ `ServiceImpl.java`\n\n```java\npackage com.exemple.impl;\n\nimport com.exemple.service.Service;\n\npublic class ServiceImpl implements Service {\n    public void executer() {\n        System.out.println(\"Service ex√©cut√© !\");\n    }\n}\n```\n\n### **Module d√©finissant le service (`provides`)**\n\nüìÑ `module-info.java` dans `com.exemple.impl`\n\n```java\nmodule com.exemple.impl {\n    requires com.exemple.service;\n    provides com.exemple.service.Service with com.exemple.impl.ServiceImpl;\n}\n```\n\n### **Utilisation du service (`uses`)**\n\nüìÑ `module-info.java` dans `com.exemple.app`\n\n```java\nmodule com.exemple.app {\n    requires com.exemple.service;\n    uses com.exemple.service.Service;\n}\n```\n\nüìÑ `Main.java`\n\n```java\npackage com.exemple.app;\n\nimport com.exemple.service.Service;\nimport java.util.ServiceLoader;\n\npublic class Main {\n    public static void main(String[] args) {\n        ServiceLoader<Service> loader = ServiceLoader.load(Service.class);\n        for (Service service : loader) {\n            service.executer();  // Ex√©cute automatiquement les impl√©mentations\n        }\n    }\n}\n```\n\nüìå **Les services permettent d'ajouter dynamiquement des impl√©mentations sans modifier le code existant.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Packages** : Organisation en namespaces (`package` et `import`).  \n‚úÖ **Modules** : Groupes de packages, isol√©s avec `module-info.java`.  \n‚úÖ **D√©pendances** : `requires`, `requires transitive`.  \n‚úÖ **Services** : `provides` et `uses` pour une architecture modulaire et flexible.\n\n---\n"
    },
    {
        "id": "a64ba342-46d1-4714-b28f-193017033846",
        "title": "Pipe Angular",
        "description": "---\nid: 750c7ad4-f7ec-4a65-ae5e-a2b0f34af3be\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nUn **pipe** en [[Angular]] est un outil permettant de transformer les valeurs dans un template. Il s'agit d'une classe qui impl√©mente l'interface `PipeTransform`, utilis√©e pour effectuer des transformations sur des donn√©es avant de les afficher, tout en √©tant optimis√©e pour les performances.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUn **pipe** est une fonction qui prend une valeur en entr√©e, effectue une transformation et retourne une nouvelle valeur. Elle est utilis√©e dans les templates Angular pour formater ou modifier les donn√©es de mani√®re d√©clarative.\n\n### Fonctionnement :\n\n- Les **pipes** sont impl√©ment√©s en cr√©ant une classe qui impl√©mente l'interface `PipeTransform`, et en red√©finissant la m√©thode `transform`.\n- Lorsqu'un pipe est utilis√© dans un template, il prend la donn√©e √† transformer comme argument et applique la transformation d√©finie dans la m√©thode `transform`.\n- Par d√©faut, les pipes sont **[[M√©thode pure]]**, ce qui signifie qu'ils ne modifient pas directement la valeur pass√©e, mais retournent une nouvelle instance. Cela aide [[Angular]] √† optimiser les rendus en √©vitant des calculs redondants.\n\n### Exemple de pipe :\n\n1. **Cr√©ation** : Via la CLI [[Angular]] :\n    \n    ```\n    ng g p nom_du_pipe\n    ```\n    \n2. **Utilisation** dans le template :\n    \n    ```\n    {{ maVariable | nom_du_pipe }}\n    ```\n    \n3. **Passage de plusieurs arguments** :\n    \n    ```\n    transform(val: string | undefined, valSiVide: string): string {\n        return val ? val : valSiVide;\n    }\n    \n    {{ maVariable | nom_du_pipe : '-' }}\n    ```\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Optimisation des performances** : Les pipes sont des [[M√©thode pure]] par d√©faut, ce qui √©vite des recalculs inutiles lors des re-renders.\n- **Simplicit√©** : Les transformations dans les templates sont faciles √† mettre en place, sans avoir besoin de logique complexe dans les composants.\n- **R√©utilisabilit√©** : Les pipes peuvent √™tre r√©utilis√©s dans plusieurs templates, ce qui rend le code plus propre et modulaire.\n- **Personnalisation** : Possibilit√© de cr√©er des pipes personnalis√©s pour des transformations sp√©cifiques.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Ex√©cution fr√©quente** : Bien que les pipes purs soient optimis√©s, si des m√©thodes lourdes sont ex√©cut√©es √† l‚Äôint√©rieur d'un pipe non pur, elles risquent de diminuer les performances.\n- **Complexit√© pour les pipes impurs** : Si un pipe a des effets secondaires ou des calculs qui doivent se produire m√™me sans changement de valeur, il peut devenir difficile √† g√©rer et √† optimiser.\n- **Difficult√© avec les types complexes** : Les pipes qui manipulent des objets complexes ou des tableaux peuvent parfois entra√Æner des comportements inattendus, en raison des v√©rifications de changement de r√©f√©rence.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "426b06ca-5a74-48db-95ca-e19b5d566a06",
        "title": "Pitest",
        "description": "---\nid: 3f5a054c-06a1-4812-9802-1e1df6fe8452\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**PiTest** est une biblioth√®que de [[Test de mutation]] pour [[Java]]. Elle permet de tester la robustesse des tests unitaires en introduisant des mutations (modifications) dans le code source et en v√©rifiant si les tests les d√©tectent.\nOn surnomme cette librarie PIT.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nPiTest g√©n√®re des mutants dans le code source, c'est-√†-dire des modifications al√©atoires ou dirig√©es, et ex√©cute les tests unitaires pour voir si ces changements sont d√©tect√©s. Cela permet de mesurer l'efficacit√© des tests existants. Par exemple, un test qui ne d√©tecte pas une mutation est consid√©r√© comme insuffisant.\n\n**Fonctionnement :**\n\n- L‚Äôoutil prend un projet [[Java]] et applique des mutations sur les classes de l‚Äôapplication.\n- Il ex√©cute les tests unitaires pour chaque mutation, et g√©n√®re des rapports d√©taillant les mutations d√©tect√©es ou non par les tests.\n- Configurable via [[Maven]] ou [[Gradle]], PiTest peut √™tre ajust√© pour cibler des classes ou des tests sp√©cifiques.\n\n**Installation :**\n\n- Ajout d‚Äôun plugin dans le fichier `pom.xml` ou `build.gradle`.\n\n**Ex√©cution :**\n\n- Lancer la commande `mvn test-compile org.pitest:pitest-maven:mutationCoverage` pour commencer l'analyse.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Facilit√© d'int√©gration** : Ajout simple via [[Maven]] ou [[Gradle]].\n- **Rapports d√©taill√©s** : Produit des rapports de couverture des mutations qui aident √† √©valuer la qualit√© des tests.\n- **Param√©trable** : Permet de cibler des classes et tests sp√©cifiques pour une analyse plus fine.\n- **Am√©lioration continue** : Aide √† am√©liorer la qualit√© du code en s‚Äôassurant que les tests couvrent bien tous les cas de mutation.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Performance** : L'ex√©cution peut √™tre longue, surtout avec de grandes bases de code ou de nombreux tests.\n- **Complexit√© croissante** : Une fois les mutations et les tests multipli√©s, l‚Äôanalyse peut devenir difficile √† interpr√©ter et √† g√©rer.\n- **Faux positifs** : Certains mutants peuvent ne pas √™tre pertinents pour tous les projets, ce qui n√©cessite des ajustements fins pour √©viter des faux n√©gatifs.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "45af2e5c-f8f4-4925-8f42-792e76f6d8f8",
        "title": "Certification Java 17 - Programmation Concurrente",
        "description": "---\nid: 84743d0a-b01c-4a99-9742-863cc98bedf2\n---\n## **9.1. Threads (`Runnable`, `Callable`)**\n\nUn **thread** permet d‚Äôex√©cuter une t√¢che en parall√®le d‚Äôautres instructions.  \nJava propose deux interfaces principales :\n\n- `Runnable` (pas de retour de valeur)\n- `Callable<V>` (retourne une valeur et peut lever une exception)\n\n---\n\n### **1. Cr√©ation d‚Äôun `Thread` avec `Runnable`**\n\n```java\nclass Tache implements Runnable {\n    public void run() {\n        System.out.println(\"Thread ex√©cut√© !\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread(new Tache());\n        t.start();  // D√©marre le thread\n    }\n}\n```\n\nüìå **Ne pas appeler `run()` directement, utiliser `start()`.**\n\n---\n\n### **2. Cr√©ation d‚Äôun `Thread` avec `Callable` (retour de valeur)**\n\n```java\nimport java.util.concurrent.*;\n\npublic class Exemple {\n    public static void main(String[] args) throws Exception {\n        Callable<Integer> tache = () -> 42;\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        Future<Integer> futur = executor.submit(tache);\n\n        System.out.println(futur.get()); // 42\n        executor.shutdown();\n    }\n}\n```\n\nüìå **`Callable<V>` retourne une valeur via `Future<V>`.**\n\n---\n\n## **9.2. `ExecutorService`, `ForkJoinPool`**\n\n### **1. `ExecutorService` : Gestion des threads**\n\n```java\nExecutorService executor = Executors.newFixedThreadPool(3);\nexecutor.submit(() -> System.out.println(\"Thread lanc√©\"));\nexecutor.shutdown();\n```\n\nüìå **Avantages :**\n\n- G√®re automatiquement les threads.\n- Optimise l‚Äôutilisation des ressources.\n\n|**Type d‚ÄôExecutor**|**Description**|\n|---|---|\n|`newFixedThreadPool(n)`|Pool de `n` threads fixes|\n|`newCachedThreadPool()`|Cr√©e des threads √† la demande|\n|`newSingleThreadExecutor()`|1 seul thread (ex√©cution s√©quentielle)|\n\n---\n\n### **2. `ForkJoinPool` : Ex√©cution de t√¢ches r√©cursives**\n\nUtilis√© pour **diviser une t√¢che complexe** en sous-t√¢ches ex√©cut√©es en parall√®le.\n\n```java\nimport java.util.concurrent.*;\n\nclass TacheRecursive extends RecursiveTask<Integer> {\n    int n;\n    TacheRecursive(int n) { this.n = n; }\n\n    protected Integer compute() {\n        if (n <= 1) return n;\n        TacheRecursive t1 = new TacheRecursive(n - 1);\n        TacheRecursive t2 = new TacheRecursive(n - 2);\n        t1.fork();\n        return t2.compute() + t1.join();\n    }\n}\n\npublic class Exemple {\n    public static void main(String[] args) {\n        ForkJoinPool pool = new ForkJoinPool();\n        int result = pool.invoke(new TacheRecursive(10));\n        System.out.println(result);\n    }\n}\n```\n\nüìå **Optimis√© pour les calculs r√©cursifs lourds (`divide & conquer`).**\n\n---\n\n## **9.3. Threads Virtuels (`Virtual Threads`, `Thread.ofVirtual()`)**\n\nIntroduits en **Java 21**, les **Virtual Threads** permettent d‚Äôex√©cuter **des millions de t√¢ches concurrentes** avec peu de threads physiques.\n\n```java\nThread.startVirtualThread(() -> {\n    System.out.println(\"Thread virtuel lanc√© !\");\n});\n```\n\nüìå **Avantages :**\n\n- Tr√®s l√©ger (pas li√© √† un thread syst√®me).\n- Optimis√© pour des t√¢ches bloquantes (I/O, bases de donn√©es).\n\n---\n\n### **Cr√©ation d‚Äôun `Virtual Thread` avec un `Executor`**\n\n```java\nExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\nexecutor.submit(() -> System.out.println(\"T√¢che ex√©cut√©e\"));\nexecutor.shutdown();\n```\n\nüìå **Chaque t√¢che a son propre thread virtuel sans surcharger le CPU.**\n\n---\n\n## **9.4. Verrous (`synchronized`, `Lock`, `ReadWriteLock`)**\n\n### **1. `synchronized` : Verrouillage automatique**\n\n```java\nclass Compteur {\n    private int valeur = 0;\n\n    public synchronized void incrementer() {\n        valeur++;\n    }\n}\n```\n\nüìå **Seul un thread peut ex√©cuter `incrementer()` √† la fois.**\n\n---\n\n### **2. `Lock` : Gestion manuelle des verrous**\n\n```java\nimport java.util.concurrent.locks.*;\n\nclass Ressource {\n    private final Lock lock = new ReentrantLock();\n\n    public void acces() {\n        lock.lock();\n        try {\n            System.out.println(\"Acc√®s s√©curis√©\");\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n```\n\nüìå **`ReentrantLock` offre plus de contr√¥le que `synchronized`.**\n\n---\n\n### **3. `ReadWriteLock` : Optimisation des acc√®s concurrents**\n\n- Plusieurs lectures simultan√©es.\n- √âcriture exclusive.\n\n```java\nimport java.util.concurrent.locks.*;\n\nclass Cache {\n    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n    private int valeur = 0;\n\n    public int lire() {\n        lock.readLock().lock();\n        try { return valeur; }\n        finally { lock.readLock().unlock(); }\n    }\n\n    public void ecrire(int nouvelleValeur) {\n        lock.writeLock().lock();\n        try { valeur = nouvelleValeur; }\n        finally { lock.writeLock().unlock(); }\n    }\n}\n```\n\nüìå **Optimise les lectures fr√©quentes avec peu d‚Äô√©critures.**\n\n---\n\n## **9.5. Collections Concurrentes et Streams Parall√®les**\n\n### **1. Collections Concurrentes**\n\n|**Classe**|**Description**|\n|---|---|\n|`ConcurrentHashMap`|`HashMap` thread-safe|\n|`CopyOnWriteArrayList`|`ArrayList` modifiable sans verrou|\n|`BlockingQueue`|File d‚Äôattente bloquante|\n\n**Exemple avec `ConcurrentHashMap` :**\n\n```java\nimport java.util.concurrent.*;\n\nMap<String, Integer> map = new ConcurrentHashMap<>();\nmap.put(\"A\", 1);\nSystem.out.println(map.get(\"A\"));\n```\n\n---\n\n### **2. `Stream` Parall√®le (`parallelStream()`)**\n\nTransforme un `Stream` en version parall√®le.\n\n```java\nList<Integer> nombres = List.of(1, 2, 3, 4, 5);\nint somme = nombres.parallelStream()\n    .mapToInt(Integer::intValue)\n    .sum();\nSystem.out.println(somme);\n```\n\nüìå **Am√©liore les performances pour les grandes collections.**\n\n‚ö† **Attention :**\n\n- Un `Stream` parall√®le ne garantit pas l‚Äôordre des r√©sultats.\n- Peut √™tre moins performant pour des petites collections.\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Threads (`Runnable`, `Callable`)** : Ex√©cuter des t√¢ches en parall√®le.  \n‚úÖ **`ExecutorService`, `ForkJoinPool`** : Gestion optimis√©e des threads.  \n‚úÖ **Threads Virtuels (`VirtualThread`)** : Tr√®s l√©gers, optimis√©s pour I/O.  \n‚úÖ **Verrous (`synchronized`, `Lock`, `ReadWriteLock`)** : Gestion des acc√®s concurrents.  \n‚úÖ **Collections Concurrentes et Streams Parall√®les** : `ConcurrentHashMap`, `parallelStream()`."
    },
    {
        "id": "fae7c92e-e8a3-454a-b8d9-7c971756468c",
        "title": "Certification Java 17 - Programmation Orient√©e Objet (OOP)",
        "description": "---\nid: df0b5c7d-a921-49b3-8778-71e5ae745df5\n---\n## **2.1. D√©claration et instanciation d‚Äôobjets**\n\nEn Java, tout repose sur les **objets** et les **classes**.\n\n### **D√©finition d‚Äôune classe et cr√©ation d‚Äôobjets**\n\n```java\nclass Voiture {\n    String marque;\n    \n    Voiture(String marque) {\n        this.marque = marque;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Voiture v1 = new Voiture(\"Toyota\");  // Instanciation d‚Äôun objet\n        System.out.println(v1.marque); // Toyota\n    }\n}\n```\n\nüìå **`new` alloue de la m√©moire et retourne une r√©f√©rence √† l'objet.**\n\n### **Diff√©rences entre `new` et `newInstance()`**\n\n- `new` est utilis√© directement.\n- `Class.forName(\"NomDeClasse\").newInstance();` permet une instanciation dynamique.\n\n---\n\n## **2.2. Cycle de vie des objets**\n\nLe **cycle de vie** d‚Äôun objet comprend :\n\n1. **Cr√©ation** (`new`)\n2. **Utilisation** (modifications, appels de m√©thodes)\n3. **Perte de r√©f√©rence** (`null` ou sortie du scope)\n4. **Garbage Collection** (ramasse-miettes)\n\n**Exemple de perte de r√©f√©rence :**\n\n```java\nVoiture v1 = new Voiture(\"Renault\");\nv1 = null; // L'objet devient √©ligible au Garbage Collector\n```\n\n### **Garbage Collector (GC)**\n\nLe **GC** lib√®re la m√©moire des objets **inaccessibles**.\n\n- `System.gc();` demande un ramassage (sans garantie).\n- `finalize()` (d√©pr√©ci√©) √©tait invoqu√© avant suppression d‚Äôun objet.\n\n---\n\n## **2.3. Encapsulation et immutabilit√©**\n\n### **Encapsulation (getter/setter)**\n\nPrincipe : **cacher les champs** et y acc√©der via **des m√©thodes publiques**.\n\n```java\nclass CompteBancaire {\n    private double solde;\n\n    public double getSolde() { return solde; }\n    public void deposer(double montant) { solde += montant; }\n}\n```\n\n‚úÖ **S√©curise les donn√©es**  \n‚úÖ **Permet des r√®gles m√©tier (ex: solde min.)**\n\n### **Immutabilit√©**\n\nUn objet **immuable** ne peut pas √™tre modifi√© apr√®s cr√©ation.  \n**Bonne pratique :** D√©clarer les champs `private final` et ne fournir aucun setter.\n\n```java\nclass Client {\n    private final String nom;\n\n    Client(String nom) { this.nom = nom; }\n    public String getNom() { return nom; }\n}\n```\n\n---\n\n## **2.4. H√©ritage, classes abstraites et classes scell√©es (sealed)**\n\n### **H√©ritage (`extends`)**\n\nPermet de r√©utiliser le code d'une classe m√®re.\n\n```java\nclass Animal {\n    String type = \"Mammif√®re\";\n}\n\nclass Chien extends Animal {\n    String race = \"Labrador\";\n}\n```\n\nüìå **Un objet `Chien` poss√®de aussi `type`.**\n\n### **Classes Abstraites (`abstract`)**\n\nImpossible √† instancier, sert de mod√®le.\n\n```java\nabstract class Animal {\n    abstract void faireDuBruit();  // M√©thode abstraite\n}\nclass Chien extends Animal {\n    void faireDuBruit() { System.out.println(\"Woof!\"); }\n}\n```\n\n### **Classes Sealed (`sealed`)** _(Java 17)_\n\nRestreint l‚Äôh√©ritage √† des classes pr√©cises.\n\n```java\nsealed class Animal permits Chien, Chat {}\nfinal class Chien extends Animal {}  // Pas d‚Äôh√©ritage possible\nnon-sealed class Chat extends Animal {}  // H√©ritage permis\n```\n\n---\n\n## **2.5. Polymorphisme, type objet vs type r√©f√©rence**\n\n**Polymorphisme** : une m√©thode peut se comporter diff√©remment selon l‚Äôobjet.\n\n```java\nclass Animal {\n    void faireDuBruit() { System.out.println(\"Bruit d‚Äôanimal\"); }\n}\nclass Chien extends Animal {\n    void faireDuBruit() { System.out.println(\"Woof!\"); }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Animal a = new Chien();  // Type r√©f√©rence : Animal, type objet : Chien\n        a.faireDuBruit();  // Woof! (m√©thode de Chien)\n    }\n}\n```\n\nüìå **Le type objet d√©termine la m√©thode ex√©cut√©e.**\n\n---\n\n## **2.6. Op√©rateur `instanceof` et Pattern Matching**\n\n### **Op√©rateur `instanceof`** _(avant Java 16)_\n\n```java\nif (obj instanceof Chien) {\n    Chien c = (Chien) obj;\n    c.aboyer();\n}\n```\n\n### **Pattern Matching (`instanceof`)** _(Java 16+)_\n\n```java\nif (obj instanceof Chien c) {\n    c.aboyer();  // Plus besoin de caster !\n}\n```\n\n---\n\n## **2.7. Interfaces : m√©thodes `default`, `static`, priv√©es**\n\nUne **interface** d√©finit un **contrat** que les classes doivent respecter.\n\n```java\ninterface Animal {\n    void faireDuBruit();\n}\nclass Chien implements Animal {\n    public void faireDuBruit() { System.out.println(\"Woof!\"); }\n}\n```\n\n### **M√©thodes `default`**\n\nPermet d‚Äôajouter une m√©thode sans casser les impl√©mentations existantes.\n\n```java\ninterface Animal {\n    default void dormir() { System.out.println(\"Je dors\"); }\n}\n```\n\n### **M√©thodes `static`**\n\nUne m√©thode statique appartient √† l'interface et ne peut pas √™tre red√©finie.\n\n```java\ninterface Utilitaire {\n    static void afficherMessage() { System.out.println(\"Message statique\"); }\n}\n```\n\n### **M√©thodes priv√©es** _(Java 9+)_\n\nPermet d'√©viter la duplication de code dans une interface.\n\n```java\ninterface Animal {\n    default void action() {\n        preparer();\n        System.out.println(\"Faire une action\");\n    }\n    private void preparer() {\n        System.out.println(\"Pr√©paration...\");\n    }\n}\n```\n\n---\n\n## **2.8. Enums avec champs, m√©thodes et constructeurs**\n\nUn **enum** repr√©sente un ensemble **fixe** de valeurs.\n\n```java\nenum Jour {\n    LUNDI, MARDI, MERCREDI;\n}\n```\n\n### **Enum avec champs et m√©thodes**\n\n```java\nenum Statut {\n    EN_COURS(1), TERMINE(2);\n\n    private final int code;\n    \n    Statut(int code) { this.code = code; }\n    public int getCode() { return code; }\n}\n```\n\nüìå **Les `enum` peuvent avoir des m√©thodes et des constructeurs priv√©s.**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Encapsulation** avec `private` et `getter/setter`  \n‚úÖ **Immutabilit√©** : `final` et pas de setter  \n‚úÖ **H√©ritage** : `extends` pour sp√©cialiser une classe  \n‚úÖ **Classes abstraites** : mod√®le de base √† impl√©menter  \n‚úÖ **Classes `sealed`** : restreint l'h√©ritage (Java 17)  \n‚úÖ **Polymorphisme** : le type objet dicte le comportement  \n‚úÖ **`instanceof` avec Pattern Matching** : simplifie les cast  \n‚úÖ **Interfaces avec m√©thodes `default`, `static`, priv√©es`** ‚úÖ **`enum` avec m√©thodes et champs priv√©s**\n\n---\n\n[[Java]] [[Certification Java 17]]"
    },
    {
        "id": "37d4edee-5398-4339-b662-b16aff7c6389",
        "title": "Prometheus",
        "description": "---\nid: ec08a5df-a7b8-4dd1-bbca-5109de9470bd\n---\n# Rapidement c'est quoi‚ùì\n\nPrometheus est un syst√®me de [[Monitoring]] et d'alerte [[Open-source]] qui stocke les donn√©es sous forme de s√©ries temporelles.  Il r√©cup√®re des m√©triques et les affiche via un tableau de bord.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nPrometheus est un syst√®me de surveillance et d'alerte open source bas√© sur une architecture de pull (contrairement √† une architecture de push).  Il fonctionne en interrogeant r√©guli√®rement (par d√©faut toutes les 15 secondes) des targets (applications, serveurs, etc.) exposant des m√©triques via une interface [[HTTP]] (g√©n√©ralement le port 9100).  Ces m√©triques sont des s√©ries temporelles, c'est-√†-dire des donn√©es associ√©es √† un timestamp.  Chaque m√©trique est identifi√©e par un nom et un ensemble d'√©tiquettes (labels) qui permettent de filtrer et agr√©ger les donn√©es.\n\nPrometheus stocke ces donn√©es dans une [[Base de donn√©e]] interne et les expose via une interface utilisateur web.  Il permet de cr√©er des alertes bas√©es sur des r√®gles d√©finies sur les m√©triques (ex:  si la latence d√©passe 500ms, envoyer une alerte).  L'outil offre des fonctionnalit√©s de visualisation des donn√©es et de cr√©ation de dashboards pour suivre l'√©tat de son infrastructure.  Il peut √™tre √©tendu via des exporters (pour collecter des m√©triques de diff√©rents syst√®mes) et des librairies clientes pour exposer des m√©triques personnalis√©es.  Contrairement √† certains syst√®mes de monitoring qui utilisent une architecture de push (o√π les targets envoient les m√©triques √† un serveur central), Prometheus utilise une architecture de pull, ce qui simplifie la configuration et am√©liore la fiabilit√©.  Cependant, cela n√©cessite que les targets soient toujours accessibles √† Prometheus.  Son stockage interne est bas√© sur un mod√®le de donn√©es temps-s√©rie optimis√© pour les requ√™tes de donn√©es et la performance des requ√™tes.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open source et gratuit:**  Large communaut√©, documentation abondante et contributions constantes.\n* **Architecture robuste et scalable:**  Capable de g√©rer un grand nombre de m√©triques et de targets.\n* **Flexibilit√© et extensibilit√©:**  Large choix d'exporters et de librairies clientes.\n* **Syst√®me d'alertes puissant:**  Cr√©ation facile de r√®gles d'alerte complexes.\n* **Interface utilisateur intuitive:**  Visualisation et exploration des donn√©es simples et efficaces.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Architecture de pull:**  N√©cessite que les targets soient toujours disponibles et accessibles.  Les targets inaccessibles ne sont pas monitor√©es.\n* **Stockage interne limit√©:**  Pour de tr√®s grands volumes de donn√©es, une solution de stockage externe est n√©cessaire (comme [[Thanos]], par exemple).\n* **Courbe d'apprentissage:**  La configuration et l'utilisation peuvent n√©cessiter une certaine expertise pour tirer pleinement parti de ses fonctionnalit√©s avanc√©es.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "ba0218cf-bb84-4722-9d0a-517f4c6f82be",
        "title": "Raison d‚Äôune bonne architecture d‚Äôun SI",
        "description": "---\nid: ce97e1da-3b18-44bc-a286-a42fc3195261\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nUne bonne architecture d'un Syst√®me d'Information (SI) est une structure flexible, √©volutive et adapt√©e aux besoins actuels et futurs de l'organisation. Elle doit √™tre con√ßue pour faciliter le changement sans sacrifier la stabilit√©.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nUne bonne architecture d‚Äôun SI permet de r√©pondre efficacement aux besoins imm√©diats tout en restant ouverte aux √©volutions futures. Elle doit √™tre :\n\n- **Adapt√©e au besoin** : Chaque architecture doit √™tre align√©e avec les objectifs m√©tiers et les contraintes techniques sp√©cifiques √† l'organisation.\n- **Flexible** : Elle doit permettre des changements rapides sans compromettre la performance ou la stabilit√© du syst√®me.\n- **Minimiser les anticipations excessives** : Une architecture trop rigide, construite autour de changements futurs incertains, peut devenir obsol√®te rapidement. Il est souvent plus facile de modifier une architecture au fil de l‚Äôeau plut√¥t que de tenter de tout pr√©voir.\n- **Architecture continue** : Elle √©volue de mani√®re incr√©mentale, en r√©pondant aux besoins imm√©diats et en int√©grant progressivement les changements sans s‚Äôimposer des mod√®les rigides.\n\nL'id√©e est d'√©viter le \"gros DAT\" ([[Document d'Architecture Technique]]) fig√© qui restreint l'innovation et de favoriser une approche agile et √©volutive, o√π l'architecture peut se r√©ajuster au fur et √† mesure des besoins.\n\n# Qu'est ce qui est top ? üëç\n\n- **Flexibilit√©** : Permet de s'adapter rapidement aux √©volutions du march√© et aux besoins changeants des utilisateurs.\n- **√âvolutivit√©** : L'architecture est construite pour int√©grer facilement de nouveaux composants ou de nouvelles fonctionnalit√©s.\n- **R√©activit√©** : Une architecture continue facilite la gestion des impr√©vus sans perturber l‚Äôensemble du syst√®me.\n- **Optimisation des co√ªts** : En adaptant les ressources en fonction des besoins r√©els et non des projections, l‚Äôarchitecture √©vite le gaspillage.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© √† court terme** : Lors de la mise en place d‚Äôune architecture flexible, il peut √™tre difficile de g√©rer une transition en douceur avec les syst√®mes existants.\n- **Risque d'it√©ration non ma√Ætris√©e** : Une trop grande flexibilit√© peut mener √† des ajustements constants et √† une incoh√©rence entre les diff√©rentes parties du syst√®me.\n- **Gestion de la dette technique** : Sans une vision claire, l'architecture continue peut accumuler de la dette technique au fil des ajustements successifs.\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "3f37d305-6168-491b-8487-7d9c7316354c",
        "title": "Redis Sentinel",
        "description": "---\nid: 7c33ceca-69d3-469a-9986-edcee3a042f4\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nRedis Sentinel est un outil de haute disponibilit√© pour [[Redis]], permettant de surveiller un serveur Redis principal (master) et ses r√©pliques (slaves), et de promouvoir automatiquement un slave en master en cas de d√©faillance du master actuel.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nRedis Sentinel est con√ßu pour assurer la disponibilit√© et la r√©silience des instances Redis. Il surveille le serveur [[Redis]] master et ses r√©pliques (slaves) pour d√©tecter toute panne. En cas de d√©faillance du master, Sentinel s√©lectionne un slave (celui ayant la derni√®re mise √† jour) pour le promouvoir en master et ainsi maintenir la disponibilit√© du service Redis.\n\n- **Architecture** : Un master [[Redis]] avec plusieurs r√©pliques (slaves) synchronis√©es.\n- **R√¥le des Sentinels** : Surveiller l'√©tat du master et des slaves, d√©tecter les pannes, et effectuer un basculement automatique (failover) en cas de d√©faillance.\n- **Crit√®res de promotion** : Le slave avec la derni√®re mise √† jour devient le nouveau master.\n- **Limitation** : Redis Sentinel ne constitue pas un cluster Redis distribu√© complet, car il ne g√®re pas la r√©partition des donn√©es entre plusieurs instances. Il se concentre uniquement sur la haute disponibilit√©.\n\n# Qu'est ce qui est top ? üëç\n\n- **Haute disponibilit√©** : En cas de panne du master, un slave est automatiquement promu pour minimiser les interruptions de service.\n- **Surveillance continue** : Sentinel surveille en permanence l'√©tat des instances [[Redis]], garantissant une d√©tection rapide des probl√®mes.\n- **Failover automatique** : Pas besoin d'intervention manuelle pour promouvoir un nouveau master, ce qui r√©duit le risque d'erreur et am√©liore la r√©activit√©.\n- **Simplicit√©** : Configuration relativement simple pour g√©rer la [[Haute disponibilit√©]] avec Redis.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Pas un cluster Redis complet** : Redis Sentinel ne g√®re pas la distribution des donn√©es ou le partitionnement, contrairement √† un cluster Redis distribu√©.\n- **D√©pendance au r√©seau** : Si Sentinel et les instances Redis sont mal configur√©s ou s'il y a des probl√®mes r√©seau, le failover peut √©chouer.\n- **S√©lection du nouveau master** : Le processus de promotion d'un slave peut parfois √™tre lent si les instances Redis ne sont pas bien synchronis√©es.\n- **Limit√© √† la [Haute disponibilit√©]]** : Redis Sentinel ne prend pas en charge d'autres fonctionnalit√©s avanc√©es comme la gestion automatique des partitions ou des volumes de donn√©es.\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "6b6bd7b1-3d82-4f65-be46-aa30c20f278f",
        "title": "Redis",
        "description": "---\nid: c3202556-f6cf-4e20-b7e8-09270e6ab143\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Redis** est une [[Base de donn√©e NoSQL]] , utilis√©e comme cache et store de structures de donn√©es telles que des cha√Ænes de caract√®res, des listes, des ensembles, etc. Elle est populaire pour sa rapidit√© et sa simplicit√© d‚Äôutilisation, particuli√®rement pour la gestion de donn√©es temporaires.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nRedis offre des fonctionnalit√©s diverses comme le caching, la gestion de sessions et le stockage temporaire de donn√©es, gr√¢ce √† sa capacit√© √† stocker des donn√©es en m√©moire et √† les manipuler tr√®s rapidement.\n\nAvec [[Java]], Redis peut √™tre int√©gr√© via plusieurs m√©canismes :\n\n1. **Redis Template** :  \n    Permet d'interagir avec Redis √† un niveau bas, proche de la ligne de commande. Il est flexible mais n√©cessite plus de gestion manuelle des op√©rations Redis.\n    \n2. **[[Spring Data Redis]]** :  \n    Permet d'utiliser Redis avec l'API de [[Spring Data]], offrant une interface plus haut niveau pour interagir avec Redis comme avec une base de donn√©es traditionnelle (similaire √† Spring [[Data JPA]]). Cependant, pour des objets complexes, cette approche peut mener √† des requ√™tes excessives, impactant ainsi la performance.\n    \n3. **[[Spring Cache]]** :  \n    Permet une gestion de cache plus simple en annotant les m√©thodes avec `@Cacheable`, ce qui permet de stocker et de r√©cup√©rer les r√©sultats des m√©thodes dans Redis sans code suppl√©mentaire complexe.\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **[[Redis Template]]** :\n    - Permet une gestion fine des interactions avec Redis.\n    - Offre plus de flexibilit√© pour des cas d‚Äôusage sp√©cifiques.\n\n- **[[Spring Data Redis]]** :    \n    - Permet une int√©gration transparente avec [[Spring Framework]].\n    - Facile √† utiliser pour les utilisateurs d√©j√† familiers avec Spring Data.\n\n- **[[Spring Cache]]** :\n    - Tr√®s simple √† impl√©menter pour la mise en cache des r√©sultats de m√©thodes.\n    - Automatisation des processus de cache sans complexit√© suppl√©mentaire.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Redis Template** :\n    - N√©cessite de g√©rer soi-m√™me les interactions avec Redis, ce qui peut augmenter la complexit√© du code.\n- **Spring Data Redis** :\n    - Peut entra√Æner des probl√®mes de performance pour des objets complexes en raison du nombre √©lev√© de requ√™tes n√©cessaires pour r√©cup√©rer un objet complet.\n- **Spring Cache** :\n    - Peut √™tre limit√© en termes de contr√¥le pr√©cis sur les strat√©gies de cache et la gestion des donn√©es en m√©moire.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "86b2d35e-3053-4031-ad65-92db698ddade",
        "title": "Renovate_Bot",
        "description": "---\nid: 98f7085c-54d4-4d54-a6ba-7512a4ffaed8\n---\n# Rapidement c'est quoi‚ùì\n\nRenovate Bot est un outil automatis√© qui analyse les d√©pendances de vos projets [[Git]]  et cr√©e des pull/merge requests pour mettre √† jour ces d√©pendances vers leurs derni√®res versions stables ou sp√©cifiques.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nRenovate Bot est un outil d'automatisation de la gestion des d√©pendances logicielles. Il fonctionne en analysant le fichier de configuration de votre projet (ex: `package.json` pour [[Node.js]], `pom.xml` pour [[Maven]] ...) afin d'identifier toutes les d√©pendances utilis√©es.  Il compare ensuite les versions actuelles avec les derni√®res versions disponibles sur les registres de paquets (ex: [[npm]], [[Maven Central]]).  Pour chaque d√©pendance obsol√®te, Renovate Bot cr√©e une pull request s√©par√©e contenant les mises √† jour n√©cessaires.  L'utilisateur peut ensuite examiner et fusionner ces pull requests, automatisant ainsi le processus fastidieux et potentiellement risqu√© de mise √† jour manuelle des d√©pendances.  L'outil est configurable pour d√©finir des r√®gles de mise √† jour (ex:  mise √† jour majeure, mineure, patch, fr√©quence de scan, branches cibles, etc.).  Il prend en charge un large √©ventail de gestionnaires de paquets et de langages de programmation.  Renovate Bot peut √™tre int√©gr√© √† des [[pipelines CI/CD]] comme [[GitHub Action]] ou [[GitLab CI]].  Il permet √©galement la gestion de configurations complexes en utilisant des fichiers de configuration YAML ou JSON.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Automatisation:**  √âlimine le besoin de mises √† jour manuelles chronophages et sujettes aux erreurs.\n* **S√©curit√©:**  Aide √† maintenir les d√©pendances √† jour, r√©duisant les risques de vuln√©rabilit√©s.\n* **Flexibilit√©:**  Configuration personnalis√©e pour contr√¥ler le processus de mise √† jour (fr√©quence, versions cibles, etc.).\n* **Support multi-langage et multi-gestionnaire de paquets:** Couverture large des √©cosyst√®mes de d√©veloppement.\n* **Int√©gration facile:**  Int√©gration avec les plateformes [[Git]] les plus populaires.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:**  La configuration peut √™tre complexe pour des projets avec des d√©pendances nombreuses ou des exigences sp√©cifiques.\n* **D√©pendance √† un service tiers:**  La fonctionnalit√© d√©pend d'une connexion stable √† l'infrastructure de Renovate Bot.\n* **Potentiel de conflits de fusion:**  Les mises √† jour automatiques peuvent parfois cr√©er des conflits avec d'autres modifications, n√©cessitant une intervention manuelle.\n* **Surveillance n√©cessaire:**  Bien que automatis√©, il est toujours n√©cessaire de surveiller les pull requests g√©n√©r√©es pour √©viter les probl√®mes.\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension des gestionnaires de paquets et des principes de gestion des d√©pendances.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "e8412082-486c-4479-8ffb-666b4cc1ff5f",
        "title": "Responsive des images html css",
        "description": "---\nid: 7822de72-7567-4eb4-9a12-3980e4e48032\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe responsive des images [[HTML]]/[[CSS]] permet de charger des images diff√©rentes en fonction de la taille de l'√©cran, de l'orientation ou d'autres crit√®res. Cela permet d'optimiser le temps de chargement et la performance d'un site web.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe balisage `<picture>` et les √©l√©ments `<source>` dans HTML permettent de d√©finir des images sp√©cifiques √† afficher selon des conditions pr√©cises, comme la taille de l'√©cran ou l'orientation du dispositif. Chaque `<source>` peut contenir une condition via l'attribut `media` et d√©finir la source de l'image avec `srcset`. Le navigateur choisira automatiquement l'image la plus adapt√©e.\n\nExemple :\n\n```html\n<picture>\n  <source media=\"(orientation: portrait) and (max-width: 700px)\" srcset=\"https://url_image\" sizes=\"100vw\" />\n  <source media=\"(orientation: portrait)\" srcset=\"https://url_image\" sizes=\"100vw\" />\n</picture>\n```\n\nCela permet de ne charger que l'image n√©cessaire, en fonction de la configuration du p√©riph√©rique, r√©duisant ainsi la consommation de bande passante et am√©liorant la performance du site.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Optimisation des performances** : Le navigateur choisit l'image la plus appropri√©e en fonction des conditions d√©finies, ce qui r√©duit la taille des fichiers t√©l√©charg√©s.\n- **R√©duction du temps de chargement** : En ne chargeant que l'image n√©cessaire selon la taille d'√©cran ou l'orientation, on √©vite de t√©l√©charger des images inutiles.\n- **Flexibilit√©** : Permet d'utiliser plusieurs images avec des tailles et r√©solutions diff√©rentes selon le contexte (ex : mobile vs desktop).\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© accrue** : La gestion des multiples sources d'image peut devenir complexe avec plusieurs conditions √† g√©rer.\n- **Compatibilit√© limit√©e** : Tous les navigateurs ne supportent pas parfaitement la balise `<picture>`, bien que la prise en charge soit d√©sormais largement r√©pandue.\n- **Charge serveur** : Bien qu'il y ait une optimisation c√¥t√© client, le serveur doit g√©rer plusieurs versions d'images, augmentant la gestion c√¥t√© backend.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Responsive en CSS]]"
    },
    {
        "id": "9591fb64-906a-4a68-9998-f99e437f7581",
        "title": "Responsive en CSS",
        "description": "---\nid: 4797285a-dc72-4c05-a1d0-75bf11fb9382\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe responsive design en [[CSS]] permet d'adapter l'apparence d'une page web √† diff√©rentes tailles d'√©crans et r√©solutions, en utilisant des unit√©s flexibles et des techniques comme les media queries pour offrir une exp√©rience optimale sur mobile, tablette et desktop.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe responsive design en [[CSS]] repose sur plusieurs concepts permettant d'adapter le contenu d'une page web en fonction des caract√©ristiques de l'√©cran (taille, orientation, r√©solution) :\n\n- **Unit√©s dynamiques** : Des unit√©s comme `vw` (viewport width), `vh` (viewport height), et `vmin` (la plus petite valeur entre `vh` et `vw`) permettent de cr√©er des √©l√©ments qui s'ajustent √† la taille de l'√©cran de mani√®re fluide.\n- **Media Queries** : Ces r√®gles permettent de sp√©cifier diff√©rents styles CSS en fonction de crit√®res comme la taille de l'√©cran, l'orientation ou la r√©solution.\n- **Element `<picture>`** : Utilis√© pour charger des images diff√©rentes selon les conditions d√©finies (par exemple, orientation ou taille d'√©cran). Cela optimise le temps de chargement et am√©liore la performance, en ne chargeant que l'image la plus appropri√©e pour l'affichage.\n\n# Qu'est ce qui est top ? üëç\n\n- **Adaptabilit√©** : Le design r√©actif garantit une exp√©rience utilisateur optimale, quelle que soit la taille de l'√©cran.\n- **Performance** : L‚Äôutilisation du `<picture>` pour les images et des unit√©s dynamiques r√©duit la quantit√© d‚Äôimages ou de ressources inutiles √† charger, am√©liorant ainsi la vitesse de chargement.\n- **Facilit√© d‚Äôimpl√©mentation** : L‚Äôutilisation des media queries permet de faire √©voluer l‚Äôaffichage de mani√®re fluide sans n√©cessiter de red√©veloppement complet pour chaque taille d‚Äô√©cran.\n- **Mobile-first** : Cette approche assure que le site est toujours fonctionnel sur les appareils mobiles, qui sont souvent les plus contraints en termes de taille d'√©cran et de performance.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© accrue** : G√©rer de multiples tailles d‚Äô√©cran et orientations peut compliquer le processus de d√©veloppement et de maintenance.\n- **D√©bogage difficile** : Tester sur tous les types d'√©crans et simulateurs peut √™tre long et fastidieux, surtout lorsque les styles ne sont pas coh√©rents entre diff√©rents appareils.\n- **Temps de chargement** : Bien que l'utilisation du `<picture>` soit performante, si mal configur√©e, cela peut entra√Æner des d√©lais de chargement en fonction de la taille des images et du nombre de sources utilis√©es.\n\n# A quoi c'est li√© ? ü™¢\n[[Mobile First]]"
    },
    {
        "id": "42c711ee-117b-417a-8c6e-9b684a10120c",
        "title": "R√©activit√©",
        "description": "---\nid: 4094d186-18e0-4673-a238-ad66d828c305\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLa **programmation r√©active** est une approche qui permet aux programmes de r√©agir de mani√®re asynchrone et dynamique aux changements d'√©tat dans leur environnement. Cela permet d'am√©liorer la r√©activit√© des applications, en particulier dans des contextes interactifs et temps r√©el.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLa programmation r√©active se base sur l'id√©e que les applications doivent √™tre capables de r√©agir √† des changements en temps r√©el, comme les √©v√©nements utilisateur ou les mises √† jour de donn√©es. Diff√©rentes biblioth√®ques et frameworks utilisent cette approche pour g√©rer l'√©tat et les interactions de mani√®re plus fluide et r√©active.\n\n### Types de r√©activit√© :\n\n1. **Value-based** (ex : [[Angular]], [[React]]) :  \n    Les anciennes valeurs sont compar√©es aux nouvelles, et si elles diff√®rent, l'application met √† jour l'√©tat. Ce mod√®le est simple √† impl√©menter mais peut √™tre inefficace pour les grandes applications car il n√©cessite une comparaison exhaustive des valeurs √† chaque changement.\n    \n2. **Observable-based** (ex : [[Svelte]], [[RxJS]]) :  \n    L'application s'abonne √† des **Observables** (flux de donn√©es) et r√©agit aux changements de mani√®re asynchrone. Cela permet d‚Äôoptimiser la performance, mais rend le code plus complexe et sujet √† des probl√®mes comme les fuites de m√©moire si l'abonnement n'est pas correctement g√©r√©.\n    \n3. **Signal-based** (ex : [[Vue]],[[ Solid]], et [[Angular]]) :  \n    Les variables sont stock√©es avec des r√©f√©rences uniques et chaque acc√®s passe par une gestion centralis√©e des r√©f√©rences. Ce mod√®le est performant et synchrone, mais il peut √™tre plus contraignant en termes de structure du code. [[Angular]], par exemple, exp√©rimente cette approche mais rencontre des difficult√©s dans son adoption.\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Observable-based** :\n    - Tr√®s performant pour les applications complexes et r√©actives.\n    - Permet de g√©rer des flux de donn√©es en temps r√©el avec une gestion fine des mises √† jour.\n\n- **Signal-based** :\n    - Offre une r√©activit√© plus synchrone, ce qui r√©duit les risques d'incoh√©rences de donn√©es.\n    - Optimisation de la gestion des acc√®s √† des variables partag√©es.\n\n- **Value-based** :\n    - Facile √† comprendre et √† mettre en place, id√©al pour des applications plus simples.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Observable-based** :\n    - Peut devenir difficile √† g√©rer, surtout avec les abonnements et d√©sabonnements, ce qui peut conduire √† des fuites m√©moire si mal g√©r√©.\n    - Asynchrone, ce qui complique la gestion du flux d'ex√©cution et du d√©bogage.\n\n- **Signal-based** :    \n    - Le mod√®le strict peut rendre le code moins flexible et plus difficile √† maintenir.\n    - Angular a des difficult√©s √† impl√©menter cette approche de mani√®re fluide et standardis√©e.\n\n- **Value-based** :    \n    - Moins performant √† grande √©chelle, n√©cessite de comparer chaque changement, ce qui peut ralentir les applications avec de nombreux √©l√©ments √† surveiller.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "8a8d58b5-9071-4444-8711-dd893676ac39",
        "title": "R√¥les dans l‚Äôarchitecture d‚Äôun SI",
        "description": "---\nid: b5e075e4-d8ca-4274-997f-ec7a18462829\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes r√¥les dans l‚Äôarchitecture d‚Äôun Syst√®me d'Information (SI) d√©finissent les responsabilit√©s et la gestion des pratiques techniques, allant de la d√©finition des grandes lignes architecturales √† l'impl√©mentation technique dans les applications.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **Architecte d'entreprise** : D√©finit les directives et normes architecturales √† l'√©chelle globale du SI. Il s'assure de l'harmonisation des pratiques et de la coh√©rence entre les diff√©rents syst√®mes.\n    \n- **Architecte solution** : Applique les directives de l'architecte d'entreprise au niveau des applications sp√©cifiques. Il s‚Äôassure que chaque solution r√©ponde aux normes architecturales globales tout en r√©pondant aux besoins des projets.\n    \n- **Architecte technique / Lead dev** : G√®re les choix techniques et les d√©cisions micro-niveau au sein des projets. Il assure la coh√©rence technique des solutions et prend des d√©cisions d√©taill√©es pour r√©soudre des probl√®mes sp√©cifiques dans le code.\n    \n- **Equipe de d√©veloppement** : Suit les directives d‚Äôarchitecture et contribue aux discussions techniques. Les d√©veloppeurs mettent en ≈ìuvre les choix d√©cid√©s par les architectes dans le cadre des projets.\n    \n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Clart√© des r√¥les** : Chaque acteur a une vision claire de ses responsabilit√©s, ce qui permet une gestion structur√©e du SI.\n- **Harmonisation des pratiques** : Les d√©cisions sont prises √† diff√©rents niveaux, ce qui permet de respecter des standards tout en √©tant agile dans les projets.\n- **Collaboration entre les r√¥les** : Les architectes travaillent en √©troite collaboration avec l‚Äô√©quipe de d√©veloppement, assurant la mise en ≈ìuvre des directives avec une bonne prise en compte des r√©alit√©s du terrain.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© hi√©rarchique** : Avec plusieurs niveaux d'architecture, la communication peut devenir plus complexe et les d√©cisions peuvent √™tre retard√©es.\n- **Risque de d√©connexion entre les niveaux** : Si les architectes d‚Äôentreprise ne sont pas bien align√©s avec les architectes solution, ou si les d√©veloppeurs ne comprennent pas les directives, cela peut cr√©er des incoh√©rences dans l'impl√©mentation.\n- **Charge de gestion** : Les architectes, notamment d'entreprise et solution, peuvent √™tre submerg√©s par des t√¢ches de coordination et de contr√¥le, ce qui peut ralentir les processus.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]] [[MOC_DevSecOps]]"
    },
    {
        "id": "c6cf519c-fd09-44ee-a12a-bbef14ae767c",
        "title": "Server Side Generation (SSG)",
        "description": "---\nid: cb7dd7c1-468d-46c0-8bc8-7bc4fc778f04\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLa **Server Side Generation (SSG)** consiste √† g√©n√©rer des pages web statiques au moment de la compilation du projet, avant m√™me le lancement du serveur. Les pages sont rendues sous forme de fichiers [[HTML]] pr√™ts √† √™tre servis.\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe processus de SSG consiste √† pr√©-g√©n√©rer toutes les pages d'un site pendant le processus de build, ce qui permet de les servir directement sous forme de fichiers statiques au moment de la demande de l'utilisateur. Le serveur ne fait plus que renvoyer ces fichiers [[HTML]] statiques, sans avoir besoin de calculer ou d'interagir avec une base de donn√©es √† chaque requ√™te.\n\n- **G√©n√©ration statique** : Les pages sont rendues √† la compilation du projet, ce qui acc√©l√®re le temps de r√©ponse du serveur.\n- **Pas d'interaction serveur** : Une fois les pages g√©n√©r√©es, le serveur sert directement les fichiers [[HTML]], ce qui r√©duit la charge c√¥t√© serveur.\n- **[[SEO]] optimis√©** : Puisque les pages sont d√©j√† pr√™tes, les moteurs de recherche peuvent facilement les indexer.\n\n# Qu'est ce qui est top ? üëç\n\n- **Performance rapide** : Les pages sont statiques, ce qui signifie que le serveur a juste √† envoyer le fichier [[HTML]] sans traitement suppl√©mentaire.\n- **[[SEO]] optimis√©** : Le contenu statique est id√©al pour l‚Äôindexation par les moteurs de recherche, augmentant ainsi la visibilit√© du site.\n- **Simplicit√© du serveur** : Aucune logique c√¥t√© serveur, ce qui simplifie l‚Äôarchitecture du backend.\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Temps de compilation long** : Si le site poss√®de de nombreuses pages, la g√©n√©ration statique peut √™tre lente et consommer des ressources.\n- **Pas adapt√© au contenu dynamique** : Pour des sites n√©cessitant une mise √† jour constante de contenu (par exemple des blogs ou des plateformes sociales), le SSG peut devenir peu pratique, car il faut recompiler les pages √† chaque changement.\n- **Gestion des donn√©es** : Le contenu dynamique doit √™tre g√©r√© avant la compilation, ce qui peut limiter l'interactivit√© des pages.\n\n# A quoi c'est li√© ? ü™¢\n[[Server Side Rendering (SSR)]] [[Incremental Static Regeneration (ISR)]] "
    },
    {
        "id": "3a646b78-b3e7-42f5-a4d1-7963e2b48a0e",
        "title": "Server Side Rendering (SSR)",
        "description": "---\nid: 3d88ac3a-ed12-451b-972e-c306b861b37d\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe Server Side Rendering (SSR) est une technique o√π le serveur g√©n√®re et envoie une page [[HTML]] presque compl√®te au navigateur. Contrairement √† du rendu c√¥t√© client, c'est le serveur qui ex√©cute le [[JavaScript]] et construit la page avant de l'envoyer au client.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLe SSR permet de pr√©-rendre une page [[HTML]] compl√®te c√¥t√© serveur, incluant les ressources n√©cessaires (images, scripts, etc.), avant de la renvoyer au client. Le [[JavaScript]] c√¥t√© client prend ensuite le relais pour l'[[hydratation]], c'est-√†-dire pour rendre la page interactive. Cette approche am√©liore les performances initiales du chargement, car le navigateur n‚Äôa qu'√† afficher la page g√©n√©r√©e, sans avoir √† attendre que le [[JavaScript]] s'ex√©cute pour cr√©er le contenu.\n\nLe SSR est souvent utilis√© avec des frameworks comme [[Next.js]] pour [[React]], [[Nuxt.js]] pour [[Vue.js]] ou [[Analog.js]] pour [[Angular]]\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Am√©lioration des performances initiales** : Le contenu est d√©j√† pr√©-rendu, ce qui permet un affichage plus rapide.\n- **[[SEO]] optimis√©** : Comme le contenu est disponible d√®s le chargement de la page, les moteurs de recherche peuvent mieux l'indexer.\n- **Exp√©rience utilisateur am√©lior√©e** : Le temps jusqu'√† l'affichage est plus court, surtout pour les utilisateurs ayant des connexions lentes.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Complexit√© c√¥t√© serveur** : La gestion des sessions, du cache et du rendu dynamique est plus complexe √† impl√©menter.\n- **[[Hydratation]]** : Apr√®s le rendu initial, le [[JavaScript]] c√¥t√© client doit \"prendre le relais\" pour rendre la page interactive, ce qui peut entra√Æner un d√©lai suppl√©mentaire.\n- **Ressources serveur** : Plus de travail est effectu√© sur le serveur pour g√©n√©rer chaque page, ce qui peut augmenter la charge serveur et les co√ªts.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[Server Side Generation (SSG)]][[Incremental Static Regeneration (ISR)]]\n"
    },
    {
        "id": "8c1b08b7-54d7-41a2-82f9-2f07277a619e",
        "title": "Signal (Angular)",
        "description": "---\nid: 1b418003-bf67-4b2a-9a0f-955a4f39a7ad\n---\n# Rapidement c'est quoi‚ùì\n\nSignal est un m√©canisme de [[R√©activit√©]] int√©gr√© √† [[Angular]] depuis la version 14, offrant une alternative plus simple et parfois plus performante √† [[RxJS]] pour g√©rer les changements de donn√©es et d√©clencher des mises √† jour d'interface.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nAngular Signals fournit une nouvelle approche pour la gestion de la r√©activit√© dans les applications Angular.  Au lieu de s'appuyer sur les Observables de [[RxJS]], il utilise un syst√®me plus l√©ger et plus intuitif bas√© sur des \"signals\". Un signal est une r√©f√©rence √† une valeur qui peut changer au cours du temps.  Lorsqu'une valeur de signal change, Angular d√©tecte automatiquement cette modification et met √† jour le DOM en cons√©quence.  Ceci permet de simplifier le code et d'am√©liorer les performances dans certains cas d'utilisation, notamment pour les mises √† jour simples et fr√©quentes de donn√©es.\n\nLes composants cl√©s sont :\n\n* **`signal()`:**  Fonction qui cr√©e un signal √† partir d'une valeur initiale.  Cette fonction retourne un objet poss√©dant deux propri√©t√©s : `.value` (pour acc√©der √† la valeur actuelle) et `.subscribe()` (pour s'abonner aux changements de valeur, similaire aux observables [[RxJS]] mais plus l√©ger).\n* **`computed()`:** Fonction qui permet de cr√©er des signals d√©riv√©s √† partir d'autres signals.  La valeur d'un signal `computed` est recalcul√©e automatiquement chaque fois qu'un des signals dont il d√©pend est mis √† jour. Ceci est similaire aux op√©rateurs [[RxJS]] comme `map` ou `combineLatest` mais avec une syntaxe plus concise.\n* **`effect()`:** Fonction qui ex√©cute une fonction chaque fois qu'un ou plusieurs signals dont elle d√©pend changent. Ceci permet de r√©agir aux changements de donn√©es et d'effectuer des actions secondaires, comme des appels API ou des navigations.\n\n\nL'utilisation de Signals est souvent plus concise et lisible que [[RxJS]] pour les cas simples de gestion de la r√©activit√©.  Il est cependant important de comprendre que Signals ne remplacent pas compl√®tement [[RxJS]], mais offrent une alternative int√©ressante pour certains types de probl√®mes.  [[RxJS]] reste pertinent pour les cas d'utilisation plus complexes n√©cessitant des op√©rations avanc√©es de transformation et de gestion des flux d'√©v√©nements asynchrones.\n\nLes signaux sont aussi utilis√©s par [[Vue.js]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplicit√© et lisibilit√©:** La syntaxe des Signals est plus concise et plus facile √† comprendre que [[RxJS]], facilitant le d√©veloppement et la maintenance.\n* **Performances:** Dans certains cas, les Signals peuvent offrir de meilleures performances que [[RxJS]], notamment pour les mises √† jour fr√©quentes de donn√©es simples.\n* **Int√©gration native dans Angular:**  L'int√©gration transparente avec le framework Angular simplifie l'utilisation et √©vite les probl√®mes de compatibilit√©.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Moins puissant que [[RxJS]]:** Les Signals ne poss√®dent pas la m√™me richesse fonctionnelle que RxJS.  Pour des sc√©narios complexes de manipulation de flux d'√©v√©nements asynchrones, RxJS reste n√©cessaire.\n* **Relatif manque de maturit√©:**  √âtant une fonctionnalit√© plus r√©cente, la communaut√© et la documentation autour des Signals sont moins √©tendues que pour RxJS.\n* **Courbe d'apprentissage (m√™me si faible) :**  Il faut un temps d'adaptation m√™me si la syntaxe est plus simple.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "928cc68c-9624-4fe4-b1a1-69ee470283f5",
        "title": "Slim Faas",
        "description": "---\nid: 8b302316-614f-4cea-af00-28858b4f0603\n---\n# Rapidement c'est quoi‚ùì\n\nSlim Faas est une plateforme [[Function as a Service (FaaS)]] l√©g√®re, alternative √† [[OpenFaaS]], d√©velopp√©e et utilis√©e en interne par AXA.  Elle se concentre sur la simplicit√© et l'efficacit√©.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nSlim Faas est une impl√©mentation simplifi√©e et optimis√©e de la plateforme serverless [[OpenFaaS]].  Contrairement √† [[OpenFaaS]] qui offre une large gamme de fonctionnalit√©s et de complexit√©, Slim Faas se concentre sur l'essentiel: le d√©ploiement et l'ex√©cution de fonctions sans serveur.  Elle est con√ßue pour √™tre l√©g√®re, facile √† d√©ployer et √† maintenir, et particuli√®rement adapt√©e aux environnements o√π les ressources sont limit√©es ou o√π une configuration minimale est souhaitable.  Son architecture simplifi√©e r√©duit la surface d'attaque et la complexit√© de gestion.  Elle repose g√©n√©ralement sur des technologies conteneuris√©es (comme [[Docker]]) et un [[Orchestrateur de conteneur]] (comme [[Nomad]] ou [[Kubernetes]], bien que son architecture permette une plus grande flexibilit√©).  L'objectif principal est de fournir une solution serverless performante et facile √† utiliser, sans les surcharges li√©es aux fonctionnalit√©s plus avanc√©es d'[[OpenFaaS]].  AXA l'utilise en interne, ce qui sugg√®re une adoption pour des cas d'usage sp√©cifiques n√©cessitant une solution plus l√©g√®re et plus contr√¥l√©e.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **L√©g√®ret√© et simplicit√©:**  Sa conception minimaliste facilite le d√©ploiement, la maintenance et la gestion.\n* **Efficacit√©:**  Optimis√©e pour les ressources limit√©es, elle consomme moins de ressources que les solutions plus compl√®tes.\n* **S√©curit√©:**  La surface d'attaque r√©duite am√©liore la s√©curit√© globale.\n* **Contr√¥le:**  AXA ayant d√©velopp√© la solution, le contr√¥le et l'adaptation √† ses besoins sp√©cifiques sont facilit√©s.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Manque de fonctionnalit√©s:**  Son approche minimaliste signifie l'absence de certaines fonctionnalit√©s avanc√©es pr√©sentes dans [[OpenFaaS]] (monitoring sophistiqu√©, gestion d'√©v√©nements complexes, etc.).\n* **Documentation limit√©e:**  √âtant une solution interne √† AXA, la documentation publique est probablement limit√©e ou inexistante.\n* **Adoption limit√©e:**  Le manque de large adoption limite la communaut√© et le support disponible.\n* **D√©pendance √† AXA:**  Le futur et le maintien de la solution d√©pendent des priorit√©s d'AXA.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_DevSecOps]]"
    },
    {
        "id": "0158b215-3c8b-4d22-b80a-0dbae9306a1c",
        "title": "Spring AOP",
        "description": "---\nid: d1d0d5d0-ec94-4cb7-8dac-7b39d73a115b\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nSpring AOP ([[Aspect Oriented Programming (AOP)]]) est un framework [[Java]], bas√© sur [[Spring Framework]] qui permet d'ajouter des fonctionnalit√©s transversales √† une application sans modifier le code source principal.  Il permet de modulariser le code qui g√®re des pr√©occupations comme la journalisation, la s√©curit√©, ou la gestion des transactions, en les s√©parant du code m√©tier principal.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring AOP utilise un m√©canisme de *[[Proxy]]* pour intercepter les appels de m√©thodes et ex√©cuter du code additionnel avant, apr√®s, ou autour de l'appel de la m√©thode cibl√©e.  Ces morceaux de code additionnels sont appel√©s *aspects*.  Un aspect est d√©fini par un ensemble de *conseils* (*advice*), qui sp√©cifient quand et comment le code additionnel doit √™tre ex√©cut√©.  Les points d'ex√©cution de ces conseils sont d√©finis par des *points de jonction* (*join points*), qui repr√©sentent des points sp√©cifiques dans l'ex√©cution du programme (par exemple, l'appel d'une m√©thode, la manipulation d'une exception).\n\nSpring AOP supporte diff√©rents types de conseils :\n\n* **Avant (Before):** Le code s'ex√©cute avant l'appel de la m√©thode cibl√©e.\n* **Apr√®s (After):** Le code s'ex√©cute apr√®s l'appel de la m√©thode cibl√©e, que celle-ci r√©ussisse ou √©choue.\n* **Apr√®s retour (After returning):** Le code s'ex√©cute apr√®s l'appel de la m√©thode cibl√©e si celle-ci retourne une valeur avec succ√®s.\n* **Apr√®s lancement d'exception (After throwing):** Le code s'ex√©cute apr√®s l'appel de la m√©thode cibl√©e si celle-ci lance une exception.\n* **Autour (Around):** Le code s'ex√©cute avant et apr√®s l'appel de la m√©thode cibl√©e, et permet de contr√¥ler compl√®tement l'ex√©cution de la m√©thode.\n\n**Exemple utilisant annotations:**\n\n```java\nimport org.aspectj.lang.annotation.*;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\npublic class LoggingAspect {\n\n    @Before(\"execution(* com.example.service.*.*(..))\")\n    public void beforeMethodExecution(JoinPoint joinPoint) {\n        System.out.println(\"Avant l'ex√©cution de : \" + joinPoint.getSignature());\n    }\n\n    @AfterReturning(pointcut = \"execution(* com.example.service.*.*(..))\", returning = \"result\")\n    public void afterMethodExecution(JoinPoint joinPoint, Object result) {\n        System.out.println(\"Apr√®s l'ex√©cution de : \" + joinPoint.getSignature() + \" - R√©sultat : \" + result);\n    }\n\n    @AfterThrowing(pointcut = \"execution(* com.example.service.*.*(..))\", throwing = \"exception\")\n    public void afterThrowing(JoinPoint joinPoint, Throwable exception) {\n        System.out.println(\"Exception lev√©e lors de l'ex√©cution de : \" + joinPoint.getSignature() + \" - Exception : \" + exception.getMessage());\n    }\n}\n```\n\nCet exemple utilise des expressions pointcut pour d√©finir les m√©thodes √† intercepter.  `execution(* com.example.service.*.*(..))` intercepte toutes les m√©thodes de tous les classes dans le package `com.example.service`.\n\nA la diff√©rence de [[AspectJ]], Spring AOP cr√©er des proxy autour des objets afin d'ajouter les comportements voulu. Quand √† lui [[AspectJ]], vient modifier directement les objets au d√©marrage de l'application. Le code est concret.\nLa diff√©rence se fait donc dans la port√© offerte par les deux frameworks. [[AspectJ]] permet de toucher tout les fichiers (m√™me ceux des librairies), tandis que Spring AOP va se restreindre aux beans (m√™me port√© que [[Spring Framework]]).\n\n## Qu'est-ce qui est top ? üëç\n\n* **Modularit√©:** S√©pare les pr√©occupations transversales du code m√©tier, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **R√©utilisabilit√©:** Les aspects peuvent √™tre r√©utilis√©s dans diff√©rentes parties de l'application.\n* **Simplicit√©:**  L'int√©gration avec [[Spring Framework]] est simple et bien document√©e.\n* **Pouvoir d'expression:** Les expressions Pointcut permettent de cibler pr√©cis√©ment les m√©thodes √† intercepter.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© potentielle:**  Pour des applications complexes, la configuration et la gestion des aspects peuvent devenir difficiles.\n* **D√©bogage:**  Le d√©bogage peut √™tre plus complexe en raison de l'utilisation des [[Proxy]].\n* **Performances:** L'utilisation des [[Proxy]] peut avoir un l√©ger impact sur les performances, bien que g√©n√©ralement n√©gligeable.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n(Laisser vide)\n"
    },
    {
        "id": "9e434a98-3fa9-48e3-9369-8abea2e18897",
        "title": "Spring Boot Actuator",
        "description": "---\nid: d8c7dbd9-13a6-477b-b02b-4905b243151c\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Spring Boot Actuator** est un module de [[Spring Boot]] qui permet d'ajouter des fonctionnalit√©s de gestion et de surveillance √† une application, en exposant des **endpoints** pour r√©cup√©rer des informations sur son √©tat, ses m√©triques, sa sant√©, etc.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nSpring Boot Actuator offre un ensemble d'**endpoints** accessibles via HTTP qui fournissent des informations sur la sant√©, les performances et la configuration de l‚Äôapplication en temps r√©el. Ces endpoints sont principalement utilis√©s pour :\n\n- **Surveillance** : Permet de suivre l'√©tat de sant√© de l'application, ses m√©triques de performance, et la configuration environnementale.\n- **Gestion des logs** : Permet d'ajuster dynamiquement les niveaux de logs.\n- **Diagnostics** : Fournit des informations d√©taill√©es sur les threads ou la m√©moire pour d√©tecter des probl√®mes de performance.\n\nQuelques endpoints cl√©s :\n\n- `/actuator/health` : Indique la sant√© de l‚Äôapplication.\n- `/actuator/metrics` : Expose les statistiques de performance (via [[Micrometer]]).\n- `/actuator/info` : Informations g√©n√©rales sur l'application.\n- `/actuator/env` : D√©taille les propri√©t√©s d‚Äôenvironnement.\n- `/actuator/loggers` : Permet de g√©rer les niveaux de logs.\n- `/actuator/threaddump` : Affiche un dump des threads pour aider au diagnostic des probl√®mes de performance.\n- `/actuator/heapdump` : Permet de prendre un dump de la m√©moire Java.\n\n**Important** : En production, il est crucial de s√©curiser ou masquer certains endpoints pour √©viter des risques de s√©curit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Surveillance facilit√©e** : Permet de suivre facilement l'√©tat de l'application et d'effectuer des diagnostics.\n- **Int√©gration avec [[Prometheus]]** : Expose des m√©triques que [[Prometheus]] peut r√©cup√©rer via `/actuator/metrics`, gr√¢ce √† l'int√©gration avec **[[Micrometer]]**.\n- **Gestion dynamique des logs** : Permet de changer les niveaux de logs √† chaud, ce qui facilite le d√©bogage en production.\n- **Large gamme d'endpoints** : Fournit une vari√©t√© d'informations (sant√©, performance, m√©moire, etc.) pour un contr√¥le complet de l'application.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **S√©curit√©** : Par d√©faut, les endpoints peuvent exposer des informations sensibles. Il est essentiel de les s√©curiser en production.\n- **Performance** : L'ajout de plusieurs endpoints peut avoir un impact sur la performance, surtout s'ils sont mal configur√©s ou trop nombreux.\n- **D√©pendance √† [[Micrometer]]** : Pour certaines fonctionnalit√©s comme les m√©triques, il est n√©cessaire d'int√©grer [[Micrometer]], ce qui peut ajouter une couche de complexit√©.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "7e4eec89-9862-487b-add2-797220c08b74",
        "title": "Spring Cloud Config",
        "description": "---\nid: a725a0a3-511b-459b-a1d0-6f946cf0c527\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nSpring Cloud Config est un outil permettant de centraliser la gestion des configurations dans une architecture de [[Micros services]]. Il permet √† tous les services de r√©cup√©rer leurs configurations depuis un serveur centralis√©.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nSpring Cloud Config permet de centraliser les configurations de tous les [[Micros services]] d'une application dans un serveur de configuration. Ce serveur peut r√©cup√©rer les configurations depuis divers fournisseurs (comme [[Git]] ou [[S3]]). Chaque [[Micros services]], √† son d√©marrage, se connecte √† ce serveur pour r√©cup√©rer sa propre configuration, ce qui simplifie la gestion de configurations multiples et complexes dans une architecture distribu√©e.\n\n- Un serveur Spring Cloud Config est mis en place en ajoutant une d√©pendance et en activant `@EnableConfigServer` sur la classe de d√©marrage.\n- Le serveur peut r√©cup√©rer des configurations depuis des sources comme [[Git]], avec un format sp√©cifique de fichiers (`application.yml`, `application.properties`).\n- Chaque [[Micros services]] client r√©cup√®re sa configuration via un URL sp√©cifique en fonction de son nom, de son profil et de son label [[Git]].\n\nLes configurations sont versionn√©es et g√©r√©es comme du code, permettant de b√©n√©ficier d'un suivi et de la r√©versibilit√©.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Centralisation des configurations** : Une seule source pour g√©rer toutes les configurations des [[Micros services]], ce qui simplifie la maintenance.\n- **Versioning** : Utiliser [[Git]] pour stocker les configurations permet de versionner, suivre l'historique et revenir √† des versions pr√©c√©dentes facilement.\n- **Flexibilit√© des sources de configuration** : Supporte divers fournisseurs comme [[Git]], [[S3]], ce qui permet de s‚Äôadapter √† diff√©rents environnements.\n- **Simplicit√© d'int√©gration** : L'int√©gration dans [[Spring Boot]] se fait via de simples d√©pendances et annotations.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **D√©pendance au serveur de configuration** : Si le serveur de configuration tombe, les services ne pourront plus r√©cup√©rer leurs configurations.\n- **Complexit√© de mise en place** : Bien que la configuration de base soit simple, la gestion de multiples profils et labels [[Git]] peut compliquer la configuration des services.\n- **Scalabilit√© du serveur** : Il est important de mettre en place des r√©plicas du serveur pour garantir la disponibilit√©, mais cela peut ajouter de la complexit√©.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "d022bf8a-c96a-4f14-90a3-ae8cb7ad7e26",
        "title": "Certification Java 17 - Streams et Expressions Lambda",
        "description": "---\nid: 4278c6cd-387f-47f0-a011-d5c10f9d1b1c\n---\n## **8.1. Utilisation des `Stream<T>`, `IntStream`, `DoubleStream`**\n\nUn **Stream** est une s√©quence d‚Äô√©l√©ments pouvant √™tre trait√©e de mani√®re d√©clarative et fonctionnelle.\n\n|**Type**|**Description**|\n|---|---|\n|`Stream<T>`|Flux d‚Äôobjets g√©n√©riques|\n|`IntStream`|Flux de `int` (√©vite l‚Äôauto-boxing)|\n|`DoubleStream`|Flux de `double`|\n|`LongStream`|Flux de `long`|\n\n### **Cr√©ation d‚Äôun `Stream`**\n\n```java\nimport java.util.stream.*;\n\nList<String> noms = List.of(\"Alice\", \"Bob\", \"Charlie\");\nStream<String> stream = noms.stream();\nstream.forEach(System.out::println);\n```\n\nüìå **Un `Stream` ne peut √™tre consomm√© qu‚Äôune seule fois.**\n\n---\n\n### **Utilisation des `IntStream`, `DoubleStream`**\n\n```java\nIntStream.range(1, 5).forEach(System.out::print); // 1234\nDoubleStream.of(3.14, 2.71, 1.41).forEach(System.out::println);\n```\n\nüìå **`range(1,5)` g√©n√®re `{1, 2, 3, 4}` (exclut `5`), `rangeClosed(1,5)` inclut `5`.**\n\n---\n\n## **8.2. `filter()`, `map()`, `reduce()`, `collect()`**\n\n### **1. `filter()` : S√©lectionne les √©l√©ments correspondant √† une condition**\n\n```java\nList<String> noms = List.of(\"Alice\", \"Bob\", \"Charlie\");\nList<String> resultat = noms.stream()\n    .filter(n -> n.startsWith(\"A\"))\n    .toList(); // Java 16+\nSystem.out.println(resultat); // [Alice]\n```\n\n---\n\n### **2. `map()` : Transforme les √©l√©ments**\n\n```java\nList<Integer> longueurs = noms.stream()\n    .map(String::length)\n    .toList();\nSystem.out.println(longueurs); // [5, 3, 7]\n```\n\nüìå **`map()` applique une fonction √† chaque √©l√©ment du `Stream`.**\n\n---\n\n### **3. `reduce()` : R√©duction des √©l√©ments √† une seule valeur**\n\n```java\nint somme = IntStream.of(1, 2, 3, 4)\n    .reduce(0, Integer::sum);\nSystem.out.println(somme); // 10\n```\n\nüìå **Permet de combiner les √©l√©ments (somme, multiplication, concat√©nation, etc.).**\n\n---\n\n### **4. `collect()` : Transformer un `Stream` en collection**\n\n```java\nList<String> listeMaj = noms.stream()\n    .map(String::toUpperCase)\n    .collect(Collectors.toList());\nSystem.out.println(listeMaj); // [ALICE, BOB, CHARLIE]\n```\n\nüìå **`collect()` permet de rassembler les √©l√©ments dans une `List`, `Set` ou `Map`.**\n\n---\n\n## **8.3. D√©composition, concat√©nation, partitionnement**\n\n### **1. `flatMap()` : D√©composition d‚Äô√©l√©ments imbriqu√©s**\n\n```java\nList<List<Integer>> listOfLists = List.of(List.of(1, 2), List.of(3, 4));\nList<Integer> flattenedList = listOfLists.stream()\n    .flatMap(List::stream)\n    .toList();\nSystem.out.println(flattenedList); // [1, 2, 3, 4]\n```\n\nüìå **`flatMap()` aplatit plusieurs collections en un seul `Stream`.**\n\n---\n\n### **2. Concat√©nation de `Stream`**\n\n```java\nStream<String> s1 = Stream.of(\"A\", \"B\");\nStream<String> s2 = Stream.of(\"C\", \"D\");\n\nStream<String> concatStream = Stream.concat(s1, s2);\nconcatStream.forEach(System.out::print); // ABCD\n```\n\nüìå **`Stream.concat(s1, s2)` fusionne deux flux.**\n\n---\n\n### **3. Partitionnement (`partitioningBy`)**\n\n```java\nMap<Boolean, List<String>> partition = noms.stream()\n    .collect(Collectors.partitioningBy(n -> n.length() > 3));\n\nSystem.out.println(partition);\n// {false=[Bob], true=[Alice, Charlie]}\n```\n\nüìå **Retourne deux groupes : ceux qui respectent la condition (`true`) et les autres (`false`).**\n\n---\n\n## **8.4. Streams S√©quentiels et Parall√®les**\n\n### **1. `parallelStream()` : Ex√©cution multi-thread**\n\n```java\nList<String> noms = List.of(\"Alice\", \"Bob\", \"Charlie\");\nnoms.parallelStream()\n    .forEach(System.out::println); // Ex√©cution parall√®le\n```\n\nüìå **Peut am√©liorer les performances sur des collections volumineuses.**\n\n### **2. `parallel()` sur un `Stream` existant**\n\n```java\nnoms.stream()\n    .parallel()\n    .forEach(System.out::println);\n```\n\nüìå **Attention aux op√©rations d√©pendant de l‚Äôordre !**\n\n---\n\n## **R√©sum√©**\n\n‚úÖ **Cr√©ation de `Stream<T>`, `IntStream`, `DoubleStream`**  \n‚úÖ **Op√©rations `filter()`, `map()`, `reduce()`, `collect()`**  \n‚úÖ **D√©composition (`flatMap`), concat√©nation, partitionnement**  \n‚úÖ **Utilisation des `Streams` s√©quentiels et parall√®les**\n\n---"
    },
    {
        "id": "c52446cb-bd97-4c08-a19f-20ea2a450b58",
        "title": "Supprimer des fichiers sensibles pousser sur un repository",
        "description": "---\nid: 80596fd6-1ff6-4512-8919-fe89db6b5c22\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\n**Supprimer des fichiers sensibles pouss√©s sur un repo** consiste √† retirer des fichiers contenant des informations sensibles (comme des mots de passe ou des cl√©s API) qui ont √©t√© accidentellement pouss√©s dans un d√©p√¥t [[Git]]. Pour cela, des outils comme `git-filter-branch` ou `bfg-repo-cleaner` permettent de nettoyer l'historique du d√©p√¥t.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **git-filter-branch** : Outil int√©gr√© √† Git qui permet de r√©√©crire l'historique d'un d√©p√¥t en supprimant des fichiers ou des r√©pertoires sp√©cifiques, ainsi que toutes leurs traces dans l‚Äôhistorique des commits.\n    \n- **bfg-repo-cleaner** : Outil tiers √©crit en Scala, con√ßu sp√©cifiquement pour nettoyer un d√©p√¥t Git en supprimant rapidement des fichiers ou des objets (comme des cl√©s API) qui ne doivent pas √™tre pr√©sents. Il est plus rapide et plus simple que `git-filter-branch` et peut √™tre √©tendu en Scala si n√©cessaire.\n    \n\nExemples de commandes avec BFG :\n\n- `bfg --delete-files id_{dsa,rsa} my-repo.git` : Supprime les fichiers de type id_dsa et id_rsa.\n- `bfg --strip-blobs-bigger-than 50M my-repo.git` : Supprime les fichiers de plus de 50 Mo.\n- `bfg --replace-text passwords.txt my-repo.git` : Remplace les mots contenus dans un fichier texte (par exemple des mots de passe) dans tout l'historique.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **BFG est plus rapide** : Par rapport √† `git-filter-branch`, il est plus rapide et plus efficace, surtout pour les gros d√©p√¥ts.\n- **Simplicit√©** : BFG est con√ßu uniquement pour la suppression de fichiers sensibles, rendant son usage plus direct et moins complexe que `git-filter-branch`.\n- **Extensible** : √âtant √©crit en Scala, il est possible de l‚Äôadapter √† des besoins sp√©cifiques.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **git-filter-branch plus flexible** : Bien que BFG soit plus rapide, `git-filter-branch` reste plus flexible pour les t√¢ches complexes n√©cessitant une r√©√©criture d‚Äôhistorique plus fine.\n- **Pas de protection native contre les fichiers d√©j√† clon√©s** : La suppression dans l'historique ne les retire pas des copies locales d√©j√† clon√©es du d√©p√¥t. Il est donc n√©cessaire d'informer les autres contributeurs pour √©viter qu'ils ne poussent √† nouveau ces fichiers sensibles.\n\n---\n\n# A quoi c'est li√© ? ü™¢"
    },
    {
        "id": "3926e5c7-d157-433e-b410-32b6cfcc9a63",
        "title": "Test Driven Developpement (TDD)",
        "description": "---\nid: ff0f5989-5d86-4a56-aeed-d3be0809cc54\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi ‚ùì\n\nLe **TDD** (Test Driven Development) est une m√©thode de d√©veloppement (Et pas simplement une strat√©gie de test) o√π les tests sont √©crits avant le code. Contrairement aux m√©thodes classiques o√π les tests viennent apr√®s le d√©veloppement, le TDD place les tests au centre du processus pour garantir un code de meilleure qualit√©.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n## Cycle du TDD\nLe TDD suit un cycle it√©ratif en trois √©tapes :\n\n1. **√âcrire un test qui √©choue** : On commence par cr√©er un test qui v√©rifie un comportement sp√©cifique, sachant qu'il √©chouera au d√©part.\n2. **√âcrire le minimum de code pour faire passer le test** : Ensuite, on r√©dige juste assez de code pour que le test passe, sans chercher √† le rendre complexe.\n\t- C'est super important de faire des baby steps. C'est comme √ßa qu'on arrive √† la meilleure conception. Il faut √©viter de trop anticiper la conception.\n3. **Refactoriser le code** : Une fois que le test passe, on am√©liore et optimise le code tout en s‚Äôassurant qu‚Äôil reste fonctionnel (les tests passent toujours).\n\nLe processus permet d'am√©liorer la qualit√© du code de mani√®re incr√©mentale et de rendre la conception plus simple et fiable.\nOn va clairement moins s'emmerder, et rendre le code plus fiable et plus simple.\nIl est tr√®s important de soigner autant le code de test que le code de prod, si on veut qu'ils puissent √™tre maintenable.\n\n## Ecoles de TDD\n### Chicago/Detroit School :\n- Ces √©coles sont parfois consid√©r√©es comme des variantes de la **TDD classique** mais avec une approche plus stricte et plus disciplin√©e dans l'application du processus.\n- Les partisans de ces √©coles insistent sur l'importance de ne **jamais √©crire de code** qui n‚Äôa pas d'abord √©t√© test√©. Leurs pratiques privil√©gient la simplicit√© et la rigueur dans le respect du cycle TDD (√©crire un test, coder, refactoriser).\n- L'accent est mis sur un **code tr√®s test√©**, mais parfois au prix d'une mise en ≈ìuvre plus rigide de la m√©thode.\n### London School :    \n- La **London School** adopte une approche plus souple et pragmatique du TDD.\n- Elle met l'accent sur l‚Äôimportance d'√©crire des tests qui sont facilement compr√©hensibles et utiles √† long terme. Plut√¥t que de se concentrer strictement sur la couverture de test, cette √©cole encourage √† **distinguer les tests utiles des tests superflus**.\n- L‚Äôid√©e est de faire en sorte que le processus soit **adaptable au projet**, en fonction des besoins r√©els.\n### Le style Ian Cooper :\n- Ian Cooper, un d√©fenseur du **TDD moderne**, met l'accent sur l‚Äôapplication du TDD pour une **architecture propre et √©volutive**.\n- Il insiste sur l'importance de tester des **unit√©s de travail coh√©rentes et isol√©es**, et de se concentrer sur des tests qui correspondent vraiment √† l‚Äôintention et √† la conception du syst√®me.\n- Son style met en avant la pratique de **ne pas tester √† outrance** et de bien d√©finir les limites des tests pour garantir qu'ils aient un impact r√©el sur la qualit√© du code.\n### Diamond TDD :\n- Le **Diamond TDD** est une approche qui introduit une **flexibilit√© dans le cycle TDD** traditionnel, en adoptant une structure en forme de diamant.\n- Ce style combine **refactoring, test et d√©veloppement** en fonction des besoins du projet et du code, plut√¥t que de suivre rigoureusement les √©tapes lin√©aires de TDD classique. L'id√©e est de **r√©√©valuer constamment la conception** et les tests pour trouver un √©quilibre optimal.\n- Il s'agit d'une approche plus dynamique, o√π le d√©veloppement et les tests ne sont pas forc√©ment r√©alis√©s dans un ordre strict, mais peuvent s'adapter en fonction des retours imm√©diats.\n\n## Documentation as code\nIl est possible d'utiliser le TDD comme d'une documentation fonctionnelle. Pour cela on va pouvoir utiliser l'[[Ubiquitous Language]] du projet afin de n'importe qui puisse comprendre les sp√©cificit√©s de la fonctionnalit√©.\n\n---\n# Qu'est ce qui est top ? üëç\n\n- **Documentation vivante** : Les tests servent de documentation dynamique, qui est mise √† jour en fonction des √©volutions du code. Si un test √©choue, cela indique qu‚Äôune modification est n√©cessaire, ce qui aide √† suivre l‚Äô√©volution du code et √† pr√©server les exigences m√©tiers.\n- **S√©curit√© lors du refactoring** : Le TDD offre un filet de s√©curit√©, ce qui permet de modifier le code ou de le refactoriser sans risque de r√©gression, car les tests signalent rapidement les erreurs introduites.\n- Force √† rendre son code testable. On cr√©ant des abstractions sur les d√©pendances afin de les mocker ou de cr√©er des stubs (en fonction de l'√©cole).\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Processus contraignant au d√©part** : L'√©criture des tests avant le code peut sembler difficile et ralentir initialement le d√©veloppement.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "a39dfca8-2229-4e91-90f6-1230c3170a4b",
        "title": "Test de mutation",
        "description": "---\nid: 344bca62-9704-4c85-9b12-7e21128579e2\ntags: \"\"\ncreated: 2025-02-03\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLe test de mutation est une technique utilis√©e pour √©valuer la qualit√© des [[Test unitaire]]. Il consiste √† introduire des mutations (modifications) dans le code et √† v√©rifier si les tests √©chouent. Si un test passe apr√®s la mutation, cela signifie que le test n'est pas suffisamment pr√©cis pour d√©tecter les erreurs.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **But** : V√©rifier l'efficacit√© des [[Test unitaire]] en s'assurant qu'ils d√©tectent bien les changements dans le code.\n- **Mutations** : Ce sont des modifications syst√©matiques dans le code, comme changer un op√©rateur, inverser une condition, ou supprimer une instruction.\n- **Processus** :\n    1. V√©rification de la validit√© des [[Test unitaire]] existants.\n    2. Application de mutations sur le code.\n    3. Ex√©cution des [[Test unitaire]] sur les mutants g√©n√©r√©s.\n- **Analyse** : Si un test passe malgr√© une mutation, cela indique que le test est incomplet ou trop laxiste. L'objectif est que tous les mutants √©chouent, ce qui montre que le test est robuste.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Am√©liore la couverture des tests** : Permet de s'assurer que les tests couvrent r√©ellement tous les cas possibles.\n- **Identifie les tests inefficaces** : Permet de rep√©rer les tests qui ne d√©tectent pas les erreurs dans le code.\n- **Renforce la qualit√© du code** : En am√©liorant les tests, la qualit√© globale du projet est am√©lior√©e.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Consommation de ressources** : G√©n√©rer et tester des mutants peut √™tre co√ªteux en termes de temps et de ressources.\n- **Peut donner des faux positifs** : Si le pool de mutations est mal con√ßu, certains mutants peuvent passer, faussant ainsi l'√©valuation de la qualit√© des tests.\n- **Complexit√©** : La mise en place d'un test de mutation n√©cessite une bonne configuration et peut √™tre complexe √† int√©grer dans le flux de travail de d√©veloppement.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "66b6af95-a52b-458d-8494-57219fc88ff9",
        "title": "Testinfra",
        "description": "---\nid: 6697390d-2ee4-497d-9f15-9728cd165ca0\n---\n# Rapidement c'est quoi‚ùì\n\nTestinfra est un framework de [[Test d'infrastructure]] bas√© sur [[Python]]. Il permet de v√©rifier l'√©tat de vos serveurs et de votre infrastructure en ex√©cutant des tests √©crits en [[Python]] simple et lisible.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nTestinfra est un outil puissant pour l'automatisation des [[Test d'infrastructure]].  Il fonctionne en se connectant √† des machines distantes (via [[SSH]], [[WinRM]], etc.) et en ex√©cutant des assertions sur l'√©tat du syst√®me.  Au lieu de d√©pendre de commandes sp√©cifiques √† un syst√®me d'exploitation ou √† un outil de provisionnement, Testinfra utilise les modules [[Python]] standard et les modules sp√©cifiques √† l'infrastructure pour interagir avec le syst√®me cible.  Cela assure une grande portabilit√© et une simplification du processus de test.\n\nLes tests sont √©crits en Python et utilisent une syntaxe simple et intuitive.  On peut tester une vari√©t√© de choses, incluant :\n\n* **Pr√©sence de fichiers et de dossiers:** V√©rifier si un fichier existe, s'il est lisible, s'il a les permissions appropri√©es.\n* **Services syst√®me:** V√©rifier si un service est en marche, arr√™t√©, ou en cours de red√©marrage.\n* **Packages logiciels:** V√©rifier si un package est install√©, sa version, etc.\n* **Ports r√©seau:** V√©rifier si un port est ouvert ou ferm√©.\n* **Contenu de fichiers de configuration:** V√©rifier la pr√©sence de lignes sp√©cifiques dans un fichier de configuration.\n* **Commandes syst√®me:** Ex√©cuter des commandes et valider leur sortie.\n* **Utilisateurs et groupes:** V√©rifier l'existence et les permissions des utilisateurs et des groupes.\n\n\nTestinfra s'int√®gre facilement dans les [[pipelines CI/CD]] et permet de valider l'√©tat de votre infrastructure de mani√®re automatis√©e et fiable.  Il est particuli√®rement utile pour le test d'[[Infra as Code (IaC]] en permettant de v√©rifier que l'infrastructure provisionn√©e correspond bien √† la configuration souhait√©e.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplicit√© et lisibilit√©:** Les tests sont √©crits en Python, ce qui les rend faciles √† √©crire, √† lire et √† maintenir.\n* **Portabilit√©:** Fonctionne sur plusieurs syst√®mes d'exploitation ([[Linux]], [[Windows]], [[macOS]]) et utilise un langage de test ind√©pendant des outils de provisionnement.\n* **Int√©gration CI/CD:** S'int√®gre facilement dans les [[pipelines CI/CD]].\n* **Large couverture:** Permet de tester une grande vari√©t√© d'aspects de l'infrastructure.\n* **Bas√© sur [[Python]]:**  Tire parti de l'√©cosyst√®me riche de [[Python]] et de ses librairies.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:** N√©cessite une connaissance de base de [[Python]].\n* **D√©pendance √† [[Python]]:**  Fonctionne uniquement avec [[Python]].\n* **D√©bogage:** Le d√©bogage des tests peut √™tre plus complexe que avec certains outils sp√©cifiques.  (Cependant, les capacit√©s de d√©bogage de [[Python]] restent disponibles)\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Testing]]"
    },
    {
        "id": "87ba0245-8bf1-4701-ade6-2b36a270bc94",
        "title": "Unit√© responsive css",
        "description": "---\nid: 26571386-fada-49d8-b94c-b71bcd74cc84\ntags: \"\"\ncreated: 2025-01-22\nupdated: 2025-02-03\n---\n# Rapidement c'est quoi‚ùì\n\nLes unit√©s responsive [[CSS]] permettent de d√©finir des tailles relatives en fonction de la taille du viewport, c‚Äôest-√†-dire la fen√™tre d'affichage. Elles sont particuli√®rement utiles pour les designs fluides et adaptatifs sur diff√©rents appareils.\n\n---\n\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n- **`vh` (viewport height)** : Repr√©sente 1% de la hauteur du viewport. Par exemple, `100vh` occupe toute la hauteur de l'√©cran.\n- **`vw` (viewport width)** : Repr√©sente 1% de la largeur du viewport. Par exemple, `100vw` occupe toute la largeur de l'√©cran.\n- **`lvh` (large viewport height)** : Unit√© relative √† la hauteur du \"grand viewport\". Elle est stable et ignore les variations dues √† la barre d'adresse des appareils mobiles.\n- **`svh` (small viewport height)** : Repr√©sente la hauteur en excluant les √©l√©ments qui se cachent (comme la barre d'adresse sur mobile), utile pour un redimensionnement plus stable.\n- **`dvh` (dynamic viewport height)** : Similaire √† `lvh` et `svh`, mais prend en compte les changements dynamiques du viewport dus √† l‚Äôorientation ou des √©v√©nements d‚Äôinterface utilisateur.\n- **`vmin` (viewport minimum)** : Repr√©sente la plus petite des valeurs entre `vh` et `vw`, pour maintenir une proportion uniforme entre la largeur et la hauteur du viewport, quel que soit l'orientation de l'appareil.\n\n---\n\n# Qu'est ce qui est top ? üëç\n\n- **Adaptabilit√©** : Ces unit√©s permettent de cr√©er des interfaces qui s'ajustent automatiquement √† la taille du viewport, rendant le design plus flexible.\n- **Stabilit√© sur mobile** : Les unit√©s comme `lvh`, `svh`, et `dvh` sont sp√©cialement con√ßues pour g√©rer les variations de taille sur les appareils mobiles, offrant une exp√©rience utilisateur plus pr√©visible.\n- **Proportions coh√©rentes** : `vmin` permet de maintenir des proportions constantes entre la largeur et la hauteur du viewport, quelle que soit l'orientation de l'√©cran.\n\n---\n\n# Qu'est ce qui est pas ouf ? üëé\n\n- **Probl√®mes de compatibilit√©** : Certaines unit√©s comme `lvh`, `svh`, et `dvh` peuvent ne pas √™tre support√©es de mani√®re uniforme dans tous les navigateurs, surtout dans les versions plus anciennes.\n- **Complexit√© accrue** : Utiliser plusieurs unit√©s responsive dans un m√™me projet peut ajouter de la complexit√©, et il faut tester minutieusement pour s'assurer de la coh√©rence sur tous les appareils.\n- **Incertitude sur les mobiles** : Le comportement de certaines unit√©s (notamment `vh` et `vw`) peut √™tre affect√© par des √©l√©ments de l'interface (barre d‚Äôadresse ou navigation), rendant les tailles moins fiables.\n\n---\n\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "1ff270c7-4a18-4105-9d25-25da9d598351",
        "title": "VitePress",
        "description": "---\nid: b9f8677a-eceb-429a-8172-e5dea5e9833b\n---\n# Rapidement c'est quoi‚ùì\n\nVitePress est un g√©n√©rateur de site statique [[Server Side Generation (SSG)]] bas√© sur [[Vite]] et [[Vue.js]].  Il permet de cr√©er rapidement et facilement des sites web, notamment des documentations.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nVitePress est un g√©n√©rateur de site statique qui tire parti de la vitesse et des performances de [[Vite]], un serveur de d√©veloppement rapide et un outil de construction.  Il utilise [[Vue.js]] pour le rendu des pages, permettant de cr√©er des sites web dynamiques et interactifs malgr√© la nature statique du r√©sultat final.  Contrairement √† des g√©n√©rateurs de sites statiques plus traditionnels, VitePress offre un processus de d√©veloppement plus rapide gr√¢ce √† l'utilisation de Hot Module Replacement (HMR).  Cela signifie que les modifications de code sont instantan√©ment refl√©t√©es dans le navigateur sans n√©cessiter un rechargement complet de la page.  Il est particuli√®rement bien adapt√© √† la cr√©ation de documentations, car il offre des fonctionnalit√©s int√©gr√©es pour la gestion de la navigation, la recherche, et le d√©ploiement.  Le syst√®me de fichiers est utilis√© pour structurer le contenu, ce qui facilite la gestion et la maintenance du site.  La configuration est minimale, rendant VitePress accessible m√™me aux d√©veloppeurs peu exp√©riment√©s avec [[Vue]].  Il fournit √©galement des th√®mes par d√©faut personnalisables.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Rapidit√© de d√©veloppement:** Le HMR de Vite permet un cycle de d√©veloppement extr√™mement rapide.\n* **Facilit√© d'utilisation:** Configuration simple et intuitive, id√©ale pour les d√©butants en [[Vue.js]].\n* **Int√©gration avec [[Vue.js]]:** Permet de tirer parti de la puissance et de la flexibilit√© de [[Vue.js]].\n* **Performance:** Les sites g√©n√©r√©s sont optimis√©s pour la vitesse de chargement.\n* **Bon pour la documentation:**  Fonctionnalit√©s int√©gr√©es facilitant la cr√©ation de documentations.\n* **Syst√®me de theming:** Permet une personnalisation facile de l'apparence du site.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Moins flexible que des solutions plus complexes:**  Peut manquer de flexibilit√© pour des projets tr√®s sp√©cifiques ou complexes.  Les options de personnalisation, bien que pr√©sentes, sont plus limit√©es que des solutions plus g√©n√©ralistes.\n* **√âcosyst√®me moins large que d'autres [[Server Side Generation (SSG)]]:**  La communaut√© et les plugins disponibles sont moins nombreux que pour des SSG plus matures comme [[Astro]], [[Gatsby]] ou [[Hugo]].\n* **D√©pendance √† Vue.js:**  Si vous n'√™tes pas familier avec Vue.js, il faudra apprendre √† l'utiliser.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n[[MOC_Dev]]"
    },
    {
        "id": "73b8a1b5-01f0-4e3f-a721-f5ba47faef97",
        "title": "pg_vector",
        "description": "---\nid: 77c31383-8845-47ff-89f1-44766cf8f9b3\n---\n# Rapidement c'est quoi‚ùì\n\npg_vector est une extension pour le syst√®me de gestion de base de donn√©es [[PostgreSQL]] permettant d'indexer et de rechercher des vecteurs.  Cela facilite la mise en ≈ìuvre de la recherche s√©mantique et des syst√®mes de recommandation au sein d'une [[Base de donn√©e]].\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\npg_vector est une extension open-source pour [[PostgreSQL]] qui ajoute la capacit√© de stocker et de rechercher efficacement des vecteurs de donn√©es.  Ces vecteurs, g√©n√©ralement cr√©√©s par des mod√®les d'apprentissage automatique (embeddings), repr√©sentent des informations s√©mantiques (texte, images, audio, etc.).  L'extension fournit un type de donn√©es d√©di√© (`vector`), des op√©rateurs et des index sp√©cifiques pour optimiser les requ√™tes de recherche de similarit√©.\n\nLe c≈ìur de pg_vector r√©side dans ses capacit√©s de recherche par similarit√©.  Au lieu de rechercher des correspondances exactes, il permet de trouver les vecteurs les plus proches d'un vecteur donn√©, en utilisant des m√©triques de distance comme la distance euclidienne ou la distance cosinus.  Cette approche est cruciale pour les applications de recherche s√©mantique, o√π l'objectif est de trouver des √©l√©ments similaires en termes de signification, m√™me si les mots cl√©s ne correspondent pas parfaitement.\n\nL'extension g√®re l'indexation des vecteurs, ce qui permet des recherches rapides et efficaces m√™me sur de grands ensembles de donn√©es.  Les index utilis√©s optimisent la recherche en espace vectoriel, r√©duisant le temps de traitement et am√©liorant les performances.  Elle fournit √©galement des fonctions pour calculer les distances entre les vecteurs et pour effectuer des recherches √† l'aide de ces distances.\nCette extension permet de convertir [[PostgreSQL]] en une [[Base de donn√©e vectorielle]], id√©al pour la cr√©ation de [[RAG]] dans les [[Large Language Model (LLM)]].\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Int√©gration native avec [[PostgreSQL]]:**  Pas besoin d'une solution externe complexe.  Tout est g√©r√© au sein de la base de donn√©es.\n* **Performances:**  L'utilisation d'index optimis√©s permet des recherches rapides et efficaces, m√™me sur de tr√®s grands ensembles de donn√©es vectoris√©es.\n* **[[Open-source]] et communaut√© active:**  Acc√®s au code source, contribution possible et communaut√© pour le support.\n* **Simplicit√© d'utilisation:**  Relativement facile √† installer et √† utiliser, m√™me pour ceux qui ne sont pas experts en bases de donn√©es.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Limit√© √† [[PostgreSQL]]:**  L'extension ne fonctionne qu'avec PostgreSQL.  L'utilisation avec d'autres bases de donn√©es n√©cessite une solution alternative.\n* **D√©pendance aux mod√®les d'apprentissage automatique:**  N√©cessite de g√©n√©rer des vecteurs √† l'aide de mod√®les externes.  L'extension ne fournit pas de fonctionnalit√© de cr√©ation de vecteurs.\n* **Complexit√© potentielle pour des applications tr√®s sp√©cifiques:**  La configuration optimale des index et le choix de la m√©trique de distance peuvent n√©cessiter une expertise technique.\n\n---\n# A quoi c'est li√© ? ü™¢\n[[Base de donn√©e SQL]]"
    },
    {
        "id": "bc62b3e7-b04a-4d75-8ed7-1d1b2693304f",
        "title": "vLLM",
        "description": "---\nid: fb7bce3a-8584-449e-8086-fa44d07ff590\n---\n# Rapidement c'est quoi‚ùì\n\nvLLM est un outil permettant de d√©ployer rapidement et facilement de grands mod√®les de langage ([[Large Language Model (LLM)]]) sous forme d'API web compatible avec l'API d'[[OpenAI]].  Cela permet d'utiliser les SDK OpenAI existants avec des mod√®les LLM personnalis√©s.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nvLLM est une infrastructure [[Open-source]] con√ßue pour servir des mod√®les de langage volumineux (LLMs) via une API [[RESTful]] imitant celle d'OpenAI.  Au lieu de devoir construire une infrastructure complexe de serveurs et de g√©rer la mise √† l'√©chelle, vLLM permet de d√©ployer un LLM existant (entra√Æn√© pr√©alablement) et de le rendre accessible via une interface simple et standardis√©e.  L'avantage cl√© r√©side dans la compatibilit√© avec les SDK OpenAI : les applications existantes qui utilisent l'API OpenAI peuvent fonctionner sans modification majeure avec un LLM d√©ploy√© via vLLM, simplement en changeant l'URL de l'API.  vLLM g√®re la mise en m√©moire du mod√®le, le parall√©lisme des requ√™tes, et optimise les performances pour servir efficacement des requ√™tes d'inf√©rence (g√©n√©rer du texte, r√©pondre √† des questions, etc.).  Il est g√©n√©ralement utilis√© avec des mod√®les quantifi√©s pour r√©duire la taille m√©moire n√©cessaire et am√©liorer les performances.  Il propose diff√©rents modes de service (ex : serveur unique, serveur distribu√©) pour s'adapter aux besoins en ressources et au volume de requ√™tes.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Compatibilit√© OpenAI:**  Permet une transition facile vers des LLM personnalis√©s sans modifier le code client.\n* **Simplicit√© de d√©ploiement:**  Facilite le processus de mise en production d'un LLM, simplifiant l'infrastructure n√©cessaire.\n* **Performances:** Optimis√© pour g√©rer les requ√™tes d'inf√©rence efficacement, m√™me avec des mod√®les volumineux.\n* **Open-source:** Accessible, modifiable et am√©liorable par la communaut√©.\n* **Scalabilit√©:**  Possibilit√© de d√©ploiement sur des serveurs multiples pour une meilleure gestion des charges importantes.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© initiale (potentielle):** Bien que visant la simplicit√©, la configuration et le d√©ploiement initiaux peuvent n√©cessiter une certaine expertise technique, notamment en ce qui concerne la gestion des mod√®les et des ressources.\n* **D√©pendances:** N√©cessite des biblioth√®ques sp√©cifiques et un environnement d'ex√©cution adapt√©.\n* **Ressources:**  Le d√©ploiement de grands mod√®les n√©cessite des ressources mat√©rielles importantes (RAM, GPU).\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n[[Intelligence Artificielle]]\n"
    },
    {
        "id": "69136136-c910-4337-baa8-695b2bdbcf2e",
        "title": "",
        "description": "# Gestion des Exceptions en Java\n\nCette note d√©taille la gestion des exceptions en Java, un m√©canisme crucial pour la robustesse et la fiabilit√© des applications.  Une bonne gestion des exceptions permet d'anticiper et de traiter les erreurs de mani√®re √©l√©gante, emp√™chant ainsi des plantages inattendus.\n\n## 1. Qu'est-ce qu'une exception ?\n\nUne exception est un √©v√©nement qui interrompt le flux normal d'ex√©cution d'un programme.  Elle survient g√©n√©ralement lorsqu'une erreur se produit, comme une tentative d'acc√®s √† un fichier inexistant, une division par z√©ro, ou une erreur r√©seau.  En Java, les exceptions sont des objets qui h√©ritent de la classe `Throwable`.\n\n## 2. Types d'exceptions\n\nJava distingue deux grands types d'exceptions :\n\n* **Exceptions v√©rifi√©es (checked exceptions):**  Le compilateur Java impose la gestion de ces exceptions.  Si une m√©thode peut lever une exception v√©rifi√©e,  elle doit soit la g√©rer avec un bloc `try-catch`, soit la d√©clarer dans sa signature √† l'aide du mot-cl√© `throws`.  Exemples : `IOException`, `SQLException`.\n\n* **Exceptions non v√©rifi√©es (unchecked exceptions):**  Le compilateur ne force pas leur gestion explicite.  Ce sont g√©n√©ralement des erreurs de programmation (ex: `NullPointerException`, `IndexOutOfBoundsException`, `ArithmeticException`). Elles sont souvent le signe d'un bug dans le code.  [Concepts de Base en Java]\n\n## 3. Gestion des exceptions avec `try-catch`\n\nLe m√©canisme principal pour g√©rer les exceptions est le bloc `try-catch`.  Le code susceptible de lever une exception est plac√© dans le bloc `try`.  Si une exception survient, le programme saute au bloc `catch` correspondant au type d'exception.\n\n```java\ntry {\n    // Code susceptible de lever une exception\n    int result = 10 / 0; // Division par z√©ro\n    System.out.println(\"R√©sultat : \" + result);\n} catch (ArithmeticException e) {\n    // Gestion de l'exception ArithmeticException\n    System.err.println(\"Erreur : Division par z√©ro !\");\n    e.printStackTrace(); // Affiche le d√©tails de l'exception dans la console\n}\n```\n\nDans cet exemple, la division par z√©ro l√®ve une `ArithmeticException`. Le bloc `catch` correspondant intercepte l'exception, affiche un message d'erreur, et utilise `e.printStackTrace()` pour afficher la pile d'appels, utile pour le d√©bogage.\n\n\n## 4.  Gestion de plusieurs exceptions\n\nUn bloc `try` peut √™tre suivi de plusieurs blocs `catch` pour g√©rer diff√©rents types d'exceptions. L'ordre des blocs `catch` est important : les exceptions les plus sp√©cifiques doivent √™tre trait√©es avant les exceptions plus g√©n√©rales (car les classes filles sont trait√©es avant leurs classes m√®res).\n\n```java\ntry {\n    // ...\n} catch (IOException e) {\n    // Gestion d'une IOException\n} catch (SQLException e) {\n    // Gestion d'une SQLException\n} catch (Exception e) { // Exception g√©n√©rale, √† utiliser en dernier recours\n    // Gestion d'autres exceptions\n}\n```\n\n\n## 5. Le bloc `finally`\n\nLe bloc `finally` est optionnel et contient du code qui s'ex√©cute toujours, que l'exception soit lev√©e ou non.  Il est souvent utilis√© pour lib√©rer des ressources (fermer des fichiers, des connexions √† une base de donn√©es, etc.).\n\n```java\ntry {\n    // ...\n} catch (Exception e) {\n    // ...\n} finally {\n    // Code qui s'ex√©cute toujours\n    System.out.println(\"Bloc finally ex√©cut√©\");\n}\n```\n\n\n## 6. Propagation des exceptions\n\nSi une m√©thode ne g√®re pas une exception, elle la propage vers la m√©thode appelante.  Cette propagation continue jusqu'√† ce qu'une m√©thode g√®re l'exception ou que le programme termine son ex√©cution.  Ceci est g√©r√© via le mot-cl√© `throws` dans la signature de la m√©thode.\n\n```java\npublic void maMethode() throws IOException {\n    // Code qui peut lever une IOException\n    throw new IOException(\"Erreur d'entr√©e/sortie\");\n}\n```\n\n## 7.  Exceptions personnalis√©es\n\nIl est possible de cr√©er des exceptions personnalis√©es pour g√©rer des situations sp√©cifiques au sein de l'application.  Cela am√©liore la lisibilit√© et la maintenabilit√© du code.  Il suffit de cr√©er une nouvelle classe qui √©tend `Exception` (ou une de ses sous-classes).  [Gestion des Exceptions]\n\n\n## Conclusion\n\nLa ma√Ætrise de la gestion des exceptions est essentielle pour d√©velopper des applications Java robustes et fiables.  Une gestion appropri√©e des exceptions am√©liore la qualit√© du code, facilite le d√©bogage et permet de fournir une exp√©rience utilisateur plus agr√©able en √©vitant les plantages inattendus.\n"
    },
    {
        "id": "e8e30d2b-96ea-40d6-b6f3-405ab87d1a5d",
        "title": "@MapsId",
        "description": "---\nid: d232d5f0-ad62-4cb1-be4b-eb4682ecb271\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\n`@MapsId` est une annotation de Spring Data JPA utilis√©e dans les relations `@OneToOne` pour partager la cl√© primaire entre une entit√© parent et une entit√© enfant.  Cela √©vite la cr√©ation d'une colonne de cl√© √©trang√®re dans la table enfant.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nDans une relation `@OneToOne`,  Spring Data JPA cr√©e g√©n√©ralement une colonne de cl√© √©trang√®re dans la table de l'entit√© enfant pour faire r√©f√©rence √† l'entit√© parent.  Si la relation est optionnelle (l'enfant peut exister sans le parent), cette colonne est souvent nullable.  `@MapsId` permet de contourner ce comportement.  Au lieu d'une cl√© √©trang√®re, l'entit√© enfant partage la m√™me cl√© primaire que l'entit√© parent.  Cela implique que la cl√© primaire de l'entit√© enfant est identique √† celle du parent.  L'annotation `@MapsId` sp√©cifie le nom du champ de la cl√© primaire de l'entit√© parent qui sera mapp√© √† la cl√© primaire de l'entit√© enfant.\n\n**Exemple:**\n\nSupposons que nous ayons une entit√© `Utilisateur` et une entit√© `Profil` avec une relation `@OneToOne`.\n\n```java\n@Entity\npublic class Utilisateur {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    // ... autres attributs ...\n\n    @OneToOne(mappedBy = \"utilisateur\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\n    private Profil profil;\n    // ...\n}\n\n@Entity\n@Table(name = \"profil\")\npublic class Profil {\n\n    @Id\n    private Long id; // Cl√© primaire partag√©e\n\n    @MapsId\n    @OneToOne\n    @JoinColumn(name = \"id\") //Optionnel, le nom est deja id de base\n    private Utilisateur utilisateur;\n\n\n    // ... autres attributs ...\n}\n```\n\nDans cet exemple, `@MapsId` dans la classe `Profil` indique que le champ `id` de `Profil` utilise la m√™me cl√© primaire que le champ `id` de `Utilisateur`.  La table `profil` n'aura pas de colonne de cl√© √©trang√®re.  La contrainte d'unicit√© de la cl√© primaire g√®re la relation.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Simplicit√©:**  √âvite la complexit√© d'une cl√© √©trang√®re, surtout dans les relations optionnelles.\n* **Performance:** Peut am√©liorer l√©g√®rement les performances des requ√™tes, car cela √©vite les jointures sur la cl√© √©trang√®re.\n* **Clart√© du sch√©ma de donn√©es:** Le sch√©ma relationnel est plus propre et plus facile √† comprendre.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Contraintes:**  Il est crucial que la cl√© primaire de l'entit√© enfant soit du m√™me type que celle du parent.  Une mauvaise configuration peut conduire √† des erreurs.\n* **Moins flexible:**  `@MapsId` est moins flexible que l'utilisation d'une cl√© √©trang√®re classique, particuli√®rement si vous avez besoin de fonctionnalit√©s avanc√©es de gestion de la relation.\n* **Difficult√© de compr√©hension:**  Pour les d√©veloppeurs non exp√©riment√©s avec JPA, cette annotation peut √™tre moins intuitive qu'une relation avec cl√© √©trang√®re.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "bd6d23da-1d38-4bd8-abca-a651a7fe152a",
        "title": "Akka",
        "description": "---\nid: 3b6dc02c-51c8-42be-85d6-9effe457e5ec\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nAkka est un toolkit open-source et multiplateforme pour construire des applications concurrentes, distribu√©es et r√©silientes bas√©es sur le mod√®le acteur.  Il simplifie le d√©veloppement d'applications hautement parall√®les et tol√©rantes aux pannes.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nAkka est bas√© sur le mod√®le acteur, un paradigme de programmation concurrent qui traite les acteurs comme des unit√©s ind√©pendantes de calcul.  Chaque acteur poss√®de sa propre bo√Æte aux lettres pour recevoir des messages, son propre √©tat interne et un thread d√©di√© (ou un pool de threads).  La communication entre les acteurs se fait exclusivement par l'envoi de messages asynchrones.  Cela permet d'√©viter les probl√®mes de concurrence classiques tels que les interblocages et les conditions de course.\n\nAkka offre plusieurs fonctionnalit√©s cl√©s :\n\n* **Mod√®le Acteur:**  Le c≈ìur d'Akka.  Il g√®re la cr√©ation, la surveillance et la communication entre les acteurs.\n* **Supervision:** Akka fournit un m√©canisme de supervision hi√©rarchique permettant de g√©rer les erreurs et les pannes des acteurs.  Si un acteur plante, son superviseur peut d√©cider de le red√©marrer, de le surveiller, ou de le terminer.\n* **R√©silience:** Gr√¢ce √† la supervision et √† la nature asynchrone des messages, Akka permet de construire des syst√®mes r√©silients capables de tol√©rer les pannes.\n* **Distribution:** Akka peut distribuer les acteurs sur plusieurs machines, permettant la cr√©ation d'applications distribu√©es.\n* **Persistance:** Akka permet de persister l'√©tat des acteurs pour garantir la coh√©rence des donn√©es en cas de panne.\n* **Streaming:** Akka Streams offre un cadre puissant pour traiter des flux de donn√©es de mani√®re r√©active et concurrente.\n* **HTTP/WebSockets:**  Akka HTTP fournit des outils pour cr√©er des serveurs et des clients HTTP et WebSockets.\n\n**Exemple (Scala):**\n\n```scala\nimport akka.actor.{Actor, ActorSystem, Props}\n\nclass MyActor extends Actor {\n  def receive: Receive = {\n    case \"hello\" => println(\"Hello from actor!\")\n    case _ => println(\"Unknown message\")\n  }\n}\n\nobject MyAkkaApp extends App {\n  val system = ActorSystem(\"mySystem\")\n  val myActor = system.actorOf(Props[MyActor], \"myActor\")\n  myActor ! \"hello\"\n  Thread.sleep(1000)\n  system.terminate()\n}\n```\n\nCet exemple cr√©e un syst√®me d'acteurs, un acteur `MyActor`, et lui envoie un message \"hello\".\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Concurrence facile:**  Le mod√®le acteur simplifie la gestion de la concurrence.\n* **R√©silience:**  Les syst√®mes Akka sont plus r√©silients gr√¢ce √† la supervision.\n* **Scalabilit√©:**  Akka permet de cr√©er des applications distribu√©es et hautement scalables.\n* **Communaut√© active et documentation compl√®te:** Akka b√©n√©ficie d'une large communaut√© et d'une documentation abondante.\n* **Langages support√©s:** Akka est disponible pour Java, Scala, Kotlin et d'autres langages.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:**  Le mod√®le acteur peut avoir une courbe d'apprentissage plus raide que les approches de programmation concurrentes traditionnelles.\n* **D√©bogage:**  Le d√©bogage des applications Akka peut √™tre plus complexe que celui des applications monothread√©es.\n* **Complexit√© pour les applications simples:**  Pour les applications simples, Akka peut √™tre un sur-ing√©nierie.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "75ef67dd-da48-429a-ab54-af38f2851448",
        "title": "Algorithmes de Garbage Collector",
        "description": "---\nid: 11284ca5-0259-472f-bb46-962fa1f2500d\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nLes garbage collectors (GC) sont des algorithmes qui automatisent la gestion de la m√©moire dans les langages de programmation comme Java.  Ils identifient et r√©cup√®rent la m√©moire qui n'est plus utilis√©e par le programme, emp√™chant les fuites de m√©moire et lib√©rant des ressources pour de nouvelles allocations.  Parallel, G1, et ZGC sont trois algorithmes de GC diff√©rents utilis√©s par la JVM (Java Virtual Machine).\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nCes trois algorithmes diff√®rent principalement dans leur strat√©gie de collecte et leur impact sur les performances de l'application :\n\n**1. Parallel Garbage Collector:**\n\n* **Strat√©gie:**  Un GC \"stop-the-world\" qui utilise plusieurs threads pour collecter les objets inaccessibles. Il effectue une collecte des g√©n√©rations (Young, Old) et utilise un copy collector pour la g√©n√©ration Young (objets jeunes). La g√©n√©ration Old (objets √¢g√©s) utilise un mark-sweep-compact collector.  \n* **Fonctionnement:** Pendant la collecte, tous les autres threads de l'application sont interrompus (stop-the-world). La collecte est rapide pour la g√©n√©ration Young mais peut prendre plus de temps pour la g√©n√©ration Old.\n* **Avantages:**  Performant pour les applications avec un taux de cr√©ation d'objets faible √† moyen.  Le parall√©lisme acc√©l√®re la collecte.\n* **Inconv√©nients:**  Longs temps d'arr√™t (\"pause times\") lors de la collecte de la g√©n√©ration Old.  Non adapt√© aux applications exigeantes en faible latence.\n\n**2. G1 Garbage Collector (Garbage-First):**\n\n* **Strat√©gie:** Un GC concurrent et √† faible pause qui divise le heap en r√©gions. Il priorise la collecte des r√©gions avec le plus de garbage. Il utilise une approche √† plusieurs g√©n√©rations.\n* **Fonctionnement:**  Il effectue des collectes partielles et concurrentes, ce qui signifie qu'il travaille en parall√®le avec l'application, minimisant les temps d'arr√™t.  Il vise √† atteindre un objectif de temps de pause donn√©.\n* **Avantages:**  Meilleur compromis entre temps de pause et d√©bit que le Parallel GC.  Adapt√© aux applications avec des heaps de grande taille.\n* **Inconv√©nients:**  Plus complexe √† configurer que le Parallel GC.  Peut consommer plus de ressources CPU que le Parallel GC.\n\n**3. Z Garbage Collector (ZGC):**\n\n* **Strat√©gie:** Un GC concurrent, √† tr√®s faible pause, et √† haute performance. Il utilise des pointeurs color√©s et un m√©canisme de d√©tection de cycles efficace.\n* **Fonctionnement:**  Le ZGC vise √† atteindre des temps de pause inf√©rieurs √† 10ms, m√™me avec des heaps de plusieurs t√©raoctets. Il est extr√™mement efficace et utilise plusieurs threads pour collecter les objets de mani√®re concurrente.\n* **Avantages:**  Tr√®s faibles pauses, adapt√© aux applications n√©cessitant une faible latence (ex: applications en temps r√©el).  Excellent d√©bit m√™me pour des heaps volumineux.\n* **Inconv√©nients:**  Plus r√©cent que les autres GC, donc moins mature.  Peut consommer plus de ressources CPU que G1 ou Parallel GC. N√©cessite une version Java r√©cente.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **Parallel GC:**  Simple, performant pour les applications √† faible latence tol√©rable.\n* **G1 GC:**  Bon compromis entre d√©bit et temps de pause, adapt√© aux grandes applications.\n* **ZGC:**  Temps de pause extr√™mement faibles, id√©al pour des applications √† faible latence.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Parallel GC:**  Longs temps de pause lors de la collecte de la g√©n√©ration Old.\n* **G1 GC:**  Peut √™tre plus complexe √† configurer et √† ma√Ætriser.\n* **ZGC:**  Plus gourmand en ressources, relativement r√©cent et n√©cessite une version Java r√©cente.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "8b72417a-7de5-4399-b169-e1f5066764f7",
        "title": "Apache CouchDB",
        "description": "---\nid: f21c9312-cb75-458c-bc61-69e46d477f40\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nApache CouchDB est une base de donn√©es NoSQL orient√©e document, open source, qui utilise le protocole HTTP pour acc√©der et manipuler les donn√©es.  Elle se distingue par sa simplicit√©, sa facilit√© de r√©plication et son mod√®le de donn√©es flexible.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nCouchDB stocke les donn√©es sous forme de documents JSON.  Chaque document est identifi√© par un unique ID et poss√®de des r√©visions, permettant le suivi des modifications.  L'acc√®s aux donn√©es se fait via des requ√™tes HTTP (GET, POST, PUT, DELETE) sur des URLs sp√©cifiques.  Elle utilise un m√©canisme de r√©plication facile √† mettre en place, permettant la synchronisation de donn√©es entre plusieurs serveurs.  CouchDB utilise le concept de \"vues\" (views) pour cr√©er des index sur les documents, permettant des requ√™tes plus performantes.  Ces vues sont d√©finies en utilisant une syntaxe MapReduce simplifi√©e, ou bien avec des fonctions √©crites en Javascript.\n\nVoici un exemple d'ajout d'un document en utilisant une requ√™te HTTP POST :\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"John Doe\", \"age\": 30}' http://localhost:5984/mydb/\n```\n\nEt un exemple de requ√™te pour r√©cup√©rer un document sp√©cifique :\n\n```bash\ncurl http://localhost:5984/mydb/doc_id\n```\n\nCouchDB offre un m√©canisme de gestion des conflits lors de la r√©plication.  Le mod√®le de donn√©es flexible permet de stocker des donn√©es structur√©es et non structur√©es facilement.  L'architecture est distribu√©e par nature, favorisant la haute disponibilit√© et la tol√©rance aux pannes.\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Simplicit√© et facilit√© d'utilisation:**  L'API HTTP est intuitive et facile √† comprendre.\n* **R√©plication facile:**  La r√©plication est un processus simple et robuste, permettant une haute disponibilit√© et une distribution g√©ographique des donn√©es.\n* **Mod√®le de donn√©es flexible:**  Le format JSON permet de stocker des donn√©es de diff√©rentes structures.\n* **Open source et communaut√© active:**  B√©n√©ficie d'une grande communaut√© et d'un support important.\n* **Architecture distribu√©e:**  Int√©gr√©e par nature pour une meilleure tol√©rance aux pannes et scalabilit√©.\n\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Performance des requ√™tes complexes:**  Peut √™tre moins performante que d'autres bases de donn√©es pour des requ√™tes complexes n√©cessitant des jointures ou des op√©rations avanc√©es.  La performance d√©pend fortement de la conception des vues.\n* **Manque de fonctionnalit√©s ACID strictes:**  Bien que CouchDB offre des m√©canismes pour la coh√©rence des donn√©es, elle ne fournit pas les garanties ACID compl√®tes comme les bases de donn√©es relationnelles.\n* **Mod√®le de donn√©es moins structur√©:**  L'absence de sch√©ma rigide peut compliquer la gestion des donn√©es pour certaines applications.\n* **La courbe d'apprentissage des vues MapReduce peut √™tre raide** pour les d√©veloppeurs qui ne sont pas familiers avec ce paradigme.\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "b73fab9d-4ae1-42cb-acf8-d6b4ca556589",
        "title": "Apache Pulsar",
        "description": "---\nid: 9058cd6d-9b55-44d4-ac8f-efcfa34393bd\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nApache Pulsar est un syst√®me de messagerie distribu√©, hautement scalable et performant, con√ßu pour g√©rer des flux de donn√©es √† grande √©chelle et √† faible latence.  Il est particuli√®rement adapt√© aux applications n√©cessitant une haute disponibilit√© et une grande capacit√© de traitement de messages.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nApache Pulsar est un syst√®me de messagerie √† publication/abonnement (pub/sub) qui utilise une architecture multi-tenant et g√©r√©e par le cloud.  Il se diff√©rencie des syst√®mes de messagerie traditionnels par plusieurs aspects cl√©s :\n\n* **Architecture en couches:** Pulsar utilise une architecture en trois couches :  brokers, clients et le service de stockage. Les brokers g√®rent les connexions clients et la routage des messages. Le stockage peut √™tre effectu√© dans diff√©rents syst√®mes de stockage persistants (comme BookKeeper ou un syst√®me de fichiers distribu√©), offrant flexibilit√© et haute disponibilit√©.\n\n* **BookKeeper:** Pulsar utilise BookKeeper, un syst√®me de stockage distribu√© hautement performant et fiable, pour la persistance des messages. Ceci assure la durabilit√© des messages m√™me en cas de panne de brokers.\n\n* **Gestion des namespaces et des topics:** Pulsar offre une gestion fine des namespaces et des topics, permettant une s√©paration claire entre les diff√©rents locataires et applications.  Cela facilite la gestion des ressources et l'isolation des applications.\n\n* **Routing flexible:** Pulsar supporte diff√©rents modes de routage, dont le routage g√©om√©trique, permettant une distribution efficace des messages entre les consommateurs.\n\n* **Fonctionnalit√©s avanc√©es:** Pulsar offre des fonctionnalit√©s telles que la segmentation des topics, la r√©plication des messages, la gestion des transactions et l'int√©gration avec des outils de monitoring.\n\n**Exemple (concept):** Imaginons une application de streaming vid√©o.  Pulsar peut √™tre utilis√© pour g√©rer le flux de donn√©es vid√©o en temps r√©el. Les producteurs publient les donn√©es vid√©o sur un topic Pulsar, et les consommateurs les re√ßoivent pour les diffuser aux utilisateurs.  La haute scalabilit√© de Pulsar permet de g√©rer un grand nombre d'utilisateurs simultan√©s.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Haute performance et faible latence:** Pulsar est optimis√© pour une faible latence et un d√©bit √©lev√©.\n* **Scalabilit√© horizontale:** Pulsar peut facilement √™tre √©tendu pour g√©rer des charges de travail de plus en plus importantes.\n* **Haute disponibilit√©:** Gr√¢ce √† la r√©plication et √† BookKeeper, Pulsar offre une haute disponibilit√© des messages.\n* **Multi-tenancy:** Pulsar permet une s√©paration claire des ressources entre les diff√©rents locataires.\n* **Gestion avanc√©e des topics:** La segmentation et la r√©plication des topics offre une grande flexibilit√©.\n* **Support de multiples langages:** Pulsar fournit des clients pour divers langages de programmation.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La configuration et la gestion de Pulsar peuvent √™tre plus complexes que celle de syst√®mes de messagerie plus simples.\n* **Courbe d'apprentissage:**  Il faut du temps pour ma√Ætriser toutes les fonctionnalit√©s et les subtilit√©s de Pulsar.\n* **D√©pendance √† BookKeeper:** La performance et la fiabilit√© de Pulsar d√©pendent en grande partie de BookKeeper.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "f2d08ce3-3069-4de6-998b-85703c531cef",
        "title": "Arch Unit",
        "description": "---\nid: ffaf4087-aebd-46bc-9684-f0d5c8c188bb\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nArchUnit est une librairie Java bas√©e sur JUnit permettant de tester l'architecture d'une application.  Elle v√©rifie les relations entre diff√©rents composants (classes, packages, etc.) et s'assure que l'architecture respecte les r√®gles d√©finies.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nArchUnit permet de d√©finir des r√®gles architecturales et de v√©rifier si le code source les respecte.  Ces r√®gles peuvent porter sur diff√©rents aspects de l'architecture, tels que :\n\n* **D√©pendances entre couches :**  V√©rifier qu'une couche pr√©sentation ne d√©pend pas directement de la couche donn√©es, mais uniquement de la couche service.\n* **Cycles de d√©pendances :** D√©tecter les cycles entre les packages ou les classes, signe d'une architecture complexe et difficile √† maintenir.\n* **Utilisation d'annotations :** S'assurer que toutes les classes annot√©es d'une certaine mani√®re respectent une convention de nommage ou une structure sp√©cifique.\n* **Respect de principes de conception :** V√©rifier le respect de principes tels que la s√©paration des pr√©occupations ou l'inversion des d√©pendances.\n\n\nArchUnit utilise une API fluide et expressive pour d√©finir ces r√®gles.  On d√©crit la structure souhait√©e √† l'aide de conditions sur les classes, les packages et leurs relations.  L'ex√©cution des tests v√©rifie ensuite si le code source correspond √† cette description.  La fonctionnalit√© \"freezing arch rules\" est particuli√®rement utile pour int√©grer ArchUnit dans des projets existants (legacy) en permettant d'appliquer les r√®gles uniquement sur le nouveau code.\n\n\n**Exemple (Illustratif):**\n\nSupposons que l'on veuille v√©rifier qu'aucune classe du package `com.example.presentation` ne d√©pend directement du package `com.example.data`.  Avec ArchUnit, on pourrait √©crire une r√®gle similaire √† :\n\n```java\nimport com.tngtech.archunit.core.importer.ImportOption;\nimport com.tngtech.archunit.lang.syntax.ArchRuleDefinition;\nimport org.junit.jupiter.api.Test;\n\nimport static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;\nimport static com.tngtech.archunit.library.dependencies.SlicesRuleDefinition.slices;\n\npublic class ArchitectureTest {\n\n    @Test\n    void presentationLayerShouldNotDependOnDataLayer() {\n        classes()\n                .that().resideInAPackage(\"com.example.presentation\")\n                .should().onlyDependOnClassesThat().resideInAnyPackage(\"..presentation\", \"..service\");\n\n    }\n      @Test\n    void cyclicDependenciesAreForbidden(){\n        slices().matching(\"com.example.(*)..\").should().beFreeOfCycles();\n    }\n\n}\n```\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Automatisation des v√©rifications architecturales :**  ArchUnit permet d'automatiser le respect des r√®gles architecturales, √©vitant ainsi les r√©gressions et am√©liorant la qualit√© du code.\n* **D√©tection pr√©coce des probl√®mes :**  Les tests d'architecture sont ex√©cut√©s lors des tests unitaires ou d'int√©gration, permettant une d√©tection rapide des violations architecturales.\n* **Am√©lioration de la maintenabilit√© :**  En garantissant le respect de r√®gles architecturales, ArchUnit contribue √† une meilleure maintenabilit√© du code.\n* **Documentation de l'architecture :** Les r√®gles d√©finies avec ArchUnit peuvent servir de documentation de l'architecture du projet.\n* **Int√©gration facile avec JUnit :**  L'int√©gration avec JUnit est simple et transparente.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage :**  Il faut un certain temps pour ma√Ætriser l'API d'ArchUnit et d√©finir des r√®gles complexes.\n* **Maintenance des r√®gles :**  La maintenance des r√®gles architecturales peut devenir co√ªteuse √† mesure que le projet √©volue.\n* **Potentiellement intrusif :** L'ajout de r√®gles ArchUnit peut n√©cessiter des modifications dans le code existant.  \n* **Peut ralentir les tests :**  L'ex√©cution des r√®gles ArchUnit peut ajouter du temps aux tests.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\nJUnit, Architecture logicielle,  tests unitaires,  int√©gration continue.\n"
    },
    {
        "id": "6cdb72d6-e752-4997-ae64-c08258bc90bf",
        "title": "Biscuit authentication authorization token",
        "description": "---\nid: 3bf7e0ea-40ce-415e-8c21-bb28171de774\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nUn Biscuit est un jeton d'authentification et d'autorisation d√©centralis√©, cryptographiquement s√©curis√© et v√©rifiable hors ligne.  Il permet de v√©rifier les autorisations d'un utilisateur sans avoir besoin d'une connexion r√©seau constante √† un serveur central.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nUn Biscuit est un petit fichier de donn√©es contenant des affirmations sur l'identit√© et les autorisations d'un utilisateur.  Ces affirmations sont chiffr√©es et v√©rifi√©es √† l'aide de la cryptographie.  Contrairement aux syst√®mes centralis√©s qui reposent sur un serveur pour v√©rifier les jetons, les Biscuits peuvent √™tre v√©rifi√©s localement par l'application cliente.\n\nUn Biscuit est cr√©√© par un serveur autoris√© (\"issuer\").  Ce serveur inclut des affirmations initiales dans le Biscuit.  Par la suite, des parties tierces peuvent ajouter de nouvelles affirmations au Biscuit, mais seulement si elles ont re√ßu l'autorisation de le faire par le serveur initial.  Ces nouvelles affirmations sont ajout√©es sous forme de \"preuves\" qui sont attach√©es au Biscuit et v√©rifi√©es ult√©rieurement.\n\nLa v√©rification se fait gr√¢ce √† une signature cryptographique int√©gr√©e au Biscuit.  L'application cliente poss√®de une copie de la cl√© publique du serveur qui a √©mis le Biscuit.  Elle peut ainsi v√©rifier l'int√©grit√© et l'authenticit√© du Biscuit, ainsi que la validit√© des affirmations qu'il contient.\n\n**Fonctionnement interne (simplifi√©):**\n\n1. **Cr√©ation:** Le serveur g√©n√®re un Biscuit avec des affirmations initiales (par exemple, \"l'utilisateur est authentifi√©\", \"l'utilisateur a le r√¥le d'administrateur\").\n2. **Extension (optionnel):** Une autre entit√© (avec autorisation) peut ajouter de nouvelles affirmations au Biscuit (par exemple, \"l'utilisateur a acc√®s √† la ressource X\").  Cela se fait par la g√©n√©ration d'une preuve qui est attach√©e au Biscuit.\n3. **V√©rification:** L'application cliente v√©rifie le Biscuit en utilisant la cl√© publique du serveur. Cette v√©rification confirme que le Biscuit n'a pas √©t√© alt√©r√© et que toutes les affirmations sont valides.\n\n**Exemple (conceptuel):**\n\nImaginez une application de partage de fichiers.  Un Biscuit pourrait contenir l'affirmation \"utilisateur A a acc√®s au fichier X\".  Ce Biscuit serait v√©rifi√© localement par l'application avant de permettre l'acc√®s au fichier.  L'ajout d'une nouvelle affirmation, comme \"utilisateur B peut lire le fichier X\", pourrait se faire par une entit√© autoris√©e, ajoutant une preuve au Biscuit existant.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **S√©curit√©:** La cryptographie assure l'int√©grit√© et l'authenticit√© du Biscuit, emp√™chant la falsification.\n- **D√©centralisation:** La v√©rification hors ligne r√©duit la d√©pendance √† un serveur central, am√©liorant la r√©silience et la performance.\n- **Privacy:**  Certaines impl√©mentations permettent de limiter les informations expos√©es lors de la v√©rification.\n- **Flexibilit√©:**  L'ajout de preuves permet une gestion fine des autorisations et une adaptation √† diff√©rents contextes.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Complexit√©:** La mise en ≈ìuvre d'un syst√®me de Biscuits peut √™tre complexe, n√©cessitant une bonne compr√©hension de la cryptographie.\n- **Taille des Biscuits:** Les Biscuits peuvent prendre un certain espace de stockage, bien que leur taille reste g√©n√©ralement raisonnable.\n- **Gestion des cl√©s:** La s√©curit√© du syst√®me d√©pend de la gestion s√©curis√©e des cl√©s publiques et priv√©es.\n- **Adoption limit√©e:**  La technologie des Biscuits est relativement nouvelle et son adoption n'est pas encore aussi r√©pandue que d'autres technologies d'authentification.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "21ec1638-0060-4a17-9b23-f21e76551e13",
        "title": "Blocking Queue (Java)",
        "description": "---\nid: be601ded-fbb0-4d7d-82ba-aed2c27ceaa3\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nUne `BlockingQueue` en Java est une interface qui repr√©sente une file d'attente thread-safe.  Elle bloque les op√©rations d'insertion (ajout d'√©l√©ments) si la file est pleine et les op√©rations de suppression (retrait d'√©l√©ments) si elle est vide.  Cela permet une synchronisation efficace entre les threads producteurs et consommateurs.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nUne `BlockingQueue` est une interface dans le package `java.util.concurrent`.  Elle √©tend l'interface `Queue` et ajoute des m√©thodes sp√©cifiques pour g√©rer le blocage des op√©rations d'ajout et de suppression.  Lorsque la file est pleine, l'insertion d'un nouvel √©l√©ment bloquera le thread producteur jusqu'√† ce qu'un √©l√©ment soit retir√©.  Inversement, si la file est vide, la tentative de suppression bloquera le thread consommateur jusqu'√† ce qu'un √©l√©ment soit ajout√©.\n\nPlusieurs impl√©mentations de `BlockingQueue` existent, chacune avec des caract√©ristiques sp√©cifiques :\n\n* **`ArrayBlockingQueue`**:  Impl√©mente une file d'attente born√©e utilisant un tableau.  Sa taille est fixe lors de la cr√©ation.\n* **`LinkedBlockingQueue`**: Impl√©mente une file d'attente born√©e ou non born√©e (par d√©faut non born√©e) utilisant une liste cha√Æn√©e.  Offre une meilleure performance pour les insertions et suppressions fr√©quentes.\n* **`PriorityBlockingQueue`**:  Impl√©mente une file d'attente non born√©e qui ordonne les √©l√©ments selon leur priorit√© (d√©finie par l'impl√©mentation de `Comparable` ou un `Comparator`).\n* **`DelayQueue`**: Une file d'attente non born√©e qui maintient des √©l√©ments qui ne sont accessibles que lorsqu'un d√©lai sp√©cifi√© est √©coul√©.\n* **`SynchronousQueue`**: Une file d'attente particuli√®re o√π chaque insertion doit attendre une suppression correspondante, et vice-versa.  Elle n'a pas de capacit√© interne.\n\n**Exemple avec `ArrayBlockingQueue`:**\n\n```java\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class BlockingQueueExample {\n\n    public static void main(String[] args) {\n        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(5); // File d'attente de taille 5\n\n        // Thread producteur\n        Thread producer = new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    queue.put(i); // Bloquera si la queue est pleine\n                    System.out.println(\"Producer added: \" + i);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        // Thread consommateur\n        Thread consumer = new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    int value = queue.take(); // Bloquera si la queue est vide\n                    System.out.println(\"Consumer consumed: \" + value);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        producer.start();\n        consumer.start();\n    }\n}\n```\n\nCet exemple montre comment les threads producteur et consommateur interagissent avec la `BlockingQueue`. Les m√©thodes `put()` et `take()` g√®rent le blocage et la synchronisation automatiquement.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Thread-safety:**  G√®re la concurrence entre les threads de mani√®re s√©curis√©e et efficace, √©liminant le besoin de m√©canismes de synchronisation manuels.\n* **Blocage automatique:**  Simplifie la gestion de la concurrence en bloquant automatiquement les threads producteurs et consommateurs lorsque n√©cessaire.\n* **Flexibilit√©:**  Diff√©rentes impl√©mentations permettent de choisir la structure de donn√©es la plus appropri√©e √† l'application.\n* **Performance:** Les impl√©mentations optimis√©es offrent une bonne performance dans de nombreux cas d'utilisation.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© potentielle:**  Le choix de l'impl√©mentation appropri√©e peut n√©cessiter une compr√©hension des diff√©rentes caract√©ristiques de chaque type de `BlockingQueue`.\n* **Blocage:**  Bien que le blocage soit une fonctionnalit√© importante, il peut causer des probl√®mes si mal g√©r√©, notamment des deadlocks.\n* **Gestion des exceptions:** Il faut g√©rer les `InterruptedException` lors de l'utilisation des m√©thodes de blocage.\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "ac35e30e-23da-4355-8326-80e45caf7521",
        "title": "Compose-go",
        "description": "---\nid: b977a102-d94a-4a34-97a4-4bf34427ab50\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nCompose-go est une biblioth√®que Go qui simplifie l'interaction avec Docker Compose.  Elle permet de programmer la cr√©ation, la mise √† jour et la destruction de services et de r√©seaux d√©finis dans des fichiers `docker-compose.yml`.  Elle offre une interface plus flexible et programmable que l'utilisation directe de la commande `docker-compose`.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nCompose-go fournit des fonctions Go pour interagir avec l'API Docker Compose.  Au lieu d'utiliser des commandes shell, on peut utiliser le code Go pour effectuer des op√©rations sur les fichiers `docker-compose.yml`.  Cela permet d'int√©grer la gestion de Docker Compose dans des scripts et des applications Go, offrant un meilleur contr√¥le et une meilleure automatisation.  La biblioth√®que g√®re la communication avec le daemon Docker, l'analyse des fichiers `docker-compose.yml`, et la gestion des erreurs.\n\nVoici un exemple simple pour d√©marrer un projet Docker Compose avec Compose-go:\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/compose-spec/compose-go/cli\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tproject, err := cli.ProjectFromOptions(ctx, &cli.ProjectOptions{\n\t\tConfigFiles: []string{\"docker-compose.yml\"}, // Chemin vers votre fichier docker-compose.yml\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error loading project: %v\", err)\n\t}\n\n\terr = project.Up(ctx, cli.UpOptions{\n\t\t// Ajoutez des options ici si n√©cessaire\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error starting project: %v\", err)\n\t}\n\n\tfmt.Println(\"Project started successfully!\")\n\n\t// ... autres interactions avec le projet ...\n\n\t// Arr√™ter le projet √† la fin\n\terr = project.Down(ctx, cli.DownOptions{})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error stopping project: %v\", err)\n\t}\n\tfmt.Println(\"Project stopped successfully!\")\n}\n\n```\n\nCe code charge un fichier `docker-compose.yml`, d√©marre les services d√©finis et les arr√™te ensuite.  Compose-go offre des fonctions pour effectuer d'autres op√©rations, comme `project.Create`, `project.Build`, `project.Start`, `project.Stop`, `project.Restart`, etc.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Automatisation:**  Permet d'int√©grer la gestion de Docker Compose dans des pipelines CI/CD et des scripts Go.\n- **Programmation:** Offre un contr√¥le pr√©cis sur les op√©rations Docker Compose.\n- **Flexibilit√©:**  Permet de personnaliser le comportement de Docker Compose en utilisant le code Go.\n- **Testabilit√©:** Facilite l'√©criture de tests unitaires pour les interactions avec Docker Compose.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Courbe d'apprentissage:**  N√©cessite des connaissances en Go et en Docker Compose.\n- **D√©pendances:**  Ajoute une d√©pendance suppl√©mentaire √† votre projet.\n- **Complexit√©:**  Pour des cas d'utilisation complexes, le code Go peut devenir plus long et difficile √† maintenir qu'une simple commande `docker-compose`.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "a87947c1-5cf5-42e3-9e3f-99787a1a2a04",
        "title": "DSFR (Design System France)",
        "description": "---\nid: 885faf14-e488-4285-bd84-cb9ec7f2f730\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nDSFR (Design System France) est une biblioth√®que de composants d'interface utilisateur et un ensemble de guidelines de design pour la cr√©ation d'applications web et mobiles conformes aux standards d'accessibilit√© fran√ßais.  Elle offre des composants pr√™ts √† l'emploi et des styles coh√©rents pour assurer une exp√©rience utilisateur uniforme et accessible.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nDSFR vise √† standardiser la conception et le d√©veloppement d'interfaces num√©riques pour les services publics fran√ßais.  Il fournit une collection de composants r√©utilisables (boutons, formulaires, menus, etc.)  avec des styles pr√©d√©finis, assurant une coh√©rence visuelle et une meilleure exp√©rience utilisateur.  L'objectif principal est de faciliter le d√©veloppement d'applications accessibles, conformes aux exigences du RGAA (R√©f√©rentiel G√©n√©ral d'Accessibilit√© pour les Administrations).  DSFR propose des impl√©mentations pour divers frameworks (React, Angular, Vue.js, etc.), permettant aux d√©veloppeurs d'int√©grer facilement ces composants dans leurs projets.  Ces impl√©mentations souvent appel√©s \"surcouches\" fournissent des composants sp√©cifiques √† chaque framework mais conservent l'apparence visuelle et l'accessibilit√© d√©finies par le DSFR.\n\nL'utilisation de DSFR permet :\n\n* **Coh√©rence visuelle:**  Toutes les applications utilisant DSFR auront une apparence coh√©rente, am√©liorant l'exp√©rience utilisateur et la reconnaissance de la marque.\n* **Accessibilit√©:**  Les composants sont con√ßus pour respecter les exigences du RGAA, garantissant une accessibilit√© optimale pour les personnes handicap√©es.\n* **Efficacit√© de d√©veloppement:**  R√©utilisation des composants pr√©-construits et styl√©s, acc√©l√©rant le processus de d√©veloppement.\n* **Maintenance simplifi√©e:**  Les mises √† jour et corrections de bugs sont appliqu√©es √† l'ensemble des applications utilisant DSFR.\n\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Accessibilit√©:**  Respect des standards RGAA, essentiel pour les services publics.\n* **Coh√©rence:**  Assure une exp√©rience utilisateur uniforme sur l'ensemble des applications gouvernementales.\n* **R√©utilisabilit√©:**  Composants pr√™ts √† l'emploi, acc√©l√©rant le d√©veloppement.\n* **Support multiple frameworks:**  Disponibilit√© de surcouches pour diff√©rents frameworks populaires.\n* **Documentation:**  Documentation g√©n√©ralement compl√®te et bien maintenue (bien que la qualit√© puisse varier selon les versions et les frameworks).\n\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© d'int√©gration:**  L'int√©gration initiale peut parfois √™tre complexe, n√©cessitant une compr√©hension du fonctionnement du DSFR et de sa surcouche pour le framework utilis√©.\n* **D√©pendance:**  L'application est d√©pendante du DSFR et de ses mises √† jour.  Les changements dans le DSFR peuvent n√©cessiter des adaptations dans les applications qui l'utilisent.\n* **Personnalisation limit√©e:**  Bien que la personnalisation soit possible, elle peut √™tre contraignante pour s'assurer que l'accessibilit√© et la coh√©rence restent intactes.  Un √©cart trop important par rapport aux styles standards peut compromettre l'exp√©rience utilisateur et l'accessibilit√©.\n* **Taille du bundle:** L'inclusion de tous les composants DSFR peut augmenter la taille du bundle final de l'application, impactant le temps de chargement.  Une s√©lection judicieuse des composants est donc n√©cessaire.\n\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "27dc5b58-d4a7-4402-99f8-edf4d383f78c",
        "title": "Doppler",
        "description": "---\nid: 03bc89d4-ca8c-4258-a7fe-ae938a70b0cc\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nDoppler est un gestionnaire de secrets (secret manager) en tant que service (SaaS) qui permet de stocker et de g√©rer en toute s√©curit√© les variables d'environnement et autres informations sensibles utilis√©es par les applications.  Il simplifie la gestion des secrets pour les √©quipes de d√©veloppement et d'exploitation.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nDoppler fournit une interface centralis√©e pour stocker et g√©rer les secrets, √©vitant ainsi de les coder en dur dans les applications ou de les stocker dans des fichiers non s√©curis√©s.  Il fonctionne en permettant aux d√©veloppeurs de d√©finir des \"configurations\" qui contiennent des cl√©s et des valeurs, y compris les secrets. Ces configurations sont ensuite accessibles par les applications via une API ou des outils en ligne de commande.  Doppler se charge de chiffrer et de prot√©ger ces secrets, en utilisant des techniques de chiffrement robustes.\n\nLes principales fonctionnalit√©s incluent :\n\n* **Gestion des variables d'environnement:**  Doppler simplifie la gestion des variables d'environnement sensibles, comme des cl√©s API, des mots de passe de base de donn√©es, et des jetons d'authentification.\n* **Contr√¥le d'acc√®s:**  Il permet de g√©rer les autorisations d'acc√®s aux secrets, permettant de limiter l'acc√®s aux personnes autoris√©es.\n* **Int√©gration CI/CD:** Doppler s'int√®gre facilement avec les pipelines CI/CD, permettant d'injecter automatiquement les secrets dans les environnements de d√©ploiement.\n* **Audit trails:**  Il fournit un historique complet des modifications apport√©es aux secrets, facilitant le suivi et la v√©rification.\n* **Chiffrement:** Les donn√©es sont chiffr√©es √† la fois en transit et au repos.\n* **Support de multiples environnements:**  Permet de g√©rer des configurations s√©par√©es pour diff√©rents environnements (d√©veloppement, test, production).\n\n\n**Exemple (concept):**  Imaginons une application qui n√©cessite une cl√© API pour acc√©der √† un service tiers.  Au lieu de coder en dur cette cl√© API dans le code source, le d√©veloppeur peut la stocker dans Doppler et la r√©cup√©rer au moment de l'ex√©cution de l'application.\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **S√©curit√© am√©lior√©e:**  Le chiffrement et le contr√¥le d'acc√®s robustes garantissent la s√©curit√© des secrets.\n* **Simplicit√© d'utilisation:**  L'interface utilisateur est intuitive et facile √† utiliser, m√™me pour les d√©veloppeurs peu exp√©riment√©s.\n* **Int√©gration facile:**  L'int√©gration avec les pipelines CI/CD simplifie le processus de d√©ploiement.\n* **Collaboration facilit√©e:**  Plusieurs membres de l'√©quipe peuvent acc√©der et g√©rer les secrets de mani√®re contr√¥l√©e.\n* **Auditabilit√©:**  L'historique des modifications permet de suivre facilement les changements.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **D√©pendance √† un service tiers:**  Votre application d√©pend du service Doppler, ce qui introduit un point de d√©faillance potentiel.\n* **Co√ªt:**  L'utilisation de Doppler implique des co√ªts, selon le plan d'abonnement choisi.\n* **Complexit√© pour des configurations tr√®s complexes:**  Pour des environnements avec une multitude de configurations interd√©pendantes, la gestion pourrait devenir complexe.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "613183f4-d4b5-41e0-ab01-8635dd8faa42",
        "title": "Eclipse Mosquitto",
        "description": "---\nid: 34fc0c9b-c544-45c5-bd61-a2199ddf11d0\n---\n# Rapidement c'est quoi‚ùì\n\nEclipse Mosquitto est un serveur MQTT l√©ger, open-source et performant, permettant la publication et la souscription √† des messages. Il est r√©put√© pour sa robustesse et sa facilit√© de d√©ploiement.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nEclipse Mosquitto est une impl√©mentation du protocole MQTT (Message Queuing Telemetry Transport), un protocole de communication machine-√†-machine (M2M) l√©ger et bas√© sur le publish/subscribe.  Il sert de courtier (broker) centralis√©, permettant √† diff√©rents dispositifs (capteurs, actionneurs, applications) d'√©changer des messages de mani√®re asynchrone.  Mosquitto est con√ßu pour √™tre performant, scalable et fiable, capable de g√©rer un grand nombre de clients connect√©s simultan√©ment et un volume important de messages.  Il supporte plusieurs fonctionnalit√©s cl√©s, notamment :\n\n* **Authentification et autorisation:**  Mosquitto permet de contr√¥ler l'acc√®s aux ressources via diff√©rents m√©canismes d'authentification (mot de passe, certificats X.509) et d'autorisation (ACL - Access Control Lists).\n* **QoS (Quality of Service):**  Il g√®re diff√©rents niveaux de qualit√© de service pour garantir la livraison des messages (QoS 0, 1 et 2).\n* **R√©tention de messages:**  Les messages peuvent √™tre retenus par le broker, m√™me si aucun client n'est abonn√©, assurant ainsi que les nouveaux abonn√©s re√ßoivent les messages les plus r√©cents.\n* **Will messages:**  Permet de sp√©cifier un message √† publier lorsque le client se d√©connecte inopin√©ment.\n* **WebSockets:**  Mosquitto supporte les connexions via WebSockets, permettant une int√©gration plus facile avec les applications web.\n* **TLS/SSL:**  Le chiffrement TLS/SSL est support√© pour s√©curiser les communications.\n\nMosquitto est disponible sous forme de binaires pr√©compil√©s pour plusieurs syst√®mes d'exploitation ou en code source pour une compilation personnalis√©e. Sa configuration se fait via un fichier de configuration simple et lisible.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et gratuit:**  Mosquitto est sous licence EPL, ce qui permet une utilisation libre et gratuite, m√™me pour des applications commerciales.\n* **L√©ger et performant:**  Il consomme peu de ressources syst√®me et est capable de g√©rer un grand nombre de clients et de messages.\n* **Facile √† installer et configurer:**  L'installation et la configuration sont relativement simples, m√™me pour les utilisateurs novices.\n* **Documentation compl√®te et active communaut√©:**  Mosquitto b√©n√©ficie d'une documentation compl√®te et d'une communaut√© active et r√©active.\n* **Largement adopt√© et test√©:**  Son utilisation r√©pandue en fait un choix fiable et √©prouv√©.\n* **Support multiplateforme:**  Mosquitto est disponible sur de nombreuses plateformes, facilitant le d√©ploiement sur diff√©rents environnements.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Interface utilisateur limit√©e:**  Mosquitto est principalement un serveur en ligne de commande, ne disposant pas d'interface graphique intuitive pour la gestion.  Des outils tiers peuvent √™tre n√©cessaires pour une gestion plus conviviale.\n* **Fonctionnalit√©s avanc√©es potentiellement complexes √† configurer:**  Certaines fonctionnalit√©s avanc√©es (authentification, QoS, ACL) peuvent n√©cessiter une configuration plus complexe.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "5a3bca99-abe2-4aa0-90de-c31092299dd3",
        "title": "Ember.js",
        "description": "---\nid: cfe3dff1-dabd-489c-95cd-b4bc688004e6\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nEmber.js est un framework JavaScript open-source, ambitieux et mature, con√ßu pour construire des applications web ambitieuses,  scalables et maintenables. Il privil√©gie une architecture conventionnelle sur la configuration, offrant une structure claire et pr√©dictible pour le d√©veloppement.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nEmber.js fournit une structure compl√®te pour d√©velopper des applications web c√¥t√© client, s'appuyant sur le mod√®le MVC (Model-View-Controller) et int√©grant des fonctionnalit√©s avanc√©es telles que :\n\n* **Routage:**  Un syst√®me de routage puissant et d√©claratif permettant de g√©rer facilement les URLs et la navigation au sein de l'application.  Il permet de cr√©er des URLs propres et SEO-friendly.\n\n* **Gestion des donn√©es:**  Ember Data est un ORM (Object-Relational Mapper) int√©gr√© qui facilite l'interaction avec des APIs RESTful ou autres sources de donn√©es. Il g√®re la mise en cache, les requ√™tes et les relations entre les donn√©es.\n\n* **Composants:**  Ember utilise un syst√®me de composants r√©utilisables et encapsul√©s, facilitant l'organisation du code et la maintenance.  Ces composants g√®rent leur propre logique,  template et donn√©es.\n\n* **Templates:**  Les templates Ember utilisent Handlebars, un moteur de templating facile √† utiliser et puissant. Il permet d'int√©grer facilement la logique et les donn√©es dans l'interface utilisateur.\n\n* **Convention over Configuration:**  Ember privil√©gie les conventions, r√©duisant le besoin de configuration manuelle et am√©liorant la coh√©rence du code. Cela rend le d√©veloppement plus rapide et plus pr√©visible.\n\n* **Gestion du cycle de vie des composants:**  Ember g√®re automatiquement le cycle de vie des composants (cr√©ation, mise √† jour, destruction), simplifiant la gestion des √©tats et des √©v√©nements.\n\n\n**Exemple de code (Cr√©ation d'un composant simple):**\n\n```javascript\n// app/components/welcome-message.js\nimport Component from '@glimmer/component';\n\nexport default class WelcomeMessageComponent extends Component {\n  message = \"Bienvenue sur mon application Ember!\";\n}\n\n// app/templates/components/welcome-message.hbs\n<p>{{this.message}}</p>\n```\n\nCe code d√©finit un composant simple affichant un message.  Il est ensuite utilis√© dans les templates de l'application.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Productivit√©:**  L'architecture conventionnelle et les outils int√©gr√©s am√©liorent la productivit√© du d√©veloppeur.\n* **Maintenabilit√©:**  Le code est plus organis√© et facile √† maintenir gr√¢ce √† la structure impos√©e par le framework.\n* **Scalabilit√©:**  Ember est con√ßu pour g√©rer des applications complexes et de grande envergure.\n* **Communaut√© active:**  Une communaut√© forte et active fournit un support et des ressources abondantes.\n* **Tests int√©gr√©s:**  Ember encourage les tests unitaires et d'int√©gration, facilitant la qualit√© du code.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:**  Ember poss√®de une courbe d'apprentissage plus raide que certains frameworks plus simples.\n* **Taille du bundle:**  Les applications Ember peuvent g√©n√©rer des bundles JavaScript importants, impactant le temps de chargement initial.  Des techniques d'optimisation sont n√©cessaires.\n* **Moins flexible que React ou Vue.js:**  La forte conventionnalit√©, bien que b√©n√©fique, peut parfois limiter la flexibilit√© pour des cas d'utilisation tr√®s sp√©cifiques.\n* **Difficult√©s pour les petites applications:**  Pour les applications tr√®s petites et simples, Ember peut √™tre un choix surdimensionn√©.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "8b0d746d-bce7-4c53-8aac-337a36c628f8",
        "title": "Exherbo",
        "description": "---\nid: 50d36a14-2216-4608-bf2e-3ec2ef4d7bca\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nExherbo est un outil de gestion de configurations open-source pour les syst√®mes Linux. Il utilise un langage d√©claratif pour d√©crire l'√©tat souhait√© du syst√®me, puis g√®re les modifications n√©cessaires pour atteindre cet √©tat.  Il se diff√©rencie des autres outils par sa simplicit√©, sa robustesse et sa focalisation sur l'id√©mpotence.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nExherbo utilise un fichier de configuration simple, g√©n√©ralement √©crit en YAML, pour d√©finir l'√©tat souhait√© du syst√®me. Ce fichier d√©crit les paquets logiciels √† installer, les services √† activer, les fichiers de configuration √† modifier, etc.  Exherbo compare ensuite l'√©tat actuel du syst√®me avec l'√©tat d√©crit dans le fichier de configuration et applique les modifications n√©cessaires pour les faire correspondre.  Ce processus est *id√©mpotent*, ce qui signifie qu'ex√©cuter la m√™me commande plusieurs fois aura le m√™me effet que de l'ex√©cuter une seule fois.  Il ne fera pas de changements si le syst√®me est d√©j√† dans l'√©tat souhait√©.\n\nExherbo est bas√© sur une approche d√©clarative, ce qui le rend plus facile √† comprendre et √† maintenir que les approches imp√©ratives.  On d√©crit *ce qu'on veut*, et Exherbo s'occupe de *comment le faire*.  Ceci simplifie la gestion de configurations complexes et permet une meilleure reproductibilit√© des environnements.\n\n**Exemple de fichier de configuration (YAML):**\n\n```yaml\npackages:\n  - vim\n  - git\n\nservices:\n  - sshd\n\nfiles:\n  - source: /etc/exherbo/ssh_config.sample\n    destination: /etc/ssh/sshd_config\n```\n\nCe fichier indique qu'Exherbo doit installer les paquets `vim` et `git`, activer le service `sshd`, et copier le fichier `/etc/exherbo/ssh_config.sample` vers `/etc/ssh/sshd_config`.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n- **Id√©mpotence:**  La plus grande force d'Exherbo.  On peut l'ex√©cuter plusieurs fois sans risque de modifications ind√©sirables.\n- **Simplicit√©:** Le langage de configuration est clair et facile √† apprendre.\n- **Robustesse:**  Exherbo est con√ßu pour √™tre fiable et g√©rer les erreurs de mani√®re robuste.\n- **Open-source:**  Librement disponible et auditable.\n- **Focalisation:**  Contrairement √† certains outils plus vastes, Exherbo se concentre sur la gestion de configurations syst√®me, ce qui le rend efficace et sp√©cialis√©.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n- **Communaut√© plus petite:**  Compar√© √† des outils comme Ansible ou Puppet, Exherbo poss√®de une communaut√© plus restreinte, ce qui peut rendre la recherche de solutions √† des probl√®mes sp√©cifiques plus difficile.\n- **Moins de fonctionnalit√©s avanc√©es:**  Exherbo ne propose pas toutes les fonctionnalit√©s avanc√©es que l'on trouve dans des outils plus complets.  Par exemple, il n'int√®gre pas nativement la gestion de configurations √† distance.\n- **Documentation limit√©e (potentiellement):** La documentation pourrait √™tre plus compl√®te pour certains aspects.  (Ceci d√©pend de l'√©tat actuel du projet).\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "cbf62fa1-f5fb-481f-b040-5e0282fe3793",
        "title": "Gestion des artefacts",
        "description": "---\nid: c71d6e3d-3d47-4940-96b9-6a8aaf0e2a53\n---\n# Rapidement c'est quoi‚ùì\n\nLa gestion des artefacts est le processus de stockage, de r√©cup√©ration et de gestion de fichiers produits lors du cycle de vie du d√©veloppement logiciel.  Cela inclut le code source compil√©, les biblioth√®ques, les packages d'installation, etc.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nLa gestion des artefacts est une partie cruciale de la gestion de configuration logicielle et de l'int√©gration continue/livraison continue (CI/CD). Elle assure le suivi des versions de tous les composants logiciels, permettant une tra√ßabilit√© compl√®te et facilitant la reconstruction et le d√©ploiement de logiciels √† partir d'artefacts archiv√©s.  Un artefact est n'importe quel produit tangible du processus de d√©veloppement,  comme un fichier JAR, un WAR, un fichier ex√©cutable, un script d'installation, ou m√™me un document de sp√©cification.\n\nUn syst√®me de gestion d'artefacts efficace doit fournir des fonctionnalit√©s telles que :\n\n* **Stockage:**  Un d√©p√¥t centralis√© pour stocker les artefacts, souvent avec versioning (contr√¥le de version).  Des solutions comme les buckets Amazon S3, des r√©f√©rentiels Maven ou npm, ou des solutions d√©di√©es comme JFrog Artifactory ou Nexus sont couramment utilis√©es.\n* **R√©cup√©ration:**  M√©canismes pour r√©cup√©rer facilement les versions sp√©cifiques d'artefacts.\n* **M√©tadonn√©es:**  Stockage d'informations sur les artefacts (date de cr√©ation, version, auteur, d√©pendances, etc.) pour une meilleure organisation et recherche.\n* **Int√©gration:**  Int√©gration transparente avec les outils CI/CD pour automatiser le d√©ploiement et la gestion des versions.\n* **S√©curit√©:** Contr√¥le d'acc√®s et authentification pour garantir l'int√©grit√© et la s√©curit√© des artefacts.\n\n\nL'exemple `maven-s3-wagon` mentionn√© utilise les buckets S3 d'Amazon comme d√©p√¥t pour les artefacts Maven, d√©montrant comment un syst√®me de stockage cloud peut √™tre utilis√© pour la gestion d'artefacts.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Tra√ßabilit√© am√©lior√©e:**  Permet de suivre facilement l'√©volution du logiciel et de retrouver des versions sp√©cifiques.\n* **R√©duction des erreurs:**  Minimise les risques li√©s √† l'utilisation de versions incorrectes ou incompatibles des composants.\n* **Automatisation:**  Int√©gration facile avec les pipelines CI/CD pour automatiser le processus de construction, de test et de d√©ploiement.\n* **Collaboration am√©lior√©e:**  Facilite le partage des artefacts entre les membres de l'√©quipe de d√©veloppement.\n* **Scalabilit√©:**  Les solutions modernes de gestion d'artefacts peuvent facilement s'adapter √† des projets de grande envergure.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√©:**  La mise en place et la gestion d'un syst√®me de gestion d'artefacts peuvent √™tre complexes, surtout pour les petits projets.\n* **Co√ªt:**  Certaines solutions (comme les services cloud) peuvent engendrer des co√ªts importants en fonction de l'utilisation.\n* **Surcharge:**  Une mauvaise gestion peut conduire √† une accumulation d'artefacts inutiles, rendant le syst√®me difficile √† g√©rer.\n* **D√©pendances:**  Une d√©pendance forte √† un syst√®me de gestion d'artefacts peut cr√©er un point de d√©faillance unique.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "25a68590-b3ad-459f-8628-f0d9b608d2ce",
        "title": "Gotify",
        "description": "---\nid: 1f7e13b1-9b4b-476d-9712-0229556402bd\n---\n# Gotify: Rapidement c'est quoi‚ùì\n\nUn serveur open-source l√©ger et simple pour envoyer et recevoir des notifications.  Il utilise une API RESTful pour une int√©gration facile avec d'autres applications et services.\n\n---\n# Gotify: Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nGotify est un serveur de notification auto-h√©bergeable, con√ßu pour √™tre simple √† utiliser et √† d√©ployer.  Il fonctionne en recevant des messages de notification via son API REST, puis en les redistribuant aux clients connect√©s.  Ces clients peuvent √™tre des applications mobiles (Android, iOS), des applications de bureau (Windows, macOS, Linux), ou m√™me des scripts personnalis√©s.  Gotify supporte plusieurs m√©thodes d'authentification, incluant des cl√©s API et une authentification par mot de passe, pour s√©curiser l'envoi des notifications.  Le serveur lui-m√™me est tr√®s l√©ger, n√©cessitant peu de ressources et pouvant √™tre facilement d√©ploy√© sur un Raspberry Pi ou un serveur cloud.  Il est √©crit en Go, d'o√π son nom, et propose une interface web simple pour la gestion des utilisateurs, des applications et des messages.  Les notifications peuvent √™tre personnalis√©es avec des titres, des messages, et des priorit√©s.  Gotify ne conserve pas d'historique des notifications par d√©faut, mais des solutions existent pour la journalisation externe si n√©cessaire.\n\n---\n# Gotify: Qu'est ce qui est top ? üëç\n\n* **Simplicit√©:**  Installation, configuration et utilisation extr√™mement faciles.\n* **Flexibilit√©:** API REST compl√®te permettant l'int√©gration avec une grande vari√©t√© d'applications et de services.\n* **L√©ger:**  N√©cessite peu de ressources serveur.\n* **Open-source:**  Code source disponible, permettant une analyse et une adaptation du logiciel.\n* **Auto-h√©bergeable:** Contr√¥le total sur vos donn√©es et votre infrastructure.\n* **Multi-plateforme:** Clients disponibles pour de nombreux syst√®mes d'exploitation.\n\n---\n# Gotify: Qu'est ce qui est pas ouf ? üëé\n\n* **Fonctionnalit√©s limit√©es:**  Par rapport √† des solutions plus compl√®tes, Gotify manque de certaines fonctionnalit√©s avanc√©es comme la planification des notifications ou une int√©gration native avec des services sp√©cifiques.\n* **Gestion de l'historique limit√©e:**  Pas de stockage d'historique des notifications int√©gr√© par d√©faut.  N√©cessite une solution externe pour cette fonctionnalit√©.\n* **D√©pendance √† un serveur:**  N√©cessite le maintien d'un serveur actif pour fonctionner.\n\n\n---\n# Gotify: A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "bf22a8e7-bac3-452e-8c34-a26fdb615473",
        "title": "Gulp",
        "description": "---\nid: 17e65120-21b5-485c-99e6-c77162ee080c\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nGulp est un outil open-source bas√© sur Node.js servant √† automatiser des t√¢ches de d√©veloppement web.  Il permet de simplifier et d'acc√©l√©rer des processus r√©p√©titifs comme la minification de code, la compilation de pr√©processeurs CSS (Sass, Less), la concat√©nation de fichiers, et le rafra√Æchissement automatique du navigateur.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nGulp utilise un syst√®me de flux (streams) pour traiter les fichiers.  Un flux est un ensemble de donn√©es qui traverse une s√©rie de transformations.  Au lieu de lire et d'√©crire des fichiers entiers √† chaque √©tape, Gulp travaille sur des flux, ce qui le rend beaucoup plus performant que les outils concurrents qui traitent les fichiers de mani√®re plus lin√©aire.  L'utilisateur d√©finit une s√©rie de t√¢ches (tasks) dans un fichier `gulpfile.js`. Chaque t√¢che utilise des plugins pour ex√©cuter des op√©rations sp√©cifiques sur les fichiers qui la traversent.\n\n**Exemple concret : Minification de fichiers CSS et JS**\n\nPour minifier les fichiers CSS et JS d'un projet, on pourrait √©crire un `gulpfile.js` comme ceci :\n\n```javascript\nconst gulp = require('gulp');\nconst cssmin = require('gulp-cssmin');\nconst uglify = require('gulp-uglify');\n\n// T√¢che pour minifier les fichiers CSS\ngulp.task('minify-css', () => {\n  return gulp.src('src/css/*.css')\n    .pipe(cssmin())\n    .pipe(gulp.dest('dist/css'));\n});\n\n// T√¢che pour minifier les fichiers JS\ngulp.task('minify-js', () => {\n  return gulp.src('src/js/*.js')\n    .pipe(uglify())\n    .pipe(gulp.dest('dist/js'));\n});\n\n// T√¢che par d√©faut qui ex√©cute les deux t√¢ches pr√©c√©dentes\ngulp.task('default', gulp.parallel('minify-css', 'minify-js'));\n```\n\nCe code utilise les plugins `gulp-cssmin` et `gulp-uglify` pour minifier respectivement les fichiers CSS et JS.  La commande `gulp` dans le terminal ex√©cuterait la t√¢che `default`, qui √† son tour ex√©cuterait `minify-css` et `minify-js`.\n\n**Fonctionnement interne:** Gulp utilise Node.js et le module `vinyl-fs` pour g√©rer les fichiers.  Les plugins Gulp sont des modules Node.js qui interagissent avec les flux de donn√©es et effectuent les transformations souhait√©es.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Performance:** L'utilisation des flux rend Gulp tr√®s rapide et efficace, surtout sur de grands projets.\n* **Modularit√©:** Le syst√®me de plugins permet une grande extensibilit√© et la possibilit√© d'utiliser des outils tiers.\n* **Lisibilit√©:** Le code des `gulpfile.js` est g√©n√©ralement plus clair et plus facile √† maintenir que celui d'autres outils similaires.\n* **Declaratif:** La d√©finition des t√¢ches est simple et intuitive.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** Bien que la syntaxe soit simple, la compr√©hension du syst√®me de flux et l'utilisation des plugins peut n√©cessiter un temps d'apprentissage.\n* **D√©pendances:** Gulp repose sur Node.js et n√©cessite l'installation de plusieurs plugins, ce qui peut complexifier la configuration.\n* **Maintenance:** La communaut√© autour de Gulp est moins active qu'avant, certains plugins peuvent devenir obsol√®tes.\n* **Alternatives:** Des outils comme npm scripts, Parcel et Webpack offrent des fonctionnalit√©s similaires, parfois plus int√©gr√©es et compl√®tes.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "bbad9982-49d3-4aef-93d5-075605177c94",
        "title": "JFrog Artifactory",
        "description": "---\nid: b5d82f2c-3c72-483c-8599-9e87e733a492\n---\n# Rapidement c'est quoi‚ùì\n\nJFrog Artifactory est un gestionnaire universel d'artefacts logiciels.  Il stocke, g√®re et distribue tous types de paquets logiciels, des biblioth√®ques Java aux images Docker.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nJFrog Artifactory est un serveur de gestion d'artefacts (repository manager) qui fournit un r√©f√©rentiel centralis√© pour stocker et g√©rer tous les types d'artefacts logiciels utilis√©s dans un cycle de d√©veloppement DevOps.  Il supporte un large √©ventail de formats de paquets, incluant (mais sans s'y limiter) : Maven, Gradle, npm, NuGet, Python (pip), Docker, Helm, Debian, RPM et bien d'autres.\n\nAu-del√† du simple stockage, Artifactory offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Gestion de versions:**  Suivi des diff√©rentes versions des artefacts, permettant un rollback facile.\n* **Contr√¥le d'acc√®s:**  Gestion fine des permissions pour garantir la s√©curit√© et le contr√¥le des acc√®s aux artefacts.\n* **Int√©gration CI/CD:**  Int√©gration transparente avec les outils d'int√©gration continue et de livraison continue (CI/CD) pour automatiser le d√©ploiement.\n* **R√©plication:**  Possibilit√© de r√©pliquer les r√©f√©rentiels pour une haute disponibilit√© et une meilleure performance.\n* **Recherche et analyse:**  Fonctions de recherche avanc√©es et d'analyse des artefacts pour une meilleure visibilit√©.\n* **Promotion de versions:**  Gestion du cycle de vie des artefacts, de la phase de d√©veloppement √† la production, via un syst√®me de promotion entre les diff√©rents r√©f√©rentiels (par exemple, de \"d√©veloppement\" √† \"staging\" puis √† \"production\").\n* **Virtual Repositories:**  Cr√©ation de r√©f√©rentiels virtuels combinant plusieurs r√©f√©rentiels physiques pour une meilleure organisation et simplification de la configuration client.\n* **Support de plusieurs protocoles:**  Acc√®s aux artefacts via divers protocoles comme HTTP, HTTPS, SFTP, etc.\n\n\nArtifactory permet ainsi d'am√©liorer la collaboration entre les √©quipes de d√©veloppement, de simplifier la gestion des d√©pendances et d'acc√©l√©rer le processus de livraison continue.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Support multi-langages et multi-formats:**  Gestion d'un tr√®s grand nombre de types d'artefacts.\n* **Fonctionnalit√©s avanc√©es:**  Gestion des versions, contr√¥le d'acc√®s fin, int√©gration CI/CD robuste, etc.\n* **Haute disponibilit√© et scalabilit√©:**  Possibilit√© de configuration pour la haute disponibilit√© et la gestion de volumes importants d'artefacts.\n* **Interface utilisateur intuitive:**  L'interface utilisateur est g√©n√©ralement consid√©r√©e comme conviviale et facile √† utiliser.\n* **Int√©gration avec d'autres outils JFrog:**  Synergie avec d'autres outils de l'√©cosyst√®me JFrog, comme Xray (analyse de vuln√©rabilit√©s).\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Prix:**  Artifactory peut √™tre co√ªteux, surtout pour les grandes organisations avec de nombreux utilisateurs et de gros volumes d'artefacts.\n* **Complexit√©:**  La configuration et l'administration d'Artifactory peuvent √™tre complexes pour des utilisateurs moins exp√©riment√©s.\n* **Ressources requises:**  N√©cessite des ressources serveur significatives pour g√©rer de gros volumes d'artefacts.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n# JFrog Artifactory\n\n## Rapidement, c'est quoi ? ü§î\n\nJFrog Artifactory est un gestionnaire universel d'artefacts logiciels.  Imaginez un entrep√¥t centralis√© qui stocke et g√®re tous les composants n√©cessaires √† vos applications, des plus petites librairies aux plus grosses images Docker.\n\n## Plus pr√©cis√©ment, c'est quoi / √ßa fait quoi ? üîç\n\nJFrog Artifactory est un serveur de gestion d'artefacts (repository manager). Il centralise le stockage et la gestion de tous les types d'artefacts logiciels utilis√©s dans un cycle de d√©veloppement DevOps.  Il supporte une multitude de formats, parmi lesquels : Maven, Gradle, npm, NuGet, Python (pip), Docker, Helm, Debian, RPM, et bien d'autres.\n\n**Au-del√† du simple stockage, Artifactory offre des fonctionnalit√©s essentielles pour un workflow DevOps efficace :**\n\n* **Gestion de versions:**  Suivi pr√©cis des versions, facilitant les rollbacks (retour √† une version ant√©rieure).  Imaginez pouvoir facilement revenir √† une version stable de votre application en cas de probl√®me.\n* **Contr√¥le d'acc√®s:**  Permissions granulaires pour s√©curiser l'acc√®s aux artefacts.  Seuls les utilisateurs autoris√©s peuvent acc√©der √† certains composants.\n* **Int√©gration CI/CD:**  Int√©gration fluide avec vos outils CI/CD ([Concept supprim√©]) pour automatiser les d√©ploiements.  Cela acc√©l√®re le cycle de d√©veloppement et r√©duit les erreurs manuelles.\n* **R√©plication:**  R√©plication des r√©f√©rentiels pour haute disponibilit√© et performances accrues.  Vos artefacts sont disponibles m√™me en cas de panne d'un serveur.\n* **Recherche et analyse:**  Recherche puissante et analyse des artefacts pour une meilleure visibilit√© sur votre √©cosyst√®me logiciel.\n* **Promotion de versions:**  Gestion du cycle de vie des artefacts, de d√©veloppement √† production, via un syst√®me de promotion entre r√©f√©rentiels (ex: \"dev\" -> \"staging\" -> \"prod\").  Cela permet un contr√¥le rigoureux des d√©ploiements.\n* **Virtual Repositories:**  Cr√©ation de r√©f√©rentiels virtuels combinant plusieurs r√©f√©rentiels physiques pour simplifier la configuration client.  Cela simplifie grandement l'acc√®s aux artefacts pour les d√©veloppeurs.\n* **Support de plusieurs protocoles:**  Acc√®s aux artefacts via HTTP, HTTPS, SFTP, etc.  Flexibilit√© d'int√©gration avec diff√©rents environnements.\n\n\nEn r√©sum√©, Artifactory am√©liore la collaboration, simplifie la gestion des d√©pendances et acc√©l√®re la livraison continue.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Support multi-langages et multi-formats:**  Gestion d'une large vari√©t√© d'artefacts.\n* **Fonctionnalit√©s avanc√©es:**  Gestion de versions, contr√¥le d'acc√®s fin, int√©gration CI/CD robuste.\n* **Haute disponibilit√© et scalabilit√©:**  Adaptable √† des besoins croissants.\n* **Interface utilisateur intuitive:**  Facile √† prendre en main.\n* **Int√©gration avec d'autres outils JFrog:**  Synergie avec Xray (analyse de vuln√©rabilit√©s) par exemple.\n\n\n## Qu'est-ce qui est moins bien ? üëé\n\n* **Prix:**  Peut √™tre co√ªteux pour les grandes organisations.\n* **Complexit√©:**  Configuration avanc√©e pouvant √™tre complexe.\n* **Ressources requises:**  N√©cessite des ressources serveur importantes pour g√©rer de gros volumes.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n* [Gestion des artefacts]\n* [CI/CD] (Int√©gration Continue / Livraison Continue)\n* [Docker] (Pour la gestion des images conteneuris√©es)\n\n\n## Exemple de configuration d'un r√©f√©rentiel Maven dans Artifactory (snippet):\n\n```yaml\nrepositories:\n  - repoKey: libs-release-local\n    repositoryType: local\n    packageType: maven\n    description: Local Maven repository for releases\n```\n"
    },
    {
        "id": "b54a6baf-dffc-4f42-abf8-54d421bfd881",
        "title": "JMeter",
        "description": "---\nid: 0635b1b3-d5fa-4382-8668-72e0ccd88568\n---\n# Rapidement c'est quoi‚ùì\n\nJMeter est un outil open-source de test de performance et de charge pour des applications web et autres.  Il permet de simuler un grand nombre d'utilisateurs simultan√©s pour mesurer la capacit√© de r√©ponse et la stabilit√© d'un syst√®me.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nJMeter est un outil de test de performance √©crit en Java. Il permet de simuler un important volume de requ√™tes sur un serveur, une application web ou un autre syst√®me afin d'en √©valuer les performances et la robustesse sous forte charge.  Il offre la possibilit√© de cr√©er des sc√©narios de test complexes, incluant des √©l√©ments comme :\n\n* **Requ√™tes HTTP/HTTPS:**  Simuler des navigations web, des appels d'API REST, etc.  Il supporte diff√©rents protocoles et m√©thodes HTTP.\n* **Tests de base de donn√©es:** Tester les performances des requ√™tes SQL sur diff√©rentes bases de donn√©es.\n* **Tests FTP:** Tester les performances des transferts de fichiers FTP.\n* **Tests de performances JMS:** Tester les performances de la messagerie JMS.\n* **Tests LDAP:** Tester les performances des services LDAP.\n* **√âl√©ments de configuration:**  Contr√¥ler les aspects du test, comme les temporisations, les boucles, les assertions, etc.\n* **√âcouteurs:**  Collecter et visualiser les r√©sultats des tests, sous forme de tableaux, de graphiques, et de rapports d√©taill√©s (temps de r√©ponse, nombre d'erreurs, temps d'attente, etc.).\n* **Assertions:** V√©rifier si la r√©ponse du serveur correspond aux attentes (codes de statut HTTP, contenu de la r√©ponse, etc.).\n\nJMeter est tr√®s flexible et extensible gr√¢ce √† ses nombreux plugins et son architecture modulaire.  Il permet d'int√©grer des scripts personnalis√©s et d'automatiser des t√¢ches de test complexes. Les r√©sultats des tests permettent d'identifier les goulots d'√©tranglement et d'optimiser les performances de l'application test√©e.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Open-source et gratuit:**  Accessible √† tous sans co√ªt de licence.\n* **Large communaut√© et documentation:**  Facile d'obtenir de l'aide et des ressources en cas de besoin.\n* **Flexible et extensible:**  Adaptable √† une grande vari√©t√© de sc√©narios de test gr√¢ce √† ses plugins et fonctionnalit√©s.\n* **Interface graphique intuitive (pour la cr√©ation des tests):**  Relativement facile √† prendre en main, m√™me pour les d√©butants.\n* **Rapports d√©taill√©s:**  Fournit des informations compl√®tes sur les performances du syst√®me test√©.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Consommation de ressources:**  Peut consommer beaucoup de ressources (m√©moire, CPU) lors de la simulation de charges importantes, surtout sur une seule machine.\n* **Courbe d'apprentissage:**  Bien que l'interface soit intuitive pour les tests simples, la cr√©ation de tests complexes et l'interpr√©tation des r√©sultats avanc√©s peuvent n√©cessiter une certaine expertise.\n* **Interface graphique peu performante pour les gros tests:**  L'interface graphique peut devenir lente et r√©active avec de tr√®s grands tests.  L'utilisation de mode non-GUI est alors conseill√©e.\n* **D√©bogage parfois complexe:**  Identifier la source des erreurs dans des sc√©narios de test complexes peut √™tre difficile.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "304b6f37-1909-4af5-a92b-bc4e62895631",
        "title": "Jaeger",
        "description": "---\nid: dba8623c-06a9-4387-a258-3a4acaaca56f\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nJaeger est un syst√®me de tra√ßage distribu√© open-source qui permet de surveiller et de d√©boguer les applications distribu√©es.  Il collecte et visualise les traces des requ√™tes traversant diff√©rents services, permettant ainsi d'identifier les goulots d'√©tranglement et les erreurs.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nJaeger impl√©mente le standard OpenTracing (maintenant OpenTelemetry) pour le tra√ßage distribu√©.  Il est compos√© de plusieurs composants principaux :\n\n* **Agent:** Un agent l√©ger qui s'ex√©cute sur chaque service et collecte les traces. Il envoie ces traces au collecteur.\n* **Collecteur:** Un service qui re√ßoit les traces de plusieurs agents et les traite.  Il peut √™tre configur√© pour stocker les traces dans une base de donn√©es (ex: Cassandra, Elasticsearch).\n* **Query:** Un service qui permet de rechercher et de visualiser les traces via une interface utilisateur web.\n* **Ingest:** Le composant qui re√ßoit les donn√©es brutes du traceur et les envoie au backend de stockage.\n\nLe fonctionnement se r√©sume ainsi:\n\n1. Une application instrumente son code pour injecter des spans (unit√©s de travail) dans le flux de la requ√™te.  Ces spans contiennent des informations contextuelles comme le nom de l'op√©ration, la dur√©e et des tags.\n2. L'agent Jaeger, en local, collecte ces spans et les envoie au collecteur.\n3. Le collecteur traite les donn√©es et les stocke dans une base de donn√©es.\n4. L'interface utilisateur permet de visualiser les traces, de filtrer par service, par tag, etc.  On peut ainsi suivre le parcours d'une requ√™te √† travers l'ensemble de l'infrastructure.\n\n**Exemple (Python avec opentelemetry):**\n\n```python\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.jaeger.thrift import JaegerExporter\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\n\nresource = Resource.get_empty().merge({SERVICE_NAME: \"my_service\"})\ntrace.set_tracer_provider(TracerProvider(resource=resource))\njaeger_exporter = JaegerExporter(agent_host_name='localhost', agent_port=6831)\nspan_processor = BatchSpanProcessor(jaeger_exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\ntracer = trace.get_tracer(__name__)\nwith tracer.start_as_current_span(\"main_function\"):\n    with tracer.start_as_current_span(\"sub_function\"):\n        # ... code ...\n        pass\n    # ... code ...\n    pass\n```\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Open Source et mature:**  Jaeger est un projet stable et largement adopt√©.\n* **Interface utilisateur intuitive:** La visualisation des traces est facile √† comprendre et √† utiliser.\n* **Int√©gration avec plusieurs technologies:**  Jaeger s'int√®gre facilement avec de nombreux langages de programmation et frameworks.\n* **Scalabilit√©:**  Jaeger est con√ßu pour g√©rer un grand nombre de traces.\n* **Support de diff√©rents backends de stockage:**  On peut choisir le stockage qui convient le mieux √† son infrastructure.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© de configuration:**  La configuration peut √™tre complexe, notamment pour des d√©ploiements √† grande √©chelle.\n* **Surco√ªt de performance:**  L'instrumentation et la collecte des traces peuvent avoir un l√©ger impact sur les performances de l'application.  Une instrumentation mal faite peut amplifier ce probl√®me.\n* **N√©cessite un backend de stockage:**  Jaeger ne fonctionne pas sans un backend de stockage pour les traces.  Ceci ajoute une d√©pendance suppl√©mentaire.\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "6234d20e-2789-4aed-a6a5-ee646881890d",
        "title": "Jitpack",
        "description": "---\nid: f7b3616a-498c-4574-a2d9-4d5a46afee0e\n---\n# Rapidement c'est quoi‚ùì\n\nJitPack est un service d'h√©bergement et de distribution d'artefacts Java et Kotlin.  Il permet d'int√©grer facilement des librairies h√©berg√©es sur des d√©p√¥ts Git (GitHub, GitLab, Bitbucket) directement dans vos projets.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nJitPack est un r√©f√©rentiel Maven et Gradle qui automatise la construction et la publication de biblioth√®ques Java et Kotlin √† partir de d√©p√¥ts Git.  Au lieu de publier vos librairies manuellement sur des r√©f√©rentiels comme Maven Central, vous fournissez simplement JitPack avec l'URL de votre d√©p√¥t Git (public ou priv√©, mais les priv√©s n√©cessitent un abonnement payant). JitPack se charge ensuite de :\n\n1. **Cloner votre d√©p√¥t Git:** Il r√©cup√®re le code source de votre projet.\n2. **Construire votre projet:** Il utilise un environnement de build (Maven ou Gradle) d√©fini dans votre projet pour compiler votre code et g√©n√©rer les artefacts (JAR, AAR, etc.).\n3. **Publier les artefacts:** Il met √† disposition les artefacts compil√©s via son propre r√©f√©rentiel, accessible via des coordonn√©es Maven ou Gradle.\n\nCela permet aux d√©veloppeurs d'int√©grer vos librairies directement dans leurs projets via un simple ajout de d√©pendances dans leur fichier `build.gradle` (ou √©quivalent).  JitPack surveille les modifications dans votre d√©p√¥t Git et met √† jour les artefacts automatiquement, facilitant ainsi la gestion des versions et la mise √† jour des librairies.  L'int√©gration est transparente pour le d√©veloppeur qui n'a pas besoin de g√©rer la publication des artefacts.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplicit√© d'utilisation:**  Int√©gration facile et rapide gr√¢ce √† l'ajout d'une simple d√©pendance dans votre fichier de build.\n* **Automatisation:** JitPack automatise le processus de compilation et de publication, r√©duisant ainsi le temps et l'effort n√©cessaire.\n* **Mise √† jour automatique:** Les mises √† jour du d√©p√¥t Git sont automatiquement refl√©t√©es dans le r√©f√©rentiel JitPack.\n* **Int√©gration avec les d√©p√¥ts Git populaires:**  Fonctionne avec GitHub, GitLab et Bitbucket.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Co√ªt pour les d√©p√¥ts priv√©s:** L'utilisation de d√©p√¥ts Git priv√©s n√©cessite un abonnement payant.\n* **D√©pendance √† JitPack:** Votre projet d√©pend d'un service tiers, ce qui introduit un point de d√©faillance potentiel.\n* **Performances:**  La construction et le d√©ploiement peuvent √™tre plus lents que sur un serveur de build d√©di√©.\n* **Contr√¥le limit√©:** Vous avez moins de contr√¥le sur le processus de build que si vous g√©rez vous-m√™me la publication de vos artefacts.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "39981e27-4afb-40f9-a0b7-7ab17fc52da6",
        "title": "K6",
        "description": "---\nid: 31ca0fd2-70a8-43d5-8c3c-250984ee0d52\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nk6 est un outil open-source de test de charge et de performance √©crit en Go.  Il permet de simuler un grand nombre d'utilisateurs simultan√©s interagissant avec une application web ou un service afin d'√©valuer sa capacit√© √† g√©rer la charge et d'identifier les goulots d'√©tranglement.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nk6 permet de d√©finir des sc√©narios de test en utilisant un langage de script simple et puissant bas√© sur JavaScript.  Ces scripts d√©finissent les actions que les utilisateurs virtuels doivent r√©aliser (requ√™tes HTTP, interactions avec l'interface utilisateur, etc.).  k6 ex√©cute ensuite ces scripts en parall√®le, simulant ainsi une charge importante sur le syst√®me test√©.  L'outil collecte diverses m√©triques de performance (temps de r√©ponse, taux d'erreur, utilisation des ressources serveur, etc.) et les pr√©sente sous forme de rapports et de graphiques.\n\nVoici un exemple simple de script k6:\n\n```javascript\nimport http from 'k6/http';\nimport { sleep } from 'k6';\n\nexport let options = {\n  stages: [\n    { duration: '30s', target: 20 }, // Simuler 20 utilisateurs pendant 30 secondes\n    { duration: '1m', target: 20 }, // Maintenir 20 utilisateurs pendant 1 minute\n    { duration: '30s', target: 0 },  // Ramener le nombre d'utilisateurs √† 0 pendant 30 secondes\n  ],\n};\n\nexport default function () {\n  let res = http.get('https://test-api.com/users');\n  sleep(1); // Attendre 1 seconde avant la prochaine requ√™te\n  check(res, { 'status was 200': (r) => r.status === 200 });\n}\n```\n\nCe script simule 20 utilisateurs effectuant une requ√™te GET sur une API pendant une minute et demie.  `check` permet de valider que la r√©ponse a un code de statut 200.  L'option `stages` d√©finit l'√©volution du nombre d'utilisateurs virtuels au cours du test.\n\nk6 offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Int√©gration avec des outils d'observation:**  k6 peut envoyer des m√©triques vers des syst√®mes de monitoring comme Prometheus, Grafana, InfluxDB.\n* **Scripts modulaires et r√©utilisables:**  Les scripts k6 peuvent √™tre organis√©s en modules pour faciliter la maintenance et le partage de code.\n* **Tests de charge bas√©s sur des sc√©narios r√©alistes:**  Il est possible de simuler des comportements d'utilisateurs plus complexes, en incluant des temps d'attente, des distributions al√©atoires, etc.\n* **Support des protocoles HTTP/1.1, HTTP/2, et WebSocket:**  k6 permet de tester une large gamme d'applications.\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Open-source et gratuit:** k6 est librement disponible et utilisable.\n* **Langage de script simple et puissant:**  Le JavaScript utilis√© est relativement facile √† apprendre et permet de cr√©er des tests complexes.\n* **R√©sultats clairs et concis:**  k6 fournit des rapports d√©taill√©s et des visualisations graphiques des r√©sultats.\n* **Int√©gration facile avec l'√©cosyst√®me DevOps:**  k6 s'int√®gre bien avec d'autres outils populaires.\n* **Performance et stabilit√©:**  k6 est performant et robuste.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:** Bien que le langage de script soit simple, une certaine familiarit√© avec JavaScript est n√©cessaire pour cr√©er des tests sophistiqu√©s.\n* **D√©bogage:** Le d√©bogage des scripts peut √™tre parfois complexe.  Des outils sp√©cifiques sont n√©cessaires pour un d√©bogage efficace.\n* **Limitations pour les tests UI complexes:** Bien que possible,  tester des applications avec de nombreuses interactions UI complexes peut √™tre plus difficile qu'avec d'autres outils sp√©cialis√©s dans les tests d'interface utilisateur.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "ff09cb51-6aea-4704-908c-b252fcebb82b",
        "title": "Karate",
        "description": "---\nid: 1c914381-073b-493f-9b0e-f8c82b8f9e98\n---\n# Rapidement c'est quoi‚ùì\n\nKarate DSL est un framework open-source bas√© sur Cucumber (Gherkin) pour l'automatisation des tests, notamment pour les API, mais aussi pour les applications web et les applications desktop.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nKarate est un framework de test d'int√©gration bas√© sur le langage [[Gherkin]], connu pour sa syntaxe simple et lisible (BDD - Behavior Driven Development).  Il permet de d√©crire les sc√©narios de test de mani√®re concise et compr√©hensible par les √©quipes techniques et non-techniques.  Au lieu d'√©crire du code complexe, on d√©crit le comportement attendu de l'application via des mots cl√©s simples.  Karate s'occupe ensuite de l'ex√©cution et de la validation.\n\nKarate offre une grande flexibilit√© et peut √™tre utilis√© pour tester diff√©rents types d'applications :\n\n* **API REST :** C'est son utilisation principale. Il permet d'envoyer des requ√™tes HTTP (GET, POST, PUT, DELETE, etc.), de valider les r√©ponses (codes de statut, corps JSON, etc.) et de g√©rer l'authentification.\n* **Applications Web :**  Karate peut interagir avec des applications web via son int√©gration avec des outils comme Selenium, permettant de simuler des actions utilisateur.\n* **Applications Desktop :**  Bien que moins courant, Karate peut √™tre utilis√© pour tester des applications desktop gr√¢ce √† son API extensible.\n* **Tests de performance de base :**  Karate permet d‚Äôeffectuer des tests de charge l√©gers, notamment gr√¢ce √† ses capacit√©s de parall√©lisation.\n\nKarate utilise un puissant moteur de matching JSON qui simplifie les validations. Il propose √©galement des fonctionnalit√©s avanc√©es telles que la gestion des donn√©es de test, la g√©n√©ration de rapports et l'int√©gration avec des syst√®mes de CI/CD.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Syntaxe simple et lisible (Gherkin) :** Rend les tests faciles √† comprendre et √† maintenir.\n* **Polyvalence :** Permet de tester des API REST, des applications web et m√™me des applications desktop.\n* **Int√©gration facile :** S'int√®gre bien avec de nombreux outils et technologies.\n* **Gestion avanc√©e des donn√©es de test :** Simplifie la gestion des donn√©es d'entr√©e.\n* **Puissant moteur de matching JSON :** Facilite la validation des r√©ponses API.\n* **Reporting clair et concis :** Facilite l'analyse des r√©sultats.\n* **Communaut√© active et documentation assez compl√®te:** Facilite le d√©marrage et l'apprentissage.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Pour les tests UI complexes, il peut √™tre moins performant que des outils d√©di√©s comme Selenium ou Cypress:** Il est plus adapt√© pour la validation de l'API qui sous-tend l'UI plut√¥t que la validation de l'exp√©rience utilisateur elle-m√™me.\n* **Courbe d'apprentissage l√©g√®rement plus raide que des outils plus simples pour les d√©butants complets en test.**  La ma√Ætrise des expressions r√©guli√®res et des manipulations JSON est un atout.\n* **Moins de plugins disponibles qu'avec des frameworks plus √©tablis** pour les tests UI.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "4f9fb72d-9eb3-4874-b3cf-2aea798c1efa",
        "title": "LowDb",
        "description": "---\nid: 1f2a7d57-7f12-4d6a-8ad5-d1eb8ef07f91\n---\n## **Rapidement, c'est quoi ? ‚ùì**\n\nLowDB est une petite base de donn√©es JavaScript l√©g√®re, bas√©e sur un fichier JSON.  Elle est id√©ale pour les applications qui n'ont pas besoin d'une base de donn√©es relationnelle complexe et qui veulent un stockage persistant simple et rapide.\n\n---\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLowDB est une base de donn√©es NoSQL orient√©e document.  Cela signifie qu'elle stocke les donn√©es sous forme de documents JSON, sans le besoin de sch√©mas rigides.  Elle utilise un seul fichier JSON comme stockage persistant, ce qui la rend facile √† d√©ployer et √† utiliser.  LowDB fournit une API simple et intuitive pour effectuer des op√©rations CRUD (Cr√©er, Lire, Mettre √† jour, Supprimer) sur les donn√©es.  Elle est bas√©e sur Lodash, ce qui facilite l'utilisation de ses fonctions de manipulation de donn√©es.  Elle ne n√©cessite aucune configuration de serveur, ni aucune d√©pendance externe autre que Lodash.\n\nVoici un exemple d'utilisation en JavaScript :\n\n```javascript\nconst low = require('lowdb')\nconst FileSync = require('lowdb/adapters/FileSync')\n\nconst adapter = new FileSync('db.json')\nconst db = low(adapter)\n\n// Set some defaults (optional)\ndb.defaults({ users: [], posts: [] })\n  .write()\n\n// Add a user\ndb.get('users').push({ id: 1, name: 'John' }).write()\n\n// Find a user\nconst john = db.get('users').find({ id: 1 }).value()\n\n// Update a user\ndb.get('users').find({ id: 1 }).assign({ age: 30 }).write()\n\n// Remove a user\ndb.get('users').remove({ id: 1 }).write()\n\n// Read all users\nconst users = db.get('users').value()\n\nconsole.log(users)\n```\n\nCet exemple montre comment cr√©er une base de donn√©es, ajouter, rechercher, mettre √† jour et supprimer des utilisateurs.  La m√©thode `.write()` sauvegarde les modifications dans le fichier `db.json`.\n\n---\n\n# Qu'est-ce qui est top ? üëç\n\n* **Simplicit√©:**  Extr√™mement facile √† installer et √† utiliser, avec une API intuitive.\n* **L√©ger:**  Tr√®s petite taille, ne surcharge pas l'application.\n* **Facile √† d√©ployer:**  Ne n√©cessite aucune configuration de serveur.\n* **Persistant:**  Stocke les donn√©es dans un fichier JSON, garantissant la persistance des donn√©es.\n* **Bas√© sur Lodash:**  B√©n√©ficie de la puissance et de la flexibilit√© de Lodash pour la manipulation des donn√©es.\n\n---\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Scalabilit√© limit√©e:**  N'est pas con√ßue pour les applications √† tr√®s grande √©chelle.  La performance peut d√©grader avec des jeux de donn√©es importants.\n* **Transactions non support√©es:**  Ne supporte pas les transactions, ce qui peut √™tre un probl√®me pour les applications n√©cessitant une coh√©rence forte des donn√©es.\n* **Concurrence limit√©e:**  La gestion de la concurrence n'est pas optimis√©e.  L'utilisation simultan√©e par plusieurs processus peut n√©cessiter des m√©canismes de verrouillage externes.\n* **Fonctionnalit√©s limit√©es:**  Ne propose pas autant de fonctionnalit√©s qu'une base de donn√©es relationnelle ou un syst√®me de base de donn√©es NoSQL plus complet.\n\n---\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "2dd2c605-ae74-4ae6-8c67-dfd4a2df88ec",
        "title": "MQTT",
        "description": "---\nid: 7b1fe336-18e3-4bbc-a2d1-4f869db47e43\n---\n# Rapidement c'est quoi‚ùì\n\nMQTT (Message Queuing Telemetry Transport) est un protocole de messagerie l√©ger, publi√©-abonn√©, utilis√© principalement pour l'Internet des objets (IoT).  Il permet aux appareils de publier des messages sur des sujets sp√©cifiques, et aux autres appareils abonn√©s √† ces sujets de recevoir ces messages.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nMQTT est un protocole de communication machine-√†-machine (M2M) bas√© sur le paradigme de publication-abonnement.  Il fonctionne sur le principe de \"sujets\" (topics) auxquels les clients (publishers et subscribers) s'abonnent.  Un √©diteur (publisher) publie un message sur un sujet sp√©cifique.  Tous les abonn√©s (subscribers) √† ce sujet re√ßoivent alors une copie de ce message.  Ceci permet une communication unidirectionnelle efficace, id√©ale pour les applications √† faible bande passante et √† forte latence comme l'IoT.\n\nContrairement √† d'autres protocoles de messagerie plus lourds, MQTT est con√ßu pour √™tre l√©ger et efficace en termes de bande passante et d'√©nergie.  Il utilise un format de message compact et g√®re les connexions intermittentes et les d√©connexions.  Il offre diff√©rents niveaux de qualit√© de service (QoS) pour garantir la fiabilit√© de la livraison des messages :\n\n* **QoS 0 (At most once):** Le message est envoy√© une seule fois, sans garantie de livraison.\n* **QoS 1 (At least once):** Le message est envoy√© au moins une fois, le serveur envoie un accus√© de r√©ception.  Il est possible de recevoir le message plusieurs fois en cas de perte du message d'accus√© de r√©ception.\n* **QoS 2 (Exactly once):** Le message est envoy√© exactement une fois, garantie de livraison et d'unicit√©.  C'est le niveau le plus robuste, mais aussi le plus co√ªteux en ressources.\n\nUn broker MQTT agit comme un interm√©diaire centralis√©, g√©rant les abonnements et la diffusion des messages entre les √©diteurs et les abonn√©s.  Le publisher peut sp√©cifier s'il attend une confirmation de r√©ception (QoS 1 et 2) ou non (QoS 0).\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **L√©ger et efficace:**  Id√©al pour les appareils √† faible puissance et bande passante limit√©e.\n* **Simple √† impl√©menter:**  Protocole relativement simple √† comprendre et √† utiliser.\n* **Publication-abonnement efficace:**  Permet une communication unidirectionnelle scalable.\n* **Gestion des connexions intermittentes:**  Robuste face aux d√©connexions et aux r√©seaux instables.\n* **Plusieurs niveaux de QoS:**  Offre des options de fiabilit√© pour adapter la communication aux besoins de l'application.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Pas adapt√© √† toutes les applications:**  Moins appropri√© pour les applications n√©cessitant des transactions complexes ou une communication bidirectionnelle tr√®s r√©active.\n* **S√©curit√©:**  N√©cessite une attention particuli√®re √† la s√©curit√©, surtout dans les environnements sensibles.  Des m√©canismes d'authentification et de chiffrement sont importants.\n* **Complexit√© du Broker:** La gestion d'un broker MQTT peut devenir complexe pour un grand nombre d'appareils et de messages.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "2ac4eb26-18a4-4910-80a6-380bdeef9ae0",
        "title": "Macaron",
        "description": "---\nid: 4ca900d5-f49d-4a08-8a97-35a6683ef57f\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nUn macaron est un jeton cryptographique utilis√© pour l'authentification.  Il repr√©sente une alternative aux m√©canismes d'authentification traditionnels, offrant une approche plus s√©curis√©e et flexible.  On peut le voir comme une version plus simple et moins complexe d'un biscuit (d√©velopp√© par Clever Cloud).\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nUn macaron est un jeton num√©rique, g√©n√©ralement encod√© en base64, qui contient des informations chiffr√©es sur l'identit√© d'un utilisateur et ses autorisations.  Contrairement √† un cookie HTTP classique, un macaron n'est pas directement stock√© par le navigateur.  Son utilisation implique g√©n√©ralement un m√©canisme d'√©change entre le client (application, navigateur) et le serveur, souvent via un en-t√™te HTTP.\n\nLe serveur cr√©e le macaron en incluant des donn√©es pertinentes (identifiant utilisateur, timestamp, r√¥les, etc.) et en les chiffrant sym√©triquement avec une cl√© secr√®te connue uniquement du serveur.  Le client re√ßoit et conserve le macaron.  Chaque requ√™te subsequente au serveur inclut le macaron, qui est alors v√©rifi√© et d√©chiffr√© par le serveur pour authentifier l'utilisateur et valider ses autorisations.  Ceci √©vite de devoir transmettre des informations sensibles comme mots de passe √† chaque requ√™te.\n\nL'architecture pr√©cise de l'int√©gration des macarons peut varier, mais le principe central reste la g√©n√©ration, transmission et v√©rification s√©curis√©e du jeton chiffr√©.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **S√©curit√© am√©lior√©e:** Le chiffrement du macaron prot√®ge les informations sensibles de l'utilisateur.  Le caract√®re √©ph√©m√®re du macaron (dur√©e de vie limit√©e) renforce la s√©curit√©.\n* **Simplicit√© (compar√© aux syst√®mes plus complexes):**  Par rapport √† des solutions d'authentification plus sophistiqu√©es, le concept est relativement simple √† mettre en ≈ìuvre.\n* **Flexibilit√©:** Les macarons peuvent √™tre adapt√©s √† divers contextes et protocoles.\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Gestion de la cl√© secr√®te:**  La s√©curit√© du syst√®me d√©pend enti√®rement de la protection de la cl√© secr√®te utilis√©e pour chiffrer/d√©chiffrer les macarons.  Une compromission de cette cl√© compromet la s√©curit√© de tout le syst√®me.\n* **Complexit√© d'impl√©mentation (par rapport aux cookies simples):**  L'impl√©mentation n√©cessite une gestion plus complexe que des cookies HTTP simples.\n* **D√©pendance au serveur:**  La validit√© du macaron d√©pend enti√®rement du serveur.  Des probl√®mes de connectivit√© ou des pannes du serveur peuvent emp√™cher l'acc√®s.\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "31d7445a-110f-47ad-b006-c15034db4caf",
        "title": "Mockoon",
        "description": "---\nid: 6fbdf1a5-224a-40eb-8d39-f3a7b21e6fe8\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nMockoon est une application open-source permettant de cr√©er et de g√©rer facilement des mocks d'API.  Elle permet de simuler des r√©ponses HTTP pour des besoins de test et de d√©veloppement, sans avoir besoin d'un serveur backend fonctionnel.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nMockoon est un outil qui permet de d√©finir des routes API, chacune associ√©e √† une r√©ponse HTTP sp√©cifique.  Ces r√©ponses peuvent √™tre configur√©es pour simuler diff√©rents statuts HTTP (200 OK, 404 Not Found, etc.), des en-t√™tes personnalis√©s, et des corps de r√©ponse au format JSON, XML, ou texte brut.  L'application embarque un serveur qui rend ces mocks accessibles via une URL locale.  Les d√©veloppeurs peuvent ainsi tester leurs applications front-end ou leurs int√©grations sans d√©pendre d'un serveur backend en cours de d√©veloppement ou indisponible.\n\nMockoon offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Gestion des requ√™tes:**  Possibilit√© de d√©finir des requ√™tes sp√©cifiques (m√©thodes HTTP, headers, param√®tres, corps de la requ√™te) pour d√©clencher des r√©ponses diff√©rentes.\n* **Mocks dynamiques:**  Les r√©ponses peuvent √™tre g√©n√©r√©es dynamiquement gr√¢ce √† des fonctionnalit√©s de templating (ex: utilisant des variables).\n* **D√©lai de r√©ponse:**  Simulation de latence r√©seau pour des tests plus r√©alistes.\n* **Import/Export:**  Import et export de configurations au format JSON pour faciliter le partage et la sauvegarde.\n* **Environnements:**  Possibilit√© de g√©rer plusieurs environnements (d√©veloppement, test, production) avec des configurations diff√©rentes.\n\n**Exemple simple (JSON):**\n\nImaginons une route `/users` qui doit retourner une liste d'utilisateurs.  Dans Mockoon, on d√©finirait une route avec la m√©thode `GET`, l'URL `/users`, et un corps de r√©ponse JSON comme suit :\n\n```json\n[\n  {\"id\": 1, \"name\": \"John Doe\"},\n  {\"id\": 2, \"name\": \"Jane Smith\"}\n]\n```\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Facilit√© d'utilisation:**  Interface utilisateur intuitive et facile √† prendre en main.\n* **Open-source:**  Gratuit, et le code source est disponible pour un audit ou des contributions.\n* **Fonctionnalit√©s compl√®tes:**  Offre un ensemble complet de fonctionnalit√©s pour la simulation d'API.\n* **Interface graphique:**  Permet une configuration visuelle et simple des mocks.\n* **Multiplateforme:**  Disponible pour Windows, macOS et Linux.\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Limitations pour les mocks complexes:**  Pour les cas d'utilisation tr√®s complexes n√©cessitant des interactions sophistiqu√©es avec le serveur (authentification avanc√©e, gestion d'√©tat, etc.), Mockoon pourrait s'av√©rer moins adapt√© que des solutions plus sp√©cialis√©es.\n* **D√©pendance √† une application:**  Contrairement √† des solutions bas√©es sur un script ou un fichier de configuration, Mockoon n√©cessite l'ex√©cution de l'application.\n\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "3e904263-df71-47ca-a67f-c0e3adcd11bd",
        "title": "Nexus OSS",
        "description": "---\nid: e34dad01-51d0-4b44-b981-ab5d072436c6\n---\n# Nexus OSS : Rapidement c'est quoi‚ùì\n\nNexus OSS est un gestionnaire d'artefacts open-source.  Il permet de stocker et de g√©rer des paquets logiciels de diff√©rents types (Java, Python, Node.js, Docker, etc.) centralisant ainsi la distribution et la versioning de ces √©l√©ments au sein d'un projet.\n\n---\n# Nexus OSS : Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nNexus OSS est un serveur de gestion d'artefacts qui fournit un r√©f√©rentiel centralis√© pour les d√©pendances de logiciels.  Il prend en charge une large vari√©t√© de formats de paquets, incluant mais sans s'y limiter : Maven, npm, NuGet, Bower, PyPI, Docker, et beaucoup d'autres.  Son r√¥le principal est de faciliter la gestion du cycle de vie des artefacts, de leur cr√©ation √† leur d√©ploiement.\n\nPlus concr√®tement, Nexus OSS permet :\n\n* **Stockage centralis√©:**  Tous les artefacts d'un projet sont stock√©s dans un emplacement unique, facilitant l'acc√®s et la gestion.\n* **Gestion de versions:** Nexus g√®re efficacement les diff√©rentes versions des artefacts, permettant de revenir √† des versions pr√©c√©dentes si n√©cessaire.\n* **Proxy de r√©f√©rentiels:** Il peut agir comme un proxy pour des r√©f√©rentiels externes (comme Maven Central), r√©duisant la charge sur les r√©seaux et am√©liorant les performances.\n* **Cr√©ation de r√©f√©rentiels priv√©s:**  Permet de cr√©er des r√©f√©rentiels priv√©s pour h√©berger des artefacts internes, avant leur √©ventuelle publication publique.\n* **Contr√¥le d'acc√®s:**  Offre des m√©canismes de contr√¥le d'acc√®s pour restreindre l'acc√®s aux artefacts en fonction des r√¥les utilisateurs.\n* **Recherche et navigation:**  Fournit une interface utilisateur intuitive pour rechercher et naviguer parmi les artefacts stock√©s.\n* **Int√©gration CI/CD:**  S'int√®gre facilement aux pipelines CI/CD pour automatiser le processus de d√©ploiement.\n\n\n---\n# Nexus OSS : Qu'est ce qui est top ? üëç\n\n* **Open-source et gratuit:**  Nexus OSS est disponible gratuitement et son code source est accessible.\n* **Large support de formats:**  Il g√®re un tr√®s grand nombre de types d'artefacts.\n* **Interface utilisateur conviviale:**  Navigation et recherche faciles.\n* **Fonctionnalit√©s avanc√©es:**  Gestion des versions, proxy, r√©f√©rentiels priv√©s, contr√¥le d'acc√®s.\n* **Communaut√© active:**  Une communaut√© importante fournit un support et contribue au d√©veloppement.\n\n\n---\n# Nexus OSS : Qu'est ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:** La configuration initiale peut √™tre complexe pour les utilisateurs d√©butants.\n* **Ressources serveur:**  Peut n√©cessiter des ressources serveur importantes pour g√©rer un grand nombre d'artefacts.\n* **Courbe d'apprentissage:**  N√©cessite une certaine familiarisation avec les concepts de gestion d'artefacts.\n* **D√©pendances Java:** N√©cessite une machine virtuelle Java pour fonctionner.\n\n\n---\n# Nexus OSS : A quoi c'est li√© ? ü™¢\n\n(√† compl√©ter)\n"
    },
    {
        "id": "0e88d3df-da53-4647-8099-8872358acab6",
        "title": "NuxtHub",
        "description": "---\nid: afb4d2a0-248c-4f80-9886-88258531a052\n---\n# Rapidement c'est quoi‚ùì\n\nNuxtHub est une plateforme en ligne qui simplifie la gestion et le d√©ploiement d'applications Nuxt.js sur le cloud Cloudflare.  Elle fournit une interface utilisateur intuitive pour g√©rer les projets, automatisant plusieurs t√¢ches complexes.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nNuxtHub est un service de plateforme comme service (PaaS) sp√©cifiquement con√ßu pour les applications web construites avec le framework JavaScript Nuxt.js.  Il offre une interface centralis√©e pour g√©rer tout le cycle de vie d'un projet Nuxt, du d√©veloppement au d√©ploiement.  Les fonctionnalit√©s cl√©s incluent :\n\n* **Gestion de projet:**  Cr√©ation, organisation et suivi de multiples projets Nuxt.js depuis une seule interface.\n* **D√©ploiement automatis√©:**  NuxtHub int√®gre directement le cloud Cloudflare, automatisant le processus de d√©ploiement et rendant la mise en production simple et rapide.  Cela inclut la configuration du serveur, la gestion des certificats SSL et la mise √† jour automatique.\n* **Environnements multiples:**  Possibilit√© de g√©rer diff√©rents environnements (d√©veloppement, staging, production) pour chaque projet.\n* **Collaboration:**  Facilite la collaboration entre d√©veloppeurs gr√¢ce √† un syst√®me de contr√¥le d'acc√®s et de gestion des utilisateurs.\n* **Supervision et monitoring:**  Outils de monitoring permettant de surveiller les performances et la stabilit√© des applications d√©ploy√©es.  (La nature pr√©cise de ces outils d√©pend de l'int√©gration avec Cloudflare.)\n* **Int√©gration CI/CD (potentielle):**  Bien que non explicitement mentionn√©, une plateforme comme NuxtHub est susceptible d'offrir ou de s'int√©grer facilement √† des pipelines CI/CD pour automatiser davantage le processus de d√©veloppement et de d√©ploiement.\n\n\nEn r√©sum√©, NuxtHub vise √† simplifier le workflow des d√©veloppeurs Nuxt.js en centralisant et en automatisant les t√¢ches fastidieuses li√©es √† la gestion et au d√©ploiement d'applications.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Simplification du d√©ploiement:** Le d√©ploiement sur Cloudflare est grandement simplifi√© gr√¢ce √† l'interface utilisateur intuitive.\n* **Centralisation de la gestion:** Gestion multi-projets facilit√©e.\n* **Automatisation des t√¢ches:**  R√©duction du temps et de l'effort n√©cessaires pour le d√©ploiement et la maintenance.\n* **Int√©gration Cloudflare:** B√©n√©ficie de l'infrastructure robuste et performante de Cloudflare.\n\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **D√©pendance √† Cloudflare:**  Le d√©ploiement est limit√© √† Cloudflare.  Les d√©veloppeurs souhaitant utiliser d'autres fournisseurs de cloud pourraient √™tre limit√©s.\n* **Potentielles limitations des fonctionnalit√©s:** L'√©tendue exacte des fonctionnalit√©s de monitoring et d'int√©gration CI/CD n'est pas toujours clairement d√©finie.  Une √©valuation approfondie est n√©cessaire.\n* **Co√ªt:**  Le mod√®le de tarification peut constituer un inconv√©nient pour certains utilisateurs, n√©cessitant une analyse des co√ªts avant utilisation.\n* **Manque de contr√¥le (potentiel):**  Le niveau de contr√¥le sur l'infrastructure sous-jacente pourrait √™tre inf√©rieur √† une configuration manuelle.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "42b53c23-df81-462b-94cb-78777ddbe672",
        "title": "Objet du testing",
        "description": "---\nid: 2f7853dd-9d03-467b-99ae-804dd65e0865\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nLes objets de test (dummy, stub, mock, fake, spy) sont des outils utilis√©s dans le d√©veloppement logiciel pour simuler le comportement de parties d'un syst√®me lors de tests unitaires ou d'int√©gration.  Ils permettent d'isoler le code test√© et de contr√¥ler son environnement, facilitant ainsi la d√©tection de bugs et la validation du comportement attendu.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nVoici une description plus d√©taill√©e des diff√©rents types d'objets de test :\n\n* **Dummy:** Un objet simple servant √† compl√©ter une liste de param√®tres. Il ne poss√®de g√©n√©ralement aucune impl√©mentation concr√®te et sert principalement √† satisfaire les contraintes de signature d'une fonction ou d'une m√©thode sans avoir d'impact r√©el sur le test.\n\n    * **Exemple:** Un constructeur n√©cessitant trois param√®tres, mais dont un seul est pertinent pour le test.  On utilise un `dummy` pour les deux autres.\n\n* **Stub:** Un objet qui remplace une d√©pendance et renvoie des valeurs pr√©d√©finies.  Il simule un comportement sp√©cifique sans ex√©cuter le code r√©el de la d√©pendance.\n\n    * **Exemple:** Une fonction appelant une base de donn√©es.  Un `stub` simule la r√©ponse de la base de donn√©es sans r√©ellement interagir avec elle.  Cela permet de tester la fonction sans d√©pendre de l'√©tat de la base de donn√©es.\n\n* **Mock:** Un objet plus sophistiqu√© qui v√©rifie non seulement les appels √† des m√©thodes mais aussi leurs arguments.  Il permet de s'assurer que les interactions avec les d√©pendances se produisent comme pr√©vu.  Il est g√©n√©ralement utilis√© pour valider les interactions, pas juste les r√©sultats.\n\n    * **Exemple:** V√©rifier si une m√©thode `envoyerEmail` a √©t√© appel√©e avec les bons param√®tres (adresse email, sujet, corps du message).\n\n* **Fake:** Un objet qui fournit une impl√©mentation simplifi√©e d'une d√©pendance.  Il est souvent plus complet qu'un `stub` car il peut avoir une certaine logique interne, mais cette logique est plus simple et plus rapide que l'impl√©mentation r√©elle.\n\n    * **Exemple:** Utiliser une liste en m√©moire comme `fake` pour une base de donn√©es lors d'un test,  ce qui est plus rapide qu'une v√©ritable connexion √† une base de donn√©es.\n\n\n* **Spy:** Un objet qui enregistre les appels √† une fonction ou une m√©thode sans modifier leur comportement.  Il permet d'observer les appels et de v√©rifier qu'ils ont eu lieu avec les param√®tres attendus, sans influencer le comportement de la fonction espionn√©e.  Il sert souvent de compl√©ment √† un `mock` ou un `stub`.\n\n    * **Exemple:** Utiliser un `spy` pour compter le nombre d'appels √† une m√©thode sp√©cifique.\n\n**Exemple (Python avec `unittest.mock`):**\n\n```python\nimport unittest\nfrom unittest.mock import patch, Mock\n\nclass MyClass:\n    def ma_methode(self, param1, param2):\n        return param1 + param2\n\nclass MyTests(unittest.TestCase):\n    @patch('__main__.MyClass.ma_methode')  # Mock de la m√©thode ma_methode\n    def test_ma_methode(self, mock_ma_methode):\n        mock_ma_methode.return_value = 10  # Stub : retourne une valeur fixe\n        obj = MyClass()\n        resultat = obj.ma_methode(5, 5)  # L'appel r√©el ne se produit pas\n        self.assertEqual(resultat, 10)  # V√©rification du r√©sultat stubb√©\n\n        mock_ma_methode.assert_called_once_with(5, 5) # Mock : v√©rification des arguments\n```\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Isolation:** Permet de tester des unit√©s de code de mani√®re ind√©pendante de leurs d√©pendances.\n* **Fiabilit√©:** R√©duit les erreurs li√©es aux d√©pendances externes (bases de donn√©es, r√©seaux, etc.).\n* **Rapidit√©:** Les tests sont plus rapides car ils n'ont pas √† interagir avec des syst√®mes externes lents.\n* **R√©p√©tabilit√©:**  Les tests sont toujours reproductibles car l'environnement de test est contr√¥l√©.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La mise en place de mocks et stubs peut ajouter de la complexit√© aux tests.\n* **Maintenance:**  Les tests utilisant des mocks et stubs peuvent n√©cessiter une maintenance accrue si l'API des d√©pendances √©volue.\n* **Sur-mocking:** Un exc√®s de mocking peut masquer des probl√®mes d'int√©gration.\n* **Difficult√© de debug:** Des tests trop isol√©s peuvent rendre le debugging plus difficile si le probl√®me vient d'une interaction inattendue entre les diff√©rentes parties du syst√®me.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "e938662b-f332-4f3b-b8fd-b3729a7b352f",
        "title": "Optimisation",
        "description": "---\nid: 3ee82aac-362e-40bd-96ee-8c9734e0d8b9\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nL'optimisation consiste √† am√©liorer les performances d'un syst√®me, dans ce cas pr√©cis, d'une base de donn√©es et de la gestion des logs.  Cela vise √† r√©duire les temps de r√©ponse, √† augmenter le d√©bit et √† am√©liorer l'utilisation des ressources.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nCette note d√©crit deux techniques d'optimisation : l'augmentation de la pool de connexions pour la base de donn√©es et la bufferisation des logs.\n\n**1. Augmentation de la pool de connexions de la base de donn√©es:**\n\nUne pool de connexions est un ensemble de connexions pr√©-√©tablies √† la base de donn√©es.  Au lieu d'√©tablir une nouvelle connexion pour chaque requ√™te, l'application utilise les connexions disponibles dans la pool.  Augmenter la taille de cette pool permet de g√©rer un plus grand nombre de requ√™tes concurrentes, r√©duisant ainsi les temps d'attente et am√©liorant les performances.  Cependant, il est crucial de v√©rifier la configuration du param√®tre `max_connections` (ou un param√®tre √©quivalent) au niveau de la base de donn√©es elle-m√™me.  D√©passer cette limite peut mener √† des erreurs et √† une d√©gradation des performances.\n\n**Exemple (concept, pas de code sp√©cifique √† une base de donn√©es):**\n\nImaginons une application web avec 10 utilisateurs concurrents.  Si la pool de connexions est de taille 5, 5 utilisateurs devront attendre qu'une connexion devienne disponible avant de pouvoir interagir avec la base de donn√©es.  En augmentant la taille de la pool √† 20, plus d'utilisateurs pourront acc√©der simultan√©ment √† la base de donn√©es sans attente.\n\n**2. Bufferisation des logs:**\n\nLa journalisation (logging) peut √™tre une op√©ration co√ªteuse en termes de ressources, surtout avec un volume important de logs.  La bufferisation consiste √† accumuler les logs dans une m√©moire tampon (buffer) avant de les √©crire physiquement sur le disque ou de les envoyer √† un syst√®me de logging distant.  Cela permet de rendre l'√©criture des logs plus asynchrone, √©vitant ainsi de bloquer le thread principal de l'application et de surcharger la sortie standard.  Une fois le buffer plein (ou apr√®s un certain d√©lai), son contenu est √©crit en bloc, ce qui est plus efficace que l'√©criture de chaque log individuellement.\n\n**Exemple (concept):**\n\nAu lieu d'√©crire chaque message de log directement sur le disque, on les accumule dans un buffer de taille 1000 messages.  Une fois le buffer plein, on √©crit les 1000 messages en une seule op√©ration.  Cela r√©duit le nombre d'op√©rations d'√©criture sur le disque, ce qui am√©liore les performances.  Divers frameworks de logging offrent des m√©canismes de bufferisation.\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Augmentation de la pool de connexions:**  Am√©lioration significative des performances pour les applications avec un fort trafic concurrent.\n* **Bufferisation des logs:**  R√©duction de la charge sur le syst√®me et am√©lioration de la r√©activit√© de l'application, en particulier sous forte charge de logging.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Augmentation de la pool de connexions:**  Risque de saturation de la base de donn√©es si la taille de la pool d√©passe la limite `max_connections` d√©finie par le serveur de base de donn√©es.  Cela peut entra√Æner des erreurs et une d√©gradation des performances. N√©cessite une bonne compr√©hension des limites de la base de donn√©es.\n* **Bufferisation des logs:**  Peut introduire une latence dans la journalisation, ce qui peut compliquer le d√©bogage en temps r√©el si un probl√®me survient.  La gestion de la taille du buffer et de la fr√©quence d'√©criture est critique pour trouver le bon √©quilibre entre performance et temps de r√©ponse.  En cas de crash de l'application avant l'√©criture du buffer, les logs seront perdus.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "dda6a9ab-f010-41f6-9158-b779fa0e1bd6",
        "title": "Plugin Oauth2 Proxy Nexus",
        "description": "---\nid: 2fa8fce2-e236-4f36-b969-556a3f001603\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nLe plugin OAuth2Proxy pour Nexus est une extension qui ajoute une couche d'authentification bas√©e sur OAuth 2.0.  Il permet aux utilisateurs de se connecter √† Nexus via un fournisseur d'identit√© (IdP) comme Keycloak, Okta, etc., au lieu d'utiliser les m√©canismes d'authentification int√©gr√©s de Nexus.  Une fois authentifi√©, l'utilisateur re√ßoit un token permettant l'acc√®s aux ressources de Nexus (comme les d√©p√¥ts Maven) sans avoir besoin de fournir de nouveau ses identifiants.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nCe plugin agit comme un proxy inverse devant Nexus.  Au lieu d'acc√©der directement √† Nexus, les requ√™tes passent d'abord par OAuth2Proxy.  OAuth2Proxy intercepte la requ√™te, redirige l'utilisateur vers son IdP pour l'authentification. Une fois l'authentification r√©ussie aupr√®s de l'IdP, OAuth2Proxy v√©rifie le token re√ßu et, s'il est valide, redirige la requ√™te vers Nexus en ajoutant des informations d'authentification au header de la requ√™te (souvent un `Authorization: Bearer <token>`).  Cela permet √† Nexus d'identifier l'utilisateur sans avoir besoin d'une authentification directe.  L'utilisateur peut ainsi acc√©der aux ressources de Nexus uniquement si le token OAuth 2.0 est valide.\n\nLe plugin se configure g√©n√©ralement en d√©finissant l'URL de l'IdP, les identifiants de l'application enregistr√©e dans l'IdP, et les scopes n√©cessaires.  La configuration peut inclure des options avanc√©es comme la gestion des r√¥les et des autorisations.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **S√©curit√© am√©lior√©e:** D√©l√©gue l'authentification √† un syst√®me d'identit√© centralis√© et plus robuste, r√©duisant le risque d'attaques directes sur Nexus.\n* **Centralisation de l'authentification:** Gestion unique des utilisateurs et des mots de passe via l'IdP.\n* **Int√©gration avec diff√©rents IdP:** Compatible avec de nombreux fournisseurs d'identit√© populaires (Keycloak, Okta, Google, etc.).\n* **Acc√®s headless:** Permet aux outils automatis√©s (ex: scripts Maven, CI/CD) d'acc√©der √† Nexus en utilisant le token OAuth 2.0, sans intervention manuelle.\n* **Am√©lioration de l'exp√©rience utilisateur:**  Authentification unique (SSO) possible si l'IdP est d√©j√† utilis√© pour d'autres applications.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© de configuration:** La configuration initiale peut √™tre complexe, n√©cessitant une bonne compr√©hension d'OAuth 2.0 et de la configuration de l'IdP.\n* **D√©pendance √† un IdP:**  N√©cessite un IdP fonctionnel et correctement configur√©.\n* **Surco√ªt de performance:** L'ajout d'un proxy interm√©diaire peut introduire une l√©g√®re latence.  Cependant, cela est g√©n√©ralement n√©gligeable.\n* **D√©bogage:** Le d√©bogage des probl√®mes d'authentification peut √™tre difficile, n√©cessitant une analyse des logs de l'IdP et d'OAuth2Proxy.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "d3ab7db6-fa95-43cb-acc9-4f7113eadee8",
        "title": "PouchDB",
        "description": "---\nid: 11870a2a-4362-4192-bc6e-f4b4c92ff908\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nPouchDB est une base de donn√©es NoSQL JavaScript open-source qui fonctionne comme une base de donn√©es client-side, imitant l'API de CouchDB.  Elle permet de stocker des donn√©es localement dans le navigateur ou un environnement Node.js, offrant des fonctionnalit√©s de synchronisation avec une base de donn√©es distante (comme CouchDB ou Cloudant).\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nPouchDB est une base de donn√©es JavaScript orient√©e document, ce qui signifie qu'elle stocke les donn√©es sous forme de documents JSON.  Elle impl√©mente une API similaire √† celle de CouchDB, facilitant la migration entre les deux.  Le principal avantage est la capacit√© de fonctionner hors connexion.  Les donn√©es sont stock√©es localement, et une fois la connexion r√©tablie, PouchDB se synchronise avec la base de donn√©es distante en utilisant des m√©canismes de r√©plication bidirectionnelle.  Cela permet aux applications web et mobiles de fonctionner m√™me sans acc√®s √† internet, les modifications √©tant sauvegard√©es localement et synchronis√©es ult√©rieurement.\n\nPouchDB utilise un syst√®me de versionnement des documents pour g√©rer les conflits lors de la synchronisation.  Si des modifications sont effectu√©es √† la fois localement et √† distance sur le m√™me document, PouchDB utilise un algorithme pour r√©soudre les conflits et fusionner les changements.  L'utilisateur peut personnaliser la gestion des conflits.\n\n**Exemple d'utilisation (ajout d'un document):**\n\n```javascript\nconst db = new PouchDB('mydb');\n\ndb.put({\n  _id: 'mydoc',\n  name: 'Example Document'\n}).then(() => {\n  console.log('Document added successfully!');\n}).catch((err) => {\n  console.log('Error adding document:', err);\n});\n```\n\n**Exemple de synchronisation avec une base de donn√©es distante (CouchDB):**\n\n```javascript\nconst remoteCouchDB = 'http://example.com:5984/mydb';\nconst db = new PouchDB('mydb');\n\ndb.sync(remoteCouchDB, {\n  live: true,\n  retry: true\n}).on('change', (info) => {\n    console.log(\"Changes detected, replicating...\");\n}).on('paused', (err) => {\n    console.log('Replication paused.');\n}).on('error', (err) => {\n    console.error('Replication failed.', err);\n});\n\n```\n\n\n## Qu'est-ce qui est top ? üëç\n\n* **Fonctionnement hors ligne:**  La principale force de PouchDB est sa capacit√© √† fonctionner sans connexion internet.\n* **Synchronisation facile:**  La r√©plication avec une base de donn√©es distante est simple √† mettre en ≈ìuvre.\n* **API intuitive:** L'API est similaire √† celle de CouchDB, facile √† apprendre et √† utiliser.\n* **Open source et communaut√© active:**  B√©n√©ficie d'une communaut√© active et d'une documentation compl√®te.\n* **L√©ger et performant:**  PouchDB est relativement l√©ger et performant, m√™me sur des appareils mobiles.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Gestion des conflits:** Bien que PouchDB g√®re les conflits,  la r√©solution automatique peut parfois √™tre complexe et n√©cessiter une intervention manuelle.\n* **Limites de taille des donn√©es:**  Pour des applications √† tr√®s grande √©chelle avec des volumes importants de donn√©es, PouchDB peut avoir ses limites.  Il est plus adapt√© aux applications n√©cessitant une persistance locale et une synchronisation r√©guli√®re.\n* **D√©pendance √† JavaScript:**  Son utilisation est intrins√®quement li√©e √† JavaScript et ne peut pas √™tre utilis√©e directement dans d'autres langages.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "a7f557fc-7458-4115-81c0-b3b481a4b64b",
        "title": "R2DBC",
        "description": "---\nid: bfc84f55-fe42-4506-951b-7f9edd1ac060\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nR2DBC (Reactive Relational Database Connectivity) est une sp√©cification pour acc√©der de mani√®re r√©active aux bases de donn√©es relationnelles depuis Java.  Il fournit une API asynchrone et non-bloquante, contrastant avec l'approche synchrone et bloquante de JDBC.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nR2DBC d√©finit une API pour interagir avec les bases de donn√©es relationnelles en utilisant un mod√®le r√©actif.  Au lieu de bloquer le thread d'ex√©cution en attendant la r√©ponse de la base de donn√©es, R2DBC utilise des m√©canismes asynchrones, permettant au thread de continuer √† traiter d'autres t√¢ches pendant que la requ√™te est ex√©cut√©e. Cela am√©liore l'efficacit√© et les performances, surtout dans les applications √† haute concurrence.\n\nContrairement √† JDBC, qui utilise des objets `Statement`, `ResultSet`, etc., R2DBC utilise un mod√®le bas√© sur `Flux` (de la librairie Reactor) pour les requ√™tes et les r√©sultats.  Cela permet de traiter les donn√©es de mani√®re asynchrone et r√©active, en utilisant des op√©rateurs comme `map`, `filter`, `flatMap`, etc.  L'API R2DBC est plus d√©clarative que JDBC, laissant la gestion de la concurrence et de l'asynchronisme au framework.\n\nVoici un exemple simplifi√© d'utilisation de R2DBC avec Spring Data R2DBC (Note:  Ce code est simplifi√© pour illustrer le concept.  Une impl√©mentation r√©elle n√©cessiterait plus de d√©tails):\n\n```kotlin\n@Repository\ninterface UserRepository : ReactiveCrudRepository<User, Long> {\n    // M√©thodes CRUD g√©n√©r√©es automatiquement\n}\n\n//Entit√© User\ndata class User(val id: Long?, val name: String)\n\n//Dans un service\n@Service\nclass UserService(private val userRepository: UserRepository){\n    fun getAllUsers(): Flux<User> = userRepository.findAll()\n}\n```\n\nCet exemple montre comment Spring Data R2DBC simplifie l'interaction avec la base de donn√©es en fournissant une impl√©mentation de `ReactiveCrudRepository`. Les op√©rations CRUD sont effectu√©es de mani√®re r√©active et asynchrone gr√¢ce √† l'utilisation de `Flux`.  Notez qu'il est n√©cessaire de g√©rer soi-m√™me les jointures avec R2DBC, contrairement √† certains ORM qui les g√®rent automatiquement.\n\n# Qu'est-ce qui est top ? üëç\n\n* **Performances:** L'approche asynchrone et non-bloquante am√©liore consid√©rablement les performances, surtout pour les applications √† forte charge.\n* **Scalabilit√©:**  R2DBC est mieux adapt√© √† la gestion de la concurrence et permet une meilleure scalabilit√© que JDBC.\n* **Int√©gration avec Spring:** L'int√©gration avec Spring Data R2DBC simplifie l'utilisation de R2DBC et permet de b√©n√©ficier des fonctionnalit√©s de Spring.\n* **R√©activit√©:** L'utilisation de `Flux` permet un traitement r√©actif des donn√©es.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La programmation r√©active peut √™tre plus complexe que la programmation synchrone traditionnelle.  Comprendre les concepts de `Flux`, `Mono`, et les op√©rateurs r√©actifs est crucial.\n* **Maturation:**  Bien que mature, R2DBC est une technologie plus r√©cente que JDBC, et certaines bases de donn√©es et outils peuvent avoir un support moins complet que pour JDBC.\n* **Gestion des jointures:**  R2DBC ne g√®re pas les jointures automatiquement, demandant une gestion explicite dans le code, ce qui peut complexifier les requ√™tes plus sophistiqu√©es.\n* **Debugging:** Le d√©bogage de code r√©actif peut √™tre plus difficile que le d√©bogage de code synchrone.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\nJDBC, Spring Data R2DBC, Project Reactor, bases de donn√©es relationnelles, programmation r√©active.\n"
    },
    {
        "id": "e0f385b0-ed98-4b3c-a1bf-b859880071c0",
        "title": "RGAA",
        "description": "---\nid: dd5ba0ba-bc56-46d7-8c93-631e4758609a\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nLe RGAA (R√©f√©rentiel G√©n√©ral d'Accessibilit√© pour les Administrations) est un r√©f√©rentiel fran√ßais qui d√©finit les crit√®res d'accessibilit√© num√©rique pour les sites web et applications des administrations publiques. Il s'appuie sur les WCAG (Web Content Accessibility Guidelines) internationales, mais les adapte au contexte fran√ßais et fournit des crit√®res plus pr√©cis et concrets.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLe RGAA vise √† garantir que les services num√©riques publics soient accessibles √† tous, y compris les personnes handicap√©es.  Il d√©finit des crit√®res d'accessibilit√© regroup√©s en quatre principes :\n\n* **Percevable:** L'information et les composants de l'interface utilisateur doivent √™tre pr√©sent√©s aux utilisateurs de mani√®re qu'ils puissent les percevoir.  Cela inclut des aspects comme le contraste des couleurs, les alternatives textuelles aux images, la transcription des contenus audio et vid√©o, etc.\n* **Op√©rable:** L'interface utilisateur doit √™tre op√©rable.  Cela signifie que les utilisateurs doivent pouvoir utiliser l'interface avec une vari√©t√© de dispositifs d'entr√©e, comme une souris, un clavier, un √©cran tactile, etc.  Cela comprend aussi des aspects comme la navigation au clavier, l'√©vitement des pi√®ges √† souris, etc.\n* **Compr√©hensible:** L'information et le fonctionnement de l'interface utilisateur doivent √™tre compr√©hensibles.  Cela implique une r√©daction claire et concise, une navigation intuitive, l'utilisation d'un langage simple, etc.\n* **Robuste:** Le contenu doit √™tre robuste, c'est-√†-dire compatible avec un large √©ventail de technologies d'assistance et d'appareils.\n\nChaque principe est ensuite d√©clin√© en crit√®res plus sp√©cifiques, avec des niveaux de conformit√© (A, AA, AAA).  La version actuelle du RGAA est la version 4.0.  L'√©valuation de la conformit√© au RGAA se fait g√©n√©ralement via des audits, manuels ou automatis√©s, qui permettent d'identifier les points d'am√©lioration pour rendre un site web ou une application plus accessible.\n\n**Exemple concret:** Un crit√®re du RGAA pourrait √™tre \"Le texte doit avoir un contraste suffisant avec l'arri√®re-plan\".  Cela signifie que la diff√©rence de luminosit√© entre le texte et l'arri√®re-plan doit √™tre suffisamment importante pour √™tre per√ßue par les personnes malvoyantes.\n\n# Qu'est-ce qui est top ? üëç\n\n* **Cadre clair et pr√©cis:**  Le RGAA fournit des crit√®res concrets et mesurables pour l'accessibilit√©, ce qui facilite l'√©valuation et l'am√©lioration de l'accessibilit√© des sites web et applications.\n* **Adaptation au contexte fran√ßais:**  Il adapte les WCAG au contexte fran√ßais, ce qui le rend plus pertinent pour les administrations publiques fran√ßaises.\n* **Am√©lioration de l'inclusion:**  Il contribue √† am√©liorer l'inclusion num√©rique et permet √† un plus grand nombre de personnes d'acc√©der aux services en ligne.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:**  Le RGAA est un r√©f√©rentiel complexe avec de nombreux crit√®res et niveaux de conformit√©, ce qui peut rendre sa mise en ≈ìuvre difficile.\n* **Co√ªt:**  L'audit et la mise en conformit√© avec le RGAA peuvent engendrer des co√ªts importants, notamment pour les sites web complexes.\n* **√âvolution constante:**  Les technologies et les besoins des personnes handicap√©es √©voluent, ce qui n√©cessite une mise √† jour r√©guli√®re du RGAA.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n\n(Laisser vide)\n"
    },
    {
        "id": "d460347c-b86a-4170-ad92-1f2f8cf350ab",
        "title": "Resource et RxResource (Angular)",
        "description": "---\nid: 5114a4ec-5c32-4fb5-bfd6-2d475c4cbb42\n---\n# Rapidement c'est quoi‚ùì\n\n`Resource` et `RxResource` (Angular) sont des m√©canismes facilitant la gestion des appels API dans les applications Angular. Ils encapsulent la logique de requ√™te HTTP et fournissent une interface r√©active pour suivre l'√©tat de la requ√™te (chargement, succ√®s, erreur).  `RxResource` utilise RxJS pour une gestion asynchrone plus avanc√©e.\n\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\n`Resource` et `RxResource` sont des abstractions con√ßues pour simplifier l'interaction avec des API RESTful dans Angular.  Ils permettent d'√©viter la r√©p√©tition de code pour les appels HTTP courants (GET, POST, PUT, DELETE).  Au lieu d'√©crire manuellement des appels `HttpClient`, vous utilisez une instance `Resource` ou `RxResource` configur√©e avec l'URL de votre API et les m√©thodes HTTP appropri√©es.\n\n**`Resource`:**  Cette approche plus basique utilise les promesses JavaScript pour g√©rer les r√©ponses asynchrones.  Elle fournit des propri√©t√©s pour suivre l'√©tat de la requ√™te (par exemple, `isLoading`, `data`, `error`).  L'acc√®s aux donn√©es se fait via ces propri√©t√©s une fois la promesse r√©solue.\n\n**`RxResource`:**  Cette version plus sophistiqu√©e exploite les observables RxJS.  Elle offre une interface plus r√©active et plus puissante, permettant de g√©rer facilement les flux de donn√©es et les erreurs.  L'√©tat de la requ√™te (chargement, succ√®s, erreur) est √©mis sous forme d'√©v√©nements observables, permettant des mises √† jour dynamiques de l'interface utilisateur et une gestion fine des erreurs.  Ceci est particuli√®rement utile pour les requ√™tes longues ou multiples.\n\nPour les deux, la configuration se fait g√©n√©ralement via la d√©finition d'une classe qui sp√©cifie l'URL de base et les actions (GET, POST, etc.).  Ces actions sont ensuite appel√©es pour d√©clencher les requ√™tes HTTP.\n\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **R√©duction de la Boilerplate:**  R√©duction significative du code n√©cessaire pour g√©rer les appels API.\n* **Gestion centralis√©e des erreurs:**  Facilite la gestion des erreurs r√©seau et des erreurs c√¥t√© serveur.\n* **Am√©lioration de la lisibilit√© du code:**  S√©pare la logique de gestion des requ√™tes HTTP du reste du code applicatif.\n* **`RxResource` et la r√©activit√©:**  Avec `RxResource`, une int√©gration naturelle avec la programmation r√©active d'Angular et RxJS, pour une meilleure gestion des flux de donn√©es asynchrones.\n* **Testabilit√© am√©lior√©e:**  Les classes `Resource` ou `RxResource` sont plus faciles √† tester que des appels `HttpClient` directement int√©gr√©s dans les composants.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension des promesses (pour `Resource`) ou des observables RxJS (pour `RxResource`).\n* **Complexit√© potentielle:**  Pour les applications simples, l'utilisation de `Resource` ou `RxResource` peut ajouter une complexit√© inutile.\n* **D√©pendance:**  Ajoute une d√©pendance suppl√©mentaire au projet.\n* **Maintenance:**  N√©cessite une maintenance √† long terme si l'API √©volue.  Il faut adapter les d√©finitions des `Resource` ou `RxResource`.\n\n\n---\n# A quoi c'est li√© ? ü™¢\n\n"
    },
    {
        "id": "7a750faf-40c3-463b-8bab-e6e1e0be4af2",
        "title": "Rio",
        "description": "---\nid: bd8cfc04-d694-45ba-b346-084595d3ab27\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nRio est une librairie Python permettant de cr√©er des interfaces web directement en Python, sans n√©cessiter de connaissances approfondies en HTML, CSS ou JavaScript.  Elle facilite la cr√©ation d'interfaces utilisateur pour des applications et scripts Python.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nRio utilise un mod√®le d√©claratif pour construire des interfaces utilisateur.  Au lieu d'√©crire du HTML et du CSS, vous d√©crivez la structure et le style de votre page web √† l'aide de fonctions Python. Rio g√®re ensuite la conversion en HTML, CSS et JavaScript n√©cessaires pour afficher la page dans un navigateur.  Cela permet de cr√©er des applications web interactives en exploitant les capacit√©s de Python, notamment pour le traitement de donn√©es et la logique m√©tier.\n\nRio s'appuie sur des composants modulaires et r√©utilisables pour construire des interfaces complexes.  Il permet de g√©rer des √©v√©nements utilisateur (clics, soumissions de formulaires, etc.) directement depuis le code Python.  L'interaction avec le serveur (si n√©cessaire) se fait √©galement via du code Python.\n\n**Exemple (simplifi√©):**\n\n```python\nimport rio\n\napp = rio.App()\n\n@app.route(\"/\")\ndef index():\n  return rio.html.div(\"Hello, world!\")\n\napp.run()\n```\n\nCe code simple cr√©e une page web affichant \"Hello, world!\".  La fonction `index` est d√©cor√©e avec `@app.route(\"/\")` pour indiquer qu'elle g√®re la requ√™te √† la racine du site.  `rio.html.div` cr√©e un √©l√©ment HTML `<div>`.\n\nDes exemples plus complexes pourraient inclure des formulaires, des tableaux, des graphiques, et une interaction plus sophistiqu√©e avec le serveur.\n\n## Qu'est-ce qui est top ? üëç\n\n* **D√©veloppement rapide:**  La programmation en Python permet un d√©veloppement plus rapide et plus efficace que le d√©veloppement web traditionnel avec HTML, CSS et JavaScript.\n* **Int√©gration facile avec les scripts Python:** Rio s'int√®gre facilement aux applications et scripts Python existants.\n* **Mod√®le d√©claratif:** La d√©claration de l'interface utilisateur rend le code plus lisible et plus facile √† maintenir.\n* **Abstraction:** Rio masque la complexit√© sous-jacente du d√©veloppement web, permettant aux d√©veloppeurs Python de se concentrer sur la logique m√©tier.\n\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Communaut√© limit√©e:**  Compar√© √† des frameworks web populaires comme Flask ou Django, Rio a une communaut√© plus petite, ce qui peut impacter le support et la disponibilit√© des ressources.\n* **Performance potentielle:**  L'interpr√©tation Python pourrait engendrer une performance l√©g√®rement inf√©rieure √† celle d'applications web construites avec des technologies compil√©es.  Cependant, pour beaucoup d'applications, cette diff√©rence sera n√©gligeable.\n* **Flexibilit√© limit√©e (potentielle):**  Bien que Rio permette une grande partie des fonctionnalit√©s web, il pourrait manquer certaines fonctionnalit√©s tr√®s sp√©cifiques ou n√©cessiter des solutions de contournement pour des cas d'utilisation avanc√©s.\n* **D√©pendances:** Rio ajoute une d√©pendance suppl√©mentaire √† votre projet.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "7663b49c-a5f3-421b-84ef-262d66c0c6ad",
        "title": "R√©flexion (Java)",
        "description": "---\nid: 16be4a3f-fb5e-4258-b88a-d8f3bd3f5389\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nLa r√©flexion en Java est une fonctionnalit√© puissante qui permet √† un programme de manipuler ses propres structures et comportements √† l'ex√©cution.  Elle permet d'inspecter et de modifier les classes, les m√©thodes, les champs, etc., dynamiquement.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLa r√©flexion en Java s'appuie sur les classes du package `java.lang.reflect`.  Ces classes fournissent des interfaces pour interagir avec les m√©tadonn√©es des classes et des objets √† l'ex√©cution.  On peut, par exemple :\n\n* **Obtenir des informations sur une classe:**  Nom de la classe, ses interfaces impl√©ment√©es, ses constructeurs, ses m√©thodes, ses champs (variables d'instance et statiques).  Cela se fait via la classe `Class`.\n* **Cr√©er des instances de classes dynamiquement:**  Invoquer un constructeur d'une classe dont le nom n'est connu qu'√† l'ex√©cution.\n* **Invoquer des m√©thodes dynamiquement:**  Appeler une m√©thode d'un objet, m√™me si le nom de la m√©thode n'est pas connu √† la compilation.\n* **Acc√©der aux champs dynamiquement:**  Lire ou modifier la valeur d'un champ d'un objet.\n* **Cr√©er des proxies:**  G√©n√©rer dynamiquement des classes qui impl√©mentent des interfaces donn√©es, interceptant les appels de m√©thodes pour ajouter du comportement (AOP).\n\n**Exemple:**\n\n```java\nClass<?> myClass = Class.forName(\"com.example.MyClass\"); // R√©cup√®re la classe MyClass dynamiquement\nMethod myMethod = myClass.getMethod(\"myMethod\", String.class); // R√©cup√®re la m√©thode myMethod\nObject myObject = myClass.getDeclaredConstructor().newInstance(); // Cr√©e une instance de MyClass\nObject result = myMethod.invoke(myObject, \"Hello\"); // Appelle la m√©thode myMethod avec l'argument \"Hello\"\nSystem.out.println(result); // Affiche le r√©sultat de l'appel de m√©thode\n```\n\nCet exemple montre comment r√©cup√©rer une classe, une m√©thode, cr√©er une instance et invoquer la m√©thode dynamiquement.  `Class.forName()` est une m√©thode cl√© pour r√©cup√©rer une r√©f√©rence de classe √† partir d'un nom de classe (String).\n\n## Qu'est-ce qui est top ? üëç\n\n* **Flexibilit√©:** Permet de cr√©er des applications tr√®s dynamiques et configurables, adaptant leur comportement √† l'ex√©cution.\n* **Extension du code:**  Facilite la cr√©ation d'outils de d√©veloppement tels que les frameworks de test, les outils de monitoring ou les debuggers.\n* **Interop√©rabilit√©:**  Permet d'interagir avec des librairies ou des composants dont la structure n'est pas connue √† la compilation.\n* **Frameworks puissants:**  Fondamentale pour des frameworks comme Spring qui utilisent la r√©flexion pour l'injection de d√©pendances et l'AOP.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Performances:**  L'utilisation intensive de la r√©flexion peut impacter les performances, car elle n√©cessite une recherche et une manipulation dynamiques des m√©tadonn√©es.\n* **S√©curit√©:**  Une mauvaise utilisation de la r√©flexion peut exposer √† des failles de s√©curit√©, notamment en permettant l'acc√®s ou la modification non autoris√©e de donn√©es.\n* **Complexit√©:**  Le code utilisant la r√©flexion peut √™tre plus complexe √† lire, √† maintenir et √† d√©boguer que le code traditionnel.\n* **Erreurs √† l'ex√©cution:**  Les erreurs li√©es √† la r√©flexion surviennent souvent √† l'ex√©cution plut√¥t qu'√† la compilation, rendant le debugging plus difficile.\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "a4d130be-3eb5-4ee3-8991-f9ca30af1689",
        "title": "Serialisation-Deserialisation",
        "description": "---\nid: ea084ff5-b622-4420-b2ee-d8a3d6cb1ea5\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nLa s√©rialisation et la d√©s√©rialisation sont des processus qui permettent de convertir un objet en une repr√©sentation lin√©aire (g√©n√©ralement un flux de donn√©es comme un fichier, une cha√Æne de caract√®res ou un flux r√©seau) et inversement. La s√©rialisation transforme l'objet en cette repr√©sentation, tandis que la d√©s√©rialisation reconstitue l'objet √† partir de cette repr√©sentation.\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nLa s√©rialisation permet de stocker des objets complexes dans un format persistant ou de les transmettre sur un r√©seau.  Elle implique de convertir l'√©tat d'un objet, incluant ses attributs et √©ventuellement ses relations avec d'autres objets, en une s√©quence de bits.  La d√©s√©rialisation est le processus inverse : √† partir de cette s√©quence de bits, elle reconstitue l'objet dans sa forme originale, avec ses attributs et ses relations.\n\nPlusieurs formats et techniques existent pour la s√©rialisation/d√©s√©rialisation :\n\n* **Formats de donn√©es:** JSON, XML, Protocol Buffers, Avro, etc.  Chaque format a ses avantages et inconv√©nients en termes de lisibilit√©, taille des donn√©es, performance et compatibilit√©.\n* **Techniques de s√©rialisation:**  La s√©rialisation peut √™tre impl√©ment√©e de diff√©rentes mani√®res, notamment via la r√©flexion (Java utilise souvent cette m√©thode avec des biblioth√®ques comme Jackson ou Gson), ou via des techniques de g√©n√©ration de code AOT (Ahead-Of-Time) plus performantes.  La r√©flexion implique d'analyser la structure des classes au runtime, ce qui peut √™tre co√ªteux en termes de performance.  Les approches AOT g√©n√®rent du code sp√©cifique pour chaque classe, optimisant ainsi le processus de s√©rialisation/d√©s√©rialisation.\n\n**Exemple (Java avec Jackson):**\n\n```java\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class User {\n    public String name;\n    public int age;\n\n    public User(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public static void main(String[] args) throws Exception {\n        ObjectMapper mapper = new ObjectMapper();\n        User user = new User(\"John Doe\", 30);\n\n        // S√©rialisation en JSON\n        String jsonString = mapper.writeValueAsString(user);\n        System.out.println(\"JSON: \" + jsonString);\n\n        // D√©s√©rialisation √† partir de JSON\n        User user2 = mapper.readValue(jsonString, User.class);\n        System.out.println(\"Name: \" + user2.name + \", Age: \" + user2.age);\n    }\n}\n```\n\nCet exemple montre comment Jackson s√©rialise un objet `User` en JSON et le d√©s√©rialise ensuite.\n\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Persistance des donn√©es:**  Possibilit√© de sauvegarder l'√©tat d'objets dans un stockage persistant (fichiers, bases de donn√©es).\n* **Communication r√©seau:**  Transmission d'objets complexes sur un r√©seau.\n* **Interop√©rabilit√©:**  Utilisation de formats standardis√©s comme JSON ou XML pour l'√©change de donn√©es entre diff√©rents syst√®mes et langages de programmation.\n* **Approches AOT (pour certaines technologies):**  Performance significativement am√©lior√©e par rapport √† la r√©flexion.\n\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© de l'impl√©mentation:**  La conception d'un syst√®me de s√©rialisation/d√©s√©rialisation robuste et efficace peut √™tre complexe.\n* **S√©curit√©:**  Une s√©rialisation mal con√ßue peut pr√©senter des failles de s√©curit√© (par exemple, des attaques de d√©s√©rialisation).\n* **Performances (r√©flexion):**  L'utilisation de la r√©flexion peut √™tre co√ªteuse en termes de performance, surtout pour des objets complexes ou de grands volumes de donn√©es.\n* **Gestion des versions:**  La compatibilit√© entre diff√©rentes versions des sch√©mas de donn√©es peut √™tre un d√©fi.\n\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "53302f5c-252d-4a66-9511-c7a0262ad123",
        "title": "Spring Batch",
        "description": "---\nid: 2c0ef40f-9587-45c4-bef7-b2db691c9065\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nSpring Batch est un framework l√©ger, puissant et complet de traitement par lots pour Java. Il permet de d√©velopper des applications robustes et performantes pour traiter de grands volumes de donn√©es de mani√®re fiable et efficace. Il s'appuie sur des concepts de base comme la lecture, le traitement et l'√©criture de donn√©es par lots, en utilisant une approche de type pipeline.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring Batch automatise le traitement de grands volumes de donn√©es de fa√ßon fiable et efficace.  Il est con√ßu pour des applications qui requi√®rent des op√©rations r√©p√©titives et volumineuses sur les donn√©es, comme le chargement de donn√©es, la transformation de donn√©es, ou la g√©n√©ration de rapports.  Le framework structurait le processus en **Jobs**, qui sont des t√¢ches globales, divis√©s en **Steps**.  Chaque Step consiste en trois phases principales :\n\n* **Read (Lecture):**  Lit les donn√©es depuis une source (base de donn√©es, fichier plat, etc.).  Plusieurs `ItemReader` impl√©mentent des sources vari√©es, telles que `JdbcCursorItemReader` (pour les requ√™tes SQL), `FlatFileItemReader` (pour les fichiers plats), `RepositoryItemReader` (pour les repositories Spring Data).\n\n* **Process (Traitement):** Transforme les donn√©es lues. Un `ItemProcessor` effectue cette transformation.  On peut utiliser des mappers comme MapStruct pour simplifier cette √©tape.\n\n* **Write (Ecriture):** Enregistre les donn√©es trait√©es dans une destination (base de donn√©es, fichier, etc.).  Divers `ItemWriter` sont disponibles, dont `JdbcBatchItemWriter`, `FlatFileItemWriter`, et `RepositoryItemWriter` (pour les repositories Spring Data).\n\nChaque phase utilise des interfaces pour une grande flexibilit√©.  Spring Batch g√®re √©galement la gestion des erreurs, le commit/rollback des transactions, le restarting des jobs en cas d'erreur, et la surveillance de l'ex√©cution. La gestion du chunk (traitement de donn√©es par blocs) optimise les performances.\n\n**Exemple simplifi√© (sans code complet):**  Imaginons un job qui importe des donn√©es d'un fichier CSV dans une base de donn√©es.\n\n1. **Job:** \"ImporterDonn√©esCSV\"\n2. **Step:** \"ImporterDonn√©es\"\n    * **Read:** `FlatFileItemReader` lit les lignes du fichier CSV.\n    * **Process:** `ItemProcessor` transforme chaque ligne en objet Java.\n    * **Write:** `JdbcBatchItemWriter` ins√®re les objets Java dans la base de donn√©es.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Fiabilit√©:** Gestion robuste des erreurs et reprise sur erreur.\n* **Performance:** Traitement par lots optimis√©, gestion des transactions et du chunking.\n* **Flexibilit√©:** Large gamme de lecteurs, processeurs et √©crivains pour diff√©rentes sources et destinations de donn√©es.\n* **Int√©gration Spring:** S'int√®gre parfaitement avec d'autres composants Spring.\n* **D√©bogage et surveillance:** Facilite le suivi et le d√©bogage des jobs.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** Peut √™tre complexe √† mettre en ≈ìuvre pour des t√¢ches simples. La courbe d'apprentissage est assez raide.\n* **Configuration XML (ancienne version):** Bien que la configuration bas√©e sur annotations soit privil√©gi√©e, la configuration XML peut √™tre complexe √† comprendre.\n* **D√©pendances:** N√©cessite plusieurs d√©pendances Spring.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "67a33c81-2bce-4911-ae4d-3080d557425e",
        "title": "Spring Cloud Open Feign",
        "description": "---\nid: a64c1da0-4ff7-4acc-b305-83aeff5d5079\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nSpring Cloud Open Feign est une librairie Java qui simplifie la cr√©ation de clients HTTP pour consommer des API REST.  Elle s'int√®gre parfaitement √† l'√©cosyst√®me Spring Cloud et permet de d√©clarer des interfaces Java qui sont automatiquement traduites en clients HTTP, √©liminant la n√©cessit√© d'√©crire du code boilerplate pour les appels REST.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring Cloud Open Feign repose sur la librairie Feign, mais l'enrichit avec des fonctionnalit√©s sp√©cifiques √† Spring Cloud, notamment l'int√©gration avec Ribbon pour le load balancing et Hystrix pour la gestion des erreurs et la tol√©rance aux pannes.  Au lieu d'√©crire du code pour chaque appel REST (par exemple, avec RestTemplate), on d√©finit une interface Java annot√©e avec des annotations Feign (comme `@GetMapping`, `@PostMapping`, etc.).  Feign se charge ensuite de cr√©er un proxy qui impl√©mente cette interface et g√®re les appels HTTP sous-jacents.\n\n**Exemple:**\n\nImaginons une API REST qui fournit des informations sur les utilisateurs.  On pourrait d√©finir une interface Feign comme suit :\n\n```java\n@FeignClient(name = \"user-service\")\npublic interface UserService {\n\n    @GetMapping(\"/users/{id}\")\n    User getUser(@PathVariable(\"id\") Long id);\n\n    @PostMapping(\"/users\")\n    User createUser(@RequestBody User user);\n}\n```\n\n`@FeignClient(\"user-service\")` indique que cette interface est un client pour un service nomm√© \"user-service\".  Feign se charge ensuite de trouver ce service (g√©n√©ralement via un registre de services comme Eureka) et de cr√©er un proxy qui impl√©mente `UserService`.  On peut ensuite injecter ce proxy dans d'autres classes et l'utiliser comme n'importe quelle autre classe Java :\n\n```java\n@Autowired\nprivate UserService userService;\n\n// ...\n\nUser user = userService.getUser(1L);\n```\n\nSpring Cloud Open Feign g√®re automatiquement les d√©tails de l'appel HTTP, y compris la construction de l'URL, la gestion des en-t√™tes HTTP, la s√©rialisation/d√©s√©rialisation des donn√©es JSON, et le load balancing si plusieurs instances du \"user-service\" sont disponibles.\n\n# Qu'est-ce qui est top ? üëç\n\n* **Simplicit√© et lisibilit√©:**  Le code est beaucoup plus propre et facile √† lire que lorsqu'on utilise `RestTemplate` directement.\n* **D√©claratif:** On d√©finit les appels REST de mani√®re d√©clarative, ce qui rend le code plus maintenable et moins sujet aux erreurs.\n* **Int√©gration Spring Cloud:** S'int√®gre parfaitement avec d'autres composants Spring Cloud comme Ribbon et Hystrix.\n* **Tests facilit√©s:**  Les interfaces Feign sont facilement testables avec des mocks.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension de base de Feign et des annotations Spring.\n* **D√©bogage:**  Le d√©bogage peut √™tre plus difficile que lorsqu'on utilise `RestTemplate` directement, car la logique HTTP est cach√©e derri√®re le proxy Feign.\n* **Complexit√© pour des cas d'utilisation avanc√©s:** Pour des sc√©narios HTTP complexes (gestion de plusieurs types de r√©ponses,  gestion fine des erreurs HTTP non g√©r√©s par Hystrix, ...), il peut √™tre n√©cessaire de recourir √† des configurations et des intercepteurs plus avanc√©s.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n\n(Laisser vide)\n"
    },
    {
        "id": "06c3248f-0cd0-4455-806d-fbc11f2130ae",
        "title": "Spring Cloud Square",
        "description": "---\nid: fba146b1-f075-4072-9323-b9af98af76bd\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nSpring Cloud Square est une biblioth√®que Java open-source qui simplifie la cr√©ation et la gestion de microservices bas√©s sur Spring Boot.  Elle utilise un registre de services (comme Eureka ou Consul) pour permettre aux services de se d√©couvrir et de communiquer entre eux.  Elle s'appuie sur le pattern \"sidecar\" pour injecter des fonctionnalit√©s suppl√©mentaires sans modifier le code des microservices.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nSpring Cloud Square n'est pas une biblioth√®que existante √† ma connaissance. Le lien fourni pointe vers un article de blog Spring de 2021 qui introduit *Spring Cloud 2021*.  Il n'y a pas de mention de \"Spring Cloud Square\".  L'article discute de nouvelles fonctionnalit√©s et am√©liorations dans Spring Cloud, dont l'am√©lioration de la gestion des microservices.  Il n'y a pas de nouvelle biblioth√®que sp√©cifique nomm√©e \"Spring Cloud Square\".\n\nPour clarifier, Spring Cloud (sans \"Square\") fournit des outils pour construire des applications distribu√©es bas√©es sur des microservices.  Ces outils incluent :\n\n* **D√©couverte de services:**  Permet aux microservices de se trouver les uns les autres via un serveur de registre.\n* **Gestion de la configuration:**  Centralise la gestion des param√®tres de configuration.\n* **Gestion de circuit breakers:**  Prot√®ge les applications contre les pannes de services d√©pendants.\n* **Routage intelligent:**  Distribue le trafic entre les instances d'un service.\n\n\nIl est possible que \"Spring Cloud Square\" soit un nom interne, un projet non-officiel, ou une interpr√©tation erron√©e.  Sans plus d'informations, il est impossible de fournir une description pr√©cise de son fonctionnement.  L'int√©gration avec OkHttp et Retrofit est √©galement impossible √† d√©tailler sans une d√©finition claire de \"Spring Cloud Square\".\n\n## Qu'est-ce qui est top ? üëç\n\n(Impossible √† r√©pondre sans une description claire de \"Spring Cloud Square\")\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n(Impossible √† r√©pondre sans une description claire de \"Spring Cloud Square\")\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Si \"Spring Cloud Square\" existait, il serait probablement li√© √† d'autres projets Spring Cloud comme Spring Boot, Eureka, Consul, Ribbon, Hystrix, etc.)\n"
    },
    {
        "id": "c2ae4899-2bd6-4b4b-ae74-f143bf33dfa6",
        "title": "Spring Cloud Stream",
        "description": "---\nid: f64ebe55-d2d7-479a-b490-91a369e08354\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nSpring Cloud Stream est un framework bas√© sur Spring Boot qui simplifie la cr√©ation d'applications microservices qui communiquent de mani√®re asynchrone via des messages.  Il fournit une abstraction au-dessus de diff√©rentes technologies de messagerie comme Kafka, RabbitMQ, etc., permettant de changer de technologie sans modifier le code applicatif.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nSpring Cloud Stream fournit un mod√®le de programmation bas√© sur des flux de donn√©es (streams) et des liaisons (bindings).  Les applications utilisent des interfaces `@Input` et `@Output` pour d√©finir des points d'entr√©e et de sortie pour les messages.  Spring Cloud Stream g√®re la configuration et la connexion √† la technologie de messagerie sous-jacente.\n\nLe framework s'appuie sur les concepts suivants:\n\n* **Bindings:**  Des liens entre l'application et le broker de messages. Ils d√©finissent comment les messages sont envoy√©s et re√ßus.  On peut les configurer √† l'aide de propri√©t√©s.\n* **Destinations:**  Des files d'attente ou des topics (selon la technologie de messagerie) o√π les messages sont envoy√©s et re√ßus.  Le nom de la destination est configur√© via les propri√©t√©s.\n* **Processors:** Composants qui consomment les messages d'une destination et les envoient vers une autre.\n* **Sources:** Composants qui envoient des messages vers une destination.\n* **Sinks:** Composants qui consomment des messages d'une destination.\n\n**Exemple (Kafka):**\n\n```java\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.annotation.StreamListener;\nimport org.springframework.cloud.stream.messaging.Sink;\nimport org.springframework.messaging.Message;\n\n@EnableBinding(Sink.class) // Utilise l'interface Sink fournie par Spring Cloud Stream\npublic class MessageConsumer {\n\n    @StreamListener(Sink.INPUT) // √âcoute les messages sur la destination \"input\"\n    public void receive(Message<String> message) {\n        String payload = message.getPayload();\n        System.out.println(\"Received message: \" + payload);\n        // Traitement du message...\n    }\n}\n```\n\nCe code d√©finit un consommateur de messages qui √©coute sur la destination `input` (d√©finie par d√©faut par `Sink`).  La configuration de Kafka sera g√©r√©e automatiquement par Spring Cloud Stream via les propri√©t√©s d'application.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Abstraction:**  Simplifie l'interaction avec les brokers de messages. Le changement de technologie est facile gr√¢ce √† la configuration.\n* **Simplicit√©:**  Mod√®le de programmation d√©claratif et facile √† utiliser gr√¢ce aux annotations.\n* **Int√©gration Spring Boot:**  Int√©gration transparente avec l'√©cosyst√®me Spring.\n* **√âvolutivit√©:**  Con√ßu pour des applications distribu√©es et √©volutives.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© (potentielle):** La configuration peut devenir complexe pour des sc√©narios avanc√©s.\n* **D√©pendances:**  N√©cessite des d√©pendances suppl√©mentaires pour les diff√©rentes technologies de messagerie.\n* **Courbe d'apprentissage:**  N√©cessite une compr√©hension de base des concepts de messagerie asynchrone.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "14875961-7083-4170-b55a-5fcc5c10d848",
        "title": "Spring_ApplicationEvent",
        "description": "---\nid: 9d4a3b37-f1cd-4e24-a3ea-7c477784e113\n---\n# Spring ApplicationEvent\n\n---\n\n# **Rapidement, c'est quoi ? ‚ùì**\n\nUn `ApplicationEvent` dans Spring est un m√©canisme permettant de publier et de g√©rer des √©v√©nements au sein d'une application.  Il permet de d√©-coupler diff√©rentes parties du code et de r√©agir √† des √©v√©nements sp√©cifiques sans avoir besoin d'une connaissance directe des autres composants.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\n`ApplicationEvent` est une classe abstraite dans Spring qui sert de base pour tous les √©v√©nements de l'application.  Pour cr√©er un √©v√©nement personnalis√©, on h√©rite de cette classe et on fournit les donn√©es n√©cessaires.  Spring fournit un m√©canisme d'√©coute (listeners) bas√© sur le pattern \"Observer\".  Lorsqu'un √©v√©nement est publi√© (`ApplicationEventPublisher.publishEvent()`), tous les listeners enregistr√©s qui s'int√©ressent √† ce type d'√©v√©nement sont notifi√©s et peuvent y r√©agir.\n\nLe fonctionnement repose sur :\n\n* **`ApplicationEvent`:**  Classe abstraite repr√©sentant un √©v√©nement.  Contient un champ `source` qui repr√©sente l'objet qui a d√©clench√© l'√©v√©nement.\n* **`ApplicationEventPublisher`:** Interface permettant de publier des √©v√©nements.  L'impl√©mentation la plus courante est `ApplicationContext`.\n* **`ApplicationListener<T extends ApplicationEvent>`:** Interface pour les listeners.  On impl√©mente la m√©thode `onApplicationEvent(T event)` qui sera appel√©e lorsque l'√©v√©nement est publi√©.  Le param√®tre `T` sp√©cifie le type d'√©v√©nement auquel le listener s'abonne.\n* **`@EventListener` annotation:** An annotation based approach that simplifies the definition of listeners. This approach is preferred over explicitly implementing `ApplicationListener`.\n\n**Exemple concret avec annotation `@EventListener`:**\n\n```java\nimport org.springframework.context.event.EventListener;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class MyEventListener {\n\n    @EventListener\n    public void handleMyEvent(MyCustomEvent event) {\n        System.out.println(\"MyCustomEvent received: \" + event.getMessage());\n    }\n}\n\n// D√©finition d'un √©v√©nement personnalis√©\npublic class MyCustomEvent extends ApplicationEvent {\n    private final String message;\n\n    public MyCustomEvent(Object source, String message) {\n        super(source);\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\n\n//Publication de l'√©v√®nement :\n// ApplicationContext applicationContext;\n// applicationContext.publishEvent(new MyCustomEvent(this, \"Hello from event\"));\n```\n\nCet exemple montre comment cr√©er un listener qui √©coute un √©v√©nement personnalis√© (`MyCustomEvent`).  L'annotation `@EventListener` indique √† Spring qu'il faut l'enregistrer comme listener pour ce type d'√©v√©nement.\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **D√©couplage:**  Permet de d√©-coupler les diff√©rents composants de l'application.  Les √©metteurs d'√©v√©nements n'ont pas besoin de conna√Ætre les listeners.\n* **Flexibilit√©:**  Facile √† √©tendre et √† adapter √† de nouveaux types d'√©v√©nements.\n* **Simplicit√©:** L'utilisation de l'annotation `@EventListener` rend la d√©claration des listeners tr√®s concise.\n* **Asynchrone (avec conditions):**  L'utilisation de `@Async` sur la m√©thode de l'√©coute permet un traitement asynchrone.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√© potentielle:**  Pour des applications tr√®s complexes avec de nombreux √©v√©nements et listeners, la gestion peut devenir difficile.\n* **D√©bogage:**  Le d√©bogage d'√©v√©nements peut √™tre complexe si les listeners ne sont pas correctement configur√©s.\n* **Ordre de traitement non garanti:** Le traitement des √©v√©nements par les listeners n'est pas garanti dans un ordre pr√©cis, sauf si une strat√©gie particuli√®re est mise en place.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "40cef7bb-7d89-483d-91f3-6beec18bfd04",
        "title": "Streamlit",
        "description": "---\nid: 43c514bb-6740-4553-bb6a-8a2186187deb\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nStreamlit est une librairie Python open-source qui permet de cr√©er rapidement et facilement des applications web interactives pour visualiser et partager des donn√©es.  Elle simplifie le processus de d√©veloppement en r√©duisant le besoin de connaissances approfondies en d√©veloppement web frontal.\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nStreamlit fournit un framework permettant de construire des applications web √† partir de code Python.  L'interface utilisateur est g√©n√©r√©e automatiquement √† partir du code Python, qui est ex√©cut√© de mani√®re incr√©mentale.  Chaque modification dans le script Python est instantan√©ment refl√©t√©e dans l'application web, permettant un d√©veloppement it√©ratif rapide.\n\nStreamlit utilise des d√©corateurs pour d√©finir les diff√©rents composants de l'application (ex: `@st.cache_data` pour le cache, `@st.cache_resource` pour les ressources, etc.).  Il offre une large gamme de widgets interactifs (boutons, curseurs, s√©lecteurs, etc.) pour interagir avec les donn√©es et des fonctions pour afficher des donn√©es sous diff√©rentes formes (graphiques, tableaux, cartes, etc.) via des librairies comme Matplotlib, Seaborn, Plotly, etc.\n\nVoici un exemple simple :\n\n```python\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\n\nst.title(\"Mon Application Streamlit\")\n\n# G√©n√©rer des donn√©es al√©atoires\ndata = np.random.randn(20, 3)\ndf = pd.DataFrame(data, columns=['A', 'B', 'C'])\n\n# Afficher le dataframe\nst.dataframe(df)\n\n# Afficher un graphique\nst.line_chart(df)\n\n# Ajouter un curseur\nx = st.slider('S√©lectionner une valeur', 0, 100, 50)\nst.write(f\"La valeur s√©lectionn√©e est : {x}\")\n```\n\nCe code cr√©e une application Streamlit simple avec un titre, un tableau de donn√©es, un graphique lin√©aire et un curseur interactif.\n\n\n# Qu'est-ce qui est top ? üëç\n\n* **Rapidit√© de d√©veloppement:** Streamlit permet de cr√©er des applications web fonctionnelles tr√®s rapidement, m√™me sans exp√©rience en d√©veloppement web.\n* **Facilit√© d'utilisation:** La syntaxe est intuitive et simple √† apprendre pour les utilisateurs Python.\n* **Mise √† jour en temps r√©el:** Les modifications de code sont instantan√©ment refl√©t√©es dans l'application web.\n* **Int√©gration avec les librairies de visualisation de donn√©es:** Streamlit s'int√®gre facilement avec des librairies populaires comme Matplotlib, Seaborn, Plotly et Altair.\n* **Partage facile:**  Le d√©ploiement et le partage d'applications sont simplifi√©s gr√¢ce √† Streamlit Cloud.\n\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Moins flexible que les frameworks web complets:** Pour des applications web complexes et personnalis√©es, Streamlit peut avoir des limites par rapport √† des frameworks comme React, Angular ou Vue.js.\n* **Performances potentielles:**  Pour les applications traitant des ensembles de donn√©es tr√®s volumineux, les performances peuvent √™tre un probl√®me. L'utilisation de `@st.cache_data` ou de techniques d'optimisation est alors n√©cessaire.\n* **D√©bogage:** Le d√©bogage peut √™tre plus difficile que dans des frameworks web traditionnels car le code est ex√©cut√© de mani√®re incr√©mentale.\n* **S√©curit√©:** Comme pour toute application web, il faut prendre des pr√©cautions pour s√©curiser l'application, surtout si elle est expos√©e publiquement.\n\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "9c6f2d70-5161-4aff-bcc4-a4e7ff073819",
        "title": "Tanstack",
        "description": "---\nid: 721dcca9-837e-464d-be3d-d7676e23332b\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nTanstack est une collection de biblioth√®ques JavaScript open-source de haute qualit√©, principalement ax√©es sur la cr√©ation d'interfaces utilisateur performantes et robustes.  Elle est connue pour ses performances exceptionnelles, sa facilit√© d'utilisation et son approche ax√©e sur les d√©veloppeurs.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nTanstack n'est pas une seule biblioth√®que, mais plut√¥t un √©cosyst√®me de projets interconnect√©s, dont les plus connus sont :\n\n* **`@tanstack/react-query`:**  Une biblioth√®que pour g√©rer facilement l'√©tat de l'application, notamment la r√©cup√©ration et la mise √† jour des donn√©es provenant d'API. Elle g√®re la mise en cache, la pagination, l'optimisation des requ√™tes, et la gestion des erreurs de mani√®re transparente.  Elle permet de simplifier consid√©rablement le d√©veloppement d'applications qui interagissent avec des sources de donn√©es externes.\n\n* **`@tanstack/react-table`:** Une biblioth√®que pour cr√©er des tableaux de donn√©es interactifs et hautement personnalisables. Elle offre des fonctionnalit√©s avanc√©es de tri, de filtrage, de pagination et d'√©dition, tout en maintenant des performances √©lev√©es, m√™me avec des ensembles de donn√©es volumineux.\n\n* **`@tanstack/virtual`:**  Une solution pour le rendu virtuel de listes et de tableaux, permettant de g√©rer efficacement de tr√®s grands ensembles de donn√©es sans compromettre les performances.  Elle est souvent utilis√©e en conjonction avec `react-table`.\n\n* **`@tanstack/router`:** Un routeur client pour React offrant des performances exceptionnelles et une grande flexibilit√©. Il se caract√©rise par son approche d√©clarative et sa capacit√© √† g√©rer efficacement les transitions et la navigation dans une application complexe.\n\n\nCes biblioth√®ques partagent une philosophie commune de performance, de simplicit√© et d'extensibilit√©. Elles sont con√ßues pour √™tre utilis√©es ensemble, mais peuvent √©galement fonctionner ind√©pendamment.  L'utilisation de TypeScript est omnipr√©sente dans l'√©cosyst√®me Tanstack, ce qui contribue √† la robustesse et √† la maintenabilit√© du code.\n\n\n**Exemple (react-query):**\n\n```javascript\nimport { useQuery } from '@tanstack/react-query';\n\nfunction MyComponent() {\n  const { data, isLoading, error } = useQuery(['todos'], () =>\n    fetch('/api/todos').then((res) => res.json())\n  );\n\n  if (isLoading) return 'Loading...';\n  if (error) return 'Error: ' + error.message;\n\n  return (\n    <ul>\n      {data.map((todo) => (\n        <li key={todo.id}>{todo.text}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Performances exceptionnelles:** Tanstack est r√©put√© pour sa vitesse et son efficacit√©, particuli√®rement pour les applications √† grande √©chelle et celles qui manipulent de grands ensembles de donn√©es.\n* **Facilit√© d'utilisation:** Les API sont g√©n√©ralement intuitives et bien document√©es, ce qui facilite l'apprentissage et l'int√©gration.\n* **Extensibilit√©:** Les biblioth√®ques sont con√ßues pour √™tre facilement personnalis√©es et √©tendues pour r√©pondre aux besoins sp√©cifiques des applications.\n* **Bonne communaut√© et support:**  Une communaut√© active et un support efficace contribuent √† la r√©solution rapide des probl√®mes et √† l'am√©lioration continue des biblioth√®ques.\n* **TypeScript:** L'utilisation intensive de TypeScript am√©liore la qualit√© du code et r√©duit les erreurs.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage (l√©g√®rement plus raide pour certains):** Bien que g√©n√©ralement faciles √† utiliser, certaines fonctionnalit√©s plus avanc√©es de `react-table` ou de `react-query` peuvent n√©cessiter un peu plus d'apprentissage.\n* **√âcosyst√®me sp√©cifique √† React (principalement):** Bien que certaines biblioth√®ques aient des adaptations pour d'autres frameworks, l'√©cosyst√®me Tanstack est principalement centr√© sur React.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "c8e1bc04-e275-4998-8f37-1250113c36a0",
        "title": "Terragrunt",
        "description": "---\nid: 7d944ee8-6e62-4068-a425-0eae01d821c8\n---\n## Rapidement, c'est quoi ? ‚ùì\n\nTerragrunt est un outil open-source qui √©tend Terraform pour g√©rer des infrastructures complexes et r√©p√©titives.  Il simplifie le d√©ploiement et la gestion de plusieurs environnements Terraform en fournissant des fonctionnalit√©s de modularit√©, de r√©utilisation de code et de gestion de configuration plus avanc√©es que Terraform seul.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nTerragrunt n'est pas un remplacement de Terraform, mais un wrapper autour de lui. Il ajoute des fonctionnalit√©s pour :\n\n* **R√©utilisation de code:**  Permet de cr√©er des modules r√©utilisables et de les appliquer √† diff√©rents endroits, √©vitant la duplication de code.  Cela se fait par l'inclusion de modules dans un r√©pertoire centralis√© et leur inclusion dans plusieurs projets.\n* **Gestion de configurations multiples:** Facilite la gestion d'environnements distincts (d√©veloppement, staging, production) en utilisant des configurations distinctes avec des variables appropri√©es pour chaque environnement.\n* **Gestion des d√©pendances:**  Permet de d√©finir et de g√©rer les d√©pendances entre diff√©rents blocs Terraform, assurant que les ressources sont cr√©√©es dans l'ordre correct.\n* **Inclusion de fichiers de configuration externes:**  Permet d'externaliser des parties de la configuration dans des fichiers s√©par√©s, am√©liorant la lisibilit√© et la maintenabilit√©.\n* **Gestion des secrets:**  Int√®gre plus facilement la gestion des secrets en permettant de les importer depuis des sources externes.\n\nTerragrunt utilise des fichiers `.hcl` (HashiCorp Configuration Language) pour d√©finir ses configurations.  Un fichier `terragrunt.hcl` est g√©n√©ralement plac√© √† la racine de chaque projet Terraform. Ce fichier sp√©cifie les param√®tres de configuration de Terragrunt, comme les variables, les modules √† inclure et les options d'ex√©cution.\n\n**Exemple de `terragrunt.hcl`:**\n\n```hcl\nterraform {\n  source = \"github.com/gruntwork-io/terragrunt-example-aws-ecs\"\n}\n\n# Cette ligne inclut une configuration externe\ninclude {\n  path = \"config.hcl\"\n}\n\nlocals {\n  environment = \"dev\"\n}\n```\n\nTerragrunt ex√©cute ensuite Terraform en arri√®re-plan, utilisant les configurations d√©finies dans le fichier `terragrunt.hcl` et les fichiers Terraform standard.\n\n## Qu'est-ce qui est top ? üëç\n\n* **Modularit√© et R√©utilisation du Code:**  Am√©liore consid√©rablement la maintenabilit√© et la coh√©rence des infrastructures Terraform.\n* **Gestion simplifi√©e des environnements multiples:**  Facilite le d√©ploiement dans plusieurs environnements avec des configurations sp√©cifiques √† chaque environnement.\n* **Am√©lioration de la collaboration:**  Permet une meilleure organisation et collaboration pour les √©quipes travaillant sur de grands projets Terraform.\n* **Gestion des d√©pendances:**  Assure l'ex√©cution des ressources dans l'ordre correct, ce qui est crucial pour √©viter les erreurs.\n* **Int√©gration ais√©e avec les pipelines CI/CD:**  Peut √™tre facilement int√©gr√© dans des pipelines CI/CD pour automatiser les d√©ploiements.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Courbe d'apprentissage:**  N√©cessite d'apprendre une nouvelle couche d'abstraction au-dessus de Terraform.\n* **Complexit√© additionnelle:**  Pour les projets Terraform simples, l'ajout de Terragrunt peut ajouter une complexit√© inutile.\n* **D√©pendance √† un autre outil:**  Ajoute une d√©pendance √† un autre outil, ce qui peut complexifier le processus de maintenance.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "75b5181a-1176-4e8a-b37e-8e2b57659aaa",
        "title": "TinyDb",
        "description": "---\nid: b7cee06e-93fe-4f42-b117-225f172d8611\n---\n## **Rapidement, c'est quoi ? ‚ùì**\n\nTinyDB est une petite base de donn√©es NoSQL orient√©e document pour Python.  Elle stocke les donn√©es dans un simple fichier JSON, ce qui la rend facile √† utiliser et √† int√©grer dans des projets Python.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nTinyDB est une base de donn√©es embarqu√©e, ce qui signifie qu'elle ne n√©cessite pas de serveur s√©par√©. Elle utilise un fichier JSON pour stocker les donn√©es, ce qui facilite son utilisation et son d√©ploiement.  Elle supporte les op√©rations CRUD (Cr√©er, Lire, Mettre √† jour, Supprimer) sur des documents JSON.  Contrairement aux bases de donn√©es relationnelles, TinyDB ne repose pas sur un sch√©ma fixe ; vous pouvez stocker des documents JSON de structures diff√©rentes dans la m√™me collection.\n\nTinyDB offre des fonctionnalit√©s de requ√™te puissantes via une API intuitive. Vous pouvez effectuer des recherches sur des champs sp√©cifiques, utiliser des op√©rateurs de comparaison (>, <, >=, <=, ==, !=), et combiner plusieurs crit√®res de recherche.\n\n**Exemple:**\n\n```python\nfrom tinydb import TinyDB, Query\n\n# Cr√©er une instance de TinyDB (cr√©e le fichier si inexistant)\ndb = TinyDB('mydb.json')\n\n# Cr√©er une table (collection)\ntable = db.table('users')\n\n# Ins√©rer des donn√©es\ntable.insert({'name': 'Alice', 'age': 30})\ntable.insert({'name': 'Bob', 'age': 25})\n\n# Requ√™te: trouver un utilisateur avec l'age > 25\nUser = Query()\nresult = table.search(User.age > 25)\nprint(result)\n\n# Mettre √† jour un document\ntable.update({'age': 31}, User.name == 'Alice')\n\n# Supprimer un document\ntable.remove(User.name == 'Bob')\n\n# Fermer la connection\ndb.close()\n```\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Simplicit√©:**  Extr√™mement facile √† utiliser et √† apprendre, id√©ale pour les petits projets ou les prototypes.\n* **Lightweight:**  N'a pas besoin d'un serveur, ce qui la rend portable et facile √† d√©ployer.\n* **Int√©gration facile avec Python:** S'int√®gre parfaitement dans les applications Python.\n* **Stockage persistant:**  Les donn√©es sont persist√©es dans un fichier JSON, facile √† sauvegarder et √† restaurer.\n* **API intuitive:** Les requ√™tes sont faciles √† √©crire et √† comprendre.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Performance:**  Peut devenir lente avec de tr√®s grandes quantit√©s de donn√©es car elle est bas√©e sur un fichier JSON.  Non adapt√©e aux applications haute performance ou √† forte charge.\n* **Fonctionnalit√©s limit√©es:**  Ne propose pas toutes les fonctionnalit√©s d'une base de donn√©es NoSQL compl√®te (par exemple, indexation complexe, transactions atomiques robustes).\n* **Scalabilit√©:**  Difficult√© √† g√©rer la croissance importante des donn√©es et des utilisateurs.  Non adapt√©e aux applications distribu√©es.\n* **S√©curit√©:**  La s√©curit√© d√©pend de la s√©curit√© du syst√®me de fichiers.  Pas de m√©canismes de s√©curit√© int√©gr√©s sophistiqu√©s.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "448d0047-a90c-4db7-b45a-835e4bad9237",
        "title": "Uv",
        "description": "---\nid: c1b3650e-bf9c-41f9-9ec6-bde23e8c5732\n---\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nUv est un outil en ligne de commande qui g√®re les d√©pendances des projets Python.  Contrairement √† pip, qui est √©crit en Python, Uv est impl√©ment√© en Rust, ce qui lui conf√®re une vitesse d'ex√©cution et une robustesse accrues. Il utilise un syst√®me de r√©solution de d√©pendances pour identifier et installer les packages n√©cessaires, en tenant compte des versions et des conflits possibles.  Il g√®re √©galement la cr√©ation d'environnements virtuels isol√©s pour chaque projet, permettant ainsi une meilleure gestion des d√©pendances sp√©cifiques √† chaque projet.  L'utilisation d'Uv se fait g√©n√©ralement via des fichiers de configuration (comme `pyproject.toml`), qui sp√©cifient les d√©pendances du projet.  Uv lit ces fichiers, t√©l√©charge les paquets depuis des r√©f√©rentiels (comme PyPI), et les installe dans l'environnement virtuel appropri√©.\n\n\n**Exemple d'utilisation (hypoth√©tique):**\n\nSupposons un `pyproject.toml` contenant :\n\n```toml\n[tool.uv.dependencies]\nrequests = \"2.28.2\"\nnumpy = \">=1.24.0\"\n```\n\nLa commande `uv install` analyserait ce fichier, t√©l√©chargerait `requests` version 2.28.2 et une version compatible de `numpy` (au moins 1.24.0), et les installerait dans l'environnement virtuel actif.\n\n\n---\n\n# Qu'est-ce qui est top ? üëç\n\n* **Rapidit√©:** √âtant √©crit en Rust, Uv est potentiellement beaucoup plus rapide que pip pour l'installation et la r√©solution de d√©pendances.\n* **Fiabilit√©:** Rust offre une meilleure gestion des erreurs et une s√©curit√© m√©moire accrue par rapport √† Python, ce qui peut rendre Uv plus robuste et moins sujet aux plantages.\n* **Gestion des d√©pendances am√©lior√©e:**  Uv pourrait offrir des fonctionnalit√©s de gestion des d√©pendances plus avanc√©es (bien que cela d√©pende de son impl√©mentation).\n* **Int√©gration avec `pyproject.toml`:** L'utilisation de `pyproject.toml` est une pratique courante et permet une meilleure gestion du projet.\n\n\n---\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Maturit√©:**  En tant que nouvel outil, Uv pourrait manquer de fonctionnalit√©s ou de stabilit√© par rapport √† un outil mature comme pip.\n* **Adoption:**  Le manque d'adoption pourrait limiter la communaut√© de soutien et la disponibilit√© des ressources.\n* **Compatibilit√©:** Il pourrait exister des incompatibilit√©s avec certains packages ou outils existants.\n* **D√©pendances:**  Uv lui-m√™me a des d√©pendances, ce qui peut introduire une complexit√© suppl√©mentaire.\n\n\n---\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "e8deee3f-007b-48f4-a9de-78ab0e076b6d",
        "title": "WCAG",
        "description": "---\nid: f10ac51f-8930-4fe5-81f1-99355f3e8d4d\n---\n## **Rapidement, c'est quoi ? ‚ùì**\n\nLes WCAG (Web Content Accessibility Guidelines) sont un ensemble de lignes directrices internationales pour rendre les sites web et le contenu web accessibles √† tous, y compris les personnes handicap√©es.  Elles visent √† assurer que le web soit utilisable par le plus grand nombre possible de personnes, ind√©pendamment de leurs capacit√©s.\n\n---\n\n# Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nLes WCAG d√©finissent des crit√®res de r√©ussite pour l'accessibilit√© web, regroup√©s en quatre principes fondamentaux :\n\n* **Percevable (Perceivable):**  L'information et les composants de l'interface utilisateur doivent √™tre pr√©sent√©s aux utilisateurs de mani√®re qu'ils puissent les percevoir.  Cela inclut des crit√®res sur le texte alternatif pour les images, les l√©gendes pour les vid√©os, le contraste des couleurs, etc.\n\n* **Op√©rable (Operable):** L'interface utilisateur doit √™tre op√©rable.  Cela signifie que les utilisateurs doivent pouvoir utiliser l'interface utilisateur.  Des crit√®res concernent la navigation au clavier, le temps de saisie, les saisies inappropri√©es, etc.\n\n* **Compr√©hensible (Understandable):** L'information et l'utilisation de l'interface utilisateur doivent √™tre compr√©hensibles.  Cela implique des crit√®res sur la lisibilit√©, la pr√©visibilit√© et la coh√©rence du site.\n\n* **Robuste (Robust):** Le contenu doit √™tre robuste, c'est-√†-dire compatible avec une large gamme de technologies d'assistance.\n\nChaque principe est d√©clin√© en plusieurs crit√®res de r√©ussite, class√©s par niveaux de s√©v√©rit√© (A, AA, AAA).  Le niveau AA est g√©n√©ralement consid√©r√© comme le minimum pour une bonne accessibilit√©.\n\n**Exemple concret :** Une image d'un chat sans texte alternatif (\"alt text\") viole le principe de perceptibilit√©. Un utilisateur utilisant un lecteur d'√©cran ne pourra pas comprendre ce que repr√©sente l'image.  L'ajout d'un texte alternatif (\"alt text\" = \"Un chat mignon\") rend l'image accessible.\n\n**Exemple de code (HTML) illustrant un bon contraste:**\n\n```html\n<p style=\"color: white; background-color: #000080;\">Ce texte a un bon contraste.</p>\n```\n\n```html\n<p style=\"color: black; background-color: #FFFFE0;\">Ce texte a un contraste insuffisant</p>\n```\n\nL'utilisation de v√©rificateurs d'accessibilit√© (outils automatis√©s) peut aider √† identifier les probl√®mes d'accessibilit√©. Cependant, ils ne d√©tectent pas tous les probl√®mes, une revue manuelle est essentielle.\n\n\n---\n\n# Qu'est-ce qui est top ? üëç\n\n* **Standard internationalement reconnu:** Les WCAG sont largement accept√©es comme la norme pour l'accessibilit√© web.\n* **Cadre complet:** Elles couvrent un large √©ventail de probl√®mes d'accessibilit√©.\n* **Niveaux de conformit√©:**  Permettent d'adapter le niveau d'accessibilit√© aux ressources disponibles.\n* **Am√©liore l'exp√©rience utilisateur pour tous:**  Un site web accessible est g√©n√©ralement plus facile √† utiliser pour tout le monde, m√™me les utilisateurs sans handicap.\n\n\n---\n\n# Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√©:** La compr√©hension et la mise en ≈ìuvre compl√®te des WCAG peuvent √™tre complexes, n√©cessitant des comp√©tences sp√©cifiques.\n* **Co√ªt:** Rendre un site web pleinement accessible peut n√©cessiter des efforts importants et des co√ªts de d√©veloppement suppl√©mentaires.\n* **Tests manuels n√©cessaires:** Les outils automatis√©s ne suffisent pas √† garantir une accessibilit√© compl√®te. Des tests manuels approfondis sont indispensables.\n* **Evolution constante:** Les WCAG √©voluent r√©guli√®rement, n√©cessitant une mise √† jour continue des connaissances et des pratiques.\n\n\n---\n\n# √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "6a27445d-5e3c-4435-9e55-9dd9103a5d81",
        "title": "Watch Tower Docker",
        "description": "---\nid: ba859634-f672-4bdf-92fa-d8a6e6ceec08\n---\n# Rapidement c'est quoi‚ùì\n\nWatch Tower est un outil Docker qui automatise les mises √† jour des conteneurs. Il surveille r√©guli√®rement les nouvelles versions d'images sur un registre (Docker Hub par d√©faut, ou un registre priv√©) et met √† jour les conteneurs en cours d'ex√©cution lorsqu'une nouvelle version est disponible.  Id√©al pour les environnements de test et les homelabs.\n\n---\n# Plus pr√©cis√©ment c'est quoi/√ßa fait quoi ? üîç\n\nWatch Tower est un conteneur Docker l√©ger qui fonctionne comme un agent de surveillance.  Il est configur√© pour surveiller un ou plusieurs autres conteneurs.  Pour chaque conteneur surveill√©, Watch Tower v√©rifie p√©riodiquement la disponibilit√© de nouvelles images sur un registre Docker sp√©cifi√© (Docker Hub par d√©faut, mais configurable pour des registres priv√©s, n√©cessitant alors des identifiants).  Cette v√©rification se fait en comparant l'ID de l'image courante du conteneur avec la derni√®re version disponible sur le registre.\n\nSi une nouvelle version est d√©tect√©e, Watch Tower t√©l√©charge automatiquement la nouvelle image.  Puis, il arr√™te proprement l'ancien conteneur, d√©marre un nouveau conteneur bas√© sur la nouvelle image, et conserve les donn√©es du conteneur pr√©c√©dent gr√¢ce √† des volumes persistants s'ils sont d√©finis.  Le processus est transparent pour l'utilisateur, qui ne devrait pas remarquer d'interruption de service (√† condition d'avoir configur√© correctement les volumes de donn√©es).  La configuration se fait principalement via des variables d'environnement, ce qui simplifie son d√©ploiement et sa customisation.\n\n---\n# Qu'est ce qui est top ? üëç\n\n* **Automatisation des mises √† jour:** √âlimine le besoin de mises √† jour manuelles des conteneurs, r√©duisant le risque d'erreur et le travail manuel.\n* **Facilit√© d'utilisation:**  Simple √† configurer et √† d√©ployer gr√¢ce √† son architecture en conteneur et √† sa configuration par variables d'environnement.\n* **Support des registres priv√©s:** Permet de g√©rer les mises √† jour d'images h√©berg√©es sur des registres priv√©s, crucial pour les environnements professionnels ou les configurations plus s√©curis√©es.\n* **Mise √† jour transparente (en th√©orie):**  Les mises √† jour se font avec une interruption minimale, gr√¢ce √† l'arr√™t et le red√©marrage automatis√© du conteneur.\n* **L√©ger et peu gourmand en ressources:**  N'affecte pas significativement les performances du syst√®me h√¥te.\n\n---\n# Qu'est ce qui est pas ouf ? üëé\n\n* **D√©pendances:** N√©cessite Docker et un acc√®s √† un registre Docker (public ou priv√©).\n* **Complexit√© potentielle pour des configurations avanc√©es:** Bien que simple √† utiliser de base, la gestion de sc√©narios complexes (d√©pendances entre conteneurs, configurations de volumes complexes) peut demander plus d'attention.\n* **Potentiel de probl√®mes en cas de mauvaise configuration des volumes:**  Une mauvaise configuration des volumes de donn√©es peut entra√Æner la perte de donn√©es lors d'une mise √† jour.  Il est crucial de bien d√©finir et de tester la persistance des donn√©es.\n* **Pas de gestion des configurations internes du conteneur:**  Watchtower met √† jour uniquement l'image du conteneur.  Les configurations internes au conteneur doivent √™tre g√©r√©es s√©par√©ment (par exemple, via des fichiers de configuration persistants).\n\n\n---\n# A quoi c'est li√© ? ü™¢\n"
    },
    {
        "id": "5ce536ee-9346-4042-888f-3641480236b6",
        "title": "Wiremock",
        "description": "---\nid: 31caea1a-0cb7-434b-89d8-ba31405f704b\n---\n# Rapidement, c'est quoi ? ‚ùì\n\nWireMock est un outil open-source permettant de cr√©er facilement des mocks d'API.  Il simule des services web pour les tests, renvoyant des r√©ponses pr√©-d√©finies √† des requ√™tes sp√©cifiques.  Cela permet de d√©boucler les tests des applications qui d√©pendent d'autres services sans avoir √† les d√©marrer ou √† les utiliser en production.\n\n## Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç\n\nWireMock est un serveur ind√©pendant qui √©coute sur un port donn√©.  On le configure pour r√©pondre √† des requ√™tes HTTP (GET, POST, PUT, DELETE, etc.) avec des r√©ponses sp√©cifi√©es.  Ces r√©ponses peuvent √™tre statiques (un fichier JSON, XML, etc.) ou dynamiques (g√©n√©r√©es √† la vol√©e en fonction de la requ√™te).  La configuration se fait g√©n√©ralement via des fichiers JSON ou YAML, d√©finissant des mappings entre des requ√™tes et des r√©ponses.\n\nVoici un exemple de configuration YAML simple :\n\n```yaml\n---\nrequest:\n  method: GET\n  url: /users\nresponse:\n  status: 200\n  body:\n    - id: 1\n      name: John Doe\n    - id: 2\n      name: Jane Doe\n```\n\nCe mapping indique √† WireMock de r√©pondre √† une requ√™te GET sur `/users` avec un code de statut 200 et un corps JSON contenant une liste de deux utilisateurs.\n\nWireMock offre des fonctionnalit√©s avanc√©es telles que :\n\n* **Gestion des retards:** Simuler des temps de r√©ponse lents.\n* **Validation des requ√™tes:** V√©rifier que les requ√™tes envoy√©es par l'application sont conformes aux attentes.\n* **Stubbing:** Fournir des r√©ponses pr√©d√©finies pour des requ√™tes sp√©cifiques.\n* **Mocking:** Simuler le comportement d'un service distant.\n* **Int√©gration avec des frameworks de test:**  WireMock s'int√®gre facilement avec de nombreux frameworks de test (JUnit, pytest, etc.).\n\n## Qu'est-ce qui est top ? üëç\n\n* **Facile √† utiliser:** La configuration est simple et intuitive, m√™me pour des cas d'utilisation complexes.\n* **Flexible:**  Permet de simuler un large √©ventail de sc√©narios de tests.\n* **Open-source:**  Gratuit et la communaut√© contribue √† son am√©lioration constante.\n* **Large choix de langages et d'int√©grations:**  Disponible pour diff√©rents langages et frameworks.\n* **Gestion des d√©pendances:** D√©couple les tests de l'infrastructure et des services externes.\n\n## Qu'est-ce qui est pas ouf ? üëé\n\n* **Complexit√© pour les cas tr√®s complexes:**  Pour des simulations extr√™mement sophistiqu√©es, la configuration peut devenir complexe.\n* **Courbe d'apprentissage l√©g√®re:** Bien que simple √† utiliser de base, la ma√Ætrise de toutes ses fonctionnalit√©s peut demander un certain temps.\n* **Maintenance des mocks:**  Le maintien des mocks √† jour avec l'√©volution de l'API peut demander de l'effort.\n\n\n## √Ä quoi c'est li√© ? ü™¢\n\n(Laisser vide)\n"
    },
    {
        "id": "27e9c2f4-bd91-4a4d-be4e-f01ce1f058f8",
        "title": "io_uring",
        "description": "---\nid: 68a5471b-4061-46f5-b990-d0851a73aaf7\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nio_uring est une interface syst√®me Linux permettant d'effectuer des op√©rations d'E/S (entr√©e/sortie) de mani√®re asynchrone et tr√®s performante.  Elle am√©liore consid√©rablement l'efficacit√© du traitement des requ√™tes d'E/S par rapport aux m√©thodes traditionnelles comme les appels syst√®me `read()` et `write()`.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nio_uring est une interface bas√©e sur des anneaux (rings) pour la communication entre l'espace utilisateur et le noyau.  Au lieu d'effectuer des appels syst√®me individuels pour chaque op√©ration d'E/S,  l'application soumet un ensemble de requ√™tes en bloc √† un anneau de soumission (submission queue). Le noyau traite ces requ√™tes et renvoie les r√©sultats dans un anneau de compl√©tion (completion queue). Cette approche r√©duit consid√©rablement le contexte switching et la surcharge li√©e aux appels syst√®me.\n\nio_uring supporte un large √©ventail d'op√©rations, notamment :\n\n* **Op√©rations de fichiers:** `read`, `write`, `open`, `close`, `fsync`, `fdatasync`, etc.\n* **Op√©rations de sockets:** `accept`, `connect`, `recv`, `send`, etc.\n* **Op√©rations de gestion de fichiers:** `stat`, `ftruncate`, `rename`, etc.\n* **Op√©rations de timers:**  Permet de g√©rer des timers de mani√®re asynchrone.\n* **Op√©rations de signalisation:**  Permet de g√©rer les signaux de mani√®re asynchrone.\n\n\n**Fonctionnement interne (simplifi√©):**\n\n1. **Soumission des requ√™tes:** L'application remplit une structure de donn√©es repr√©sentant les requ√™tes d'E/S et les place dans l'anneau de soumission.\n2. **Traitement par le noyau:** Le noyau r√©cup√®re les requ√™tes de l'anneau de soumission et les traite concurremment.\n3. **Compl√©tion des requ√™tes:**  Une fois les requ√™tes trait√©es, le noyau place les r√©sultats (codes de retour, donn√©es, etc.) dans l'anneau de compl√©tion.\n4. **R√©cup√©ration des r√©sultats:** L'application lit l'anneau de compl√©tion pour r√©cup√©rer les r√©sultats des op√©rations d'E/S.\n\n**Exemple (concept simplifi√© en C):**\n\n```c\n// ... (Initialisation io_uring) ...\n\nstruct io_uring_sqe *sqe = io_uring_get_sqe(&ring);\nio_uring_prep_read(sqe, fd, buffer, size, offset);\nio_uring_submit(&ring); // Envoie les requ√™tes au noyau\n\n// ... (Attente de la compl√©tion des requ√™tes via io_uring_wait_cqe) ...\n\n// ... (R√©cup√©ration des r√©sultats depuis l'anneau de compl√©tion) ...\n```\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Performances exceptionnelles:** io_uring offre des performances bien sup√©rieures √† celles des appels syst√®mes traditionnels, notamment pour les applications √† forte intensit√© d'E/S.\n* **Faible latence:** La r√©duction du contexte switching et la gestion asynchrone permettent de r√©duire la latence des op√©rations d'E/S.\n* **Scalabilit√©:** io_uring est con√ßu pour √™tre scalable et capable de g√©rer un grand nombre de requ√™tes simultan√©es.\n* **Flexibilit√©:**  Supporte une grande vari√©t√© d'op√©rations d'E/S.\n* **Efficacit√© √©nerg√©tique:** La r√©duction des appels syst√®me diminue la consommation d'√©nergie.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Complexit√©:**  L'impl√©mentation d'applications utilisant io_uring est plus complexe que l'utilisation d'appels syst√®me classiques.  N√©cessite une bonne compr√©hension de la programmation asynchrone.\n* **Sp√©cifique √† Linux:** io_uring est une fonctionnalit√© sp√©cifique au noyau Linux, et n'est donc pas portable vers d'autres syst√®mes d'exploitation.\n* **D√©bogage:** Le d√©bogage des applications utilisant io_uring peut √™tre plus difficile que celui des applications utilisant des appels syst√®me synchrones.\n* **Support limit√© dans certaines biblioth√®ques:**  Certaines biblioth√®ques ne supportent pas encore nativement io_uring, n√©cessitant une impl√©mentation manuelle.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "7c30816c-6780-447e-972e-751ecdd9187d",
        "title": "n8n",
        "description": "---\nid: 97286cb2-9836-4dd2-b5f6-0885a22ca5c7\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nn8n est une plateforme d'automatisation open-source, bas√©e sur le workflow, permettant de connecter diff√©rents services et applications entre eux sans √©crire de code.  Elle fonctionne via une interface visuelle intuitive o√π l'on peut cr√©er des flux de travail (workflows) pour automatiser des t√¢ches r√©p√©titives.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nn8n est un outil de \"low-code/no-code\" qui permet de construire des workflows complexes en connectant divers services web gr√¢ce √† des \"nodes\".  Chaque node repr√©sente une action sp√©cifique, comme envoyer un email, t√©l√©charger un fichier, ou interagir avec une base de donn√©es.  Ces nodes sont connect√©es entre elles pour former un flux de travail.  n8n prend en charge un large √©ventail de protocoles et de services via des int√©grations (connecteurs) pr√©d√©finies, et il est extensible gr√¢ce √† la cr√©ation de nodes personnalis√©es.\n\nLe fonctionnement se base sur un syst√®me d'ex√©cution asynchrone.  Les workflows ne sont pas ex√©cut√©s de mani√®re lin√©aire, mais plut√¥t de mani√®re parall√®le et asynchrone.  Chaque node s'ex√©cute de mani√®re ind√©pendante, ce qui permet une grande flexibilit√© et une meilleure gestion des erreurs.\n\n**Exemple concret : Automatisation de la gestion des leads**\n\nImaginez un workflow n8n qui collecte des leads depuis un formulaire sur un site web (node \"HTTP Request\").  Ces donn√©es sont ensuite envoy√©es √† une base de donn√©es (node \"Database\").  Si le lead correspond √† certains crit√®res, un email est envoy√© √† l'√©quipe de vente (node \"Email\").  En cas d'√©chec, une notification est envoy√©e via Slack (node \"Slack\").  Tout cela sans √©crire une seule ligne de code, en reliant simplement des nodes pr√©existantes.\n\n\n**Fonctionnement interne (simplifi√©):**\n\nn8n est une application Node.js qui utilise une base de donn√©es pour stocker les workflows et leurs ex√©cutions.  L'interface utilisateur est une application web qui permet de cr√©er, √©diter et ex√©cuter les workflows.  L'ex√©cution des nodes est g√©r√©e par un moteur d'ex√©cution interne qui utilise des workers pour traiter les t√¢ches en parall√®le.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Open-source et gratuit:**  n8n est open-source, ce qui permet une grande transparence et une communaut√© active pour le support et le d√©veloppement.  Il est gratuit √† utiliser, m√™me pour les d√©ploiements en production.\n* **Flexibilit√© et extensibilit√©:**  Le large choix de nodes et la possibilit√© de cr√©er des nodes personnalis√©es offrent une grande flexibilit√© pour automatiser presque toutes les t√¢ches.\n* **Interface utilisateur intuitive:** L'interface visuelle facilite la cr√©ation et la gestion des workflows, m√™me pour les utilisateurs sans exp√©rience en programmation.\n* **Scalabilit√©:** n8n peut √™tre d√©ploy√© sur diff√©rentes infrastructures, des machines locales aux solutions cloud, pour g√©rer des workflows de toutes tailles.\n* **Grande vari√©t√© d'int√©grations:**  Une vaste biblioth√®que de nodes permet de se connecter √† de nombreux services populaires.\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage initiale (l√©g√®re):**  Bien que l'interface soit intuitive, la compr√©hension du fonctionnement des workflows et des nodes peut prendre un peu de temps au d√©but.\n* **D√©bogage complexe (pour workflows avanc√©s):** Le d√©bogage des workflows complexes peut √™tre difficile, surtout pour les utilisateurs non-familiers avec le concept de workflow asynchrone.\n* **Gestion de la s√©curit√©:**  La s√©curit√© d√©pend de la configuration du serveur et des int√©grations utilis√©es. Une mauvaise configuration peut exposer des donn√©es sensibles.\n* **D√©pendance √† la disponibilit√© d'internet:** n8n n√©cessite une connexion internet pour fonctionner correctement, car la plupart des nodes interagissent avec des services externes.\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    },
    {
        "id": "c1ff4ce7-6316-4843-bcbe-8ebfc06c2c34",
        "title": "protobuf",
        "description": "---\nid: 8ef8f16f-6955-49c9-858e-e5c803104b27\n---\n# **Rapidement, c'est quoi ? ‚ùì**\n\nProtocol Buffers (protobuf) est un syst√®me de s√©rialisation de donn√©es open source d√©velopp√© par Google.  Il permet de d√©finir des structures de donn√©es (messages) dans un langage descriptif simple (`.proto`), puis de g√©n√©rer automatiquement du code dans diff√©rents langages (Java, C++, Python, Go, etc.) pour encoder et d√©coder ces structures.  Cela permet une communication efficace et interop√©rable entre diff√©rents syst√®mes.\n\n---\n\n# **Plus pr√©cis√©ment, c'est quoi/√ßa fait quoi ? üîç**\n\nProtobuf d√©finit un langage de description d'interface (IDL) pour sp√©cifier les structures de donn√©es.  Un fichier `.proto` d√©crit les messages, contenant des champs de diff√©rents types (entier, cha√Æne de caract√®res, bool√©en, nombres √† virgule flottante, tableaux, structures imbriqu√©es, etc.).  Le compilateur Protobuf (`protoc`) lit ce fichier et g√©n√®re du code source pour le langage cible. Ce code fournit des fonctions pour:\n\n* **S√©rialiser (encoder):** Convertir une structure de donn√©es en un flux d'octets.  Ce flux est compact et efficace en termes d'espace m√©moire.\n* **D√©s√©rialiser (d√©coder):** Convertir un flux d'octets en une structure de donn√©es.\n\n**Exemple de fichier `.proto`:**\n\n```protobuf\nsyntax = \"proto3\";\n\nmessage Person {\n  string name = 1;\n  int32 id = 2;\n  string email = 3;\n}\n```\n\nCe fichier d√©finit un message `Person` avec trois champs : `name`, `id`, et `email`.  Apr√®s compilation, le code g√©n√©r√© fournira des classes ou des structures pour manipuler des objets `Person` et les encoder/d√©coder en octets.\n\n**Avantages de la s√©rialisation:**\n\n* **Efficacit√©:** Protobuf g√©n√®re des formats binaires compacts, plus petits et plus rapides √† traiter que les formats textuels comme le JSON ou le XML.\n* **Interop√©rabilit√©:** Le m√™me fichier `.proto` peut √™tre utilis√© pour g√©n√©rer du code dans diff√©rents langages, facilitant la communication entre des syst√®mes h√©t√©rog√®nes.\n* **√âvolutivit√©:**  Il est possible d'ajouter de nouveaux champs √† un message sans casser la compatibilit√© avec les anciens clients.  Le syst√®me g√®re les champs inconnus.\n* **Performances:** La s√©rialisation et la d√©s√©rialisation sont rapides et optimis√©es.\n\n---\n\n# **Qu'est-ce qui est top ? üëç**\n\n* **Efficacit√© et performance:**  Format compact et rapidit√© de s√©rialisation/d√©s√©rialisation.\n* **Interop√©rabilit√© multi-langage:**  Support d'un large √©ventail de langages de programmation.\n* **√âvolutivit√© et compatibilit√© ascendante:**  Ajout facile de nouveaux champs sans rupture de compatibilit√©.\n* **Bonne documentation et communaut√© active:**  Ressources et support disponibles.\n\n\n---\n\n# **Qu'est-ce qui est pas ouf ? üëé**\n\n* **Courbe d'apprentissage:** N√©cessite de comprendre le syst√®me de d√©finition de messages et l'utilisation du compilateur `protoc`.\n* **Format binaire non humainement lisible:**  Le format s√©rialis√© est binaire, rendant le d√©bogage plus difficile que pour les formats textuels.\n* **D√©pendance au compilateur:**  N√©cessite l'utilisation du compilateur `protoc` pour g√©n√©rer le code.\n\n\n---\n\n# **√Ä quoi c'est li√© ? ü™¢**\n\n(Laisser vide)\n"
    }
]